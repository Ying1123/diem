
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for vectors, based on Z3 sequences.
//
// This version of vectors has extensional equality.
//
// This implementation works to some extend but has been so far been much slower/times out compared to
// non-extensional array versions, even though the later require stratified custom equality.
//
// Major issues seem to be:
//
// (a) UpdateVec, SwapVec etc. are slow. UpdateVec requires a ConcatVec of two SliceVec.
// (b) ReverseVec needs to be fully axiomatized with quantifiers which makes it infeasible
//     to work in practice.

type {:builtin "Seq"} Vec _;

function {:builtin "seq.empty"} EmptyVec<T>(): Vec T;

function {:builtin "seq.unit"} MakeVec1<T>(v: T): Vec T;

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    ConcatVec(MakeVec1(v1), MakeVec1(v2))
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    ConcatVec(MakeVec2(v1, v2), MakeVec1(v3))
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    ConcatVec(MakeVec3(v1, v2, v3), MakeVec1(v4))
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    ConcatVec(v, MakeVec1(elem))
}

function {:builtin "seq.nth"} ReadVec<T>(v: Vec T, i: int): T;

function {:builtin "seq.len"} LenVec<T>(v: Vec T): int;

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    LenVec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    SliceVec(v, 0, LenVec(v) - 1)
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    ConcatVec(SliceVec(v, 0, i), SliceVec(v, i + 1, LenVec(v)))
}

function {:builtin "seq.++"} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec3<T>(v1: Vec T, v2: Vec T, v3: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec4<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec5<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T, v5: Vec T): Vec T;

function {:inline} ReverseVec<T>(v: Vec T): Vec T;
axiom {:ctor "Vec"} (forall<T> v: Vec T:: {ReverseVec(v)}
        (var r := ReverseVec(v);
         LenVec(r) == LenVec(v) &&
         (forall i: int:: {ReadVec(r, i)} i >= 0 && i < LenVec(r) ==> ReadVec(r, i) == ReadVec(v, LenVec(v) - i - 1))));

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    ExtractVec(v, i, j - i)
}
/*private*/ function {:builtin "seq.extract"} ExtractVec<T>(v: Vec T, start: int, len: int): Vec T;

//function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
//    ConcatVec3(SliceVec(v, 0, i), MakeVec1(elem), SliceVec(v, i + 1, LenVec(v)))
//}
function {:builtin "seq.update"} Vec_Update<T>(v: Vec T, i: int, x: Vec T): Vec T;

function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
	Vec_Update(v, i, MakeVec1(elem))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    UpdateVec(UpdateVec(v, j, ReadVec(v, i)), i, ReadVec(v, j))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    ContainsSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.contains"} ContainsSubVec<T>(v: Vec T, sub: Vec T): bool;

function {:inline} IndexOfVec<T>(v: Vec T, e: T): int {
    IndexOfSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.indexof"} IndexOfSubVec<T>(v: Vec T, sub: Vec T): int;

function {:inline} InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`


function {:inline} $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`


function {:inline} $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'#0'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''() returns (v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), val: $1_Diem_PreburnWithMetadata'#0') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), val: $1_Diem_PreburnWithMetadata'#0'): Vec ($1_Diem_PreburnWithMetadata'#0') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), other: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'#0') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'#0'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'#0') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XDX_XDX'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XUS_XUS'`


function {:inline} $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_VASPDomain_VASPDomain`


function {:inline} $IsEqual'vec'$1_VASPDomain_VASPDomain''(v1: Vec ($1_VASPDomain_VASPDomain), v2: Vec ($1_VASPDomain_VASPDomain)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_VASPDomain_VASPDomain''(v: Vec ($1_VASPDomain_VASPDomain)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_VASPDomain_VASPDomain'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): int;
axiom (forall v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain:: {$IndexOfVec'$1_VASPDomain_VASPDomain'(v, e)}
    (var i := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
     if (!$ContainsVec'$1_VASPDomain_VASPDomain'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_VASPDomain_VASPDomain'() returns (v: Vec ($1_VASPDomain_VASPDomain)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), val: $1_VASPDomain_VASPDomain) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), val: $1_VASPDomain_VASPDomain): Vec ($1_VASPDomain_VASPDomain) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    var v: Vec ($1_VASPDomain_VASPDomain);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), other: Vec ($1_VASPDomain_VASPDomain)) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int) returns (dst: $1_VASPDomain_VASPDomain) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), index: int)
returns (dst: $Mutation ($1_VASPDomain_VASPDomain), m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int, j: int) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int, j: int): Vec ($1_VASPDomain_VASPDomain) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var len: int;
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res: bool)  {
    res := $ContainsVec'$1_VASPDomain_VASPDomain'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ValidatorConfig_Config`


function {:inline} $IsEqual'vec'$1_ValidatorConfig_Config''(v1: Vec ($1_ValidatorConfig_Config), v2: Vec ($1_ValidatorConfig_Config)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_ValidatorConfig_Config''(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ValidatorConfig_Config'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): int;
axiom (forall v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config:: {$IndexOfVec'$1_ValidatorConfig_Config'(v, e)}
    (var i := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
     if (!$ContainsVec'$1_ValidatorConfig_Config'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_ValidatorConfig_Config'() returns (v: Vec ($1_ValidatorConfig_Config)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), val: $1_ValidatorConfig_Config) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), val: $1_ValidatorConfig_Config): Vec ($1_ValidatorConfig_Config) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    var v: Vec ($1_ValidatorConfig_Config);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), other: Vec ($1_ValidatorConfig_Config)) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int) returns (dst: $1_ValidatorConfig_Config) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), index: int)
returns (dst: $Mutation ($1_ValidatorConfig_Config), m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int, j: int) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int, j: int): Vec ($1_ValidatorConfig_Config) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var len: int;
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res: bool)  {
    res := $ContainsVec'$1_ValidatorConfig_Config'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XDX_XDX`


function {:inline} $IsEqual'vec'$1_XDX_XDX''(v1: Vec ($1_XDX_XDX), v2: Vec ($1_XDX_XDX)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_XDX_XDX''(v: Vec ($1_XDX_XDX)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XDX_XDX'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): int;
axiom (forall v: Vec ($1_XDX_XDX), e: $1_XDX_XDX:: {$IndexOfVec'$1_XDX_XDX'(v, e)}
    (var i := $IndexOfVec'$1_XDX_XDX'(v, e);
     if (!$ContainsVec'$1_XDX_XDX'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XDX_XDX'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XDX_XDX'() returns (v: Vec ($1_XDX_XDX)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), val: $1_XDX_XDX) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), val: $1_XDX_XDX): Vec ($1_XDX_XDX) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX))) {
    var v: Vec ($1_XDX_XDX);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), other: Vec ($1_XDX_XDX)) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int) returns (dst: $1_XDX_XDX) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), index: int)
returns (dst: $Mutation ($1_XDX_XDX), m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int, j: int) returns (m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int, j: int): Vec ($1_XDX_XDX) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var len: int;
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res: bool)  {
    res := $ContainsVec'$1_XDX_XDX'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XDX_XDX'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XUS_XUS`


function {:inline} $IsEqual'vec'$1_XUS_XUS''(v1: Vec ($1_XUS_XUS), v2: Vec ($1_XUS_XUS)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_XUS_XUS''(v: Vec ($1_XUS_XUS)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XUS_XUS'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): int;
axiom (forall v: Vec ($1_XUS_XUS), e: $1_XUS_XUS:: {$IndexOfVec'$1_XUS_XUS'(v, e)}
    (var i := $IndexOfVec'$1_XUS_XUS'(v, e);
     if (!$ContainsVec'$1_XUS_XUS'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XUS_XUS'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XUS_XUS'() returns (v: Vec ($1_XUS_XUS)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), val: $1_XUS_XUS) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), val: $1_XUS_XUS): Vec ($1_XUS_XUS) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS))) {
    var v: Vec ($1_XUS_XUS);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), other: Vec ($1_XUS_XUS)) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int) returns (dst: $1_XUS_XUS) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), index: int)
returns (dst: $Mutation ($1_XUS_XUS), m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int, j: int) returns (m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int, j: int): Vec ($1_XUS_XUS) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var len: int;
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res: bool)  {
    res := $ContainsVec'$1_XUS_XUS'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XUS_XUS'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`


function {:inline} $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`


function {:inline} $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`


function {:inline} $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native Signer

type {:datatype} $signer;
function {:constructor} $signer($addr: int): $signer;
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'($addr#$signer(s))
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_Signer_borrow_address(signer: $signer) returns (res: int) {
    res := $addr#$signer(signer);
}

function {:inline} $1_Signer_$borrow_address(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_spec_address_of(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_is_txn_signer(s: $signer): bool;

function {:inline} $1_Signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize


// ==================================================================================
// Native Event module




// Publishing a generator does nothing. Currently we just ignore this function and do not represent generators
// at all because they are not publicly exposed by the Event module.
// TODO: we should check (and abort with the right code) if a generator already exists for
// the signer.

procedure {:inline 1} $1_Event_publish_generator(signer: $signer) {
}

// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DesignatedDealer_ReceivedMintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(a: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', b: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(h: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    true
}

// Embed event `$1_DesignatedDealer_ReceivedMintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(e: $1_DesignatedDealer_ReceivedMintEvent): $EventRep;
axiom (forall v1, v2: $1_DesignatedDealer_ReceivedMintEvent :: {$ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1), $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2)}
    $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(v1, v2) <==> $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1) == $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    var handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DesignatedDealer_ReceivedMintEvent'(handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
}

function {:inline} $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_VASPDomain_VASPDomainEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(a: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', b: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(h: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    true
}

// Embed event `$1_VASPDomain_VASPDomainEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_VASPDomain_VASPDomainEvent'(e: $1_VASPDomain_VASPDomainEvent): $EventRep;
axiom (forall v1, v2: $1_VASPDomain_VASPDomainEvent :: {$ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1), $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2)}
    $IsEqual'$1_VASPDomain_VASPDomainEvent'(v1, v2) <==> $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1) == $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_VASPDomain_VASPDomainEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_VASPDomain_VASPDomainEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    var handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_VASPDomain_VASPDomainEvent'(handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
}

function {:inline} $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_VASPDomain_VASPDomainEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }

// spec fun at /home/ying/diem/language/move-stdlib/modules/Signer.move:12:5+77
function {:inline} $1_Signer_$address_of(s: $signer): int {
    $1_Signer_$borrow_address(s)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:138:5+89
function {:inline} $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    !$ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:158:5+90
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:120:10+104
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816))
}

// struct DiemTimestamp::CurrentTimeMicroseconds at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:20:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:477:9+93
function {:inline} $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): int {
    $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:481:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:485:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:489:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 1)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:493:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:497:9+124
function {:inline} $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 3)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:501:9+142
function {:inline} $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 4)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:505:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 5)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:509:9+126
function {:inline} $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 6)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:513:9+229
function {:inline} $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    (($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr)) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))
}

// struct Roles::RoleId at /home/ying/diem/language/diem-framework/modules/Roles.move:53:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// fun Roles::can_hold_balance [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:230:5+394
procedure {:inline 1} $1_Roles_can_hold_balance(_$t0: $signer) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: bool;
    var $t8: bool;
    var $t0: $signer;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:230:5+1
    assume {:print "$at(28,9338,9339)"} true;
    assume {:print "$track_local(4,9,0):", $t0} $t0 == $t0;

    // $t3 := Roles::has_parent_VASP_role($t0) on_abort goto L9 with $t4 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+29
    assume {:print "$at(28,9610,9639)"} true;
    call $t3 := $1_Roles_has_parent_VASP_role($t0);
    if ($abort_flag) {
        assume {:print "$at(28,9610,9639)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,9):", $t4} $t4 == $t4;
        goto L9;
    }

    // if ($t3) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    if ($t3) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
L0:

    // $t5 := true at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    $t5 := true;
    assume $IsValid'bool'($t5);

    // $t1 := $t5 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    $t1 := $t5;

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    assume {:print "$track_local(4,9,1):", $t5} $t5 == $t5;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:235:29+7
    assume {:print "$at(28,9671,9678)"} true;
L2:

    // $t6 := Roles::has_child_VASP_role($t0) on_abort goto L9 with $t4 at /home/ying/diem/language/diem-framework/modules/Roles.move:235:9+28
    call $t6 := $1_Roles_has_child_VASP_role($t0);
    if ($abort_flag) {
        assume {:print "$at(28,9651,9679)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,9):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t1 := $t6 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    assume {:print "$at(28,9610,9679)"} true;
    $t1 := $t6;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
    assume {:print "$track_local(4,9,1):", $t6} $t6 == $t6;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+69
L3:

    // if ($t1) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    if ($t1) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
L4:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116

    // $t7 := true at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    $t7 := true;
    assume $IsValid'bool'($t7);

    // $t2 := $t7 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    $t2 := $t7;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    assume {:print "$track_local(4,9,2):", $t7} $t7 == $t7;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:236:36+7
    assume {:print "$at(28,9718,9725)"} true;
L6:

    // $t8 := Roles::has_designated_dealer_role($t0) on_abort goto L9 with $t4 at /home/ying/diem/language/diem-framework/modules/Roles.move:236:9+35
    call $t8 := $1_Roles_has_designated_dealer_role($t0);
    if ($abort_flag) {
        assume {:print "$at(28,9691,9726)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(4,9):", $t4} $t4 == $t4;
        goto L9;
    }

    // $t2 := $t8 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    assume {:print "$at(28,9610,9726)"} true;
    $t2 := $t8;

    // trace_local[tmp#$2]($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    assume {:print "$track_local(4,9,2):", $t8} $t8 == $t8;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
L7:

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:234:9+116
    assume {:print "$track_return(4,9,0):", $t2} $t2 == $t2;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Roles.move:237:5+1
    assume {:print "$at(28,9731,9732)"} true;
L8:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:237:5+1
    $ret0 := $t2;
    return;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Roles.move:237:5+1
L9:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:237:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun Roles::has_child_VASP_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:220:5+124
procedure {:inline 1} $1_Roles_has_child_VASP_role(_$t0: $signer) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: $signer;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:220:5+1
    assume {:print "$at(28,8949,8950)"} true;
    assume {:print "$track_local(4,14,0):", $t0} $t0 == $t0;

    // $t1 := 6 at /home/ying/diem/language/diem-framework/modules/Roles.move:221:27+18
    assume {:print "$at(28,9048,9066)"} true;
    $t1 := 6;
    assume $IsValid'u64'($t1);

    // $t2 := Roles::has_role($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:221:9+37
    call $t2 := $1_Roles_has_role($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(28,9030,9067)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(4,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:221:9+37
    assume {:print "$track_return(4,14,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:222:5+1
    assume {:print "$at(28,9072,9073)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:222:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:222:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:222:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Roles::has_designated_dealer_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:204:5+138
procedure {:inline 1} $1_Roles_has_designated_dealer_role(_$t0: $signer) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: $signer;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:204:5+1
    assume {:print "$at(28,8399,8400)"} true;
    assume {:print "$track_local(4,15,0):", $t0} $t0 == $t0;

    // $t1 := 2 at /home/ying/diem/language/diem-framework/modules/Roles.move:205:27+25
    assume {:print "$at(28,8505,8530)"} true;
    $t1 := 2;
    assume $IsValid'u64'($t1);

    // $t2 := Roles::has_role($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:205:9+44
    call $t2 := $1_Roles_has_role($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(28,8487,8531)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(4,15):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:205:9+44
    assume {:print "$track_return(4,15,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:206:5+1
    assume {:print "$at(28,8536,8537)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:206:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:206:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:206:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Roles::has_parent_VASP_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:216:5+126
procedure {:inline 1} $1_Roles_has_parent_VASP_role(_$t0: $signer) returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: $signer;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:216:5+1
    assume {:print "$at(28,8817,8818)"} true;
    assume {:print "$track_local(4,17,0):", $t0} $t0 == $t0;

    // $t1 := 5 at /home/ying/diem/language/diem-framework/modules/Roles.move:217:27+19
    assume {:print "$at(28,8917,8936)"} true;
    $t1 := 5;
    assume $IsValid'u64'($t1);

    // $t2 := Roles::has_role($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/Roles.move:217:9+38
    call $t2 := $1_Roles_has_role($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(28,8899,8937)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(4,17):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:217:9+38
    assume {:print "$track_return(4,17,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:218:5+1
    assume {:print "$at(28,8942,8943)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:218:5+1
    $ret0 := $t2;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:218:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/Roles.move:218:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun Roles::has_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:190:5+210
procedure {:inline 1} $1_Roles_has_role(_$t0: $signer, _$t1: int) returns ($ret0: bool)
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_Roles_RoleId;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:190:5+1
    assume {:print "$at(28,7907,7908)"} true;
    assume {:print "$track_local(4,18,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:190:5+1
    assume {:print "$track_local(4,18,1):", $t1} $t1 == $t1;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:191:19+27
    assume {:print "$at(28,7994,8021)"} true;

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:191:19+27
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:191:19+27
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:191:19+27

    // trace_local[addr]($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:191:12+4
    assume {:print "$track_local(4,18,3):", $t4} $t4 == $t4;

    // $t5 := exists<Roles::RoleId>($t4) at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+6
    assume {:print "$at(28,8030,8036)"} true;
    $t5 := $ResourceExists($1_Roles_RoleId_$memory, $t4);

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:193:37+4
    assume {:print "$at(28,8087,8091)"} true;
L0:

    // $t6 := get_global<Roles::RoleId>($t4) on_abort goto L5 with $t7 at /home/ying/diem/language/diem-framework/modules/Roles.move:193:15+13
    if (!$ResourceExists($1_Roles_RoleId_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_Roles_RoleId_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(28,8065,8078)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(4,18):", $t7} $t7 == $t7;
        goto L5;
    }

    // $t8 := get_field<Roles::RoleId>.role_id($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:193:15+35
    $t8 := $role_id#$1_Roles_RoleId($t6);

    // $t9 := ==($t8, $t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:193:51+2
    $t9 := $IsEqual'u64'($t8, $t1);

    // $t2 := $t9 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    assume {:print "$at(28,8030,8111)"} true;
    $t2 := $t9;

    // trace_local[tmp#$2]($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    assume {:print "$track_local(4,18,2):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
L2:

    // $t10 := false at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    $t10 := false;
    assume $IsValid'bool'($t10);

    // $t2 := $t10 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    $t2 := $t10;

    // trace_local[tmp#$2]($t10) at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    assume {:print "$track_local(4,18,2):", $t10} $t10 == $t10;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
L3:

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:192:8+81
    assume {:print "$track_return(4,18,0):", $t2} $t2 == $t2;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:194:5+1
    assume {:print "$at(28,8116,8117)"} true;
L4:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/Roles.move:194:5+1
    $ret0 := $t2;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:194:5+1
L5:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:194:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Roles::new_child_vasp_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:153:5+238
procedure {:inline 1} $1_Roles_new_child_vasp_role(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:153:5+1
    assume {:print "$at(28,6518,6519)"} true;
    assume {:print "$track_local(4,22,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:153:5+1
    assume {:print "$track_local(4,22,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
    assume {:print "$at(28,6655,6696)"} true;

    // assume Identical($t5, Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
    assume ($t5 == (!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 5)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
L4:

    // assume Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 5), Eq(3, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 5) && $IsEqual'num'(3, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
    assume {:print "$at(28,6655,6696)"} true;
    assume {:print "$track_abort(4,22):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41
L3:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:157:9+41

    // $t7 := 6 at /home/ying/diem/language/diem-framework/modules/Roles.move:158:33+18
    assume {:print "$at(28,6730,6748)"} true;
    $t7 := 6;
    assume $IsValid'u64'($t7);

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+44
    assume {:print "$at(28,7316,7360)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, a550c18)) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    assume {:print "$at(28,6706,6749)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, 173345816));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, 186537453));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'num'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    assume {:print "$at(28,6706,6749)"} true;
    assume {:print "$track_abort(4,22):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:158:9+43

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:159:5+1
    assume {:print "$at(28,6755,6756)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:159:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:159:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:159:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_designated_dealer_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:97:5+255
procedure {:inline 1} $1_Roles_new_designated_dealer_role(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:97:5+1
    assume {:print "$at(28,4238,4239)"} true;
    assume {:print "$track_local(4,23,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:97:5+1
    assume {:print "$track_local(4,23,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
    assume {:print "$at(28,4382,4426)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'num'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
    assume {:print "$at(28,4382,4426)"} true;
    assume {:print "$track_abort(4,23):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:101:9+44

    // $t7 := 2 at /home/ying/diem/language/diem-framework/modules/Roles.move:102:33+25
    assume {:print "$at(28,4460,4485)"} true;
    $t7 := 2;
    assume $IsValid'u64'($t7);

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+44
    assume {:print "$at(28,7316,7360)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, a550c18)) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    assume {:print "$at(28,4436,4486)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, 173345816));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, 186537453));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'num'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    assume {:print "$at(28,4436,4486)"} true;
    assume {:print "$track_abort(4,23):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:102:9+50

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:103:5+1
    assume {:print "$at(28,4492,4493)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:103:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:103:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:103:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_parent_vasp_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:139:5+243
procedure {:inline 1} $1_Roles_new_parent_vasp_role(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:139:5+1
    assume {:print "$at(28,5951,5952)"} true;
    assume {:print "$track_local(4,24,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:139:5+1
    assume {:print "$track_local(4,24,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
    assume {:print "$at(28,6089,6133)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'num'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
    assume {:print "$at(28,6089,6133)"} true;
    assume {:print "$track_abort(4,24):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:143:9+44

    // $t7 := 5 at /home/ying/diem/language/diem-framework/modules/Roles.move:144:33+19
    assume {:print "$at(28,6167,6186)"} true;
    $t7 := 5;
    assume $IsValid'u64'($t7);

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+44
    assume {:print "$at(28,7316,7360)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, a550c18)) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    assume {:print "$at(28,6143,6187)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, 173345816));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, 186537453));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'num'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    assume {:print "$at(28,6143,6187)"} true;
    assume {:print "$track_abort(4,24):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:144:9+44

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:145:5+1
    assume {:print "$at(28,6193,6194)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:145:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:145:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:145:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_validator_operator_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:125:5+247
procedure {:inline 1} $1_Roles_new_validator_operator_role(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:125:5+1
    assume {:print "$at(28,5369,5370)"} true;
    assume {:print "$track_local(4,25,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:125:5+1
    assume {:print "$track_local(4,25,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
    assume {:print "$at(28,5514,5548)"} true;

    // assume Identical($t5, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
    assume ($t5 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t6)), And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0) && $IsEqual'num'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
    assume {:print "$at(28,5514,5548)"} true;
    assume {:print "$track_abort(4,25):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:129:9+34

    // $t7 := 4 at /home/ying/diem/language/diem-framework/modules/Roles.move:130:33+26
    assume {:print "$at(28,5582,5608)"} true;
    $t7 := 4;
    assume $IsValid'u64'($t7);

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+44
    assume {:print "$at(28,7316,7360)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, a550c18)) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    assume {:print "$at(28,5558,5609)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, 173345816));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, 186537453));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'num'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    assume {:print "$at(28,5558,5609)"} true;
    assume {:print "$track_abort(4,25):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:130:9+51

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:131:5+1
    assume {:print "$at(28,5615,5616)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:131:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:131:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:131:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Roles::new_validator_role [baseline] at /home/ying/diem/language/diem-framework/modules/Roles.move:111:5+228
procedure {:inline 1} $1_Roles_new_validator_role(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_Roles_RoleId': $1_Roles_RoleId;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[creating_account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:111:5+1
    assume {:print "$at(28,4827,4828)"} true;
    assume {:print "$track_local(4,26,0):", $t0} $t0 == $t0;

    // trace_local[new_account]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:111:5+1
    assume {:print "$track_local(4,26,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
    assume {:print "$at(28,4962,4996)"} true;

    // assume Identical($t5, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
    assume ($t5 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t6)), And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t6)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0) && $IsEqual'num'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
    assume {:print "$at(28,4962,4996)"} true;
    assume {:print "$track_abort(4,26):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:115:9+34

    // $t7 := 3 at /home/ying/diem/language/diem-framework/modules/Roles.move:116:33+17
    assume {:print "$at(28,5030,5047)"} true;
    $t7 := 3;
    assume $IsValid'u64'($t7);

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+44
    assume {:print "$at(28,7316,7360)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Implies(Eq<u64>($t7, 0), Eq<address>($t8, a550c18)) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    assume {:print "$at(28,5006,5048)"} true;
    assume ($IsEqual'u64'($t7, 0) ==> $IsEqual'address'($t8, 173345816));

    // assume Implies(Eq<u64>($t7, 1), Eq<address>($t8, b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    assume ($IsEqual'u64'($t7, 1) ==> $IsEqual'address'($t8, 186537453));

    // opaque begin: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42

    // assume Identical($t9, exists<Roles::RoleId>(Signer::$address_of($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    assume ($t9 == $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
L6:

    // assume And(exists<Roles::RoleId>(Signer::$address_of($t1)), Eq(6, $t6)) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    assume ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'num'(6, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    assume {:print "$at(28,5006,5048)"} true;
    assume {:print "$track_abort(4,26):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
L5:

    // modifies global<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Roles_RoleId';
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1), $temp_0'$1_Roles_RoleId');
    } else {
        $1_Roles_RoleId_$memory := $ResourceRemove($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));
    }

    // assume exists<Roles::RoleId>(Signer::$address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    assume $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1));

    // assume Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42
    assume $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), $t7);

    // opaque end: Roles::grant_role($t1, $t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:116:9+42

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:117:5+1
    assume {:print "$at(28,5054,5055)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:117:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:117:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:117:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:63:5+153
function {:inline} $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig, validator_operator_addr: int): bool {
    $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, validator_operator_addr)
}

// struct ValidatorOperatorConfig::ValidatorOperatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:9:5+141
type {:datatype} $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:constructor} $1_ValidatorOperatorConfig_ValidatorOperatorConfig($human_name: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:inline} $Update'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'_human_name(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, x: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig {
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig(x)
}
function $IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsValid'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s1: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, s2: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    s1 == s2
}
var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;

// fun ValidatorOperatorConfig::has_validator_operator_config [baseline] at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:63:5+153
procedure {:inline 1} $1_ValidatorOperatorConfig_has_validator_operator_config(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[validator_operator_addr]($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:63:5+1
    assume {:print "$at(39,2624,2625)"} true;
    assume {:print "$track_local(5,1,0):", $t0} $t0 == $t0;

    // $t1 := exists<ValidatorOperatorConfig::ValidatorOperatorConfig>($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:64:9+6
    assume {:print "$at(39,2715,2721)"} true;
    $t1 := $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:64:9+56
    assume {:print "$track_return(5,1,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:65:5+1
    assume {:print "$at(39,2776,2777)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:65:5+1
    $ret0 := $t1;
    return;

}

// fun ValidatorOperatorConfig::publish [baseline] at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:17:5+597
procedure {:inline 1} $1_ValidatorOperatorConfig_publish(_$t0: $signer, _$t1: $signer, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
    var $t0: $signer;
    var $t1: $signer;
    var $t2: Vec (int);
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t1));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:598:9+44
    assume {:print "$at(28,26510,26554)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:44:9+82
    assume {:print "$at(39,1550,1632)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t1));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:598:9+44
    assume {:print "$at(28,26510,26554)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // trace_local[validator_operator_account]($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:17:5+1
    assume {:print "$at(39,524,525)"} true;
    assume {:print "$track_local(5,2,0):", $t0} $t0 == $t0;

    // trace_local[dr_account]($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:17:5+1
    assume {:print "$track_local(5,2,1):", $t1} $t1 == $t1;

    // trace_local[human_name]($t2) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:17:5+1
    assume {:print "$track_local(5,2,2):", $t2} $t2 == $t2;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
    assume {:print "$at(39,674,707)"} true;

    // assume Identical($t10, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
    assume ($t10 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t10) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t11)) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
    assume {:print "$at(39,674,707)"} true;
    assume {:print "$track_abort(5,2):", $t11} $t11 == $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:22:9+33

    // assume Identical($t12, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
    assume {:print "$at(39,717,752)"} true;

    // assume Identical($t13, Or(Or(Or(Neq<address>(Signer::spec_address_of($t1), a550c18), Not(exists<Roles::RoleId>($t12))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 0)), Neq<address>(Signer::spec_address_of($t1), a550c18))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
    assume ($t13 == (((!$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t12)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816)));

    // if ($t13) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
    if ($t13) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t1), a550c18), Eq(2, $t11)), And(Not(exists<Roles::RoleId>($t12)), Eq(5, $t11))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 0), Eq(3, $t11))), And(Neq<address>(Signer::spec_address_of($t1), a550c18), Eq(2, $t11))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816) && $IsEqual'num'(2, $t11)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'num'(5, $t11))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 0) && $IsEqual'num'(3, $t11))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816) && $IsEqual'num'(2, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
    assume {:print "$at(39,717,752)"} true;
    assume {:print "$track_abort(5,2):", $t11} $t11 == $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35
L6:

    // opaque end: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:23:9+35

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:598:9+44
    assume {:print "$at(28,26510,26554)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_validator_operator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
    assume {:print "$at(39,762,822)"} true;

    // assume Identical($t15, Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 4))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
    assume ($t15 == (!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 4)));

    // if ($t15) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
    if ($t15) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 4), Eq(3, $t11))) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'num'(5, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 4) && $IsEqual'num'(3, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
    assume {:print "$at(39,762,822)"} true;
    assume {:print "$track_abort(5,2):", $t11} $t11 == $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60
L8:

    // opaque end: Roles::assert_validator_operator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:24:9+60

    // $t16 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:44+46
    assume {:print "$at(39,883,929)"} true;

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:44+46
    assume $IsValid'address'($t16);

    // assume Eq<address>($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:44+46
    assume $IsEqual'address'($t16, $1_Signer_spec_address_of($t0));

    // $t16 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:44+46

    // $t17 := ValidatorOperatorConfig::has_validator_operator_config($t16) on_abort goto L3 with $t11 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:14+77
    call $t17 := $1_ValidatorOperatorConfig_has_validator_operator_config($t16);
    if ($abort_flag) {
        assume {:print "$at(39,853,930)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(5,2):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t18 := !($t17) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:26:13+1
    call $t18 := $Not($t17);

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:39+26
    assume {:print "$at(39,970,996)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := opaque begin: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:13+53

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:13+53
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 6) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:13+53
    assume $IsEqual'u64'($t20, 6);

    // $t20 := opaque end: Errors::already_published($t19) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:27:13+53

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175
    assume {:print "$at(39,832,1007)"} true;
    assume {:print "$track_local(5,2,4):", $t20} $t20 == $t20;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175
    assume {:print "$track_local(5,2,3):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175
    assume {:print "$at(39,832,1007)"} true;
    assume {:print "$track_abort(5,2):", $t20} $t20 == $t20;

    // $t11 := move($t20) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175
    $t11 := $t20;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:25:9+175
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:30:17+26
    assume {:print "$at(39,1026,1052)"} true;
L0:

    // $t21 := pack ValidatorOperatorConfig::ValidatorOperatorConfig($t2) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:30:45+59
    $t21 := $1_ValidatorOperatorConfig_ValidatorOperatorConfig($t2);

    // move_to<ValidatorOperatorConfig::ValidatorOperatorConfig>($t21, $t0) on_abort goto L3 with $t11 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:30:9+7
    if ($ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory := $ResourceUpdate($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $1_Signer_spec_address_of($t0), $t21);
    }
    if ($abort_flag) {
        assume {:print "$at(39,1018,1025)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(5,2):", $t11} $t11 == $t11;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:33:5+1
    assume {:print "$at(39,1120,1121)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:33:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:33:5+1
L3:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:33:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'u8'(v: Vec (int)): bool {
    $IsEqual'u64'($1_Vector_$length'u8'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_ValidatorConfig_Config'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_VASPDomain_VASPDomain'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_KeyRotationCapability {
    $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_WithdrawCapability {
    $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_ValidatorConfig_Config'(t: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    !$1_Vector_$is_empty'$1_ValidatorConfig_Config'($vec#$1_Option_Option'$1_ValidatorConfig_Config'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:33:10+78
function {:inline} $1_Option_spec_none'address'(): $1_Option_Option'address' {
    $1_Option_Option'address'($EmptyVec'address'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:33:10+78
function {:inline} $1_Option_spec_none'$1_ValidatorConfig_Config'(): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'($EmptyVec'$1_ValidatorConfig_Config'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:33:10+78
function {:inline} $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'(): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'($EmptyVec'$1_DiemAccount_WithdrawCapability'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:46:10+89
function {:inline} $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'(e: $1_DiemAccount_WithdrawCapability): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(MakeVec1(e))
}

// struct Option::Option<address> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'address';
function {:constructor} $1_Option_Option'address'($vec: Vec (int)): $1_Option_Option'address';
function {:inline} $Update'$1_Option_Option'address''_vec(s: $1_Option_Option'address', x: Vec (int)): $1_Option_Option'address' {
    $1_Option_Option'address'(x)
}
function $IsValid'$1_Option_Option'address''(s: $1_Option_Option'address'): bool {
    $IsValid'vec'address''($vec#$1_Option_Option'address'(s))
}
function {:inline} $IsEqual'$1_Option_Option'address''(s1: $1_Option_Option'address', s2: $1_Option_Option'address'): bool {
    s1 == s2
}

// struct Option::Option<ValidatorConfig::Config> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_ValidatorConfig_Config';
function {:constructor} $1_Option_Option'$1_ValidatorConfig_Config'($vec: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config';
function {:inline} $Update'$1_Option_Option'$1_ValidatorConfig_Config''_vec(s: $1_Option_Option'$1_ValidatorConfig_Config', x: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'(x)
}
function $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''(s: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsValid'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''(s1: $1_Option_Option'$1_ValidatorConfig_Config', s2: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::KeyRotationCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::WithdrawCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:84:5+84
function {:inline} $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:229:5+176
function {:inline} $1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr) && $1_Option_$is_some'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, addr))))
}

// struct ValidatorConfig::ValidatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:22:5+260
type {:datatype} $1_ValidatorConfig_ValidatorConfig;
function {:constructor} $1_ValidatorConfig_ValidatorConfig($config: $1_Option_Option'$1_ValidatorConfig_Config', $operator_account: $1_Option_Option'address', $human_name: Vec (int)): $1_ValidatorConfig_ValidatorConfig;
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_config(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'$1_ValidatorConfig_Config'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig(x, $operator_account#$1_ValidatorConfig_ValidatorConfig(s), $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_operator_account(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'address'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), x, $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_human_name(s: $1_ValidatorConfig_ValidatorConfig, x: Vec (int)): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), $operator_account#$1_ValidatorConfig_ValidatorConfig(s), x)
}
function $IsValid'$1_ValidatorConfig_ValidatorConfig'(s: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_ValidatorConfig'(s1: $1_ValidatorConfig_ValidatorConfig, s2: $1_ValidatorConfig_ValidatorConfig): bool {
    s1 == s2
}
var $1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig;

// struct ValidatorConfig::Config at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:16:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    s1 == s2
}

// fun ValidatorConfig::publish [baseline] at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:48:5+610
procedure {:inline 1} $1_ValidatorConfig_publish(_$t0: $signer, _$t1: $signer, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Option_Option'$1_ValidatorConfig_Config';
    var $t20: $1_Option_Option'address';
    var $t21: $1_ValidatorConfig_ValidatorConfig;
    var $t0: $signer;
    var $t1: $signer;
    var $t2: Vec (int);
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:75:9+64
    assume {:print "$at(38,2916,2980)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:590:9+44
    assume {:print "$at(28,26179,26223)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[validator_account]($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:48:5+1
    assume {:print "$at(38,2065,2066)"} true;
    assume {:print "$track_local(9,7,0):", $t0} $t0 == $t0;

    // trace_local[dr_account]($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:48:5+1
    assume {:print "$track_local(9,7,1):", $t1} $t1 == $t1;

    // trace_local[human_name]($t2) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:48:5+1
    assume {:print "$track_local(9,7,2):", $t2} $t2 == $t2;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
    assume {:print "$at(38,2206,2239)"} true;

    // assume Identical($t8, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
    assume ($t8 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
    assume {:print "$at(38,2206,2239)"} true;
    assume {:print "$track_abort(9,7):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:53:9+33

    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
    assume {:print "$at(38,2249,2284)"} true;

    // assume Identical($t11, Or(Or(Or(Neq<address>(Signer::spec_address_of($t1), a550c18), Not(exists<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0)), Neq<address>(Signer::spec_address_of($t1), a550c18))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
    assume ($t11 == (((!$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816)));

    // if ($t11) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
    if ($t11) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t1), a550c18), Eq(2, $t9)), And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t9))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t1), a550c18), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816) && $IsEqual'num'(2, $t9)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t9))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 173345816) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
    assume {:print "$at(38,2249,2284)"} true;
    assume {:print "$track_abort(9,7):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35
L6:

    // opaque end: Roles::assert_diem_root($t1) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:54:9+35

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:590:9+44
    assume {:print "$at(28,26179,26223)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_validator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
    assume {:print "$at(38,2294,2336)"} true;

    // assume Identical($t13, Or(Not(exists<Roles::RoleId>($t12)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 3))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
    assume ($t13 == (!$ResourceExists($1_Roles_RoleId_$memory, $t12) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 3)));

    // if ($t13) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
    if ($t13) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t12)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 3), Eq(3, $t9))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 3) && $IsEqual'num'(3, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
    assume {:print "$at(38,2294,2336)"} true;
    assume {:print "$track_abort(9,7):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42
L8:

    // opaque end: Roles::assert_validator($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:55:9+42

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:38+37
    assume {:print "$at(38,2391,2428)"} true;

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:38+37
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:38+37
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:38+37

    // $t15 := exists<ValidatorConfig::ValidatorConfig>($t14) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:14+6
    $t15 := $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, $t14);

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:57:13+1
    call $t16 := $Not($t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:39+17
    assume {:print "$at(38,2469,2486)"} true;
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := opaque begin: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:13+44

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:13+44
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 6) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:13+44
    assume $IsEqual'u64'($t18, 6);

    // $t18 := opaque end: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:58:13+44

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151
    assume {:print "$at(38,2346,2497)"} true;
    assume {:print "$track_local(9,7,4):", $t18} $t18 == $t18;

    // trace_local[tmp#$3]($t16) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151
    assume {:print "$track_local(9,7,3):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151
    assume {:print "$at(38,2346,2497)"} true;
    assume {:print "$track_abort(9,7):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151
    $t9 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:56:9+151
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:17+17
    assume {:print "$at(38,2515,2532)"} true;
L0:

    // $t19 := opaque begin: Option::none<ValidatorConfig::Config>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:61:21+14
    assume {:print "$at(38,2572,2586)"} true;

    // assume And(WellFormed($t19), Le(Len<ValidatorConfig::Config>(select Option::Option.vec($t19)), 1)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:61:21+14
    assume ($IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($t19) && (LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($t19)) <= 1));

    // assume Eq<Option::Option<ValidatorConfig::Config>>($t19, Option::spec_none<ValidatorConfig::Config>()) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:61:21+14
    assume $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''($t19, $1_Option_spec_none'$1_ValidatorConfig_Config'());

    // $t19 := opaque end: Option::none<ValidatorConfig::Config>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:61:21+14

    // $t20 := opaque begin: Option::none<address>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:62:31+14
    assume {:print "$at(38,2618,2632)"} true;

    // assume And(WellFormed($t20), Le(Len<address>(select Option::Option.vec($t20)), 1)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:62:31+14
    assume ($IsValid'$1_Option_Option'address''($t20) && (LenVec($vec#$1_Option_Option'address'($t20)) <= 1));

    // assume Eq<Option::Option<address>>($t20, Option::spec_none<address>()) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:62:31+14
    assume $IsEqual'$1_Option_Option'address''($t20, $1_Option_spec_none'address'());

    // $t20 := opaque end: Option::none<address>() at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:62:31+14

    // $t21 := pack ValidatorConfig::ValidatorConfig($t19, $t20, $t2) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:36+133
    assume {:print "$at(38,2534,2667)"} true;
    $t21 := $1_ValidatorConfig_ValidatorConfig($t19, $t20, $t2);

    // move_to<ValidatorConfig::ValidatorConfig>($t21, $t0) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:60:9+7
    if ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_ValidatorConfig_ValidatorConfig_$memory := $ResourceUpdate($1_ValidatorConfig_ValidatorConfig_$memory, $1_Signer_spec_address_of($t0), $t21);
    }
    if ($abort_flag) {
        assume {:print "$at(38,2507,2514)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(9,7):", $t9} $t9 == $t9;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:65:5+1
    assume {:print "$at(38,2674,2675)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:65:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:65:5+1
L3:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:65:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:258:10+64
function {:inline} $1_SlidingNonce_spec_try_record_nonce(account: $signer, seq_nonce: int): int;
axiom (forall account: $signer, seq_nonce: int ::
(var $$res := $1_SlidingNonce_spec_try_record_nonce(account, seq_nonce);
$IsValid'u64'($$res)));

// struct SlidingNonce::SlidingNonce at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:11:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// fun SlidingNonce::record_nonce_or_abort [baseline] at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:35:5+212
procedure {:inline 1} $1_SlidingNonce_record_nonce_or_abort(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:35:5+1
    assume {:print "$at(31,1585,1586)"} true;
    assume {:print "$track_local(10,1,0):", $t0} $t0 == $t0;

    // trace_local[seq_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:35:5+1
    assume {:print "$track_local(10,1,1):", $t1} $t1 == $t1;

    // $t5 := opaque begin: SlidingNonce::try_record_nonce($t0, $t1) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume {:print "$at(31,1695,1731)"} true;

    // assume Identical($t6, Not(exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume ($t6 == !$ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
L5:

    // assume And(Not(exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0))), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume (!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume {:print "$at(31,1695,1731)"} true;
    assume {:print "$track_abort(10,1):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
L4:

    // modifies global<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0), $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0));
    }

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, SlidingNonce::spec_try_record_nonce($t0, $t1)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume $IsEqual'u64'($t5, $1_SlidingNonce_spec_try_record_nonce($t0, $t1));

    // assume exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: SlidingNonce::try_record_nonce($t0, $t1) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36

    // trace_local[code]($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:13+4
    assume {:print "$track_local(10,1,4):", $t5} $t5 == $t5;

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:24+1
    assume {:print "$at(31,1756,1757)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := ==($t5, $t8) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:21+2
    $t9 := $IsEqual'u64'($t5, $t8);

    // $t10 := opaque begin: Errors::invalid_argument($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30
    assume $IsValid'u64'($t10);

    // assume Eq<u64>($t10, 7) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30
    assume $IsEqual'u64'($t10, 7);

    // $t10 := opaque end: Errors::invalid_argument($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30

    // trace_local[tmp#$3]($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    assume {:print "$track_local(10,1,3):", $t10} $t10 == $t10;

    // trace_local[tmp#$2]($t9) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    assume {:print "$track_local(10,1,2):", $t9} $t9 == $t9;

    // if ($t9) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
L1:

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    assume {:print "$at(31,1741,1790)"} true;
    assume {:print "$track_abort(10,1):", $t10} $t10 == $t10;

    // $t7 := move($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    $t7 := $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:58+1
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
    assume {:print "$at(31,1796,1797)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:93:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:93:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:95:5+260
function {:inline} $1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): $1_DiemSystem_DiemSystem {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:457:9+84
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816)
}

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:31:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    s1 == s2
}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:41:5+65
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::NewEpochEvent at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:26:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:647:10+105
function {:inline} $1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): Vec ($1_DiemSystem_ValidatorInfo) {
    $validators#$1_DiemSystem_DiemSystem($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))
}

// struct DiemSystem::DiemSystem at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:48:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    s1 == s2
}

// struct DiemSystem::CapabilityHolder at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:39:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:18:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:78:10+360
function {:inline} $1_FixedPoint32_spec_multiply_u64(val: int, multiplier: $1_FixedPoint32_FixedPoint32): int {
    if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 0)) then (0) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 1)) then (val) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 2)) then ((val div 2)) else ((18446744073709551615 + 1))))
}

// struct FixedPoint32::FixedPoint32 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:17:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// struct RegisteredCurrencies::RegisteredCurrencies at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:13:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    ($1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    ($1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    ($1_Diem_$is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:5+235
function {:inline} $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    (var addr := 173345816; ($ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:5+235
function {:inline} $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    (var addr := 173345816; ($ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1416:5+235
function {:inline} $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    (var addr := 173345816; ($ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, addr) && $is_synthetic#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'$1_XUS_XUS'(coin: $1_Diem_Diem'$1_XUS_XUS'): int {
    $value#$1_Diem_Diem'$1_XUS_XUS'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'$1_XDX_XDX'(coin: $1_Diem_Diem'$1_XDX_XDX'): int {
    $value#$1_Diem_Diem'$1_XDX_XDX'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'#0'(coin: $1_Diem_Diem'#0'): int {
    $value#$1_Diem_Diem'#0'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_Diem_CurrencyInfo'#0' {
    $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr)
}

// struct Diem::Diem<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::Diem<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'#0';
function {:constructor} $1_Diem_Diem'#0'($value: int): $1_Diem_Diem'#0';
function {:inline} $Update'$1_Diem_Diem'#0''_value(s: $1_Diem_Diem'#0', x: int): $1_Diem_Diem'#0' {
    $1_Diem_Diem'#0'(x)
}
function $IsValid'$1_Diem_Diem'#0''(s: $1_Diem_Diem'#0'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#0''(s1: $1_Diem_Diem'#0', s2: $1_Diem_Diem'#0'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+58
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:58:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    s1 == s2
}

// struct Diem::CancelBurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:83:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    s1 == s2
}

// struct Diem::CurrencyInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::CurrencyInfo<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'#0';
function {:constructor} $1_Diem_CurrencyInfo'#0'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0';
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_total_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'(x, $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#0', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_is_synthetic(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_scaling_factor(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_fractional_part(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), x, $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_currency_code(s: $1_Diem_CurrencyInfo'#0', x: Vec (int)): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), x, $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_can_mint(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), x, $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_mint_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), x, $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#0''(s: $1_Diem_CurrencyInfo'#0'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#0''(s1: $1_Diem_CurrencyInfo'#0', s2: $1_Diem_CurrencyInfo'#0'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0';

// struct Diem::MintCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_MintCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_MintCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_MintCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_MintCapability'$1_XUS_XUS', x: bool): $1_Diem_MintCapability'$1_XUS_XUS' {
    $1_Diem_MintCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XUS_XUS''(s: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XUS_XUS''(s1: $1_Diem_MintCapability'$1_XUS_XUS', s2: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS';

// struct Diem::MintCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'#0';
function {:constructor} $1_Diem_MintCapability'#0'($dummy_field: bool): $1_Diem_MintCapability'#0';
function {:inline} $Update'$1_Diem_MintCapability'#0''_dummy_field(s: $1_Diem_MintCapability'#0', x: bool): $1_Diem_MintCapability'#0' {
    $1_Diem_MintCapability'#0'(x)
}
function $IsValid'$1_Diem_MintCapability'#0''(s: $1_Diem_MintCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'#0''(s1: $1_Diem_MintCapability'#0', s2: $1_Diem_MintCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0';

// struct Diem::MintEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:44:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    s1 == s2
}

// struct Diem::Preburn<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::Preburn<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'#0';
function {:constructor} $1_Diem_Preburn'#0'($to_burn: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0';
function {:inline} $Update'$1_Diem_Preburn'#0''_to_burn(s: $1_Diem_Preburn'#0', x: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'(x)
}
function $IsValid'$1_Diem_Preburn'#0''(s: $1_Diem_Preburn'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($to_burn#$1_Diem_Preburn'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#0''(s1: $1_Diem_Preburn'#0', s2: $1_Diem_Preburn'#0'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#0'_$memory: $Memory $1_Diem_Preburn'#0';

// struct Diem::PreburnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:70:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    s1 == s2
}

// struct Diem::PreburnQueue<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+152
type {:datatype} $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnQueue'$1_XUS_XUS'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XUS_XUS''_preburns(s: $1_Diem_PreburnQueue'$1_XUS_XUS', x: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS' {
    $1_Diem_PreburnQueue'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''(s: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XUS_XUS''(s1: $1_Diem_PreburnQueue'$1_XUS_XUS', s2: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';

// struct Diem::PreburnQueue<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+152
type {:datatype} $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnQueue'$1_XDX_XDX'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XDX_XDX''_preburns(s: $1_Diem_PreburnQueue'$1_XDX_XDX', x: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX' {
    $1_Diem_PreburnQueue'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''(s: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XDX_XDX''(s1: $1_Diem_PreburnQueue'$1_XDX_XDX', s2: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';

// struct Diem::PreburnQueue<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+152
type {:datatype} $1_Diem_PreburnQueue'#0';
function {:constructor} $1_Diem_PreburnQueue'#0'($preburns: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0';
function {:inline} $Update'$1_Diem_PreburnQueue'#0''_preburns(s: $1_Diem_PreburnQueue'#0', x: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0' {
    $1_Diem_PreburnQueue'#0'(x)
}
function $IsValid'$1_Diem_PreburnQueue'#0''(s: $1_Diem_PreburnQueue'#0'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'#0''(s1: $1_Diem_PreburnQueue'#0', s2: $1_Diem_PreburnQueue'#0'): bool {
    s1 == s2
}
var $1_Diem_PreburnQueue'#0'_$memory: $Memory $1_Diem_PreburnQueue'#0';

// struct Diem::PreburnWithMetadata<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn: $1_Diem_Preburn'$1_XUS_XUS', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s1: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', s2: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::PreburnWithMetadata<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn: $1_Diem_Preburn'$1_XDX_XDX', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: $1_Diem_Preburn'$1_XDX_XDX'): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s1: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', s2: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::PreburnWithMetadata<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'#0';
function {:constructor} $1_Diem_PreburnWithMetadata'#0'($preburn: $1_Diem_Preburn'#0', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'#0';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_preburn(s: $1_Diem_PreburnWithMetadata'#0', x: $1_Diem_Preburn'#0'): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'(x, $metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_metadata(s: $1_Diem_PreburnWithMetadata'#0', x: Vec (int)): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'#0''(s: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsValid'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'#0''(s1: $1_Diem_PreburnWithMetadata'#0', s2: $1_Diem_PreburnWithMetadata'#0'): bool {
    s1 == s2
}

// struct Diem::ToXDXExchangeRateUpdateEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:94:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    s1 == s2
}

// fun Diem::zero<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1121:5+127
procedure {:inline 1} $1_Diem_zero'$1_XUS_XUS'() returns ($ret0: $1_Diem_Diem'$1_XUS_XUS')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';

    // bytecode translation starts here
    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume {:print "$at(11,53923,53953)"} true;

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume {:print "$at(11,53923,53953)"} true;
    assume {:print "$track_abort(18,44):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:33+1
    assume {:print "$at(11,53987,53988)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:9+27
    $t3 := $1_Diem_Diem'$1_XUS_XUS'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:9+27
    assume {:print "$track_return(18,44,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    assume {:print "$at(11,53995,53996)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1121:5+127
procedure {:inline 1} $1_Diem_zero'$1_XDX_XDX'() returns ($ret0: $1_Diem_Diem'$1_XDX_XDX')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';

    // bytecode translation starts here
    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume {:print "$at(11,53923,53953)"} true;

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume {:print "$at(11,53923,53953)"} true;
    assume {:print "$track_abort(18,44):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:33+1
    assume {:print "$at(11,53987,53988)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:9+27
    $t3 := $1_Diem_Diem'$1_XDX_XDX'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:9+27
    assume {:print "$track_return(18,44,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    assume {:print "$at(11,53995,53996)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun Diem::zero<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1121:5+127
procedure {:inline 1} $1_Diem_zero'#0'() returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t0: bool;
    var $t1: int;
    var $t2: int;
    var $t3: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';

    // bytecode translation starts here
    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume {:print "$at(11,53923,53953)"} true;

    // assume Identical($t0, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume ($t0 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t0) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
L4:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t1));

    // trace_abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    assume {:print "$at(11,53923,53953)"} true;
    assume {:print "$track_abort(18,44):", $t1} $t1 == $t1;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30
L3:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1122:9+30

    // $t2 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:33+1
    assume {:print "$at(11,53987,53988)"} true;
    $t2 := 0;
    assume $IsValid'u64'($t2);

    // $t3 := pack Diem::Diem<#0>($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:9+27
    $t3 := $1_Diem_Diem'#0'($t2);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1123:9+27
    assume {:print "$track_return(18,44,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    assume {:print "$at(11,53995,53996)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
L2:

    // abort($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1124:5+1
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'#0'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'#0'(window) + $time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    if ($1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XUS_XUS'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(window), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    if ($1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XDX_XDX'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(window), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): $1_AccountLimits_Window'#0' {
    if ($1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'#0'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'#0'(window), $limit_address#$1_AccountLimits_Window'#0'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_LimitsDefinition'#0' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): bool {
    $1_AccountLimits_spec_is_unrestricted'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', receiving: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', receiving: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', receiving: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', sending: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', sending: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', sending: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'#0'(limits_def: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_def), 86400000000))
}

// struct AccountLimits::AccountLimitMutationCapability at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:11:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// struct AccountLimits::LimitsDefinition<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'#0';
function {:constructor} $1_AccountLimits_LimitsDefinition'#0'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'#0';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'#0''(s: $1_AccountLimits_LimitsDefinition'#0'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'#0''(s1: $1_AccountLimits_LimitsDefinition'#0', s2: $1_AccountLimits_LimitsDefinition'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0';

// struct AccountLimits::Window<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_Window'$1_XUS_XUS'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_start(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'(x, $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_limit_address(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''(s: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''(s1: $1_AccountLimits_Window'$1_XUS_XUS', s2: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS';

// struct AccountLimits::Window<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_Window'$1_XDX_XDX'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_start(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'(x, $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_limit_address(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''(s: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''(s1: $1_AccountLimits_Window'$1_XDX_XDX', s2: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX';

// struct AccountLimits::Window<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'#0';
function {:constructor} $1_AccountLimits_Window'#0'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'#0';
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_start(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'(x, $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_inflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), x, $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_outflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), x, $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_tracked_balance(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), x, $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_limit_address(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), x)
}
function $IsValid'$1_AccountLimits_Window'#0''(s: $1_AccountLimits_Window'#0'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'#0'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'#0''(s1: $1_AccountLimits_Window'#0', s2: $1_AccountLimits_Window'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0';

// struct XUS::XUS at /home/ying/diem/language/diem-framework/modules/XUS.move:10:5+14
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:133:9+80
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, 173345816)
}

// struct XDX::XDX at /home/ying/diem/language/diem-framework/modules/XDX.move:15:5+14
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at /home/ying/diem/language/diem-framework/modules/XDX.move:24:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// spec fun at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:108:5+90
function {:inline} $1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory: $Memory $1_VASPDomain_VASPDomains, addr: int): bool {
    $ResourceExists($1_VASPDomain_VASPDomains_$memory, addr)
}

// struct VASPDomain::VASPDomain at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:25:5+110
type {:datatype} $1_VASPDomain_VASPDomain;
function {:constructor} $1_VASPDomain_VASPDomain($domain: Vec (int)): $1_VASPDomain_VASPDomain;
function {:inline} $Update'$1_VASPDomain_VASPDomain'_domain(s: $1_VASPDomain_VASPDomain, x: Vec (int)): $1_VASPDomain_VASPDomain {
    $1_VASPDomain_VASPDomain(x)
}
function $IsValid'$1_VASPDomain_VASPDomain'(s: $1_VASPDomain_VASPDomain): bool {
    $IsValid'vec'u8''($domain#$1_VASPDomain_VASPDomain(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomain'(s1: $1_VASPDomain_VASPDomain, s2: $1_VASPDomain_VASPDomain): bool {
    s1 == s2
}

// struct VASPDomain::VASPDomainEvent at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:39:5+256
type {:datatype} $1_VASPDomain_VASPDomainEvent;
function {:constructor} $1_VASPDomain_VASPDomainEvent($removed: bool, $domain: $1_VASPDomain_VASPDomain, $address: int): $1_VASPDomain_VASPDomainEvent;
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_removed(s: $1_VASPDomain_VASPDomainEvent, x: bool): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent(x, $domain#$1_VASPDomain_VASPDomainEvent(s), $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_domain(s: $1_VASPDomain_VASPDomainEvent, x: $1_VASPDomain_VASPDomain): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), x, $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_address(s: $1_VASPDomain_VASPDomainEvent, x: int): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), $domain#$1_VASPDomain_VASPDomainEvent(s), x)
}
function $IsValid'$1_VASPDomain_VASPDomainEvent'(s: $1_VASPDomain_VASPDomainEvent): bool {
    $IsValid'bool'($removed#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'$1_VASPDomain_VASPDomain'($domain#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'address'($address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainEvent'(s1: $1_VASPDomain_VASPDomainEvent, s2: $1_VASPDomain_VASPDomainEvent): bool {
    s1 == s2
}

// struct VASPDomain::VASPDomainManager at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:33:5+235
type {:datatype} $1_VASPDomain_VASPDomainManager;
function {:constructor} $1_VASPDomain_VASPDomainManager($vasp_domain_events: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager;
function {:inline} $Update'$1_VASPDomain_VASPDomainManager'_vasp_domain_events(s: $1_VASPDomain_VASPDomainManager, x: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager {
    $1_VASPDomain_VASPDomainManager(x)
}
function $IsValid'$1_VASPDomain_VASPDomainManager'(s: $1_VASPDomain_VASPDomainManager): bool {
    $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''($vasp_domain_events#$1_VASPDomain_VASPDomainManager(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainManager'(s1: $1_VASPDomain_VASPDomainManager, s2: $1_VASPDomain_VASPDomainManager): bool {
    s1 == s2
}
var $1_VASPDomain_VASPDomainManager_$memory: $Memory $1_VASPDomain_VASPDomainManager;

// struct VASPDomain::VASPDomains at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:12:5+142
type {:datatype} $1_VASPDomain_VASPDomains;
function {:constructor} $1_VASPDomain_VASPDomains($domains: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains;
function {:inline} $Update'$1_VASPDomain_VASPDomains'_domains(s: $1_VASPDomain_VASPDomains, x: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains {
    $1_VASPDomain_VASPDomains(x)
}
function $IsValid'$1_VASPDomain_VASPDomains'(s: $1_VASPDomain_VASPDomains): bool {
    $IsValid'vec'$1_VASPDomain_VASPDomain''($domains#$1_VASPDomain_VASPDomains(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomains'(s1: $1_VASPDomain_VASPDomains, s2: $1_VASPDomain_VASPDomains): bool {
    s1 == s2
}
var $1_VASPDomain_VASPDomains_$memory: $Memory $1_VASPDomain_VASPDomains;

// fun VASPDomain::publish_vasp_domains [baseline] at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:80:5+380
procedure {:inline 1} $1_VASPDomain_publish_vasp_domains(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: Vec ($1_VASPDomain_VASPDomain);
    var $t14: $1_VASPDomain_VASPDomains;
    var $t0: $signer;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:93:9+54
    assume {:print "$at(36,3464,3518)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[vasp_account]($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:80:5+1
    assume {:print "$at(36,3043,3044)"} true;
    assume {:print "$track_local(22,5,0):", $t0} $t0 == $t0;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
    assume {:print "$at(36,3131,3175)"} true;

    // assume Identical($t6, Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 5))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
    assume ($t6 == (!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 5)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 5), Eq(3, $t7))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'num'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 5) && $IsEqual'num'(3, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
    assume {:print "$at(36,3131,3175)"} true;
    assume {:print "$track_abort(22,5):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44
L4:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:83:9+44

    // $t8 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:85:34+32
    assume {:print "$at(36,3226,3258)"} true;

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:85:34+32
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:85:34+32
    assume $IsEqual'address'($t8, $1_Signer_spec_address_of($t0));

    // $t8 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:85:34+32

    // $t9 := exists<VASPDomain::VASPDomains>($t8) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:85:14+6
    $t9 := $ResourceExists($1_VASPDomain_VASPDomains_$memory, $t8);

    // $t10 := !($t9) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:85:13+1
    call $t10 := $Not($t9);

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:86:39+13
    assume {:print "$at(36,3299,3312)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := opaque begin: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:86:13+40

    // assume WellFormed($t12) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:86:13+40
    assume $IsValid'u64'($t12);

    // assume Eq<u64>($t12, 6) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:86:13+40
    assume $IsEqual'u64'($t12, 6);

    // $t12 := opaque end: Errors::already_published($t11) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:86:13+40

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138
    assume {:print "$at(36,3185,3323)"} true;
    assume {:print "$track_local(22,5,2):", $t12} $t12 == $t12;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138
    assume {:print "$track_local(22,5,1):", $t10} $t10 == $t10;

    // if ($t10) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138
    if ($t10) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138
    assume {:print "$at(36,3185,3323)"} true;
    assume {:print "$track_abort(22,5):", $t12} $t12 == $t12;

    // $t7 := move($t12) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138
    $t7 := $t12;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:84:9+138
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:88:17+12
    assume {:print "$at(36,3341,3353)"} true;
L0:

    // $t13 := Vector::empty<VASPDomain::VASPDomain>() on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:89:22+15
    assume {:print "$at(36,3390,3405)"} true;
    call $t13 := $1_Vector_empty'$1_VASPDomain_VASPDomain'();
    if ($abort_flag) {
        assume {:print "$at(36,3390,3405)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(22,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t14 := pack VASPDomain::VASPDomains($t13) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:88:31+61
    assume {:print "$at(36,3355,3416)"} true;
    $t14 := $1_VASPDomain_VASPDomains($t13);

    // move_to<VASPDomain::VASPDomains>($t14, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:88:9+7
    if ($ResourceExists($1_VASPDomain_VASPDomains_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_VASPDomain_VASPDomains_$memory := $ResourceUpdate($1_VASPDomain_VASPDomains_$memory, $1_Signer_spec_address_of($t0), $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(36,3333,3340)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(22,5):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:91:5+1
    assume {:print "$at(36,3422,3423)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:91:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:91:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:91:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:164:5+80
function {:inline} $1_VASP_$is_child($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, addr: int): bool {
    $ResourceExists($1_VASP_ChildVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:154:5+82
function {:inline} $1_VASP_$is_parent($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $ResourceExists($1_VASP_ParentVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:174:5+89
function {:inline} $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) || $1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:141:9+207
function {:inline} $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr)) then (addr) else ($parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:197:10+168
function {:inline} $1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr1: int, addr2: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)) && $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:214:10+99
function {:inline} $1_VASP_spec_num_children($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, parent: int): int {
    $num_children#$1_VASP_ParentVASP($ResourceValue($1_VASP_ParentVASP_$memory, parent))
}

// struct VASP::ChildVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:21:5+54
type {:datatype} $1_VASP_ChildVASP;
function {:constructor} $1_VASP_ChildVASP($parent_vasp_addr: int): $1_VASP_ChildVASP;
function {:inline} $Update'$1_VASP_ChildVASP'_parent_vasp_addr(s: $1_VASP_ChildVASP, x: int): $1_VASP_ChildVASP {
    $1_VASP_ChildVASP(x)
}
function $IsValid'$1_VASP_ChildVASP'(s: $1_VASP_ChildVASP): bool {
    $IsValid'address'($parent_vasp_addr#$1_VASP_ChildVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ChildVASP'(s1: $1_VASP_ChildVASP, s2: $1_VASP_ChildVASP): bool {
    s1 == s2
}
var $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP;

// struct VASP::ParentVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:15:5+121
type {:datatype} $1_VASP_ParentVASP;
function {:constructor} $1_VASP_ParentVASP($num_children: int): $1_VASP_ParentVASP;
function {:inline} $Update'$1_VASP_ParentVASP'_num_children(s: $1_VASP_ParentVASP, x: int): $1_VASP_ParentVASP {
    $1_VASP_ParentVASP(x)
}
function $IsValid'$1_VASP_ParentVASP'(s: $1_VASP_ParentVASP): bool {
    $IsValid'u64'($num_children#$1_VASP_ParentVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ParentVASP'(s1: $1_VASP_ParentVASP, s2: $1_VASP_ParentVASP): bool {
    s1 == s2
}
var $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP;

// fun VASP::publish_child_vasp_credential [baseline] at /home/ying/diem/language/diem-framework/modules/VASP.move:69:5+904
procedure {:inline 1} $1_VASP_publish_child_vasp_credential(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_VASP_ParentVASP);
    var $t28: $Mutation (int);
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: $1_VASP_ChildVASP;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t28));

    // bytecode translation starts here
    // assume Identical($t11, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:86:9+48
    assume {:print "$at(35,4062,4110)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t1));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // trace_local[parent]($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:69:5+1
    assume {:print "$at(35,3108,3109)"} true;
    assume {:print "$track_local(23,7,0):", $t0} $t0 == $t0;

    // trace_local[child]($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:69:5+1
    assume {:print "$track_local(23,7,1):", $t1} $t1 == $t1;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
    assume {:print "$at(35,3243,3281)"} true;

    // assume Identical($t15, Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 5))) at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
    assume ($t15 == (!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 5)));

    // if ($t15) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
    if ($t15) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 5), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'num'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 5) && $IsEqual'num'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
    assume {:print "$at(35,3243,3281)"} true;
    assume {:print "$track_abort(23,7):", $t16} $t16 == $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38
L8:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:73:9+38

    // opaque begin: Roles::assert_child_vasp_role($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
    assume {:print "$at(35,3291,3327)"} true;

    // assume Identical($t17, Or(Not(exists<Roles::RoleId>(Signer::$address_of($t1))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), 6))) at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
    assume ($t17 == (!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), 6)));

    // if ($t17) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
    if ($t17) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
L11:

    // assume Or(And(Not(exists<Roles::RoleId>(Signer::$address_of($t1))), Eq(5, $t16)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t1))), 6), Eq(3, $t16))) at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1)) && $IsEqual'num'(5, $t16)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t1))), 6) && $IsEqual'num'(3, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
    assume {:print "$at(35,3291,3327)"} true;
    assume {:print "$track_abort(23,7):", $t16} $t16 == $t16;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36
L10:

    // opaque end: Roles::assert_child_vasp_role($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:74:9+36

    // $t18 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:31+25
    assume {:print "$at(35,3359,3384)"} true;

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:31+25
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:31+25
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t1));

    // $t18 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:31+25

    // trace_local[child_vasp_addr]($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:75:13+15
    assume {:print "$track_local(23,7,8):", $t18} $t18 == $t18;

    // $t19 := opaque begin: VASP::is_vasp($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:17+24
    assume {:print "$at(35,3402,3426)"} true;

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:17+24
    assume $IsValid'bool'($t19);

    // assume Eq<bool>($t19, VASP::$is_vasp($t18)) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:17+24
    assume $IsEqual'bool'($t19, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18));

    // $t19 := opaque end: VASP::is_vasp($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:17+24

    // $t20 := !($t19) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:16+1
    call $t20 := $Not($t19);

    // $t21 := 0 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:69+21
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := opaque begin: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:43+48

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:43+48
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 6) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:43+48
    assume $IsEqual'u64'($t22, 6);

    // $t22 := opaque end: Errors::already_published($t21) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:43+48

    // trace_local[tmp#$3]($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83
    assume {:print "$track_local(23,7,3):", $t22} $t22 == $t22;

    // trace_local[tmp#$2]($t20) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83
    assume {:print "$track_local(23,7,2):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83
    assume {:print "$at(35,3394,3477)"} true;
    assume {:print "$track_abort(23,7):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83
    $t16 := $t22;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:76:9+83
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASP.move:77:51+6
    assume {:print "$at(35,3529,3535)"} true;
L0:

    // $t23 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:32+26

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:32+26
    assume $IsValid'address'($t23);

    // assume Eq<address>($t23, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:32+26
    assume $IsEqual'address'($t23, $1_Signer_spec_address_of($t0));

    // $t23 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:32+26

    // trace_local[parent_vasp_addr]($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:77:13+16
    assume {:print "$track_local(23,7,10):", $t23} $t23 == $t23;

    // $t24 := opaque begin: VASP::is_parent($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:16+27
    assume {:print "$at(35,3553,3580)"} true;

    // assume WellFormed($t24) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:16+27
    assume $IsValid'bool'($t24);

    // assume Eq<bool>($t24, VASP::$is_parent($t23)) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:16+27
    assume $IsEqual'bool'($t24, $1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t23));

    // $t24 := opaque end: VASP::is_parent($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:16+27

    // $t25 := 3 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:70+18
    $t25 := 3;
    assume $IsValid'u64'($t25);

    // $t26 := opaque begin: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:45+44

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:45+44
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 7) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:45+44
    assume $IsEqual'u64'($t26, 7);

    // $t26 := opaque end: Errors::invalid_argument($t25) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:45+44

    // trace_local[tmp#$5]($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81
    assume {:print "$track_local(23,7,5):", $t26} $t26 == $t26;

    // trace_local[tmp#$4]($t24) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81
    assume {:print "$track_local(23,7,4):", $t24} $t24 == $t24;

    // if ($t24) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81
    if ($t24) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81
L3:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81
    assume {:print "$at(35,3546,3627)"} true;
    assume {:print "$track_abort(23,7):", $t26} $t26 == $t26;

    // $t16 := move($t26) at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81
    $t16 := $t26;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:78:9+81
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASP.move:79:63+16
    assume {:print "$at(35,3691,3707)"} true;
L2:

    // $t27 := borrow_global<VASP::ParentVASP>($t23) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/VASP.move:79:33+17
    if (!$ResourceExists($1_VASP_ParentVASP_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t27 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_VASP_ParentVASP_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(35,3661,3678)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(23,7):", $t16} $t16 == $t16;
        goto L7;
    }

    // $t28 := borrow_field<VASP::ParentVASP>.num_children($t27) at /home/ying/diem/language/diem-framework/modules/VASP.move:79:28+65
    $t28 := $ChildMutation($t27, 0, $num_children#$1_VASP_ParentVASP($Dereference($t27)));

    // trace_local[num_children]($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:79:13+12
    $temp_0'u64' := $Dereference($t28);
    assume {:print "$track_local(23,7,9):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t29 := read_ref($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:16+13
    assume {:print "$at(35,3827,3840)"} true;
    $t29 := $Dereference($t28);

    // $t30 := 65536 at /home/ying/diem/language/diem-framework/modules/VASP.move:81:32+18
    $t30 := 65536;
    assume $IsValid'u64'($t30);

    // $t31 := <($t29, $t30) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:30+1
    call $t31 := $Lt($t29, $t30);

    // $t32 := 1 at /home/ying/diem/language/diem-framework/modules/VASP.move:81:75+18
    $t32 := 1;
    assume $IsValid'u64'($t32);

    // $t33 := opaque begin: Errors::limit_exceeded($t32) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:52+42

    // assume WellFormed($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:52+42
    assume $IsValid'u64'($t33);

    // assume Eq<u64>($t33, 8) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:52+42
    assume $IsEqual'u64'($t33, 8);

    // $t33 := opaque end: Errors::limit_exceeded($t32) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:52+42

    // trace_local[tmp#$7]($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86
    assume {:print "$track_local(23,7,7):", $t33} $t33 == $t33;

    // trace_local[tmp#$6]($t31) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86
    assume {:print "$track_local(23,7,6):", $t31} $t31 == $t31;

    // if ($t31) goto L4 else goto L12 at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86
    if ($t31) { goto L4; } else { goto L12; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86
L5:

    // destroy($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86

    // trace_abort($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86
    assume {:print "$at(35,3820,3906)"} true;
    assume {:print "$track_abort(23,7):", $t33} $t33 == $t33;

    // $t16 := move($t33) at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86
    $t16 := $t33;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:81:9+86
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASP.move:82:26+12
    assume {:print "$at(35,3933,3945)"} true;
L4:

    // $t34 := read_ref($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:82:25+13
    $t34 := $Dereference($t28);

    // $t35 := 1 at /home/ying/diem/language/diem-framework/modules/VASP.move:82:41+1
    $t35 := 1;
    assume $IsValid'u64'($t35);

    // $t36 := +($t34, $t35) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/VASP.move:82:39+1
    call $t36 := $AddU64($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(35,3946,3947)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(23,7):", $t16} $t16 == $t16;
        goto L7;
    }

    // write_ref($t28, $t36) at /home/ying/diem/language/diem-framework/modules/VASP.move:82:9+33
    $t28 := $UpdateMutation($t28, $t36);

    // write_back[Reference($t27).num_children]($t28) at /home/ying/diem/language/diem-framework/modules/VASP.move:82:9+33
    $t27 := $UpdateMutation($t27, $Update'$1_VASP_ParentVASP'_num_children($Dereference($t27), $Dereference($t28)));

    // write_back[VASP::ParentVASP@]($t27) at /home/ying/diem/language/diem-framework/modules/VASP.move:82:9+33
    $1_VASP_ParentVASP_$memory := $ResourceUpdate($1_VASP_ParentVASP_$memory, $GlobalLocationAddress($t27),
        $Dereference($t27));

    // $t37 := pack VASP::ChildVASP($t23) at /home/ying/diem/language/diem-framework/modules/VASP.move:83:24+30
    assume {:print "$at(35,3974,4004)"} true;
    $t37 := $1_VASP_ChildVASP($t23);

    // move_to<VASP::ChildVASP>($t37, $t1) on_abort goto L7 with $t16 at /home/ying/diem/language/diem-framework/modules/VASP.move:83:9+7
    if ($ResourceExists($1_VASP_ChildVASP_$memory, $1_Signer_spec_address_of($t1))) {
        call $ExecFailureAbort();
    } else {
        $1_VASP_ChildVASP_$memory := $ResourceUpdate($1_VASP_ChildVASP_$memory, $1_Signer_spec_address_of($t1), $t37);
    }
    if ($abort_flag) {
        assume {:print "$at(35,3959,3966)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(23,7):", $t16} $t16 == $t16;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/VASP.move:84:5+1
    assume {:print "$at(35,4011,4012)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/VASP.move:84:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:84:5+1
L7:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:84:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L12 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L12:

    // destroy($t27) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

}

// fun VASP::publish_parent_vasp_credential [baseline] at /home/ying/diem/language/diem-framework/modules/VASP.move:43:5+429
procedure {:inline 1} $1_VASP_publish_parent_vasp_credential(_$t0: $signer, _$t1: $signer) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_VASP_ParentVASP;
    var $t0: $signer;
    var $t1: $signer;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:56:9+46
    assume {:print "$at(35,2649,2695)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t1));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[vasp]($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:43:5+1
    assume {:print "$at(35,1979,1980)"} true;
    assume {:print "$track_local(23,8,0):", $t0} $t0 == $t0;

    // trace_local[tc_account]($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:43:5+1
    assume {:print "$track_local(23,8,1):", $t1} $t1 == $t1;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
    assume {:print "$at(35,2075,2108)"} true;

    // assume Identical($t8, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
    assume ($t8 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
    assume {:print "$at(35,2075,2108)"} true;
    assume {:print "$track_abort(23,8):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/VASP.move:44:9+33

    // assume Identical($t10, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
    assume {:print "$at(35,2118,2163)"} true;

    // assume Identical($t11, Or(Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1)), Neq<address>(Signer::spec_address_of($t1), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
    assume ($t11 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)));

    // if ($t11) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
    if ($t11) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t1), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
    assume {:print "$at(35,2118,2163)"} true;
    assume {:print "$track_abort(23,8):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45
L6:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:45:9+45

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
    assume {:print "$at(35,2173,2209)"} true;

    // assume Identical($t13, Or(Not(exists<Roles::RoleId>($t12)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 5))) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
    assume ($t13 == (!$ResourceExists($1_Roles_RoleId_$memory, $t12) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 5)));

    // if ($t13) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
    if ($t13) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t12)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 5), Eq(3, $t9))) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 5) && $IsEqual'num'(3, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
    assume {:print "$at(35,2173,2209)"} true;
    assume {:print "$track_abort(23,8):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
    goto L3;

    // label L8 at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36
L8:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:46:9+36

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:25+24
    assume {:print "$at(35,2235,2259)"} true;

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:25+24
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:25+24
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:25+24

    // trace_local[vasp_addr]($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:47:13+9
    assume {:print "$track_local(23,8,4):", $t14} $t14 == $t14;

    // $t15 := opaque begin: VASP::is_vasp($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:17+18
    assume {:print "$at(35,2277,2295)"} true;

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:17+18
    assume $IsValid'bool'($t15);

    // assume Eq<bool>($t15, VASP::$is_vasp($t14)) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:17+18
    assume $IsEqual'bool'($t15, $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t14));

    // $t15 := opaque end: VASP::is_vasp($t14) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:17+18

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:16+1
    call $t16 := $Not($t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:63+21
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := opaque begin: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:37+48

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:37+48
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 6) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:37+48
    assume $IsEqual'u64'($t18, 6);

    // $t18 := opaque end: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:37+48

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77
    assume {:print "$track_local(23,8,3):", $t18} $t18 == $t18;

    // trace_local[tmp#$2]($t16) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77
    assume {:print "$track_local(23,8,2):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77
    assume {:print "$at(35,2269,2346)"} true;
    assume {:print "$track_abort(23,8):", $t18} $t18 == $t18;

    // $t9 := move($t18) at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77
    $t9 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:48:9+77
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASP.move:49:17+4
    assume {:print "$at(35,2364,2368)"} true;
L0:

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/VASP.move:49:50+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := pack VASP::ParentVASP($t19) at /home/ying/diem/language/diem-framework/modules/VASP.move:49:23+30
    $t20 := $1_VASP_ParentVASP($t19);

    // move_to<VASP::ParentVASP>($t20, $t0) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/VASP.move:49:9+7
    if ($ResourceExists($1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_VASP_ParentVASP_$memory := $ResourceUpdate($1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t0), $t20);
    }
    if ($abort_flag) {
        assume {:print "$at(35,2356,2363)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(23,8):", $t9} $t9 == $t9;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASP.move:50:5+1
    assume {:print "$at(35,2407,2408)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/VASP.move:50:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASP.move:50:5+1
L3:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/VASP.move:50:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+118
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, 186537453)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// struct TransactionFee::TransactionFee<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:13:5+124
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:121:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:254:10+94
function {:inline} $1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:270:10+120
function {:inline} $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:299:10+183
function {:inline} $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr)) then ($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else (addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:337:10+205
function {:inline} $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:373:10+104
function {:inline} $1_DualAttestation_spec_dual_attestation_message(payer: int, metadata: Vec (int), deposit_value: int): Vec (int);
axiom (forall payer: int, metadata: Vec (int), deposit_value: int ::
(var $$res := $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value);
$IsValid'vec'u8''($$res)));

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:425:10+589
function {:inline} $1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, payer: int, payee: int, metadata_signature: Vec (int), metadata: Vec (int), deposit_value: int): bool {
    (var payee_compliance_key := $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)); (($IsEqual'num'(LenVec(metadata_signature), 64) && !$1_Vector_$is_empty'u8'(payee_compliance_key)) && $1_Signature_$ed25519_verify(metadata_signature, payee_compliance_key, $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:545:9+78
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:550:9+104
function {:inline} $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): int {
    $micro_xdx_limit#$1_DualAttestation_Limit($ResourceValue($1_DualAttestation_Limit_$memory, 173345816))
}

// struct DualAttestation::BaseUrlRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:57:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::ComplianceKeyRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:49:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::Credential at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:19:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    s1 == s2
}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:44:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// fun DualAttestation::publish_credential [baseline] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:94:5+876
procedure {:inline 1} $1_DualAttestation_publish_credential(_$t0: $signer, _$t1: $signer, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: Vec (int);
    var $t20: Vec (int);
    var $t21: int;
    var $t22: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    var $t23: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    var $t24: $1_DualAttestation_Credential;
    var $t0: $signer;
    var $t1: $signer;
    var $t2: Vec (int);
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select Roles::RoleId.role_id(global<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t6 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)));

    // assume Identical($t7, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t1));

    // trace_local[created]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:94:5+1
    assume {:print "$at(22,4477,4478)"} true;
    assume {:print "$track_local(25,11,0):", $t0} $t0 == $t0;

    // trace_local[creator]($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:94:5+1
    assume {:print "$track_local(25,11,1):", $t1} $t1 == $t1;

    // trace_local[human_name]($t2) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:94:5+1
    assume {:print "$track_local(25,11,2):", $t2} $t2 == $t2;

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, select Roles::RoleId.role_id(global<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t9 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t8)));

    // opaque begin: Roles::assert_parent_vasp_or_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
    assume {:print "$at(22,4616,4671)"} true;

    // assume Identical($t10, Or(Not(exists<Roles::RoleId>($t8)), And(Neq<u64>($t9, 5), Neq<u64>($t9, 2)))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
    assume ($t10 == (!$ResourceExists($1_Roles_RoleId_$memory, $t8) || (!$IsEqual'u64'($t9, 5) && !$IsEqual'u64'($t9, 2))));

    // if ($t10) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
    if ($t10) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
L5:

    // assume Or(And(Not(exists<Roles::RoleId>($t8)), Eq(5, $t11)), And(And(Neq<u64>($t9, 5), Neq<u64>($t9, 2)), Eq(3, $t11))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t8) && $IsEqual'num'(5, $t11)) || ((!$IsEqual'u64'($t9, 5) && !$IsEqual'u64'($t9, 2)) && $IsEqual'num'(3, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
    assume {:print "$at(22,4616,4671)"} true;
    assume {:print "$track_abort(25,11):", $t11} $t11 == $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55
L4:

    // opaque end: Roles::assert_parent_vasp_or_designated_dealer($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:99:9+55

    // assume Identical($t12, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t1));

    // opaque begin: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
    assume {:print "$at(22,4681,4723)"} true;

    // assume Identical($t13, Or(Or(Not(exists<Roles::RoleId>($t12)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 1)), Neq<address>(Signer::spec_address_of($t1), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
    assume ($t13 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t12) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453)));

    // if ($t13) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
    if ($t13) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t12)), Eq(5, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t12)), 1), Eq(3, $t11))), And(Neq<address>(Signer::spec_address_of($t1), b1e55ed), Eq(2, $t11))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t12) && $IsEqual'num'(5, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t12)), 1) && $IsEqual'num'(3, $t11))) || (!$IsEqual'address'($1_Signer_spec_address_of($t1), 186537453) && $IsEqual'num'(2, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
    assume {:print "$at(22,4681,4723)"} true;
    assume {:print "$track_abort(25,11):", $t11} $t11 == $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42
L6:

    // opaque end: Roles::assert_treasury_compliance($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:100:9+42

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:33+27
    assume {:print "$at(22,4773,4800)"} true;

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:33+27
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:33+27
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:33+27

    // $t15 := exists<DualAttestation::Credential>($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:14+6
    $t15 := $ResourceExists($1_DualAttestation_Credential_$memory, $t14);

    // $t16 := !($t15) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:102:13+1
    call $t16 := $Not($t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:39+11
    assume {:print "$at(22,4841,4852)"} true;
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := opaque begin: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:13+38

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:13+38
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 6) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:13+38
    assume $IsEqual'u64'($t18, 6);

    // $t18 := opaque end: Errors::already_published($t17) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:103:13+38

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130
    assume {:print "$at(22,4733,4863)"} true;
    assume {:print "$track_local(25,11,4):", $t18} $t18 == $t18;

    // trace_local[tmp#$3]($t16) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130
    assume {:print "$track_local(25,11,3):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130
    assume {:print "$at(22,4733,4863)"} true;
    assume {:print "$track_abort(25,11):", $t18} $t18 == $t18;

    // $t11 := move($t18) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130
    $t11 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:101:9+130
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:105:17+7
    assume {:print "$at(22,4881,4888)"} true;
L0:

    // $t19 := Vector::empty<u8>() on_abort goto L3 with $t11 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:107:23+15
    assume {:print "$at(22,4949,4964)"} true;
    call $t19 := $1_Vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(22,4949,4964)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(25,11):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t20 := Vector::empty<u8>() on_abort goto L3 with $t11 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:108:36+15
    assume {:print "$at(22,5001,5016)"} true;
    call $t20 := $1_Vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(22,5001,5016)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(25,11):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t21 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:110:30+7
    assume {:print "$at(22,5128,5135)"} true;
    $t21 := 18446744073709551615;
    assume $IsValid'u64'($t21);

    // $t22 := Event::new_event_handle<DualAttestation::ComplianceKeyRotationEvent>($t0) on_abort goto L3 with $t11 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:111:45+60
    assume {:print "$at(22,5181,5241)"} true;
    call $t22 := $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(22,5181,5241)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(25,11):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t23 := Event::new_event_handle<DualAttestation::BaseUrlRotationEvent>($t0) on_abort goto L3 with $t11 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:112:39+54
    assume {:print "$at(22,5281,5335)"} true;
    call $t23 := $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'($t0);
    if ($abort_flag) {
        assume {:print "$at(22,5281,5335)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(25,11):", $t11} $t11 == $t11;
        goto L3;
    }

    // $t24 := pack DualAttestation::Credential($t2, $t19, $t20, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:105:26+456
    assume {:print "$at(22,4890,5346)"} true;
    $t24 := $1_DualAttestation_Credential($t2, $t19, $t20, $t21, $t22, $t23);

    // move_to<DualAttestation::Credential>($t24, $t0) on_abort goto L3 with $t11 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:105:9+7
    if ($ResourceExists($1_DualAttestation_Credential_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_DualAttestation_Credential_$memory := $ResourceUpdate($1_DualAttestation_Credential_$memory, $1_Signer_spec_address_of($t0), $t24);
    }
    if ($abort_flag) {
        assume {:print "$at(22,4873,4880)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(25,11):", $t11} $t11 == $t11;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:114:5+1
    assume {:print "$at(22,5352,5353)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:114:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:114:5+1
L3:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:114:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:24:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    s1 == s2
}

// struct DesignatedDealer::Dealer at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:14:5+130
type {:datatype} $1_DesignatedDealer_Dealer;
function {:constructor} $1_DesignatedDealer_Dealer($mint_event_handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer;
function {:inline} $Update'$1_DesignatedDealer_Dealer'_mint_event_handle(s: $1_DesignatedDealer_Dealer, x: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer {
    $1_DesignatedDealer_Dealer(x)
}
function $IsValid'$1_DesignatedDealer_Dealer'(s: $1_DesignatedDealer_Dealer): bool {
    $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_Dealer'(s1: $1_DesignatedDealer_Dealer, s2: $1_DesignatedDealer_Dealer): bool {
    s1 == s2
}
var $1_DesignatedDealer_Dealer_$memory: $Memory $1_DesignatedDealer_Dealer;

// struct DesignatedDealer::ReceivedMintEvent at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:38:5+286
type {:datatype} $1_DesignatedDealer_ReceivedMintEvent;
function {:constructor} $1_DesignatedDealer_ReceivedMintEvent($currency_code: Vec (int), $destination_address: int, $amount: int): $1_DesignatedDealer_ReceivedMintEvent;
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_currency_code(s: $1_DesignatedDealer_ReceivedMintEvent, x: Vec (int)): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent(x, $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_destination_address(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), x, $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_amount(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), x)
}
function $IsValid'$1_DesignatedDealer_ReceivedMintEvent'(s: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(s1: $1_DesignatedDealer_ReceivedMintEvent, s2: $1_DesignatedDealer_ReceivedMintEvent): bool {
    s1 == s2
}

// struct ChainId::ChainId at /home/ying/diem/language/diem-framework/modules/ChainId.move:10:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:160:5+163
function {:inline} $1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:227:9+136
function {:inline} $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:231:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:22:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:16:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:11:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:30:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS', addr: int): int {
    $1_DiemAccount_$balance_for'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX', addr: int): int {
    $1_DiemAccount_$balance_for'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0', addr: int): int {
    $1_DiemAccount_$balance_for'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'$1_XUS_XUS'(balance: $1_DiemAccount_Balance'$1_XUS_XUS'): int {
    $1_Diem_$value'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'$1_XDX_XDX'(balance: $1_DiemAccount_Balance'$1_XDX_XDX'): int {
    $1_Diem_$value'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'#0'(balance: $1_DiemAccount_Balance'#0'): int {
    $1_Diem_$value'#0'($coin#$1_DiemAccount_Balance'#0'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1617:5+247
function {:inline} $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1624:5+239
function {:inline} $1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1641:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2470:9+155
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2475:9+145
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_KeyRotationCapability {
    $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2480:9+129
function {:inline} $1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2486:9+183
function {:inline} $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_KeyRotationCapability($1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2492:9+114
function {:inline} $1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability): bool {
    $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2497:9+144
function {:inline} $1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2502:9+134
function {:inline} $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_WithdrawCapability {
    $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2507:9+121
function {:inline} $1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2512:9+171
function {:inline} $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_WithdrawCapability($1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2518:9+171
function {:inline} $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) && $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2526:10+208
function {:inline} $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, sender: $signer): bool {
    (var addr := $1_Signer_spec_address_of(sender); (($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)) && !$1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct DiemAccount::DiemAccount at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:37:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    s1 == s2
}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:94:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    s1 == s2
}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:130:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::Balance<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XUS_XUS';
function {:constructor} $1_DiemAccount_Balance'$1_XUS_XUS'($coin: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XUS_XUS''_coin(s: $1_DiemAccount_Balance'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS' {
    $1_DiemAccount_Balance'$1_XUS_XUS'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''(s: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''(s1: $1_DiemAccount_Balance'$1_XUS_XUS', s2: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';

// struct DiemAccount::Balance<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XDX_XDX';
function {:constructor} $1_DiemAccount_Balance'$1_XDX_XDX'($coin: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XDX_XDX''_coin(s: $1_DiemAccount_Balance'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX' {
    $1_DiemAccount_Balance'$1_XDX_XDX'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''(s: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''(s1: $1_DiemAccount_Balance'$1_XDX_XDX', s2: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';

// struct DiemAccount::Balance<#0> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'#0';
function {:constructor} $1_DiemAccount_Balance'#0'($coin: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0';
function {:inline} $Update'$1_DiemAccount_Balance'#0''_coin(s: $1_DiemAccount_Balance'#0', x: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0' {
    $1_DiemAccount_Balance'#0'(x)
}
function $IsValid'$1_DiemAccount_Balance'#0''(s: $1_DiemAccount_Balance'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($coin#$1_DiemAccount_Balance'#0'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'#0''(s1: $1_DiemAccount_Balance'#0', s2: $1_DiemAccount_Balance'#0'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0';

// struct DiemAccount::CreateAccountEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:136:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:100:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    s1 == s2
}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:86:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:118:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::SentPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:106:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::WithdrawCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:77:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// fun DiemAccount::add_currency<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:5+766
procedure {:inline 1} $1_DiemAccount_add_currency'$1_XUS_XUS'(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: $1_Diem_Diem'$1_XUS_XUS';
    var $t23: $1_DiemAccount_Balance'$1_XUS_XUS';
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:5+1
    assume {:print "$at(12,70406,70407)"} true;
    assume {:print "$track_local(32,2,0):", $t0} $t0 == $t0;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume {:print "$at(12,70484,70511)"} true;

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27

    // trace_local[addr]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:13+4
    assume {:print "$track_local(32,2,7):", $t9} $t9 == $t9;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume {:print "$at(12,70587,70620)"} true;

    // assume Identical($t10, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume ($t10 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t10) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    if ($t10) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume {:print "$at(12,70587,70620)"} true;
    assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33

    // $t12 := DiemAccount::exists_at($t9) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:16+15
    assume {:print "$at(12,70637,70652)"} true;
    call $t12 := $1_DiemAccount_exists_at($t9);
    if ($abort_flag) {
        assume {:print "$at(12,70637,70652)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:55+8
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31

    // trace_local[tmp#$2]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$track_local(32,2,2):", $t14} $t14 == $t14;

    // trace_local[tmp#$1]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$track_local(32,2,1):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$at(12,70630,70686)"} true;
    assume {:print "$track_abort(32,2):", $t14} $t14 == $t14;

    // $t11 := move($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    $t11 := $t14;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1542:37+7
    assume {:print "$at(12,70813,70820)"} true;
L0:

    // $t15 := Roles::can_hold_balance($t0) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1542:13+32
    call $t15 := $1_Roles_can_hold_balance($t0);
    if ($abort_flag) {
        assume {:print "$at(12,70789,70821)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t16 := 4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:38+24
    assume {:print "$at(12,70860,70884)"} true;
    $t16 := 4;
    assume $IsValid'u64'($t16);

    // $t17 := opaque begin: Errors::invalid_argument($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50
    assume $IsEqual'u64'($t17, 7);

    // $t17 := opaque end: Errors::invalid_argument($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$at(12,70769,70895)"} true;
    assume {:print "$track_local(32,2,4):", $t17} $t17 == $t17;

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$track_local(32,2,3):", $t15} $t15 == $t15;

    // if ($t15) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    if ($t15) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$at(12,70769,70895)"} true;
    assume {:print "$track_abort(32,2):", $t17} $t17 == $t17;

    // $t11 := move($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    $t11 := $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:37+4
    assume {:print "$at(12,71016,71020)"} true;
L2:

    // $t18 := exists<DiemAccount::Balance<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:14+6
    $t18 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t9);

    // $t19 := !($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:13+1
    call $t19 := $Not($t18);

    // $t20 := 15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:39+22
    assume {:print "$at(12,71061,71083)"} true;
    $t20 := 15;
    assume $IsValid'u64'($t20);

    // $t21 := opaque begin: Errors::already_published($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49
    assume $IsValid'u64'($t21);

    // assume Eq<u64>($t21, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49
    assume $IsEqual'u64'($t21, 6);

    // $t21 := opaque end: Errors::already_published($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49

    // trace_local[tmp#$6]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$at(12,70972,71094)"} true;
    assume {:print "$track_local(32,2,6):", $t21} $t21 == $t21;

    // trace_local[tmp#$5]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$track_local(32,2,5):", $t19} $t19 == $t19;

    // if ($t19) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    if ($t19) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122

    // trace_abort($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$at(12,70972,71094)"} true;
    assume {:print "$track_abort(32,2):", $t21} $t21 == $t21;

    // $t11 := move($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    $t11 := $t21;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:17+7
    assume {:print "$at(12,71113,71120)"} true;
L4:

    // $t22 := Diem::zero<#0>() on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:48+19
    call $t22 := $1_Diem_zero'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(12,71144,71163)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t23 := pack DiemAccount::Balance<#0>($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:26+43
    $t23 := $1_DiemAccount_Balance'$1_XUS_XUS'($t22);

    // move_to<DiemAccount::Balance<#0>>($t23, $t0) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:9+7
    if ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t0), $t23);
    }
    if ($abort_flag) {
        assume {:print "$at(12,71105,71112)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    assume {:print "$at(12,71171,71172)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
L7:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currency<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:5+766
procedure {:inline 1} $1_DiemAccount_add_currency'$1_XDX_XDX'(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: $1_Diem_Diem'$1_XDX_XDX';
    var $t23: $1_DiemAccount_Balance'$1_XDX_XDX';
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:5+1
    assume {:print "$at(12,70406,70407)"} true;
    assume {:print "$track_local(32,2,0):", $t0} $t0 == $t0;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume {:print "$at(12,70484,70511)"} true;

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27

    // trace_local[addr]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:13+4
    assume {:print "$track_local(32,2,7):", $t9} $t9 == $t9;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume {:print "$at(12,70587,70620)"} true;

    // assume Identical($t10, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume ($t10 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t10) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    if ($t10) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume {:print "$at(12,70587,70620)"} true;
    assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33

    // $t12 := DiemAccount::exists_at($t9) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:16+15
    assume {:print "$at(12,70637,70652)"} true;
    call $t12 := $1_DiemAccount_exists_at($t9);
    if ($abort_flag) {
        assume {:print "$at(12,70637,70652)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:55+8
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31

    // trace_local[tmp#$2]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$track_local(32,2,2):", $t14} $t14 == $t14;

    // trace_local[tmp#$1]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$track_local(32,2,1):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$at(12,70630,70686)"} true;
    assume {:print "$track_abort(32,2):", $t14} $t14 == $t14;

    // $t11 := move($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    $t11 := $t14;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1542:37+7
    assume {:print "$at(12,70813,70820)"} true;
L0:

    // $t15 := Roles::can_hold_balance($t0) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1542:13+32
    call $t15 := $1_Roles_can_hold_balance($t0);
    if ($abort_flag) {
        assume {:print "$at(12,70789,70821)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t16 := 4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:38+24
    assume {:print "$at(12,70860,70884)"} true;
    $t16 := 4;
    assume $IsValid'u64'($t16);

    // $t17 := opaque begin: Errors::invalid_argument($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50
    assume $IsEqual'u64'($t17, 7);

    // $t17 := opaque end: Errors::invalid_argument($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$at(12,70769,70895)"} true;
    assume {:print "$track_local(32,2,4):", $t17} $t17 == $t17;

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$track_local(32,2,3):", $t15} $t15 == $t15;

    // if ($t15) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    if ($t15) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$at(12,70769,70895)"} true;
    assume {:print "$track_abort(32,2):", $t17} $t17 == $t17;

    // $t11 := move($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    $t11 := $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:37+4
    assume {:print "$at(12,71016,71020)"} true;
L2:

    // $t18 := exists<DiemAccount::Balance<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:14+6
    $t18 := $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t9);

    // $t19 := !($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:13+1
    call $t19 := $Not($t18);

    // $t20 := 15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:39+22
    assume {:print "$at(12,71061,71083)"} true;
    $t20 := 15;
    assume $IsValid'u64'($t20);

    // $t21 := opaque begin: Errors::already_published($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49
    assume $IsValid'u64'($t21);

    // assume Eq<u64>($t21, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49
    assume $IsEqual'u64'($t21, 6);

    // $t21 := opaque end: Errors::already_published($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49

    // trace_local[tmp#$6]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$at(12,70972,71094)"} true;
    assume {:print "$track_local(32,2,6):", $t21} $t21 == $t21;

    // trace_local[tmp#$5]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$track_local(32,2,5):", $t19} $t19 == $t19;

    // if ($t19) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    if ($t19) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122

    // trace_abort($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$at(12,70972,71094)"} true;
    assume {:print "$track_abort(32,2):", $t21} $t21 == $t21;

    // $t11 := move($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    $t11 := $t21;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:17+7
    assume {:print "$at(12,71113,71120)"} true;
L4:

    // $t22 := Diem::zero<#0>() on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:48+19
    call $t22 := $1_Diem_zero'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(12,71144,71163)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t23 := pack DiemAccount::Balance<#0>($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:26+43
    $t23 := $1_DiemAccount_Balance'$1_XDX_XDX'($t22);

    // move_to<DiemAccount::Balance<#0>>($t23, $t0) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:9+7
    if ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t0), $t23);
    }
    if ($abort_flag) {
        assume {:print "$at(12,71105,71112)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    assume {:print "$at(12,71171,71172)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
L7:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currency<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:5+766
procedure {:inline 1} $1_DiemAccount_add_currency'#0'(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: $1_Diem_Diem'#0';
    var $t23: $1_DiemAccount_Balance'#0';
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1535:5+1
    assume {:print "$at(12,70406,70407)"} true;
    assume {:print "$track_local(32,2,0):", $t0} $t0 == $t0;

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume {:print "$at(12,70484,70511)"} true;

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:20+27

    // trace_local[addr]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1536:13+4
    assume {:print "$track_local(32,2,7):", $t9} $t9 == $t9;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume {:print "$at(12,70587,70620)"} true;

    // assume Identical($t10, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume ($t10 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t10) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    if ($t10) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
L9:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t11));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    assume {:print "$at(12,70587,70620)"} true;
    assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33
L8:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1538:9+33

    // $t12 := DiemAccount::exists_at($t9) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:16+15
    assume {:print "$at(12,70637,70652)"} true;
    call $t12 := $1_DiemAccount_exists_at($t9);
    if ($abort_flag) {
        assume {:print "$at(12,70637,70652)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:55+8
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:33+31

    // trace_local[tmp#$2]($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$track_local(32,2,2):", $t14} $t14 == $t14;

    // trace_local[tmp#$1]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$track_local(32,2,1):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    assume {:print "$at(12,70630,70686)"} true;
    assume {:print "$track_abort(32,2):", $t14} $t14 == $t14;

    // $t11 := move($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    $t11 := $t14;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1539:9+56
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1542:37+7
    assume {:print "$at(12,70813,70820)"} true;
L0:

    // $t15 := Roles::can_hold_balance($t0) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1542:13+32
    call $t15 := $1_Roles_can_hold_balance($t0);
    if ($abort_flag) {
        assume {:print "$at(12,70789,70821)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t16 := 4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:38+24
    assume {:print "$at(12,70860,70884)"} true;
    $t16 := 4;
    assume $IsValid'u64'($t16);

    // $t17 := opaque begin: Errors::invalid_argument($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50
    assume $IsEqual'u64'($t17, 7);

    // $t17 := opaque end: Errors::invalid_argument($t16) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1543:13+50

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$at(12,70769,70895)"} true;
    assume {:print "$track_local(32,2,4):", $t17} $t17 == $t17;

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$track_local(32,2,3):", $t15} $t15 == $t15;

    // if ($t15) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    if ($t15) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    assume {:print "$at(12,70769,70895)"} true;
    assume {:print "$track_abort(32,2):", $t17} $t17 == $t17;

    // $t11 := move($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    $t11 := $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1541:9+126
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:37+4
    assume {:print "$at(12,71016,71020)"} true;
L2:

    // $t18 := exists<DiemAccount::Balance<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:14+6
    $t18 := $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t9);

    // $t19 := !($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1547:13+1
    call $t19 := $Not($t18);

    // $t20 := 15 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:39+22
    assume {:print "$at(12,71061,71083)"} true;
    $t20 := 15;
    assume $IsValid'u64'($t20);

    // $t21 := opaque begin: Errors::already_published($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49
    assume $IsValid'u64'($t21);

    // assume Eq<u64>($t21, 6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49
    assume $IsEqual'u64'($t21, 6);

    // $t21 := opaque end: Errors::already_published($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1548:13+49

    // trace_local[tmp#$6]($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$at(12,70972,71094)"} true;
    assume {:print "$track_local(32,2,6):", $t21} $t21 == $t21;

    // trace_local[tmp#$5]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$track_local(32,2,5):", $t19} $t19 == $t19;

    // if ($t19) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    if ($t19) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122

    // trace_abort($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    assume {:print "$at(12,70972,71094)"} true;
    assume {:print "$track_abort(32,2):", $t21} $t21 == $t21;

    // $t11 := move($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    $t11 := $t21;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1546:9+122
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:17+7
    assume {:print "$at(12,71113,71120)"} true;
L4:

    // $t22 := Diem::zero<#0>() on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:48+19
    call $t22 := $1_Diem_zero'#0'();
    if ($abort_flag) {
        assume {:print "$at(12,71144,71163)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // $t23 := pack DiemAccount::Balance<#0>($t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:26+43
    $t23 := $1_DiemAccount_Balance'#0'($t22);

    // move_to<DiemAccount::Balance<#0>>($t23, $t0) on_abort goto L7 with $t11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1551:9+7
    if ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t0), $t23);
    }
    if ($abort_flag) {
        assume {:print "$at(12,71105,71112)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(32,2):", $t11} $t11 == $t11;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    assume {:print "$at(12,71171,71172)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
L7:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1552:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun DiemAccount::exists_at [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1641:5+95
procedure {:inline 1} $1_DiemAccount_exists_at(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[check_addr]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1641:5+1
    assume {:print "$at(12,74875,74876)"} true;
    assume {:print "$track_local(32,22,0):", $t0} $t0 == $t0;

    // $t1 := exists<DiemAccount::DiemAccount>($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1642:9+6
    assume {:print "$at(12,74933,74939)"} true;
    $t1 := $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1642:9+31
    assume {:print "$track_return(32,22,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1643:5+1
    assume {:print "$at(12,74969,74970)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1643:5+1
    $ret0 := $t1;
    return;

}

// fun DiemAccount::add_currencies_for_account<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+511
procedure {:inline 1} $1_DiemAccount_add_currencies_for_account'$1_XUS_XUS'(_$t0: $signer, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[new_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+1
    assume {:print "$at(12,44978,44979)"} true;
    assume {:print "$track_local(32,1,0):", $t0} $t0 == $t0;

    // trace_local[add_all_currencies]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+1
    assume {:print "$track_local(32,1,1):", $t1} $t1 == $t1;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume {:print "$at(12,45120,45151)"} true;

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31

    // trace_local[new_account_addr]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+16
    assume {:print "$track_local(32,1,2):", $t4} $t4 == $t4;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<#0>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:9+32
    assume {:print "$at(12,45161,45193)"} true;
    call $1_DiemAccount_add_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45161,45193)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    assume {:print "$at(12,45203,45482)"} true;
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:39+16
    assume {:print "$at(12,45267,45283)"} true;
L0:

    // $t7 := exists<DiemAccount::Balance<XUS::XUS>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:18+6
    $t7 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t4);

    // $t8 := !($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:17+1
    call $t8 := $Not($t7);

    // if ($t8) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
    if ($t8) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
L4:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
    goto L5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:35+11
    assume {:print "$at(12,45322,45333)"} true;
L3:

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<XUS::XUS>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:17+30
    assume {:print "$at(12,45304,45334)"} true;
    call $1_DiemAccount_add_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45304,45334)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:39+16
    assume {:print "$at(12,45389,45405)"} true;
L5:

    // $t10 := exists<DiemAccount::Balance<XDX::XDX>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:18+6
    $t10 := $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t4);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:17+1
    call $t11 := $Not($t10);

    // if ($t11) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    if ($t11) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:35+11
    assume {:print "$at(12,45444,45455)"} true;
L6:

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<XDX::XDX>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:17+30
    assume {:print "$at(12,45426,45456)"} true;
    call $1_DiemAccount_add_currency'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45426,45456)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:47+1
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    assume {:print "$at(12,45363,45471)"} true;
L8:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1020:14+1
    assume {:print "$at(12,45471,45472)"} true;
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1020:14+1
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    assume {:print "$at(12,45203,45482)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1021:10+1
    assume {:print "$at(12,45482,45483)"} true;
L10:

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    assume {:print "$at(12,45488,45489)"} true;
L11:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    return;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
L12:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currencies_for_account<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+511
procedure {:inline 1} $1_DiemAccount_add_currencies_for_account'$1_XDX_XDX'(_$t0: $signer, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[new_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+1
    assume {:print "$at(12,44978,44979)"} true;
    assume {:print "$track_local(32,1,0):", $t0} $t0 == $t0;

    // trace_local[add_all_currencies]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+1
    assume {:print "$track_local(32,1,1):", $t1} $t1 == $t1;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume {:print "$at(12,45120,45151)"} true;

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31

    // trace_local[new_account_addr]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+16
    assume {:print "$track_local(32,1,2):", $t4} $t4 == $t4;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<#0>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:9+32
    assume {:print "$at(12,45161,45193)"} true;
    call $1_DiemAccount_add_currency'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45161,45193)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    assume {:print "$at(12,45203,45482)"} true;
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:39+16
    assume {:print "$at(12,45267,45283)"} true;
L0:

    // $t7 := exists<DiemAccount::Balance<XUS::XUS>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:18+6
    $t7 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t4);

    // $t8 := !($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:17+1
    call $t8 := $Not($t7);

    // if ($t8) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
    if ($t8) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
L4:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
    goto L5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:35+11
    assume {:print "$at(12,45322,45333)"} true;
L3:

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<XUS::XUS>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:17+30
    assume {:print "$at(12,45304,45334)"} true;
    call $1_DiemAccount_add_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45304,45334)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:39+16
    assume {:print "$at(12,45389,45405)"} true;
L5:

    // $t10 := exists<DiemAccount::Balance<XDX::XDX>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:18+6
    $t10 := $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t4);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:17+1
    call $t11 := $Not($t10);

    // if ($t11) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    if ($t11) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:35+11
    assume {:print "$at(12,45444,45455)"} true;
L6:

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<XDX::XDX>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:17+30
    assume {:print "$at(12,45426,45456)"} true;
    call $1_DiemAccount_add_currency'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45426,45456)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:47+1
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    assume {:print "$at(12,45363,45471)"} true;
L8:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1020:14+1
    assume {:print "$at(12,45471,45472)"} true;
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1020:14+1
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    assume {:print "$at(12,45203,45482)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1021:10+1
    assume {:print "$at(12,45482,45483)"} true;
L10:

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    assume {:print "$at(12,45488,45489)"} true;
L11:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    return;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
L12:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemAccount::add_currencies_for_account<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+511
procedure {:inline 1} $1_DiemAccount_add_currencies_for_account'#0'(_$t0: $signer, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[new_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+1
    assume {:print "$at(12,44978,44979)"} true;
    assume {:print "$track_local(32,1,0):", $t0} $t0 == $t0;

    // trace_local[add_all_currencies]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1008:5+1
    assume {:print "$track_local(32,1,1):", $t1} $t1 == $t1;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume {:print "$at(12,45120,45151)"} true;

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:32+31

    // trace_local[new_account_addr]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1012:13+16
    assume {:print "$track_local(32,1,2):", $t4} $t4 == $t4;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<#0>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1013:9+32
    assume {:print "$at(12,45161,45193)"} true;
    call $1_DiemAccount_add_currency'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45161,45193)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    assume {:print "$at(12,45203,45482)"} true;
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:39+16
    assume {:print "$at(12,45267,45283)"} true;
L0:

    // $t7 := exists<DiemAccount::Balance<XUS::XUS>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:18+6
    $t7 := $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t4);

    // $t8 := !($t7) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:17+1
    call $t8 := $Not($t7);

    // if ($t8) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
    if ($t8) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
L4:

    // goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1015:13+108
    goto L5;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:35+11
    assume {:print "$at(12,45322,45333)"} true;
L3:

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<XUS::XUS>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1016:17+30
    assume {:print "$at(12,45304,45334)"} true;
    call $1_DiemAccount_add_currency'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45304,45334)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:39+16
    assume {:print "$at(12,45389,45405)"} true;
L5:

    // $t10 := exists<DiemAccount::Balance<XDX::XDX>>($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:18+6
    $t10 := $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t4);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:17+1
    call $t11 := $Not($t10);

    // if ($t11) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    if ($t11) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:35+11
    assume {:print "$at(12,45444,45455)"} true;
L6:

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1555:9+44
    assume {:print "$at(12,71254,71298)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // DiemAccount::add_currency<XDX::XDX>($t0) on_abort goto L12 with $t6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:17+30
    assume {:print "$at(12,45426,45456)"} true;
    call $1_DiemAccount_add_currency'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(12,45426,45456)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(32,1):", $t6} $t6 == $t6;
        goto L12;
    }

    // goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1019:47+1
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108
    assume {:print "$at(12,45363,45471)"} true;
L8:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1018:13+108

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1020:14+1
    assume {:print "$at(12,45471,45472)"} true;
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1020:14+1
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279
    assume {:print "$at(12,45203,45482)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1014:9+279

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1021:10+1
    assume {:print "$at(12,45482,45483)"} true;
L10:

    // label L11 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    assume {:print "$at(12,45488,45489)"} true;
L11:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    return;

    // label L12 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
L12:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1022:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_child_vasp_account<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+720
procedure {:inline 1} $1_DiemAccount_create_child_vasp_account'$1_XUS_XUS'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: bool) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $signer;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_DiemAccount_AccountOperationsCapability;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: $1_DiemAccount_AccountOperationsCapability;
    var $t24: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t25: $1_DiemAccount_CreateAccountEvent;
    var $t26: $1_DiemAccount_CreateAccountEvent;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[parent]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$at(12,66773,66774)"} true;
    assume {:print "$track_local(32,9,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,2):", $t2} $t2 == $t2;

    // trace_local[add_all_currencies]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,3):", $t3} $t3 == $t3;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume {:print "$at(12,67005,67038)"} true;

    // assume Identical($t8, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume ($t8 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
L4:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume {:print "$at(12,67005,67038)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
L3:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume {:print "$at(12,67048,67086)"} true;

    // assume Identical($t11, Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume ($t11 == (!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 5)));

    // if ($t11) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    if ($t11) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
L6:

    // assume Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 5), Eq(3, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 5) && $IsEqual'num'(3, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume {:print "$at(12,67048,67086)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
L5:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38

    // $t12 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1461:27+34
    assume {:print "$at(12,67114,67148)"} true;
    call $t12 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,67114,67148)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_account]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1461:13+11
    assume {:print "$track_local(32,9,4):", $t12} $t12 == $t12;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // Roles::new_child_vasp_role($t0, $t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1462:9+48
    assume {:print "$at(12,67158,67206)"} true;
    call $1_Roles_new_child_vasp_role($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(12,67158,67206)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t15, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/VASP.move:86:9+48
    assume {:print "$at(35,4062,4110)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t12));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t0));

    // VASP::publish_child_vasp_credential($t0, $t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1463:9+92
    assume {:print "$at(12,67216,67308)"} true;
    call $1_VASP_publish_child_vasp_credential($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(12,67216,67308)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // Event::publish_generator($t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1467:9+38
    assume {:print "$at(12,67318,67356)"} true;
    call $1_Event_publish_generator($t12);
    if ($abort_flag) {
        assume {:print "$at(12,67318,67356)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t18, Signer::$address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t18 == $1_Signer_$address_of($t12));

    // assume Identical($t19, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t19 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t20, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t12));

    // assume Identical($t21, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t12));

    // assume Not(exists<DiemAccount::DiemAccount>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t18);

    // opaque begin: DiemAccount::make_account($t12, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43

    // assume Identical($t22, Or(Or(Or(Or(Eq<address>($t18, 0), Eq<address>($t18, 1)), exists<AccountFreezing::FreezingBit>($t18)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume ($t22 == (((($IsEqual'address'($t18, 0) || $IsEqual'address'($t18, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t22) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    if ($t22) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
L8:

    // assume Or(Or(Or(Or(And(Eq<address>($t18, 0), Eq(7, $t9)), And(Eq<address>($t18, 1), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t18), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume ((((($IsEqual'address'($t18, 0) && $IsEqual'num'(7, $t9)) || ($IsEqual'address'($t18, 1) && $IsEqual'num'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18) && $IsEqual'num'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
L7:

    // modifies global<DiemAccount::DiemAccount>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t18, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t18);
    }

    // modifies global<Event::EventHandleGenerator>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t18, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t18);
    }

    // modifies global<AccountFreezing::FreezingBit>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t18, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t18);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t23, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t23 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t24, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t24 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t25, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t12), Roles::spec_get_role_id(Signer::spec_address_of($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t25 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t12), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t12))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume AccountFreezing::spec_account_is_not_frozen($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t18);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t23, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t19, select DiemAccount::AccountOperationsCapability.creation_events($t19))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t23, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t19, $creation_events#$1_DiemAccount_AccountOperationsCapability($t19)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume Identical($t26, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t26 == $t25);

    // assume Identical($t27, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t27 == $t24);

    // emit_event($t26, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t27, $t26);

    // opaque end: DiemAccount::make_account($t12, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t28, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t12));

    // DiemAccount::add_currencies_for_account<#0>($t12, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1469:9+67
    assume {:print "$at(12,67419,67486)"} true;
    call $1_DiemAccount_add_currencies_for_account'$1_XUS_XUS'($t12, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,67419,67486)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    assume {:print "$at(12,67492,67493)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
L2:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_child_vasp_account<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+720
procedure {:inline 1} $1_DiemAccount_create_child_vasp_account'$1_XDX_XDX'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: bool) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $signer;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_DiemAccount_AccountOperationsCapability;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: $1_DiemAccount_AccountOperationsCapability;
    var $t24: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t25: $1_DiemAccount_CreateAccountEvent;
    var $t26: $1_DiemAccount_CreateAccountEvent;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[parent]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$at(12,66773,66774)"} true;
    assume {:print "$track_local(32,9,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,2):", $t2} $t2 == $t2;

    // trace_local[add_all_currencies]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,3):", $t3} $t3 == $t3;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume {:print "$at(12,67005,67038)"} true;

    // assume Identical($t8, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume ($t8 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
L4:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume {:print "$at(12,67005,67038)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
L3:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume {:print "$at(12,67048,67086)"} true;

    // assume Identical($t11, Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume ($t11 == (!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 5)));

    // if ($t11) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    if ($t11) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
L6:

    // assume Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 5), Eq(3, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 5) && $IsEqual'num'(3, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume {:print "$at(12,67048,67086)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
L5:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38

    // $t12 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1461:27+34
    assume {:print "$at(12,67114,67148)"} true;
    call $t12 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,67114,67148)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_account]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1461:13+11
    assume {:print "$track_local(32,9,4):", $t12} $t12 == $t12;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // Roles::new_child_vasp_role($t0, $t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1462:9+48
    assume {:print "$at(12,67158,67206)"} true;
    call $1_Roles_new_child_vasp_role($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(12,67158,67206)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t15, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/VASP.move:86:9+48
    assume {:print "$at(35,4062,4110)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t12));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t0));

    // VASP::publish_child_vasp_credential($t0, $t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1463:9+92
    assume {:print "$at(12,67216,67308)"} true;
    call $1_VASP_publish_child_vasp_credential($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(12,67216,67308)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // Event::publish_generator($t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1467:9+38
    assume {:print "$at(12,67318,67356)"} true;
    call $1_Event_publish_generator($t12);
    if ($abort_flag) {
        assume {:print "$at(12,67318,67356)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t18, Signer::$address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t18 == $1_Signer_$address_of($t12));

    // assume Identical($t19, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t19 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t20, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t12));

    // assume Identical($t21, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t12));

    // assume Not(exists<DiemAccount::DiemAccount>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t18);

    // opaque begin: DiemAccount::make_account($t12, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43

    // assume Identical($t22, Or(Or(Or(Or(Eq<address>($t18, 0), Eq<address>($t18, 1)), exists<AccountFreezing::FreezingBit>($t18)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume ($t22 == (((($IsEqual'address'($t18, 0) || $IsEqual'address'($t18, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t22) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    if ($t22) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
L8:

    // assume Or(Or(Or(Or(And(Eq<address>($t18, 0), Eq(7, $t9)), And(Eq<address>($t18, 1), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t18), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume ((((($IsEqual'address'($t18, 0) && $IsEqual'num'(7, $t9)) || ($IsEqual'address'($t18, 1) && $IsEqual'num'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18) && $IsEqual'num'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
L7:

    // modifies global<DiemAccount::DiemAccount>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t18, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t18);
    }

    // modifies global<Event::EventHandleGenerator>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t18, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t18);
    }

    // modifies global<AccountFreezing::FreezingBit>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t18, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t18);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t23, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t23 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t24, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t24 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t25, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t12), Roles::spec_get_role_id(Signer::spec_address_of($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t25 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t12), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t12))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume AccountFreezing::spec_account_is_not_frozen($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t18);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t23, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t19, select DiemAccount::AccountOperationsCapability.creation_events($t19))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t23, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t19, $creation_events#$1_DiemAccount_AccountOperationsCapability($t19)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume Identical($t26, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t26 == $t25);

    // assume Identical($t27, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t27 == $t24);

    // emit_event($t26, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t27, $t26);

    // opaque end: DiemAccount::make_account($t12, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t28, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t12));

    // DiemAccount::add_currencies_for_account<#0>($t12, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1469:9+67
    assume {:print "$at(12,67419,67486)"} true;
    call $1_DiemAccount_add_currencies_for_account'$1_XDX_XDX'($t12, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,67419,67486)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    assume {:print "$at(12,67492,67493)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
L2:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_child_vasp_account<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+720
procedure {:inline 1} $1_DiemAccount_create_child_vasp_account'#0'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: bool) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: $signer;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_DiemAccount_AccountOperationsCapability;
    var $t20: int;
    var $t21: int;
    var $t22: bool;
    var $t23: $1_DiemAccount_AccountOperationsCapability;
    var $t24: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t25: $1_DiemAccount_CreateAccountEvent;
    var $t26: $1_DiemAccount_CreateAccountEvent;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // trace_local[parent]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$at(12,66773,66774)"} true;
    assume {:print "$track_local(32,9,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,2):", $t2} $t2 == $t2;

    // trace_local[add_all_currencies]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1453:5+1
    assume {:print "$track_local(32,9,3):", $t3} $t3 == $t3;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume {:print "$at(12,67005,67038)"} true;

    // assume Identical($t8, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume ($t8 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
L4:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    assume {:print "$at(12,67005,67038)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33
L3:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1459:9+33

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume {:print "$at(12,67048,67086)"} true;

    // assume Identical($t11, Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume ($t11 == (!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 5)));

    // if ($t11) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    if ($t11) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
L6:

    // assume Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 5), Eq(3, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 5) && $IsEqual'num'(3, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    assume {:print "$at(12,67048,67086)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38
L5:

    // opaque end: Roles::assert_parent_vasp_role($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1460:9+38

    // $t12 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1461:27+34
    assume {:print "$at(12,67114,67148)"} true;
    call $t12 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,67114,67148)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_account]($t12) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1461:13+11
    assume {:print "$track_local(32,9,4):", $t12} $t12 == $t12;

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // Roles::new_child_vasp_role($t0, $t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1462:9+48
    assume {:print "$at(12,67158,67206)"} true;
    call $1_Roles_new_child_vasp_role($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(12,67158,67206)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t15, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/VASP.move:86:9+48
    assume {:print "$at(35,4062,4110)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t12));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t0));

    // VASP::publish_child_vasp_credential($t0, $t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1463:9+92
    assume {:print "$at(12,67216,67308)"} true;
    call $1_VASP_publish_child_vasp_credential($t0, $t12);
    if ($abort_flag) {
        assume {:print "$at(12,67216,67308)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // Event::publish_generator($t12) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1467:9+38
    assume {:print "$at(12,67318,67356)"} true;
    call $1_Event_publish_generator($t12);
    if ($abort_flag) {
        assume {:print "$at(12,67318,67356)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t18, Signer::$address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t18 == $1_Signer_$address_of($t12));

    // assume Identical($t19, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t19 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t20, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t12));

    // assume Identical($t21, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t21 == $1_Signer_spec_address_of($t12));

    // assume Not(exists<DiemAccount::DiemAccount>($t18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t18);

    // opaque begin: DiemAccount::make_account($t12, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43

    // assume Identical($t22, Or(Or(Or(Or(Eq<address>($t18, 0), Eq<address>($t18, 1)), exists<AccountFreezing::FreezingBit>($t18)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume ($t22 == (((($IsEqual'address'($t18, 0) || $IsEqual'address'($t18, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t22) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    if ($t22) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
L8:

    // assume Or(Or(Or(Or(And(Eq<address>($t18, 0), Eq(7, $t9)), And(Eq<address>($t18, 1), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t18), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume ((((($IsEqual'address'($t18, 0) && $IsEqual'num'(7, $t9)) || ($IsEqual'address'($t18, 1) && $IsEqual'num'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t18) && $IsEqual'num'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
L7:

    // modifies global<DiemAccount::DiemAccount>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t18, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t18);
    }

    // modifies global<Event::EventHandleGenerator>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t18, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t18);
    }

    // modifies global<AccountFreezing::FreezingBit>($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t18, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t18);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t23, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t23 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t24, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t24 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t25, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t12), Roles::spec_get_role_id(Signer::spec_address_of($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t25 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t12), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t12))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume AccountFreezing::spec_account_is_not_frozen($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t18);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t23, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t19, select DiemAccount::AccountOperationsCapability.creation_events($t19))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t23, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t19, $creation_events#$1_DiemAccount_AccountOperationsCapability($t19)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t18);

    // assume Identical($t26, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t26 == $t25);

    // assume Identical($t27, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t27 == $t24);

    // emit_event($t26, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1468:9+43
    assume {:print "$at(12,67366,67409)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t27, $t26);

    // opaque end: DiemAccount::make_account($t12, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t28, Signer::spec_address_of($t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t12));

    // DiemAccount::add_currencies_for_account<#0>($t12, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1469:9+67
    assume {:print "$at(12,67419,67486)"} true;
    call $1_DiemAccount_add_currencies_for_account'#0'($t12, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,67419,67486)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,9):", $t9} $t9 == $t9;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    assume {:print "$at(12,67492,67493)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
L2:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1470:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_designated_dealer<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+925
procedure {:inline 1} $1_DiemAccount_create_designated_dealer'$1_XUS_XUS'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: $signer;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $signer;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $1_DiemAccount_AccountOperationsCapability;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: $1_DiemAccount_CreateAccountEvent;
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t31: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$at(12,60938,60939)"} true;
    assume {:print "$track_local(32,10,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,4):", $t4} $t4 == $t4;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume {:print "$at(12,61213,61246)"} true;

    // assume Identical($t7, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume ($t7 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
L4:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume {:print "$at(12,61213,61246)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
L3:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume {:print "$at(12,61256,61306)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume {:print "$at(12,61256,61306)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
L5:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50

    // $t11 := DiemAccount::create_signer($t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1351:30+34
    assume {:print "$at(12,61337,61371)"} true;
    call $t11 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,61337,61371)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[new_dd_account]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1351:13+14
    assume {:print "$track_local(32,10,5):", $t11} $t11 == $t11;

    // Event::publish_generator($t11) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1352:9+41
    assume {:print "$at(12,61381,61422)"} true;
    call $1_Event_publish_generator($t11);
    if ($abort_flag) {
        assume {:print "$at(12,61381,61422)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // Roles::new_designated_dealer_role($t0, $t11) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1353:9+67
    assume {:print "$at(12,61432,61499)"} true;
    call $1_Roles_new_designated_dealer_role($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(12,61432,61499)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t14, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:81:9+42
    assume {:print "$at(10,3153,3195)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t11));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t11));

    // opaque begin: DesignatedDealer::publish_designated_dealer_credential<#0>($t11, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume {:print "$at(12,61509,61627)"} true;

    // assume Identical($t17, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<Roles::RoleId>($t15)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed)), Not(exists<Roles::RoleId>($t16))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t16)), 2)), exists<DesignatedDealer::Dealer>($t14)), And($t4, Diem::$is_synthetic_currency<XUS::XUS>())), And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t14))), And($t4, exists<Diem::Preburn<XUS::XUS>>($t14))), And($t4, Not(Diem::spec_is_currency<XUS::XUS>()))), And(Not($t4), Diem::$is_synthetic_currency<#0>())), And(Not($t4), exists<Diem::PreburnQueue<#0>>($t14))), And(Not($t4), exists<Diem::Preburn<#0>>($t14))), And(Not($t4), Not(Diem::spec_is_currency<#0>())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume ($t17 == (((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t15) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_Roles_RoleId_$memory, $t16)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)), 2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14)) || ($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || ($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14))) || ($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14))) || ($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || (!$t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || (!$t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14))) || (!$t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14))) || (!$t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))));

    // if ($t17) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    if ($t17) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<Roles::RoleId>($t15)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))), And(Not(exists<Roles::RoleId>($t16)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t16)), 2), Eq(3, $t8))), And(exists<DesignatedDealer::Dealer>($t14), Eq(6, $t8))), And(And($t4, Diem::$is_synthetic_currency<XUS::XUS>()), Eq(7, $t8))), And(And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t14)), Eq(6, $t8))), And(And($t4, exists<Diem::Preburn<XUS::XUS>>($t14)), Eq(1, $t8))), And(And($t4, Not(Diem::spec_is_currency<XUS::XUS>())), Eq(5, $t8))), And(And(Not($t4), Diem::$is_synthetic_currency<#0>()), Eq(7, $t8))), And(And(Not($t4), exists<Diem::PreburnQueue<#0>>($t14)), Eq(6, $t8))), And(And(Not($t4), exists<Diem::Preburn<#0>>($t14)), Eq(1, $t8))), And(And(Not($t4), Not(Diem::spec_is_currency<#0>())), Eq(5, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume ((((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t15) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t16) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)), 2) && $IsEqual'num'(3, $t8))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14) && $IsEqual'num'(6, $t8))) || (($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(7, $t8))) || (($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(6, $t8))) || (($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(1, $t8))) || (($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(5, $t8))) || ((!$t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(7, $t8))) || ((!$t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(6, $t8))) || ((!$t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(1, $t8))) || ((!$t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(5, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume {:print "$at(12,61509,61627)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
L7:

    // modifies global<DesignatedDealer::Dealer>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t14, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t14);
    }

    // modifies global<Event::EventHandleGenerator>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t14, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t14);
    }

    // modifies global<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14);
    }

    // modifies global<Diem::PreburnQueue<XUS::XUS>>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14);
    }

    // assume exists<DesignatedDealer::Dealer>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14);

    // opaque end: DesignatedDealer::publish_designated_dealer_credential<#0>($t11, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118

    // assume Identical($t18, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t11));

    // assume Identical($t19, select Roles::RoleId.role_id(global<Roles::RoleId>($t18))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t19 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t18)));

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // DualAttestation::publish_credential($t11, $t0, $t3) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1355:9+81
    assume {:print "$at(12,61637,61718)"} true;
    call $1_DualAttestation_publish_credential($t11, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,61637,61718)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t21, Signer::$address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t21 == $1_Signer_$address_of($t11));

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t23, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t11));

    // assume Identical($t24, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t11));

    // assume Not(exists<DiemAccount::DiemAccount>($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume $ResourceExists($1_Roles_RoleId_$memory, $t21);

    // opaque begin: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46

    // assume Identical($t25, Or(Or(Or(Or(Eq<address>($t21, 0), Eq<address>($t21, 1)), exists<AccountFreezing::FreezingBit>($t21)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume ($t25 == (((($IsEqual'address'($t21, 0) || $IsEqual'address'($t21, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t25) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    if ($t25) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
L10:

    // assume Or(Or(Or(Or(And(Eq<address>($t21, 0), Eq(7, $t8)), And(Eq<address>($t21, 1), Eq(7, $t8))), And(exists<AccountFreezing::FreezingBit>($t21), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume ((((($IsEqual'address'($t21, 0) && $IsEqual'num'(7, $t8)) || ($IsEqual'address'($t21, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
L9:

    // modifies global<DiemAccount::DiemAccount>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t21, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t21);
    }

    // modifies global<Event::EventHandleGenerator>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t21, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t21);
    }

    // modifies global<AccountFreezing::FreezingBit>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t21, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t21);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t26, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t26 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t27, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t27 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t28, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t11), Roles::spec_get_role_id(Signer::spec_address_of($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t28 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t11), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t11))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume AccountFreezing::spec_account_is_not_frozen($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t21);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t26, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t22, select DiemAccount::AccountOperationsCapability.creation_events($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t26, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t22, $creation_events#$1_DiemAccount_AccountOperationsCapability($t22)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume Identical($t29, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t29 == $t28);

    // assume Identical($t30, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t30 == $t27);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t31, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t11));

    // DiemAccount::add_currencies_for_account<#0>($t11, $t4) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1357:9+73
    assume {:print "$at(12,61784,61857)"} true;
    call $1_DiemAccount_add_currencies_for_account'$1_XUS_XUS'($t11, $t4);
    if ($abort_flag) {
        assume {:print "$at(12,61784,61857)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    assume {:print "$at(12,61862,61863)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_designated_dealer<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+925
procedure {:inline 1} $1_DiemAccount_create_designated_dealer'$1_XDX_XDX'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: $signer;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $signer;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $1_DiemAccount_AccountOperationsCapability;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: $1_DiemAccount_CreateAccountEvent;
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t31: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'': $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$at(12,60938,60939)"} true;
    assume {:print "$track_local(32,10,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,4):", $t4} $t4 == $t4;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume {:print "$at(12,61213,61246)"} true;

    // assume Identical($t7, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume ($t7 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
L4:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume {:print "$at(12,61213,61246)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
L3:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume {:print "$at(12,61256,61306)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume {:print "$at(12,61256,61306)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
L5:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50

    // $t11 := DiemAccount::create_signer($t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1351:30+34
    assume {:print "$at(12,61337,61371)"} true;
    call $t11 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,61337,61371)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[new_dd_account]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1351:13+14
    assume {:print "$track_local(32,10,5):", $t11} $t11 == $t11;

    // Event::publish_generator($t11) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1352:9+41
    assume {:print "$at(12,61381,61422)"} true;
    call $1_Event_publish_generator($t11);
    if ($abort_flag) {
        assume {:print "$at(12,61381,61422)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // Roles::new_designated_dealer_role($t0, $t11) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1353:9+67
    assume {:print "$at(12,61432,61499)"} true;
    call $1_Roles_new_designated_dealer_role($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(12,61432,61499)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t14, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:81:9+42
    assume {:print "$at(10,3153,3195)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t11));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t11));

    // opaque begin: DesignatedDealer::publish_designated_dealer_credential<#0>($t11, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume {:print "$at(12,61509,61627)"} true;

    // assume Identical($t17, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<Roles::RoleId>($t15)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed)), Not(exists<Roles::RoleId>($t16))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t16)), 2)), exists<DesignatedDealer::Dealer>($t14)), And($t4, Diem::$is_synthetic_currency<XUS::XUS>())), And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t14))), And($t4, exists<Diem::Preburn<XUS::XUS>>($t14))), And($t4, Not(Diem::spec_is_currency<XUS::XUS>()))), And(Not($t4), Diem::$is_synthetic_currency<#0>())), And(Not($t4), exists<Diem::PreburnQueue<#0>>($t14))), And(Not($t4), exists<Diem::Preburn<#0>>($t14))), And(Not($t4), Not(Diem::spec_is_currency<#0>())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume ($t17 == (((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t15) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_Roles_RoleId_$memory, $t16)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)), 2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14)) || ($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || ($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14))) || ($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14))) || ($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || (!$t4 && $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))) || (!$t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t14))) || (!$t4 && $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t14))) || (!$t4 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))));

    // if ($t17) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    if ($t17) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<Roles::RoleId>($t15)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))), And(Not(exists<Roles::RoleId>($t16)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t16)), 2), Eq(3, $t8))), And(exists<DesignatedDealer::Dealer>($t14), Eq(6, $t8))), And(And($t4, Diem::$is_synthetic_currency<XUS::XUS>()), Eq(7, $t8))), And(And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t14)), Eq(6, $t8))), And(And($t4, exists<Diem::Preburn<XUS::XUS>>($t14)), Eq(1, $t8))), And(And($t4, Not(Diem::spec_is_currency<XUS::XUS>())), Eq(5, $t8))), And(And(Not($t4), Diem::$is_synthetic_currency<#0>()), Eq(7, $t8))), And(And(Not($t4), exists<Diem::PreburnQueue<#0>>($t14)), Eq(6, $t8))), And(And(Not($t4), exists<Diem::Preburn<#0>>($t14)), Eq(1, $t8))), And(And(Not($t4), Not(Diem::spec_is_currency<#0>())), Eq(5, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume ((((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t15) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t16) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)), 2) && $IsEqual'num'(3, $t8))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14) && $IsEqual'num'(6, $t8))) || (($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(7, $t8))) || (($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(6, $t8))) || (($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(1, $t8))) || (($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(5, $t8))) || ((!$t4 && $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(7, $t8))) || ((!$t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t14)) && $IsEqual'num'(6, $t8))) || ((!$t4 && $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t14)) && $IsEqual'num'(1, $t8))) || ((!$t4 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(5, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume {:print "$at(12,61509,61627)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
L7:

    // modifies global<DesignatedDealer::Dealer>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t14, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t14);
    }

    // modifies global<Event::EventHandleGenerator>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t14, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t14);
    }

    // modifies global<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'';
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t14, $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'');
    } else {
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t14);
    }

    // modifies global<Diem::PreburnQueue<XUS::XUS>>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14);
    }

    // assume exists<DesignatedDealer::Dealer>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14);

    // opaque end: DesignatedDealer::publish_designated_dealer_credential<#0>($t11, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118

    // assume Identical($t18, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t11));

    // assume Identical($t19, select Roles::RoleId.role_id(global<Roles::RoleId>($t18))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t19 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t18)));

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // DualAttestation::publish_credential($t11, $t0, $t3) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1355:9+81
    assume {:print "$at(12,61637,61718)"} true;
    call $1_DualAttestation_publish_credential($t11, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,61637,61718)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t21, Signer::$address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t21 == $1_Signer_$address_of($t11));

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t23, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t11));

    // assume Identical($t24, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t11));

    // assume Not(exists<DiemAccount::DiemAccount>($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume $ResourceExists($1_Roles_RoleId_$memory, $t21);

    // opaque begin: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46

    // assume Identical($t25, Or(Or(Or(Or(Eq<address>($t21, 0), Eq<address>($t21, 1)), exists<AccountFreezing::FreezingBit>($t21)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume ($t25 == (((($IsEqual'address'($t21, 0) || $IsEqual'address'($t21, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t25) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    if ($t25) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
L10:

    // assume Or(Or(Or(Or(And(Eq<address>($t21, 0), Eq(7, $t8)), And(Eq<address>($t21, 1), Eq(7, $t8))), And(exists<AccountFreezing::FreezingBit>($t21), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume ((((($IsEqual'address'($t21, 0) && $IsEqual'num'(7, $t8)) || ($IsEqual'address'($t21, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
L9:

    // modifies global<DiemAccount::DiemAccount>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t21, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t21);
    }

    // modifies global<Event::EventHandleGenerator>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t21, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t21);
    }

    // modifies global<AccountFreezing::FreezingBit>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t21, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t21);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t26, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t26 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t27, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t27 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t28, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t11), Roles::spec_get_role_id(Signer::spec_address_of($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t28 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t11), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t11))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume AccountFreezing::spec_account_is_not_frozen($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t21);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t26, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t22, select DiemAccount::AccountOperationsCapability.creation_events($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t26, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t22, $creation_events#$1_DiemAccount_AccountOperationsCapability($t22)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume Identical($t29, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t29 == $t28);

    // assume Identical($t30, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t30 == $t27);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t31, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t11));

    // DiemAccount::add_currencies_for_account<#0>($t11, $t4) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1357:9+73
    assume {:print "$at(12,61784,61857)"} true;
    call $1_DiemAccount_add_currencies_for_account'$1_XDX_XDX'($t11, $t4);
    if ($abort_flag) {
        assume {:print "$at(12,61784,61857)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    assume {:print "$at(12,61862,61863)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_designated_dealer<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+925
procedure {:inline 1} $1_DiemAccount_create_designated_dealer'#0'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: $signer;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: $signer;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $1_DiemAccount_AccountOperationsCapability;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: $1_DiemAccount_CreateAccountEvent;
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t31: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$at(12,60938,60939)"} true;
    assume {:print "$track_local(32,10,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1342:5+1
    assume {:print "$track_local(32,10,4):", $t4} $t4 == $t4;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume {:print "$at(12,61213,61246)"} true;

    // assume Identical($t7, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume ($t7 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
L4:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    assume {:print "$at(12,61213,61246)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33
L3:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1349:9+33

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume {:print "$at(12,61256,61306)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t10) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    if ($t10) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
L6:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    assume {:print "$at(12,61256,61306)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50
L5:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1350:9+50

    // $t11 := DiemAccount::create_signer($t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1351:30+34
    assume {:print "$at(12,61337,61371)"} true;
    call $t11 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,61337,61371)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[new_dd_account]($t11) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1351:13+14
    assume {:print "$track_local(32,10,5):", $t11} $t11 == $t11;

    // Event::publish_generator($t11) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1352:9+41
    assume {:print "$at(12,61381,61422)"} true;
    call $1_Event_publish_generator($t11);
    if ($abort_flag) {
        assume {:print "$at(12,61381,61422)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // Roles::new_designated_dealer_role($t0, $t11) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1353:9+67
    assume {:print "$at(12,61432,61499)"} true;
    call $1_Roles_new_designated_dealer_role($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(12,61432,61499)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t14, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:81:9+42
    assume {:print "$at(10,3153,3195)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t11));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t11));

    // opaque begin: DesignatedDealer::publish_designated_dealer_credential<#0>($t11, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume {:print "$at(12,61509,61627)"} true;

    // assume Identical($t17, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<Roles::RoleId>($t15)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed)), Not(exists<Roles::RoleId>($t16))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t16)), 2)), exists<DesignatedDealer::Dealer>($t14)), And($t4, Diem::$is_synthetic_currency<XUS::XUS>())), And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t14))), And($t4, exists<Diem::Preburn<XUS::XUS>>($t14))), And($t4, Not(Diem::spec_is_currency<XUS::XUS>()))), And(Not($t4), Diem::$is_synthetic_currency<#0>())), And(Not($t4), exists<Diem::PreburnQueue<#0>>($t14))), And(Not($t4), exists<Diem::Preburn<#0>>($t14))), And(Not($t4), Not(Diem::spec_is_currency<#0>())))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume ($t17 == (((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t15) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_Roles_RoleId_$memory, $t16)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)), 2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14)) || ($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || ($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14))) || ($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14))) || ($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || (!$t4 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || (!$t4 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t14))) || (!$t4 && $ResourceExists($1_Diem_Preburn'#0'_$memory, $t14))) || (!$t4 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))));

    // if ($t17) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    if ($t17) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<Roles::RoleId>($t15)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))), And(Not(exists<Roles::RoleId>($t16)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t16)), 2), Eq(3, $t8))), And(exists<DesignatedDealer::Dealer>($t14), Eq(6, $t8))), And(And($t4, Diem::$is_synthetic_currency<XUS::XUS>()), Eq(7, $t8))), And(And($t4, exists<Diem::PreburnQueue<XUS::XUS>>($t14)), Eq(6, $t8))), And(And($t4, exists<Diem::Preburn<XUS::XUS>>($t14)), Eq(1, $t8))), And(And($t4, Not(Diem::spec_is_currency<XUS::XUS>())), Eq(5, $t8))), And(And(Not($t4), Diem::$is_synthetic_currency<#0>()), Eq(7, $t8))), And(And(Not($t4), exists<Diem::PreburnQueue<#0>>($t14)), Eq(6, $t8))), And(And(Not($t4), exists<Diem::Preburn<#0>>($t14)), Eq(1, $t8))), And(And(Not($t4), Not(Diem::spec_is_currency<#0>())), Eq(5, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume ((((((((((((((!$ResourceExists($1_Roles_RoleId_$memory, $t15) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t16) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)), 2) && $IsEqual'num'(3, $t8))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14) && $IsEqual'num'(6, $t8))) || (($t4 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(7, $t8))) || (($t4 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(6, $t8))) || (($t4 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t14)) && $IsEqual'num'(1, $t8))) || (($t4 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(5, $t8))) || ((!$t4 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'num'(7, $t8))) || ((!$t4 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t14)) && $IsEqual'num'(6, $t8))) || ((!$t4 && $ResourceExists($1_Diem_Preburn'#0'_$memory, $t14)) && $IsEqual'num'(1, $t8))) || ((!$t4 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'num'(5, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume {:print "$at(12,61509,61627)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
L7:

    // modifies global<DesignatedDealer::Dealer>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t14, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t14);
    }

    // modifies global<Event::EventHandleGenerator>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t14, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t14);
    }

    // modifies global<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t14, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t14);
    }

    // modifies global<Diem::PreburnQueue<XUS::XUS>>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14);
    }

    // assume exists<DesignatedDealer::Dealer>($t14) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118
    assume $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t14);

    // opaque end: DesignatedDealer::publish_designated_dealer_credential<#0>($t11, $t0, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1354:9+118

    // assume Identical($t18, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t11));

    // assume Identical($t19, select Roles::RoleId.role_id(global<Roles::RoleId>($t18))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t19 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t18)));

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // DualAttestation::publish_credential($t11, $t0, $t3) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1355:9+81
    assume {:print "$at(12,61637,61718)"} true;
    call $1_DualAttestation_publish_credential($t11, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,61637,61718)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t21, Signer::$address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t21 == $1_Signer_$address_of($t11));

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t23, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t11));

    // assume Identical($t24, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t11));

    // assume Not(exists<DiemAccount::DiemAccount>($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume $ResourceExists($1_Roles_RoleId_$memory, $t21);

    // opaque begin: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46

    // assume Identical($t25, Or(Or(Or(Or(Eq<address>($t21, 0), Eq<address>($t21, 1)), exists<AccountFreezing::FreezingBit>($t21)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume ($t25 == (((($IsEqual'address'($t21, 0) || $IsEqual'address'($t21, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t25) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    if ($t25) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
L10:

    // assume Or(Or(Or(Or(And(Eq<address>($t21, 0), Eq(7, $t8)), And(Eq<address>($t21, 1), Eq(7, $t8))), And(exists<AccountFreezing::FreezingBit>($t21), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume ((((($IsEqual'address'($t21, 0) && $IsEqual'num'(7, $t8)) || ($IsEqual'address'($t21, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    goto L2;

    // label L9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
L9:

    // modifies global<DiemAccount::DiemAccount>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t21, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t21);
    }

    // modifies global<Event::EventHandleGenerator>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t21, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t21);
    }

    // modifies global<AccountFreezing::FreezingBit>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t21, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t21);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t26, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t26 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t27, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t27 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t28, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t11), Roles::spec_get_role_id(Signer::spec_address_of($t11)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t28 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t11), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t11))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume AccountFreezing::spec_account_is_not_frozen($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t21);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t26, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t22, select DiemAccount::AccountOperationsCapability.creation_events($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t26, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t22, $creation_events#$1_DiemAccount_AccountOperationsCapability($t22)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume Identical($t29, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t29 == $t28);

    // assume Identical($t30, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t30 == $t27);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1356:9+46
    assume {:print "$at(12,61728,61774)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::make_account($t11, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t31, Signer::spec_address_of($t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t11));

    // DiemAccount::add_currencies_for_account<#0>($t11, $t4) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1357:9+73
    assume {:print "$at(12,61784,61857)"} true;
    call $1_DiemAccount_add_currencies_for_account'#0'($t11, $t4);
    if ($abort_flag) {
        assume {:print "$at(12,61784,61857)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,10):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    assume {:print "$at(12,61862,61863)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1358:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_parent_vasp_account<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1095
procedure {:inline 1} $1_DiemAccount_create_parent_vasp_account'$1_XUS_XUS'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: $signer;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $signer;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $1_DiemAccount_AccountOperationsCapability;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: $1_DiemAccount_CreateAccountEvent;
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t31: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$at(12,63838,63839)"} true;
    assume {:print "$track_local(32,12,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,4):", $t4} $t4 == $t4;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume {:print "$at(12,64134,64184)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume {:print "$at(12,64134,64184)"} true;
    assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50

    // $t10 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1405:27+34
    assume {:print "$at(12,64212,64246)"} true;
    call $t10 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,64212,64246)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1405:13+11
    assume {:print "$track_local(32,12,5):", $t10} $t10 == $t10;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // Roles::new_parent_vasp_role($t0, $t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1406:9+58
    assume {:print "$at(12,64256,64314)"} true;
    call $1_Roles_new_parent_vasp_role($t0, $t10);
    if ($abort_flag) {
        assume {:print "$at(12,64256,64314)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t13, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/VASP.move:56:9+46
    assume {:print "$at(35,2649,2695)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t10));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t10));

    // VASP::publish_parent_vasp_credential($t10, $t0) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1407:9+67
    assume {:print "$at(12,64324,64391)"} true;
    call $1_VASP_publish_parent_vasp_credential($t10, $t0);
    if ($abort_flag) {
        assume {:print "$at(12,64324,64391)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // Event::publish_generator($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1408:9+38
    assume {:print "$at(12,64401,64439)"} true;
    call $1_Event_publish_generator($t10);
    if ($abort_flag) {
        assume {:print "$at(12,64401,64439)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t16, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t10));

    // assume Identical($t17, select Roles::RoleId.role_id(global<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t17 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)));

    // assume Identical($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t0));

    // DualAttestation::publish_credential($t10, $t0, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1409:9+78
    assume {:print "$at(12,64449,64527)"} true;
    call $1_DualAttestation_publish_credential($t10, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,64449,64527)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t19, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:93:9+54
    assume {:print "$at(36,3464,3518)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t10));

    // assume Identical($t20, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t10));

    // VASPDomain::publish_vasp_domains($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1410:9+46
    assume {:print "$at(12,64537,64583)"} true;
    call $1_VASPDomain_publish_vasp_domains($t10);
    if ($abort_flag) {
        assume {:print "$at(12,64537,64583)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t21, Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t21 == $1_Signer_$address_of($t10));

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t23, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t10));

    // assume Identical($t24, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t10));

    // assume Not(exists<DiemAccount::DiemAccount>($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t21);

    // opaque begin: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43

    // assume Identical($t25, Or(Or(Or(Or(Eq<address>($t21, 0), Eq<address>($t21, 1)), exists<AccountFreezing::FreezingBit>($t21)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume ($t25 == (((($IsEqual'address'($t21, 0) || $IsEqual'address'($t21, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t25) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t21, 0), Eq(7, $t9)), And(Eq<address>($t21, 1), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t21), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume ((((($IsEqual'address'($t21, 0) && $IsEqual'num'(7, $t9)) || ($IsEqual'address'($t21, 1) && $IsEqual'num'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
L5:

    // modifies global<DiemAccount::DiemAccount>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t21, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t21);
    }

    // modifies global<Event::EventHandleGenerator>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t21, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t21);
    }

    // modifies global<AccountFreezing::FreezingBit>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t21, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t21);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t26, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t26 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t27, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t27 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t28, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t10), Roles::spec_get_role_id(Signer::spec_address_of($t10)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t28 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t10), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t10))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume AccountFreezing::spec_account_is_not_frozen($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t21);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t26, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t22, select DiemAccount::AccountOperationsCapability.creation_events($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t26, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t22, $creation_events#$1_DiemAccount_AccountOperationsCapability($t22)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume Identical($t29, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t29 == $t28);

    // assume Identical($t30, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t30 == $t27);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t31, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t10));

    // DiemAccount::add_currencies_for_account<#0>($t10, $t4) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1412:9+67
    assume {:print "$at(12,64646,64713)"} true;
    call $1_DiemAccount_add_currencies_for_account'$1_XUS_XUS'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(12,64646,64713)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assert exists<VASPDomain::VASPDomains>(Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1414:13+72
    assume {:print "$at(12,64742,64814)"} true;
    assert {:msg "assert_failed(12,64742,64814): unknown assertion failed"}
      $ResourceExists($1_VASPDomain_VASPDomains_$memory, $1_Signer_$address_of($t10));

    // assert Roles::spec_has_treasury_compliance_role_addr(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1415:13+90
    assume {:print "$at(12,64827,64917)"} true;
    assert {:msg "assert_failed(12,64827,64917): unknown assertion failed"}
      $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    assume {:print "$at(12,64932,64933)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
L2:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_parent_vasp_account<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1095
procedure {:inline 1} $1_DiemAccount_create_parent_vasp_account'$1_XDX_XDX'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: $signer;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $signer;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $1_DiemAccount_AccountOperationsCapability;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: $1_DiemAccount_CreateAccountEvent;
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t31: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$at(12,63838,63839)"} true;
    assume {:print "$track_local(32,12,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,4):", $t4} $t4 == $t4;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume {:print "$at(12,64134,64184)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume {:print "$at(12,64134,64184)"} true;
    assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50

    // $t10 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1405:27+34
    assume {:print "$at(12,64212,64246)"} true;
    call $t10 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,64212,64246)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1405:13+11
    assume {:print "$track_local(32,12,5):", $t10} $t10 == $t10;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // Roles::new_parent_vasp_role($t0, $t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1406:9+58
    assume {:print "$at(12,64256,64314)"} true;
    call $1_Roles_new_parent_vasp_role($t0, $t10);
    if ($abort_flag) {
        assume {:print "$at(12,64256,64314)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t13, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/VASP.move:56:9+46
    assume {:print "$at(35,2649,2695)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t10));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t10));

    // VASP::publish_parent_vasp_credential($t10, $t0) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1407:9+67
    assume {:print "$at(12,64324,64391)"} true;
    call $1_VASP_publish_parent_vasp_credential($t10, $t0);
    if ($abort_flag) {
        assume {:print "$at(12,64324,64391)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // Event::publish_generator($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1408:9+38
    assume {:print "$at(12,64401,64439)"} true;
    call $1_Event_publish_generator($t10);
    if ($abort_flag) {
        assume {:print "$at(12,64401,64439)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t16, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t10));

    // assume Identical($t17, select Roles::RoleId.role_id(global<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t17 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)));

    // assume Identical($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t0));

    // DualAttestation::publish_credential($t10, $t0, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1409:9+78
    assume {:print "$at(12,64449,64527)"} true;
    call $1_DualAttestation_publish_credential($t10, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,64449,64527)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t19, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:93:9+54
    assume {:print "$at(36,3464,3518)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t10));

    // assume Identical($t20, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t10));

    // VASPDomain::publish_vasp_domains($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1410:9+46
    assume {:print "$at(12,64537,64583)"} true;
    call $1_VASPDomain_publish_vasp_domains($t10);
    if ($abort_flag) {
        assume {:print "$at(12,64537,64583)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t21, Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t21 == $1_Signer_$address_of($t10));

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t23, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t10));

    // assume Identical($t24, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t10));

    // assume Not(exists<DiemAccount::DiemAccount>($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t21);

    // opaque begin: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43

    // assume Identical($t25, Or(Or(Or(Or(Eq<address>($t21, 0), Eq<address>($t21, 1)), exists<AccountFreezing::FreezingBit>($t21)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume ($t25 == (((($IsEqual'address'($t21, 0) || $IsEqual'address'($t21, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t25) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t21, 0), Eq(7, $t9)), And(Eq<address>($t21, 1), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t21), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume ((((($IsEqual'address'($t21, 0) && $IsEqual'num'(7, $t9)) || ($IsEqual'address'($t21, 1) && $IsEqual'num'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
L5:

    // modifies global<DiemAccount::DiemAccount>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t21, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t21);
    }

    // modifies global<Event::EventHandleGenerator>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t21, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t21);
    }

    // modifies global<AccountFreezing::FreezingBit>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t21, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t21);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t26, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t26 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t27, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t27 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t28, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t10), Roles::spec_get_role_id(Signer::spec_address_of($t10)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t28 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t10), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t10))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume AccountFreezing::spec_account_is_not_frozen($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t21);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t26, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t22, select DiemAccount::AccountOperationsCapability.creation_events($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t26, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t22, $creation_events#$1_DiemAccount_AccountOperationsCapability($t22)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume Identical($t29, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t29 == $t28);

    // assume Identical($t30, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t30 == $t27);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t31, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t10));

    // DiemAccount::add_currencies_for_account<#0>($t10, $t4) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1412:9+67
    assume {:print "$at(12,64646,64713)"} true;
    call $1_DiemAccount_add_currencies_for_account'$1_XDX_XDX'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(12,64646,64713)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assert exists<VASPDomain::VASPDomains>(Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1414:13+72
    assume {:print "$at(12,64742,64814)"} true;
    assert {:msg "assert_failed(12,64742,64814): unknown assertion failed"}
      $ResourceExists($1_VASPDomain_VASPDomains_$memory, $1_Signer_$address_of($t10));

    // assert Roles::spec_has_treasury_compliance_role_addr(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1415:13+90
    assume {:print "$at(12,64827,64917)"} true;
    assert {:msg "assert_failed(12,64827,64917): unknown assertion failed"}
      $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    assume {:print "$at(12,64932,64933)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
L2:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_parent_vasp_account<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1095
procedure {:inline 1} $1_DiemAccount_create_parent_vasp_account'#0'(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int), _$t4: bool) returns ()
{
    // declare local variables
    var $t5: $signer;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $signer;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: $1_DiemAccount_AccountOperationsCapability;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t28: $1_DiemAccount_CreateAccountEvent;
    var $t29: $1_DiemAccount_CreateAccountEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t31: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // trace_local[creator_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$at(12,63838,63839)"} true;
    assume {:print "$track_local(32,12,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,3):", $t3} $t3 == $t3;

    // trace_local[add_all_currencies]($t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1397:5+1
    assume {:print "$track_local(32,12,4):", $t4} $t4 == $t4;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume {:print "$at(12,64134,64184)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t8) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    if ($t8) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    assume {:print "$at(12,64134,64184)"} true;
    assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1404:9+50

    // $t10 := DiemAccount::create_signer($t1) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1405:27+34
    assume {:print "$at(12,64212,64246)"} true;
    call $t10 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,64212,64246)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[new_account]($t10) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1405:13+11
    assume {:print "$track_local(32,12,5):", $t10} $t10 == $t10;

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // Roles::new_parent_vasp_role($t0, $t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1406:9+58
    assume {:print "$at(12,64256,64314)"} true;
    call $1_Roles_new_parent_vasp_role($t0, $t10);
    if ($abort_flag) {
        assume {:print "$at(12,64256,64314)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t13, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/VASP.move:56:9+46
    assume {:print "$at(35,2649,2695)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t10));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t10));

    // VASP::publish_parent_vasp_credential($t10, $t0) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1407:9+67
    assume {:print "$at(12,64324,64391)"} true;
    call $1_VASP_publish_parent_vasp_credential($t10, $t0);
    if ($abort_flag) {
        assume {:print "$at(12,64324,64391)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // Event::publish_generator($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1408:9+38
    assume {:print "$at(12,64401,64439)"} true;
    call $1_Event_publish_generator($t10);
    if ($abort_flag) {
        assume {:print "$at(12,64401,64439)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t16, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:572:9+44
    assume {:print "$at(28,25428,25472)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t10));

    // assume Identical($t17, select Roles::RoleId.role_id(global<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:574:9+43
    assume {:print "$at(28,25549,25592)"} true;
    assume ($t17 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)));

    // assume Identical($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t0));

    // DualAttestation::publish_credential($t10, $t0, $t3) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1409:9+78
    assume {:print "$at(12,64449,64527)"} true;
    call $1_DualAttestation_publish_credential($t10, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,64449,64527)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t19, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:93:9+54
    assume {:print "$at(36,3464,3518)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t10));

    // assume Identical($t20, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t10));

    // VASPDomain::publish_vasp_domains($t10) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1410:9+46
    assume {:print "$at(12,64537,64583)"} true;
    call $1_VASPDomain_publish_vasp_domains($t10);
    if ($abort_flag) {
        assume {:print "$at(12,64537,64583)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assume Identical($t21, Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t21 == $1_Signer_$address_of($t10));

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t23, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t23 == $1_Signer_spec_address_of($t10));

    // assume Identical($t24, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t10));

    // assume Not(exists<DiemAccount::DiemAccount>($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t21);

    // opaque begin: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43

    // assume Identical($t25, Or(Or(Or(Or(Eq<address>($t21, 0), Eq<address>($t21, 1)), exists<AccountFreezing::FreezingBit>($t21)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume ($t25 == (((($IsEqual'address'($t21, 0) || $IsEqual'address'($t21, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t25) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t21, 0), Eq(7, $t9)), And(Eq<address>($t21, 1), Eq(7, $t9))), And(exists<AccountFreezing::FreezingBit>($t21), Eq(6, $t9))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t9))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t9))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume ((((($IsEqual'address'($t21, 0) && $IsEqual'num'(7, $t9)) || ($IsEqual'address'($t21, 1) && $IsEqual'num'(7, $t9))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(6, $t9))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t9))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
L5:

    // modifies global<DiemAccount::DiemAccount>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t21, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t21);
    }

    // modifies global<Event::EventHandleGenerator>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t21, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t21);
    }

    // modifies global<AccountFreezing::FreezingBit>($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t21, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t21);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t26, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t26 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t27, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t27 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t28, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t10), Roles::spec_get_role_id(Signer::spec_address_of($t10)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t28 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t10), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t10))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume AccountFreezing::spec_account_is_not_frozen($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t21);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t26, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t22, select DiemAccount::AccountOperationsCapability.creation_events($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t26, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t22, $creation_events#$1_DiemAccount_AccountOperationsCapability($t22)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t21);

    // assume Identical($t29, $t28) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t29 == $t28);

    // assume Identical($t30, $t27) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t30 == $t27);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1411:9+43
    assume {:print "$at(12,64593,64636)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::make_account($t10, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // assume Identical($t31, Signer::spec_address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1025:9+60
    assume {:print "$at(12,45537,45597)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t10));

    // DiemAccount::add_currencies_for_account<#0>($t10, $t4) on_abort goto L2 with $t9 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1412:9+67
    assume {:print "$at(12,64646,64713)"} true;
    call $1_DiemAccount_add_currencies_for_account'#0'($t10, $t4);
    if ($abort_flag) {
        assume {:print "$at(12,64646,64713)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(32,12):", $t9} $t9 == $t9;
        goto L2;
    }

    // assert exists<VASPDomain::VASPDomains>(Signer::$address_of($t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1414:13+72
    assume {:print "$at(12,64742,64814)"} true;
    assert {:msg "assert_failed(12,64742,64814): unknown assertion failed"}
      $ResourceExists($1_VASPDomain_VASPDomains_$memory, $1_Signer_$address_of($t10));

    // assert Roles::spec_has_treasury_compliance_role_addr(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1415:13+90
    assume {:print "$at(12,64827,64917)"} true;
    assert {:msg "assert_failed(12,64827,64917): unknown assertion failed"}
      $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    assume {:print "$at(12,64932,64933)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
L2:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1417:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_validator_account [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2177:5+667
procedure {:inline 1} $1_DiemAccount_create_validator_account(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int)) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $signer;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_DiemAccount_AccountOperationsCapability;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: $1_DiemAccount_AccountOperationsCapability;
    var $t21: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t22: $1_DiemAccount_CreateAccountEvent;
    var $t23: $1_DiemAccount_CreateAccountEvent;
    var $t24: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2177:5+1
    assume {:print "$at(12,97962,97963)"} true;
    assume {:print "$track_local(32,15,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2177:5+1
    assume {:print "$track_local(32,15,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2177:5+1
    assume {:print "$track_local(32,15,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2177:5+1
    assume {:print "$track_local(32,15,3):", $t3} $t3 == $t3;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
    assume {:print "$at(12,98188,98223)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
    assume {:print "$at(12,98188,98223)"} true;
    assume {:print "$track_abort(32,15):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2183:9+35

    // $t9 := DiemAccount::create_signer($t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2184:27+34
    assume {:print "$at(12,98251,98285)"} true;
    call $t9 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,98251,98285)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[new_account]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2184:13+11
    assume {:print "$track_local(32,15,4):", $t9} $t9 == $t9;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // Roles::new_validator_role($t0, $t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2186:9+51
    assume {:print "$at(12,98399,98450)"} true;
    call $1_Roles_new_validator_role($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(12,98399,98450)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // Event::publish_generator($t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2187:9+38
    assume {:print "$at(12,98460,98498)"} true;
    call $1_Event_publish_generator($t9);
    if ($abort_flag) {
        assume {:print "$at(12,98460,98498)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:75:9+64
    assume {:print "$at(38,2916,2980)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t9));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume Identical($t14, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/Roles.move:590:9+44
    assume {:print "$at(28,26179,26223)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t9));

    // ValidatorConfig::publish($t9, $t0, $t3) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2188:9+62
    assume {:print "$at(12,98508,98570)"} true;
    call $1_ValidatorConfig_publish($t9, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,98508,98570)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,15):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t15, Signer::$address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t15 == $1_Signer_$address_of($t9));

    // assume Identical($t16, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t16 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t17, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t9));

    // assume Identical($t18, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t18 == $1_Signer_spec_address_of($t9));

    // assume Not(exists<DiemAccount::DiemAccount>($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    assume {:print "$at(12,98580,98623)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t15);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t15);

    // opaque begin: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43

    // assume Identical($t19, Or(Or(Or(Or(Eq<address>($t15, 0), Eq<address>($t15, 1)), exists<AccountFreezing::FreezingBit>($t15)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    assume ($t19 == (((($IsEqual'address'($t15, 0) || $IsEqual'address'($t15, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t15)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t19) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    if ($t19) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t15, 0), Eq(7, $t8)), And(Eq<address>($t15, 1), Eq(7, $t8))), And(exists<AccountFreezing::FreezingBit>($t15), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    assume ((((($IsEqual'address'($t15, 0) && $IsEqual'num'(7, $t8)) || ($IsEqual'address'($t15, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t15) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    assume {:print "$at(12,98580,98623)"} true;
    assume {:print "$track_abort(32,15):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
L5:

    // modifies global<DiemAccount::DiemAccount>($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t15, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t15);
    }

    // modifies global<Event::EventHandleGenerator>($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t15, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t15);
    }

    // modifies global<AccountFreezing::FreezingBit>($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t15, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t15);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t20, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t20 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t21, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t21 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t22, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t9), Roles::spec_get_role_id(Signer::spec_address_of($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t22 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t9), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t9))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t15);

    // assume AccountFreezing::spec_account_is_not_frozen($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t15);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t20, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t16, select DiemAccount::AccountOperationsCapability.creation_events($t16))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t20, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t16, $creation_events#$1_DiemAccount_AccountOperationsCapability($t16)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t15);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t15) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t15);

    // assume Identical($t23, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t23 == $t22);

    // assume Identical($t24, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t24 == $t21);

    // emit_event($t23, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2189:9+43
    assume {:print "$at(12,98580,98623)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t24, $t23);

    // opaque end: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2190:5+1
    assume {:print "$at(12,98628,98629)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2190:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2190:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2190:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun DiemAccount::create_validator_operator_account [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2219:5+694
procedure {:inline 1} $1_DiemAccount_create_validator_operator_account(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: Vec (int)) returns ()
{
    // declare local variables
    var $t4: $signer;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $signer;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_DiemAccount_AccountOperationsCapability;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: $1_DiemAccount_AccountOperationsCapability;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t24: $1_DiemAccount_CreateAccountEvent;
    var $t25: $1_DiemAccount_CreateAccountEvent;
    var $t26: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'$1_AccountFreezing_FreezingBit': $1_AccountFreezing_FreezingBit;
    var $temp_0'$1_DiemAccount_AccountOperationsCapability': $1_DiemAccount_AccountOperationsCapability;
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Event_EventHandleGenerator': $1_Event_EventHandleGenerator;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2219:5+1
    assume {:print "$at(12,99764,99765)"} true;
    assume {:print "$track_local(32,16,0):", $t0} $t0 == $t0;

    // trace_local[new_account_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2219:5+1
    assume {:print "$track_local(32,16,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2219:5+1
    assume {:print "$track_local(32,16,2):", $t2} $t2 == $t2;

    // trace_local[human_name]($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2219:5+1
    assume {:print "$track_local(32,16,3):", $t3} $t3 == $t3;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
    assume {:print "$at(12,99999,100034)"} true;

    // assume Identical($t7, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
    assume ($t7 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
L4:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8)), And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 0), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t8)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 0) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
    assume {:print "$at(12,99999,100034)"} true;
    assume {:print "$track_abort(32,16):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35
L3:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2225:9+35

    // $t9 := DiemAccount::create_signer($t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2226:27+34
    assume {:print "$at(12,100062,100096)"} true;
    call $t9 := $1_DiemAccount_create_signer($t1);
    if ($abort_flag) {
        assume {:print "$at(12,100062,100096)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,16):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[new_account]($t9) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2226:13+11
    assume {:print "$track_local(32,16,4):", $t9} $t9 == $t9;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // Roles::new_validator_operator_role($t0, $t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2228:9+60
    assume {:print "$at(12,100211,100271)"} true;
    call $1_Roles_new_validator_operator_role($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(12,100211,100271)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,16):", $t8} $t8 == $t8;
        goto L2;
    }

    // Event::publish_generator($t9) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2229:9+38
    assume {:print "$at(12,100281,100319)"} true;
    call $1_Event_publish_generator($t9);
    if ($abort_flag) {
        assume {:print "$at(12,100281,100319)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,16):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/Roles.move:598:9+44
    assume {:print "$at(28,26510,26554)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t9));

    // assume Identical($t14, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:44:9+82
    assume {:print "$at(39,1550,1632)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t9));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/Roles.move:598:9+44
    assume {:print "$at(28,26510,26554)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t9));

    // ValidatorOperatorConfig::publish($t9, $t0, $t3) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2230:9+70
    assume {:print "$at(12,100329,100399)"} true;
    call $1_ValidatorOperatorConfig_publish($t9, $t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(12,100329,100399)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(32,16):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t17, Signer::$address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1111:9+55
    assume {:print "$at(12,49294,49349)"} true;
    assume ($t17 == $1_Signer_$address_of($t9));

    // assume Identical($t18, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1125:9+69
    assume {:print "$at(12,50195,50264)"} true;
    assume ($t18 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t19, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2283:9+44
    assume {:print "$at(12,102934,102978)"} true;
    assume ($t19 == $1_Signer_spec_address_of($t9));

    // assume Identical($t20, Signer::spec_address_of($t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2313:9+44
    assume {:print "$at(12,104522,104566)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t9));

    // assume Not(exists<DiemAccount::DiemAccount>($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    assume {:print "$at(12,100409,100452)"} true;
    assume !$ResourceExists($1_DiemAccount_DiemAccount_$memory, $t17);

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume exists<Roles::RoleId>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    assume $ResourceExists($1_Roles_RoleId_$memory, $t17);

    // opaque begin: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43

    // assume Identical($t21, Or(Or(Or(Or(Eq<address>($t17, 0), Eq<address>($t17, 1)), exists<AccountFreezing::FreezingBit>($t17)), And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    assume ($t21 == (((($IsEqual'address'($t17, 0) || $IsEqual'address'($t17, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t17)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)));

    // if ($t21) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    if ($t21) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
L6:

    // assume Or(Or(Or(Or(And(Eq<address>($t17, 0), Eq(7, $t8)), And(Eq<address>($t17, 1), Eq(7, $t8))), And(exists<AccountFreezing::FreezingBit>($t17), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis(), Not(exists<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    assume ((((($IsEqual'address'($t17, 0) && $IsEqual'num'(7, $t8)) || ($IsEqual'address'($t17, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t17) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    assume {:print "$at(12,100409,100452)"} true;
    assume {:print "$track_abort(32,16):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
L5:

    // modifies global<DiemAccount::DiemAccount>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t17, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t17);
    }

    // modifies global<Event::EventHandleGenerator>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Event_EventHandleGenerator';
        $1_Event_EventHandleGenerator_$memory := $ResourceUpdate($1_Event_EventHandleGenerator_$memory, $t17, $temp_0'$1_Event_EventHandleGenerator');
    } else {
        $1_Event_EventHandleGenerator_$memory := $ResourceRemove($1_Event_EventHandleGenerator_$memory, $t17);
    }

    // modifies global<AccountFreezing::FreezingBit>($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountFreezing_FreezingBit';
        $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $t17, $temp_0'$1_AccountFreezing_FreezingBit');
    } else {
        $1_AccountFreezing_FreezingBit_$memory := $ResourceRemove($1_AccountFreezing_FreezingBit_$memory, $t17);
    }

    // modifies global<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_AccountOperationsCapability';
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceUpdate($1_DiemAccount_AccountOperationsCapability_$memory, 173345816, $temp_0'$1_DiemAccount_AccountOperationsCapability');
    } else {
        $1_DiemAccount_AccountOperationsCapability_$memory := $ResourceRemove($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);
    }

    // assume Identical($t22, global<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1126:9+79
    assume {:print "$at(12,50273,50352)"} true;
    assume ($t22 == $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Identical($t23, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t23 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t24, pack DiemAccount::CreateAccountEvent(Signer::spec_address_of($t9), Roles::spec_get_role_id(Signer::spec_address_of($t9)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t24 == $1_DiemAccount_CreateAccountEvent($1_Signer_spec_address_of($t9), $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t9))));

    // assume exists<DiemAccount::AccountOperationsCapability>(a550c18) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816);

    // assume DiemAccount::$exists_at($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t17);

    // assume AccountFreezing::spec_account_is_not_frozen($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, $t17);

    // assume Eq<DiemAccount::AccountOperationsCapability>($t22, update DiemAccount::AccountOperationsCapability.creation_events<DiemAccount::AccountOperationsCapability>($t18, select DiemAccount::AccountOperationsCapability.creation_events($t18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $IsEqual'$1_DiemAccount_AccountOperationsCapability'($t22, $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events($t18, $creation_events#$1_DiemAccount_AccountOperationsCapability($t18)));

    // assume DiemAccount::spec_holds_own_key_rotation_cap($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, $t17);

    // assume DiemAccount::spec_holds_own_withdraw_cap($t17) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t17);

    // assume Identical($t25, $t24) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t25 == $t24);

    // assume Identical($t26, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume ($t26 == $t23);

    // emit_event($t25, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2231:9+43
    assume {:print "$at(12,100409,100452)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, $t26, $t25);

    // opaque end: DiemAccount::make_account($t9, $t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2232:5+1
    assume {:print "$at(12,100457,100458)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2232:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2232:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2232:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:244:9+111
function {:inline} $1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory: $Memory $1_RecoveryAddress_RecoveryAddress, addr: int): bool {
    $ResourceExists($1_RecoveryAddress_RecoveryAddress_$memory, addr)
}

// struct RecoveryAddress::RecoveryAddress at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:17:5+91
type {:datatype} $1_RecoveryAddress_RecoveryAddress;
function {:constructor} $1_RecoveryAddress_RecoveryAddress($rotation_caps: Vec ($1_DiemAccount_KeyRotationCapability)): $1_RecoveryAddress_RecoveryAddress;
function {:inline} $Update'$1_RecoveryAddress_RecoveryAddress'_rotation_caps(s: $1_RecoveryAddress_RecoveryAddress, x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_RecoveryAddress_RecoveryAddress {
    $1_RecoveryAddress_RecoveryAddress(x)
}
function $IsValid'$1_RecoveryAddress_RecoveryAddress'(s: $1_RecoveryAddress_RecoveryAddress): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($rotation_caps#$1_RecoveryAddress_RecoveryAddress(s))
}
function {:inline} $IsEqual'$1_RecoveryAddress_RecoveryAddress'(s1: $1_RecoveryAddress_RecoveryAddress, s2: $1_RecoveryAddress_RecoveryAddress): bool {
    s1 == s2
}
var $1_RecoveryAddress_RecoveryAddress_$memory: $Memory $1_RecoveryAddress_RecoveryAddress;

// fun AccountCreationScripts::create_child_vasp_account [verification] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
procedure {:timeLimit 40} $1_AccountCreationScripts_create_child_vasp_account$verify(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: bool, _$t4: int) returns ()
{
    // declare local variables
    var $t5: $1_DiemAccount_WithdrawCapability;
    var $t6: int;
    var $t7: $1_DiemAccount_WithdrawCapability;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_FixedPoint32_FixedPoint32;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: $1_DiemAccount_WithdrawCapability;
    var $t22: bool;
    var $t23: Vec (int);
    var $t24: Vec (int);
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t29: $1_DiemAccount_ReceivedPaymentEvent;
    var $t30: int;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t32: $1_DiemAccount_SentPaymentEvent;
    var $t33: $1_FixedPoint32_FixedPoint32;
    var $t34: bool;
    var $t35: $1_DiemAccount_ReceivedPaymentEvent;
    var $t36: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t37: $1_DiemAccount_SentPaymentEvent;
    var $t38: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t39: int;
    var $t40: bool;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#262: $Memory $1_Roles_RoleId;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_VASP_ChildVASP_$memory#264: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#265: $Memory $1_VASP_ParentVASP;
    var $1_Diem_CurrencyInfo'#0'_$memory#266: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#271: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#272: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#273: $Memory $1_DiemAccount_DiemAccount;
    var $1_DualAttestation_Limit_$memory#274: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#275: $Memory $1_DualAttestation_Credential;
    var $1_DiemAccount_Balance'#0'_$memory#276: $Memory $1_DiemAccount_Balance'#0';
    var $1_AccountLimits_Window'#0'_$memory#277: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#278: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemAccount_DiemAccount_$memory#280: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#281: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#282: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#283: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,6079,6934)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'bool'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:94:9+55
    assume {:print "$at(3,7218,7273)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, DiemAccount::spec_get_withdraw_cap($t6)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:95:9+65
    assume {:print "$at(3,7282,7347)"} true;
    assume ($t7 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t6));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t11 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:891:9+32
    assume {:print "$at(12,39468,39500)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @263 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @262 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#262 := $1_Roles_RoleId_$memory;

    // @268 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @270 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @266 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#266 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @278 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'#0'_$memory#278 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @277 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'#0'_$memory#277 := $1_AccountLimits_Window'#0'_$memory;

    // @264 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#264 := $1_VASP_ChildVASP_$memory;

    // @265 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#265 := $1_VASP_ParentVASP_$memory;

    // @275 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Credential_$memory#275 := $1_DualAttestation_Credential_$memory;

    // @274 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Limit_$memory#274 := $1_DualAttestation_Limit_$memory;

    // @271 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#271 := $1_AccountFreezing_FreezingBit_$memory;

    // @273 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#273 := $1_DiemAccount_DiemAccount_$memory;

    // @272 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#272 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @267 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @269 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // @276 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'#0'_$memory#276 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[parent_vasp]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$at(3,6079,6080)"} true;
    assume {:print "$track_local(37,0,0):", $t0} $t0 == $t0;

    // trace_local[child_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,2):", $t2} $t2 == $t2;

    // trace_local[add_all_currencies]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,3):", $t3} $t3 == $t3;

    // trace_local[child_initial_balance]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,4):", $t4} $t4 == $t4;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_child_vasp_account<#0>($t0, $t1, $t2, $t3) on_abort goto L4 with $t17 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:71:9+173
    assume {:print "$at(3,6318,6491)"} true;
    call $1_DiemAccount_create_child_vasp_account'#0'($t0, $t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(3,6318,6491)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;
        goto L4;
    }

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:37+1
    assume {:print "$at(3,6599,6600)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := >($t4, $t18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:35+1
    call $t19 := $Gt($t4, $t18);

    // if ($t19) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
    if ($t19) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:80+12
    assume {:print "$at(3,6683,6695)"} true;
L0:

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // $t21 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume {:print "$at(3,6642,6696)"} true;

    // assume Identical($t22, Or(Not(DiemAccount::$exists_at($t20)), DiemAccount::spec_holds_delegated_withdraw_capability($t20))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume ($t22 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t20)));

    // if ($t22) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
L6:

    // assume Or(And(Not(DiemAccount::$exists_at($t20)), Eq(5, $t17)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t20), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20) && $IsEqual'num'(5, $t17)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t20) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume {:print "$at(3,6642,6696)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    goto L4;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
L5:

    // @280 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    $1_DiemAccount_DiemAccount_$memory#280 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t20, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t20);
    }

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t21);

    // assume exists<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume Eq<DiemAccount::WithdrawCapability>($t21, DiemAccount::spec_get_withdraw_cap[@280]($t20)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t21, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#280, $t20));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t20), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@280]<DiemAccount::DiemAccount>($t20), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t20), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t20);

    // $t21 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54

    // trace_local[vasp_withdrawal_cap]($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:17+19
    assume {:print "$track_local(37,0,5):", $t21} $t21 == $t21;

    // $t23 := [] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:81:77+3
    assume {:print "$at(3,6819,6822)"} true;
    $t23 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t23);

    // $t24 := [] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:81:82+3
    $t24 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t24);

    // assume Identical($t25, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:832:9+32
    assume {:print "$at(12,36976,37008)"} true;
    assume ($t25 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t26, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t26 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t27, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t27 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t28, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t28 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t29, pack DiemAccount::ReceivedPaymentEvent($t4, Diem::spec_currency_code<#0>(), $t27, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t29 == $1_DiemAccount_ReceivedPaymentEvent($t4, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t27, $t23));

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t31, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t30))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t31 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t30)));

    // assume Identical($t32, pack DiemAccount::SentPaymentEvent($t4, Diem::spec_currency_code<#0>(), $t1, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t32 == $1_DiemAccount_SentPaymentEvent($t4, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t23));

    // assume Identical($t33, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t33 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // opaque begin: DiemAccount::pay_from<#0>($t21, $t1, $t4, $t23, $t24) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume {:print "$at(3,6710,6841)"} true;

    // assume Identical($t34, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t4, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t4, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t4), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t4), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t1), Gt(Add(DiemAccount::$balance<#0>($t1), $t4), MaxU64()))), Not(DiemAccount::$exists_at($t26))), Not(exists<DiemAccount::Balance<#0>>($t26))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<#0>())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t4, VASP::spec_parent_address($t26)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t26))), $t4)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t26)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), $t4), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), Not(DiemTimestamp::$is_operating())))), And(Eq<num>(Len<u8>($t24), 0), Not(DualAttestation::spec_is_published()))), And(Eq<num>(Len<u8>($t24), 0), Not(Diem::spec_is_currency<#0>()))), And(Eq<num>(Len<u8>($t24), 0), Gt(FixedPoint32::spec_multiply_u64($t4, $t33), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid($t25, $t1, $t24, $t23, $t4)))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t34 == (((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t4, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t4) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t26)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t26)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t26))) < $t4)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t26)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) + $t4) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || ($IsEqual'num'(LenVec($t24), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) || ($IsEqual'num'(LenVec($t24), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || ($IsEqual'num'(LenVec($t24), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t33) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t25, $t1, $t24, $t23, $t4))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))));

    // if ($t34) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    if ($t34) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t17)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t17))), And(Eq<u64>($t4, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t4, VASP::spec_parent_address($t1)))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t4), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t4), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t1), Gt(Add(DiemAccount::$balance<#0>($t1), $t4), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at($t26)), Eq(5, $t17))), And(Not(exists<DiemAccount::Balance<#0>>($t26)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t4, VASP::spec_parent_address($t26))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t26))), $t4), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen($t26), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), $t4), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t26)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Not(DualAttestation::spec_is_published())), Eq(5, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Not(Diem::spec_is_currency<#0>())), Eq(5, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Gt(FixedPoint32::spec_multiply_u64($t4, $t33), 18446744073709551615)), Eq(8, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))), Eq(1, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))), Eq(1, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid($t25, $t1, $t24, $t23, $t4))), Eq(7, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<#0>($t25, $t1, $t4)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))), Eq(5, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) && $IsEqual'num'(7, $t17)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t4, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t4) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t26) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t26) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t26))) < $t4) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t26) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) + $t4) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) && $IsEqual'num'(5, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'num'(5, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t33) > 18446744073709551615)) && $IsEqual'num'(8, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t25, $t1, $t24, $t23, $t4)) && $IsEqual'num'(7, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume {:print "$at(3,6710,6841)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    goto L4;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
L7:

    // @281 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $1_DiemAccount_DiemAccount_$memory#281 := $1_DiemAccount_DiemAccount_$memory;

    // @282 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $1_DiemAccount_Balance'#0'_$memory#282 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::DiemAccount>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t25, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t25);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<DiemAccount::Balance<#0>>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t25, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t25);
    }

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t25)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t25), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t25));
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume DiemAccount::$exists_at($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t25);

    // assume DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<#0>>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t25);

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.withdraw_capability(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.sent_events(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.received_events(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@281]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@281]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t1)));

    // assume Implies(Eq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<#0>($t26), DiemAccount::$balance[@282]<#0>($t26))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t26), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#282, $t26)));

    // assume Implies(Neq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<#0>($t26), Sub(DiemAccount::$balance[@282]<#0>($t26), $t4))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume (!$IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t26), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#282, $t26) - $t4)));

    // assume Implies(Neq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@282]<#0>($t1), $t4))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume (!$IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#282, $t1) + $t4)));

    // assume Identical($t35, $t29) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t35 == $t29);

    // assume Identical($t36, $t28) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t36 == $t28);

    // emit_event($t35, $t36) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t36, $t35);

    // assume Identical($t37, $t32) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t37 == $t32);

    // assume Identical($t38, $t31) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t38 == $t31);

    // emit_event($t37, $t38) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t38, $t37);

    // opaque end: DiemAccount::pay_from<#0>($t21, $t1, $t4, $t23, $t24) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131

    // assume Identical($t39, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t39 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // opaque begin: DiemAccount::restore_withdraw_capability($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume {:print "$at(3,6855,6916)"} true;

    // assume Identical($t40, Or(Not(DiemAccount::$exists_at($t39)), Not(DiemAccount::$delegated_withdraw_capability($t39)))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume ($t40 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t39) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t39)));

    // if ($t40) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    if ($t40) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
L10:

    // assume Or(And(Not(DiemAccount::$exists_at($t39)), Eq(5, $t17)), And(Not(DiemAccount::$delegated_withdraw_capability($t39)), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t39) && $IsEqual'num'(5, $t17)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t39) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume {:print "$at(3,6855,6916)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    goto L4;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
L9:

    // @283 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    $1_DiemAccount_DiemAccount_$memory#283 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t39) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t39, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t39);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t39), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@283]<DiemAccount::DiemAccount>($t39), Option::spec_some<DiemAccount::WithdrawCapability>($t21))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t39), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#283, $t39), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t21)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t39) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t39);

    // opaque end: DiemAccount::restore_withdraw_capability($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:84:10+1
    assume {:print "$at(3,6927,6928)"} true;
L2:

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:85:5+1
    assume {:print "$at(3,6933,6934)"} true;
L3:

    // assert Not(exists[@262]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+84
    assume {:print "$at(12,68230,68314)"} true;
    assert {:msg "assert_failed(12,68230,68314): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#262, $t1);

    // assert Not(Not(DiemTimestamp::$is_operating[@263]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263);

    // assert Not(Not(exists[@262]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5);

    // assert Not(VASP::$is_vasp[@264, @265]($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:99:9+61
    assume {:print "$at(35,4796,4857)"} true;
    assert {:msg "assert_failed(35,4796,4857): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1);

    // assert Not(Not(VASP::$is_parent[@265]($t9))) at /home/ying/diem/language/diem-framework/modules/VASP.move:100:9+64
    assume {:print "$at(35,4866,4930)"} true;
    assert {:msg "assert_failed(35,4866,4930): function does not abort under this condition"}
      !!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9);

    // assert Not(Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536)) at /home/ying/diem/language/diem-framework/modules/VASP.move:101:9+94
    assume {:print "$at(35,4939,5033)"} true;
    assert {:msg "assert_failed(35,4939,5033): function does not abort under this condition"}
      !(($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536);

    // assert Not(Not(exists[@262]<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t10);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5);

    // assert Not(Not(Diem::spec_is_currency[@266]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266);

    // assert Not(And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268));

    // assert Not(And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270));

    // assert Not(Eq<address>($t1, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t1, 0);

    // assert Not(Eq<address>($t1, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t1, 1);

    // assert Not(exists[@271]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert Not(Gt($t4, MaxU64())) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:98:9+72
    assume {:print "$at(3,7497,7569)"} true;
    assert {:msg "assert_failed(3,7497,7569): function does not abort under this condition"}
      !($t4 > $MAX_U64);

    // assert Not(And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6));

    // assert Not(And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !(($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]())))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:335:9+58
    assume {:print "$at(22,14695,14753)"} true;
    assert {:msg "assert_failed(22,14695,14753): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274)));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<#0>())))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266)));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615)))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:75:9+83
    assume {:print "$at(46,3503,3586)"} true;
    assert {:msg "assert_failed(46,3503,3586): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615)));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:418:9+114
    assume {:print "$at(22,18455,18569)"} true;
    assert {:msg "assert_failed(22,18455,18569): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+101
    assume {:print "$at(22,18578,18679)"} true;
    assert {:msg "assert_failed(22,18578,18679): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+136
    assume {:print "$at(22,18688,18824)"} true;
    assert {:msg "assert_failed(22,18688,18824): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4)));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:152:9+64
    assume {:print "$at(22,6999,7063)"} true;
    assert {:msg "assert_failed(22,6999,7063): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<#0>>($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:894:9+68
    assume {:print "$at(12,39694,39762)"} true;
    assert {:msg "assert_failed(12,39694,39762): function does not abort under this condition"}
      !(($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#276, $t12));

    // assert Not(And(Gt($t4, 0), Eq<u64>($t4, 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !(($t4 > 0) && $IsEqual'u64'($t4, 0));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<#0>($t4, VASP::spec_parent_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $1_AccountLimits_Window'#0'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]()))))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))));

    // assert Not(And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t4 > 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266));

    // assert Not(And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<#0>>($t12))), $t4))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !(($t4 > 0) && ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#276, $t12))) < $t4));

    // assert Not(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263));

    // assert Not(And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !(($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12));

    // assert Not(Not(exists[@262]<Roles::RoleId>($t13))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t13);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1498:9+30
    assume {:print "$at(12,68750,68780)"} true;
    assert {:msg "assert_failed(12,68750,68780): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Roles::spec_has_child_VASP_role_addr($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1499:9+57
    assume {:print "$at(12,68789,68846)"} true;
    assert {:msg "assert_failed(12,68789,68846): post-condition does not hold"}
      $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, $t1);

    // assert Eq<u64>(VASP::spec_num_children($t6), Add(VASP::spec_num_children[@265]($t6), 1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:107:9+82
    assume {:print "$at(35,5150,5232)"} true;
    assert {:msg "assert_failed(35,5150,5232): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $t6), ($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t6) + 1));

    // assert VASP::$is_child($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:108:9+29
    assume {:print "$at(35,5241,5270)"} true;
    assert {:msg "assert_failed(35,5241,5270): post-condition does not hold"}
      $1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t1);

    // assert Eq<address>(VASP::spec_parent_address($t1), $t6) at /home/ying/diem/language/diem-framework/modules/VASP.move:109:9+55
    assume {:print "$at(35,5279,5334)"} true;
    assert {:msg "assert_failed(35,5279,5334): post-condition does not hold"}
      $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $t6);

    // assert Eq<u64>(DiemAccount::$balance<#0>($t1), $t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:119:9+79
    assume {:print "$at(3,8419,8498)"} true;
    assert {:msg "assert_failed(3,8419,8498): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), $t4);

    // assert Eq<u64>(DiemAccount::$balance<#0>($t6), Sub(DiemAccount::$balance[@276]<#0>($t6), $t4)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:120:9+140
    assume {:print "$at(3,8507,8647)"} true;
    assert {:msg "assert_failed(3,8507,8647): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t6), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#276, $t6) - $t4));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:120:9+140
    return;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:85:5+1
    assume {:print "$at(3,6933,6934)"} true;
L4:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@262]<Roles::RoleId>($t1), Not(DiemTimestamp::$is_operating[@263]())), Not(exists[@262]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5)), VASP::$is_vasp[@264, @265]($t1)), Not(VASP::$is_parent[@265]($t9))), Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536)), Not(exists[@262]<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5)), Not(Diem::spec_is_currency[@266]<#0>())), And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>()))), And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>()))), Eq<address>($t1, 0)), Eq<address>($t1, 1)), exists[@271]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32)), Gt($t4, MaxU64())), And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6)))), And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]())))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<#0>())))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615)))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<#0>>($t12)))), And(Gt($t4, 0), Eq<u64>($t4, 0))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<#0>($t4, VASP::spec_parent_address[@264, @265]($t1)))))), And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]()))))), And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<#0>()))), And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<#0>>($t12))), $t4))), And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))), And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12))), Not(exists[@262]<Roles::RoleId>($t13))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    assume {:print "$at(3,6940,9487)"} true;
    assert {:msg "assert_failed(3,6940,9487): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#262, $t1) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5)) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)) || !$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9)) || (($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536)) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266)) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268))) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270))) || $IsEqual'address'($t1, 0)) || $IsEqual'address'($t1, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)) || ($t4 > $MAX_U64)) || (($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6))) || (($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274)))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266)))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615)))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4)))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#276, $t12))) || (($t4 > 0) && $IsEqual'u64'($t4, 0))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $1_AccountLimits_Window'#0'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))))) || (($t4 > 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266))) || (($t4 > 0) && ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#276, $t12))) < $t4))) || (($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) || (($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12))) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t13)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@262]<Roles::RoleId>($t1), Eq(6, $t17)), And(Not(DiemTimestamp::$is_operating[@263]()), Eq(1, $t17))), And(Not(exists[@262]<Roles::RoleId>($t8)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5), Eq(3, $t17))), And(VASP::$is_vasp[@264, @265]($t1), Eq(6, $t17))), And(Not(VASP::$is_parent[@265]($t9)), Eq(7, $t17))), And(Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536), Eq(8, $t17))), And(Not(exists[@262]<Roles::RoleId>($t10)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5), Eq(3, $t17))), And(Not(Diem::spec_is_currency[@266]<#0>()), Eq(5, $t17))), And(And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>())), Eq(5, $t17))), And(And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>())), Eq(5, $t17))), And(Eq<address>($t1, 0), Eq(7, $t17))), And(Eq<address>($t1, 1), Eq(7, $t17))), And(exists[@271]<AccountFreezing::FreezingBit>($t1), Eq(6, $t17))), And(And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t17))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t17))), And(Gt($t4, MaxU64()), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6))), Eq(5, $t17))), And(And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6)), Eq(1, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]()))), Eq(5, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<#0>()))), Eq(5, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615))), Eq(8, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(1, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(1, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4)))), Eq(7, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<#0>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(5, $t17))), And(And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<#0>>($t12))), Eq(5, $t17))), And(And(Gt($t4, 0), Eq<u64>($t4, 0)), Eq(7, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<#0>($t4, VASP::spec_parent_address[@264, @265]($t1))))), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]())), Eq(1, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))))), Eq(5, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))))))), Eq(5, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<#0>(global[@277]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]())))), Eq(1, $t17))), And(And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<#0>())), Eq(5, $t17))), And(And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<#0>>($t12))), $t4)), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]())), Eq(1, $t17))), And(And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12)), Eq(1, $t17))), And(Not(exists[@262]<Roles::RoleId>($t13)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5), Eq(3, $t17))), Eq(3, $t17)), Eq(6, $t17)), Eq(8, $t17)), Eq(5, $t17)), Eq(1, $t17)), Eq(7, $t17)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    assert {:msg "assert_failed(3,6940,9487): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#262, $t1) && $IsEqual'num'(6, $t17)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t8) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5) && $IsEqual'num'(3, $t17))) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1) && $IsEqual'num'(6, $t17))) || (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9) && $IsEqual'num'(7, $t17))) || ((($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536) && $IsEqual'num'(8, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t10) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5) && $IsEqual'num'(3, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266) && $IsEqual'num'(5, $t17))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268)) && $IsEqual'num'(5, $t17))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270)) && $IsEqual'num'(5, $t17))) || ($IsEqual'address'($t1, 0) && $IsEqual'num'(7, $t17))) || ($IsEqual'address'($t1, 1) && $IsEqual'num'(7, $t17))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1) && $IsEqual'num'(6, $t17))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816)) && $IsEqual'num'(5, $t17))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t17))) || (($t4 > $MAX_U64) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4))) && $IsEqual'num'(7, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#276, $t12)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && $IsEqual'u64'($t4, 0)) && $IsEqual'num'(7, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $1_AccountLimits_Window'#0'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#278, $ResourceValue($1_AccountLimits_Window'#0'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#266)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#276, $t12))) < $t4)) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12)) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t13) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5) && $IsEqual'num'(3, $t17))) || $IsEqual'num'(3, $t17)) || $IsEqual'num'(6, $t17)) || $IsEqual'num'(8, $t17)) || $IsEqual'num'(5, $t17)) || $IsEqual'num'(1, $t17)) || $IsEqual'num'(7, $t17));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_child_vasp_account [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
procedure {:timeLimit 40} $1_AccountCreationScripts_create_child_vasp_account$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: bool, _$t4: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t5: $1_DiemAccount_WithdrawCapability;
    var $t6: int;
    var $t7: $1_DiemAccount_WithdrawCapability;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_FixedPoint32_FixedPoint32;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: $1_DiemAccount_WithdrawCapability;
    var $t22: bool;
    var $t23: Vec (int);
    var $t24: Vec (int);
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t29: $1_DiemAccount_ReceivedPaymentEvent;
    var $t30: int;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t32: $1_DiemAccount_SentPaymentEvent;
    var $t33: $1_FixedPoint32_FixedPoint32;
    var $t34: bool;
    var $t35: $1_DiemAccount_ReceivedPaymentEvent;
    var $t36: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t37: $1_DiemAccount_SentPaymentEvent;
    var $t38: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t39: int;
    var $t40: bool;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#262: $Memory $1_Roles_RoleId;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_VASP_ChildVASP_$memory#264: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#265: $Memory $1_VASP_ParentVASP;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#271: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#272: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#273: $Memory $1_DiemAccount_DiemAccount;
    var $1_DualAttestation_Limit_$memory#274: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#275: $Memory $1_DualAttestation_Credential;
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#277: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#280: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#281: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#282: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#283: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,6079,6934)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'bool'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:94:9+55
    assume {:print "$at(3,7218,7273)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, DiemAccount::spec_get_withdraw_cap($t6)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:95:9+65
    assume {:print "$at(3,7282,7347)"} true;
    assume ($t7 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t6));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Diem::spec_xdx_exchange_rate<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t11 == $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:891:9+32
    assume {:print "$at(12,39468,39500)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @263 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @262 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#262 := $1_Roles_RoleId_$memory;

    // @268 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @270 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @266 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @278 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @277 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#277 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // @264 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#264 := $1_VASP_ChildVASP_$memory;

    // @265 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#265 := $1_VASP_ParentVASP_$memory;

    // @275 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Credential_$memory#275 := $1_DualAttestation_Credential_$memory;

    // @274 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Limit_$memory#274 := $1_DualAttestation_Limit_$memory;

    // @271 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#271 := $1_AccountFreezing_FreezingBit_$memory;

    // @273 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#273 := $1_DiemAccount_DiemAccount_$memory;

    // @272 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#272 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @267 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @269 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // @276 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // trace_local[parent_vasp]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$at(3,6079,6080)"} true;
    assume {:print "$track_local(37,0,0):", $t0} $t0 == $t0;

    // trace_local[child_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,2):", $t2} $t2 == $t2;

    // trace_local[add_all_currencies]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,3):", $t3} $t3 == $t3;

    // trace_local[child_initial_balance]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,4):", $t4} $t4 == $t4;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_child_vasp_account<XUS::XUS>($t0, $t1, $t2, $t3) on_abort goto L4 with $t17 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:71:9+173
    assume {:print "$at(3,6318,6491)"} true;
    call $1_DiemAccount_create_child_vasp_account'$1_XUS_XUS'($t0, $t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(3,6318,6491)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;
        goto L4;
    }

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:37+1
    assume {:print "$at(3,6599,6600)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := >($t4, $t18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:35+1
    call $t19 := $Gt($t4, $t18);

    // if ($t19) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
    if ($t19) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:80+12
    assume {:print "$at(3,6683,6695)"} true;
L0:

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // $t21 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume {:print "$at(3,6642,6696)"} true;

    // assume Identical($t22, Or(Not(DiemAccount::$exists_at($t20)), DiemAccount::spec_holds_delegated_withdraw_capability($t20))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume ($t22 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t20)));

    // if ($t22) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
L6:

    // assume Or(And(Not(DiemAccount::$exists_at($t20)), Eq(5, $t17)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t20), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20) && $IsEqual'num'(5, $t17)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t20) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume {:print "$at(3,6642,6696)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    goto L4;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
L5:

    // @280 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    $1_DiemAccount_DiemAccount_$memory#280 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t20, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t20);
    }

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t21);

    // assume exists<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume Eq<DiemAccount::WithdrawCapability>($t21, DiemAccount::spec_get_withdraw_cap[@280]($t20)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t21, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#280, $t20));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t20), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@280]<DiemAccount::DiemAccount>($t20), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t20), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t20);

    // $t21 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54

    // trace_local[vasp_withdrawal_cap]($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:17+19
    assume {:print "$track_local(37,0,5):", $t21} $t21 == $t21;

    // $t23 := [] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:81:77+3
    assume {:print "$at(3,6819,6822)"} true;
    $t23 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t23);

    // $t24 := [] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:81:82+3
    $t24 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t24);

    // assume Identical($t25, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:832:9+32
    assume {:print "$at(12,36976,37008)"} true;
    assume ($t25 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t26, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t26 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t27, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t27 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t28, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t28 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t29, pack DiemAccount::ReceivedPaymentEvent($t4, Diem::spec_currency_code<XUS::XUS>(), $t27, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t29 == $1_DiemAccount_ReceivedPaymentEvent($t4, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t27, $t23));

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t31, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t30))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t31 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t30)));

    // assume Identical($t32, pack DiemAccount::SentPaymentEvent($t4, Diem::spec_currency_code<XUS::XUS>(), $t1, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t32 == $1_DiemAccount_SentPaymentEvent($t4, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t1, $t23));

    // assume Identical($t33, Diem::spec_xdx_exchange_rate<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t33 == $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // opaque begin: DiemAccount::pay_from<XUS::XUS>($t21, $t1, $t4, $t23, $t24) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume {:print "$at(3,6710,6841)"} true;

    // assume Identical($t34, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<XUS::XUS>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t4, 0)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t4, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t4), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t4), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XUS::XUS>())), AccountFreezing::spec_account_is_frozen($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t1), Gt(Add(DiemAccount::$balance<XUS::XUS>($t1), $t4), MaxU64()))), Not(DiemAccount::$exists_at($t26))), Not(exists<DiemAccount::Balance<XUS::XUS>>($t26))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XUS::XUS>())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t4, VASP::spec_parent_address($t26)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t26))), $t4)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t26)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), $t4), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), Not(DiemTimestamp::$is_operating())))), And(Eq<num>(Len<u8>($t24), 0), Not(DualAttestation::spec_is_published()))), And(Eq<num>(Len<u8>($t24), 0), Not(Diem::spec_is_currency<XUS::XUS>()))), And(Eq<num>(Len<u8>($t24), 0), Gt(FixedPoint32::spec_multiply_u64($t4, $t33), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid($t25, $t1, $t24, $t23, $t4)))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t34 == (((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t4, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t1) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) + $t4) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t26)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t26)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) || ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t26))) < $t4)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t26)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) + $t4) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || ($IsEqual'num'(LenVec($t24), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) || ($IsEqual'num'(LenVec($t24), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || ($IsEqual'num'(LenVec($t24), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t33) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t25, $t1, $t24, $t23, $t4))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))));

    // if ($t34) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    if ($t34) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<XUS::XUS>>($t1)), Eq(7, $t17)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t17))), And(Eq<u64>($t4, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t4, VASP::spec_parent_address($t1)))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t4), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t4), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t1), Gt(Add(DiemAccount::$balance<XUS::XUS>($t1), $t4), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at($t26)), Eq(5, $t17))), And(Not(exists<DiemAccount::Balance<XUS::XUS>>($t26)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t4, VASP::spec_parent_address($t26))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t26))), $t4), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen($t26), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), $t4), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t26)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Not(DualAttestation::spec_is_published())), Eq(5, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Not(Diem::spec_is_currency<XUS::XUS>())), Eq(5, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Gt(FixedPoint32::spec_multiply_u64($t4, $t33), 18446744073709551615)), Eq(8, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))), Eq(1, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))), Eq(1, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid($t25, $t1, $t24, $t23, $t4))), Eq(7, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t25, $t1, $t4)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))), Eq(5, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) && $IsEqual'num'(7, $t17)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t4, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t1) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) + $t4) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t26) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t26) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t26))) < $t4) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t26) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) + $t4) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) && $IsEqual'num'(5, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(5, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t33) > 18446744073709551615)) && $IsEqual'num'(8, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t25, $t1, $t24, $t23, $t4)) && $IsEqual'num'(7, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume {:print "$at(3,6710,6841)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    goto L4;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
L7:

    // @281 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $1_DiemAccount_DiemAccount_$memory#281 := $1_DiemAccount_DiemAccount_$memory;

    // @282 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#282 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // modifies global<DiemAccount::DiemAccount>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t25, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t25);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t25, $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t25);
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t25)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t25), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t25));
    }

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume DiemAccount::$exists_at($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t25);

    // assume DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<XUS::XUS>>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t25);

    // assume exists<DiemAccount::Balance<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.withdraw_capability(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.sent_events(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.received_events(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@281]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@281]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t1)));

    // assume Implies(Eq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t26), DiemAccount::$balance[@282]<XUS::XUS>($t26))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t26), $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#282, $t26)));

    // assume Implies(Neq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t26), Sub(DiemAccount::$balance[@282]<XUS::XUS>($t26), $t4))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume (!$IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t26), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#282, $t26) - $t4)));

    // assume Implies(Neq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t1), Add(DiemAccount::$balance[@282]<XUS::XUS>($t1), $t4))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume (!$IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#282, $t1) + $t4)));

    // assume Identical($t35, $t29) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t35 == $t29);

    // assume Identical($t36, $t28) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t36 == $t28);

    // emit_event($t35, $t36) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t36, $t35);

    // assume Identical($t37, $t32) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t37 == $t32);

    // assume Identical($t38, $t31) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t38 == $t31);

    // emit_event($t37, $t38) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t38, $t37);

    // opaque end: DiemAccount::pay_from<XUS::XUS>($t21, $t1, $t4, $t23, $t24) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131

    // assume Identical($t39, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t39 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // opaque begin: DiemAccount::restore_withdraw_capability($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume {:print "$at(3,6855,6916)"} true;

    // assume Identical($t40, Or(Not(DiemAccount::$exists_at($t39)), Not(DiemAccount::$delegated_withdraw_capability($t39)))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume ($t40 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t39) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t39)));

    // if ($t40) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    if ($t40) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
L10:

    // assume Or(And(Not(DiemAccount::$exists_at($t39)), Eq(5, $t17)), And(Not(DiemAccount::$delegated_withdraw_capability($t39)), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t39) && $IsEqual'num'(5, $t17)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t39) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume {:print "$at(3,6855,6916)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    goto L4;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
L9:

    // @283 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    $1_DiemAccount_DiemAccount_$memory#283 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t39) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t39, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t39);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t39), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@283]<DiemAccount::DiemAccount>($t39), Option::spec_some<DiemAccount::WithdrawCapability>($t21))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t39), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#283, $t39), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t21)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t39) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t39);

    // opaque end: DiemAccount::restore_withdraw_capability($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:84:10+1
    assume {:print "$at(3,6927,6928)"} true;
L2:

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:85:5+1
    assume {:print "$at(3,6933,6934)"} true;
L3:

    // assert Not(exists[@262]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+84
    assume {:print "$at(12,68230,68314)"} true;
    assert {:msg "assert_failed(12,68230,68314): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#262, $t1);

    // assert Not(Not(DiemTimestamp::$is_operating[@263]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263);

    // assert Not(Not(exists[@262]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5);

    // assert Not(VASP::$is_vasp[@264, @265]($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:99:9+61
    assume {:print "$at(35,4796,4857)"} true;
    assert {:msg "assert_failed(35,4796,4857): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1);

    // assert Not(Not(VASP::$is_parent[@265]($t9))) at /home/ying/diem/language/diem-framework/modules/VASP.move:100:9+64
    assume {:print "$at(35,4866,4930)"} true;
    assert {:msg "assert_failed(35,4866,4930): function does not abort under this condition"}
      !!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9);

    // assert Not(Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536)) at /home/ying/diem/language/diem-framework/modules/VASP.move:101:9+94
    assume {:print "$at(35,4939,5033)"} true;
    assert {:msg "assert_failed(35,4939,5033): function does not abort under this condition"}
      !(($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536);

    // assert Not(Not(exists[@262]<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t10);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5);

    // assert Not(Not(Diem::spec_is_currency[@266]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266);

    // assert Not(And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268));

    // assert Not(And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270));

    // assert Not(Eq<address>($t1, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t1, 0);

    // assert Not(Eq<address>($t1, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t1, 1);

    // assert Not(exists[@271]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert Not(Gt($t4, MaxU64())) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:98:9+72
    assume {:print "$at(3,7497,7569)"} true;
    assert {:msg "assert_failed(3,7497,7569): function does not abort under this condition"}
      !($t4 > $MAX_U64);

    // assert Not(And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6));

    // assert Not(And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !(($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]())))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:335:9+58
    assume {:print "$at(22,14695,14753)"} true;
    assert {:msg "assert_failed(22,14695,14753): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274)));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<XUS::XUS>())))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266)));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615)))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:75:9+83
    assume {:print "$at(46,3503,3586)"} true;
    assert {:msg "assert_failed(46,3503,3586): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615)));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:418:9+114
    assume {:print "$at(22,18455,18569)"} true;
    assert {:msg "assert_failed(22,18455,18569): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+101
    assume {:print "$at(22,18578,18679)"} true;
    assert {:msg "assert_failed(22,18578,18679): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+136
    assume {:print "$at(22,18688,18824)"} true;
    assert {:msg "assert_failed(22,18688,18824): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4)));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:152:9+64
    assume {:print "$at(22,6999,7063)"} true;
    assert {:msg "assert_failed(22,6999,7063): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<XUS::XUS>>($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:894:9+68
    assume {:print "$at(12,39694,39762)"} true;
    assert {:msg "assert_failed(12,39694,39762): function does not abort under this condition"}
      !(($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276, $t12));

    // assert Not(And(Gt($t4, 0), Eq<u64>($t4, 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !(($t4 > 0) && $IsEqual'u64'($t4, 0));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<XUS::XUS>($t4, VASP::spec_parent_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]()))))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))));

    // assert Not(And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t4 > 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266));

    // assert Not(And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<XUS::XUS>>($t12))), $t4))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !(($t4 > 0) && ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276, $t12))) < $t4));

    // assert Not(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263));

    // assert Not(And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !(($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12));

    // assert Not(Not(exists[@262]<Roles::RoleId>($t13))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t13);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1498:9+30
    assume {:print "$at(12,68750,68780)"} true;
    assert {:msg "assert_failed(12,68750,68780): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Roles::spec_has_child_VASP_role_addr($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1499:9+57
    assume {:print "$at(12,68789,68846)"} true;
    assert {:msg "assert_failed(12,68789,68846): post-condition does not hold"}
      $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, $t1);

    // assert Eq<u64>(VASP::spec_num_children($t6), Add(VASP::spec_num_children[@265]($t6), 1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:107:9+82
    assume {:print "$at(35,5150,5232)"} true;
    assert {:msg "assert_failed(35,5150,5232): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $t6), ($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t6) + 1));

    // assert VASP::$is_child($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:108:9+29
    assume {:print "$at(35,5241,5270)"} true;
    assert {:msg "assert_failed(35,5241,5270): post-condition does not hold"}
      $1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t1);

    // assert Eq<address>(VASP::spec_parent_address($t1), $t6) at /home/ying/diem/language/diem-framework/modules/VASP.move:109:9+55
    assume {:print "$at(35,5279,5334)"} true;
    assert {:msg "assert_failed(35,5279,5334): post-condition does not hold"}
      $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $t6);

    // assert Eq<u64>(DiemAccount::$balance<XUS::XUS>($t1), $t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:119:9+79
    assume {:print "$at(3,8419,8498)"} true;
    assert {:msg "assert_failed(3,8419,8498): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), $t4);

    // assert Eq<u64>(DiemAccount::$balance<XUS::XUS>($t6), Sub(DiemAccount::$balance[@276]<XUS::XUS>($t6), $t4)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:120:9+140
    assume {:print "$at(3,8507,8647)"} true;
    assert {:msg "assert_failed(3,8507,8647): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t6), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276, $t6) - $t4));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:120:9+140
    return;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:85:5+1
    assume {:print "$at(3,6933,6934)"} true;
L4:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@262]<Roles::RoleId>($t1), Not(DiemTimestamp::$is_operating[@263]())), Not(exists[@262]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5)), VASP::$is_vasp[@264, @265]($t1)), Not(VASP::$is_parent[@265]($t9))), Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536)), Not(exists[@262]<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5)), Not(Diem::spec_is_currency[@266]<XUS::XUS>())), And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>()))), And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>()))), Eq<address>($t1, 0)), Eq<address>($t1, 1)), exists[@271]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32)), Gt($t4, MaxU64())), And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6)))), And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]())))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<XUS::XUS>())))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615)))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<XUS::XUS>>($t12)))), And(Gt($t4, 0), Eq<u64>($t4, 0))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<XUS::XUS>($t4, VASP::spec_parent_address[@264, @265]($t1)))))), And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]()))))), And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<XUS::XUS>()))), And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<XUS::XUS>>($t12))), $t4))), And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))), And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12))), Not(exists[@262]<Roles::RoleId>($t13))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    assume {:print "$at(3,6940,9487)"} true;
    assert {:msg "assert_failed(3,6940,9487): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#262, $t1) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5)) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)) || !$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9)) || (($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536)) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266)) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268))) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270))) || $IsEqual'address'($t1, 0)) || $IsEqual'address'($t1, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)) || ($t4 > $MAX_U64)) || (($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6))) || (($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274)))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266)))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615)))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4)))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276, $t12))) || (($t4 > 0) && $IsEqual'u64'($t4, 0))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))))) || (($t4 > 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266))) || (($t4 > 0) && ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276, $t12))) < $t4))) || (($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) || (($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12))) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t13)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@262]<Roles::RoleId>($t1), Eq(6, $t17)), And(Not(DiemTimestamp::$is_operating[@263]()), Eq(1, $t17))), And(Not(exists[@262]<Roles::RoleId>($t8)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5), Eq(3, $t17))), And(VASP::$is_vasp[@264, @265]($t1), Eq(6, $t17))), And(Not(VASP::$is_parent[@265]($t9)), Eq(7, $t17))), And(Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536), Eq(8, $t17))), And(Not(exists[@262]<Roles::RoleId>($t10)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5), Eq(3, $t17))), And(Not(Diem::spec_is_currency[@266]<XUS::XUS>()), Eq(5, $t17))), And(And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>())), Eq(5, $t17))), And(And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>())), Eq(5, $t17))), And(Eq<address>($t1, 0), Eq(7, $t17))), And(Eq<address>($t1, 1), Eq(7, $t17))), And(exists[@271]<AccountFreezing::FreezingBit>($t1), Eq(6, $t17))), And(And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t17))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t17))), And(Gt($t4, MaxU64()), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6))), Eq(5, $t17))), And(And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6)), Eq(1, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]()))), Eq(5, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<XUS::XUS>()))), Eq(5, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615))), Eq(8, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(1, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(1, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4)))), Eq(7, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XUS::XUS>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(5, $t17))), And(And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<XUS::XUS>>($t12))), Eq(5, $t17))), And(And(Gt($t4, 0), Eq<u64>($t4, 0)), Eq(7, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<XUS::XUS>($t4, VASP::spec_parent_address[@264, @265]($t1))))), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]())), Eq(1, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))))), Eq(5, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))))))), Eq(5, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XUS::XUS>(global[@277]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]())))), Eq(1, $t17))), And(And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<XUS::XUS>())), Eq(5, $t17))), And(And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<XUS::XUS>>($t12))), $t4)), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]())), Eq(1, $t17))), And(And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12)), Eq(1, $t17))), And(Not(exists[@262]<Roles::RoleId>($t13)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5), Eq(3, $t17))), Eq(3, $t17)), Eq(6, $t17)), Eq(8, $t17)), Eq(5, $t17)), Eq(1, $t17)), Eq(7, $t17)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    assert {:msg "assert_failed(3,6940,9487): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#262, $t1) && $IsEqual'num'(6, $t17)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t8) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5) && $IsEqual'num'(3, $t17))) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1) && $IsEqual'num'(6, $t17))) || (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9) && $IsEqual'num'(7, $t17))) || ((($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536) && $IsEqual'num'(8, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t10) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5) && $IsEqual'num'(3, $t17))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266) && $IsEqual'num'(5, $t17))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268)) && $IsEqual'num'(5, $t17))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270)) && $IsEqual'num'(5, $t17))) || ($IsEqual'address'($t1, 0) && $IsEqual'num'(7, $t17))) || ($IsEqual'address'($t1, 1) && $IsEqual'num'(7, $t17))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1) && $IsEqual'num'(6, $t17))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816)) && $IsEqual'num'(5, $t17))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t17))) || (($t4 > $MAX_U64) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4))) && $IsEqual'num'(7, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276, $t12)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && $IsEqual'u64'($t4, 0)) && $IsEqual'num'(7, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#266)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#276, $t12))) < $t4)) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12)) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t13) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5) && $IsEqual'num'(3, $t17))) || $IsEqual'num'(3, $t17)) || $IsEqual'num'(6, $t17)) || $IsEqual'num'(8, $t17)) || $IsEqual'num'(5, $t17)) || $IsEqual'num'(1, $t17)) || $IsEqual'num'(7, $t17));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_child_vasp_account [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
procedure {:timeLimit 40} $1_AccountCreationScripts_create_child_vasp_account$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: Vec (int), _$t3: bool, _$t4: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t5: $1_DiemAccount_WithdrawCapability;
    var $t6: int;
    var $t7: $1_DiemAccount_WithdrawCapability;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_FixedPoint32_FixedPoint32;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: $1_DiemAccount_WithdrawCapability;
    var $t22: bool;
    var $t23: Vec (int);
    var $t24: Vec (int);
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t29: $1_DiemAccount_ReceivedPaymentEvent;
    var $t30: int;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t32: $1_DiemAccount_SentPaymentEvent;
    var $t33: $1_FixedPoint32_FixedPoint32;
    var $t34: bool;
    var $t35: $1_DiemAccount_ReceivedPaymentEvent;
    var $t36: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t37: $1_DiemAccount_SentPaymentEvent;
    var $t38: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t39: int;
    var $t40: bool;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'': $1_DiemAccount_Balance'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Roles_RoleId_$memory#262: $Memory $1_Roles_RoleId;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_VASP_ChildVASP_$memory#264: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#265: $Memory $1_VASP_ParentVASP;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#271: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#272: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#273: $Memory $1_DiemAccount_DiemAccount;
    var $1_DualAttestation_Limit_$memory#274: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#275: $Memory $1_DualAttestation_Credential;
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#277: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#280: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#281: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#282: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#283: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,6079,6934)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'bool'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+855
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:94:9+55
    assume {:print "$at(3,7218,7273)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, DiemAccount::spec_get_withdraw_cap($t6)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:95:9+65
    assume {:print "$at(3,7282,7347)"} true;
    assume ($t7 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t6));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Diem::spec_xdx_exchange_rate<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t11 == $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:891:9+32
    assume {:print "$at(12,39468,39500)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t13, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t13 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @263 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @262 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#262 := $1_Roles_RoleId_$memory;

    // @268 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @270 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @266 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @278 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @277 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#277 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // @264 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#264 := $1_VASP_ChildVASP_$memory;

    // @265 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#265 := $1_VASP_ParentVASP_$memory;

    // @275 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Credential_$memory#275 := $1_DualAttestation_Credential_$memory;

    // @274 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Limit_$memory#274 := $1_DualAttestation_Limit_$memory;

    // @271 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#271 := $1_AccountFreezing_FreezingBit_$memory;

    // @273 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#273 := $1_DiemAccount_DiemAccount_$memory;

    // @272 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#272 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @267 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @269 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // @276 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[parent_vasp]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$at(3,6079,6080)"} true;
    assume {:print "$track_local(37,0,0):", $t0} $t0 == $t0;

    // trace_local[child_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,1):", $t1} $t1 == $t1;

    // trace_local[auth_key_prefix]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,2):", $t2} $t2 == $t2;

    // trace_local[add_all_currencies]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,3):", $t3} $t3 == $t3;

    // trace_local[child_initial_balance]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:64:5+1
    assume {:print "$track_local(37,0,4):", $t4} $t4 == $t4;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/VASP.move:97:9+50
    assume {:print "$at(35,4674,4724)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:552:9+44
    assume {:print "$at(28,24573,24617)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_child_vasp_account<XDX::XDX>($t0, $t1, $t2, $t3) on_abort goto L4 with $t17 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:71:9+173
    assume {:print "$at(3,6318,6491)"} true;
    call $1_DiemAccount_create_child_vasp_account'$1_XDX_XDX'($t0, $t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(3,6318,6491)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;
        goto L4;
    }

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:37+1
    assume {:print "$at(3,6599,6600)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := >($t4, $t18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:35+1
    call $t19 := $Gt($t4, $t18);

    // if ($t19) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
    if ($t19) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:78:9+356
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:80+12
    assume {:print "$at(3,6683,6695)"} true;
L0:

    // assume Identical($t20, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t20 == $1_Signer_spec_address_of($t0));

    // $t21 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume {:print "$at(3,6642,6696)"} true;

    // assume Identical($t22, Or(Not(DiemAccount::$exists_at($t20)), DiemAccount::spec_holds_delegated_withdraw_capability($t20))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume ($t22 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t20)));

    // if ($t22) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    if ($t22) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
L6:

    // assume Or(And(Not(DiemAccount::$exists_at($t20)), Eq(5, $t17)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t20), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20) && $IsEqual'num'(5, $t17)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t20) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume {:print "$at(3,6642,6696)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    goto L4;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
L5:

    // @280 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    $1_DiemAccount_DiemAccount_$memory#280 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t20, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t20);
    }

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t21);

    // assume exists<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume Eq<DiemAccount::WithdrawCapability>($t21, DiemAccount::spec_get_withdraw_cap[@280]($t20)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t21, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#280, $t20));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t20), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@280]<DiemAccount::DiemAccount>($t20), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t20), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t20) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t20);

    // $t21 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:39+54

    // trace_local[vasp_withdrawal_cap]($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:79:17+19
    assume {:print "$track_local(37,0,5):", $t21} $t21 == $t21;

    // $t23 := [] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:81:77+3
    assume {:print "$at(3,6819,6822)"} true;
    $t23 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t23);

    // $t24 := [] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:81:82+3
    $t24 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t24);

    // assume Identical($t25, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:832:9+32
    assume {:print "$at(12,36976,37008)"} true;
    assume ($t25 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t26, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t26 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t27, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t27 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t28, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t28 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t29, pack DiemAccount::ReceivedPaymentEvent($t4, Diem::spec_currency_code<XDX::XDX>(), $t27, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t29 == $1_DiemAccount_ReceivedPaymentEvent($t4, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t27, $t23));

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // assume Identical($t31, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t30))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t31 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t30)));

    // assume Identical($t32, pack DiemAccount::SentPaymentEvent($t4, Diem::spec_currency_code<XDX::XDX>(), $t1, $t23)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t32 == $1_DiemAccount_SentPaymentEvent($t4, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t1, $t23));

    // assume Identical($t33, Diem::spec_xdx_exchange_rate<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t33 == $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // opaque begin: DiemAccount::pay_from<XDX::XDX>($t21, $t1, $t4, $t23, $t24) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume {:print "$at(3,6710,6841)"} true;

    // assume Identical($t34, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<XDX::XDX>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t4, 0)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t4, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t4), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t4), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XDX::XDX>())), AccountFreezing::spec_account_is_frozen($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t1), Gt(Add(DiemAccount::$balance<XDX::XDX>($t1), $t4), MaxU64()))), Not(DiemAccount::$exists_at($t26))), Not(exists<DiemAccount::Balance<XDX::XDX>>($t26))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XDX::XDX>())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t4, VASP::spec_parent_address($t26)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t26))), $t4)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t26)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), $t4), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), Not(DiemTimestamp::$is_operating())))), And(Eq<num>(Len<u8>($t24), 0), Not(DualAttestation::spec_is_published()))), And(Eq<num>(Len<u8>($t24), 0), Not(Diem::spec_is_currency<XDX::XDX>()))), And(Eq<num>(Len<u8>($t24), 0), Gt(FixedPoint32::spec_multiply_u64($t4, $t33), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid($t25, $t1, $t24, $t23, $t4)))), And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t34 == (((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t4, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t1) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) + $t4) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t26)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t26)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) || ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t26))) < $t4)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t26)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) + $t4) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || ($IsEqual'num'(LenVec($t24), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) || ($IsEqual'num'(LenVec($t24), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))) || ($IsEqual'num'(LenVec($t24), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t33) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t25, $t1, $t24, $t23, $t4))) || ((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))));

    // if ($t34) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    if ($t34) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
L8:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<XDX::XDX>>($t1)), Eq(7, $t17)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t17))), And(Eq<u64>($t4, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t4, VASP::spec_parent_address($t1)))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t4), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t4), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t21), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t21), $t1), Gt(Add(DiemAccount::$balance<XDX::XDX>($t1), $t4), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at($t26)), Eq(5, $t17))), And(Not(exists<DiemAccount::Balance<XDX::XDX>>($t26)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t4, VASP::spec_parent_address($t26))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t26))), $t4), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen($t26), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), $t4), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t26, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t26)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Not(DualAttestation::spec_is_published())), Eq(5, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Not(Diem::spec_is_currency<XDX::XDX>())), Eq(5, $t17))), And(And(Eq<num>(Len<u8>($t24), 0), Gt(FixedPoint32::spec_multiply_u64($t4, $t33), 18446744073709551615)), Eq(8, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))), Eq(1, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))), Eq(1, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid($t25, $t1, $t24, $t23, $t4))), Eq(7, $t17))), And(And(Or(Neq<num>(Len<u8>($t24), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t25, $t1, $t4)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))), Eq(5, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) && $IsEqual'num'(7, $t17)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t4, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t4) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t21), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t21), $t1) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) + $t4) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t26) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t26) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t26))) < $t4) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t26) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26)))) + $t4) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t26))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) && $IsEqual'num'(5, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(5, $t17))) || (($IsEqual'num'(LenVec($t24), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t33) > 18446744073709551615)) && $IsEqual'num'(8, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t25, $t1, $t24, $t23, $t4)) && $IsEqual'num'(7, $t17))) || (((!$IsEqual'num'(LenVec($t24), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t25, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume {:print "$at(3,6710,6841)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    goto L4;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
L7:

    // @281 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $1_DiemAccount_DiemAccount_$memory#281 := $1_DiemAccount_DiemAccount_$memory;

    // @282 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#282 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // modifies global<DiemAccount::DiemAccount>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t25, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t25);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t25, $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t25);
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t25)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t25), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t25));
    }

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume DiemAccount::$exists_at($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t25);

    // assume DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<XDX::XDX>>($t25) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t25);

    // assume exists<DiemAccount::Balance<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.withdraw_capability(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.sent_events(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t25)), select DiemAccount::DiemAccount.received_events(global[@281]<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t25)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@281]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@281]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t1)));

    // assume Implies(Eq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t26), DiemAccount::$balance[@282]<XDX::XDX>($t26))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t26), $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#282, $t26)));

    // assume Implies(Neq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t26), Sub(DiemAccount::$balance[@282]<XDX::XDX>($t26), $t4))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume (!$IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t26), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#282, $t26) - $t4)));

    // assume Implies(Neq<address>($t26, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t1), Add(DiemAccount::$balance[@282]<XDX::XDX>($t1), $t4))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume (!$IsEqual'address'($t26, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#282, $t1) + $t4)));

    // assume Identical($t35, $t29) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t35 == $t29);

    // assume Identical($t36, $t28) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t36 == $t28);

    // emit_event($t35, $t36) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t36, $t35);

    // assume Identical($t37, $t32) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t37 == $t32);

    // assume Identical($t38, $t31) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    assume ($t38 == $t31);

    // emit_event($t37, $t38) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t38, $t37);

    // opaque end: DiemAccount::pay_from<XDX::XDX>($t21, $t1, $t4, $t23, $t24) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:80:13+131

    // assume Identical($t39, select DiemAccount::WithdrawCapability.account_address($t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t39 == $account_address#$1_DiemAccount_WithdrawCapability($t21));

    // opaque begin: DiemAccount::restore_withdraw_capability($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume {:print "$at(3,6855,6916)"} true;

    // assume Identical($t40, Or(Not(DiemAccount::$exists_at($t39)), Not(DiemAccount::$delegated_withdraw_capability($t39)))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume ($t40 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t39) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t39)));

    // if ($t40) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    if ($t40) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
L10:

    // assume Or(And(Not(DiemAccount::$exists_at($t39)), Eq(5, $t17)), And(Not(DiemAccount::$delegated_withdraw_capability($t39)), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t39) && $IsEqual'num'(5, $t17)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t39) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume {:print "$at(3,6855,6916)"} true;
    assume {:print "$track_abort(37,0):", $t17} $t17 == $t17;

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    goto L4;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
L9:

    // @283 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    $1_DiemAccount_DiemAccount_$memory#283 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t39) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t39, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t39);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t39), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@283]<DiemAccount::DiemAccount>($t39), Option::spec_some<DiemAccount::WithdrawCapability>($t21))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t39), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#283, $t39), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t21)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t39) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t39);

    // opaque end: DiemAccount::restore_withdraw_capability($t21) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:83:13+61

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:84:10+1
    assume {:print "$at(3,6927,6928)"} true;
L2:

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:85:5+1
    assume {:print "$at(3,6933,6934)"} true;
L3:

    // assert Not(exists[@262]<Roles::RoleId>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1488:9+84
    assume {:print "$at(12,68230,68314)"} true;
    assert {:msg "assert_failed(12,68230,68314): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#262, $t1);

    // assert Not(Not(DiemTimestamp::$is_operating[@263]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263);

    // assert Not(Not(exists[@262]<Roles::RoleId>($t8))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t8);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5);

    // assert Not(VASP::$is_vasp[@264, @265]($t1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:99:9+61
    assume {:print "$at(35,4796,4857)"} true;
    assert {:msg "assert_failed(35,4796,4857): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1);

    // assert Not(Not(VASP::$is_parent[@265]($t9))) at /home/ying/diem/language/diem-framework/modules/VASP.move:100:9+64
    assume {:print "$at(35,4866,4930)"} true;
    assert {:msg "assert_failed(35,4866,4930): function does not abort under this condition"}
      !!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9);

    // assert Not(Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536)) at /home/ying/diem/language/diem-framework/modules/VASP.move:101:9+94
    assume {:print "$at(35,4939,5033)"} true;
    assert {:msg "assert_failed(35,4939,5033): function does not abort under this condition"}
      !(($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536);

    // assert Not(Not(exists[@262]<Roles::RoleId>($t10))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t10);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5);

    // assert Not(Not(Diem::spec_is_currency[@266]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266);

    // assert Not(And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268));

    // assert Not(And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270));

    // assert Not(Eq<address>($t1, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t1, 0);

    // assert Not(Eq<address>($t1, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t1, 1);

    // assert Not(exists[@271]<AccountFreezing::FreezingBit>($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1);

    // assert Not(And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t2)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t2)), 32);

    // assert Not(Gt($t4, MaxU64())) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:98:9+72
    assume {:print "$at(3,7497,7569)"} true;
    assert {:msg "assert_failed(3,7497,7569): function does not abort under this condition"}
      !($t4 > $MAX_U64);

    // assert Not(And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6));

    // assert Not(And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !(($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]())))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:335:9+58
    assume {:print "$at(22,14695,14753)"} true;
    assert {:msg "assert_failed(22,14695,14753): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274)));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<XDX::XDX>())))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266)));

    // assert Not(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615)))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:75:9+83
    assume {:print "$at(46,3503,3586)"} true;
    assert {:msg "assert_failed(46,3503,3586): function does not abort under this condition"}
      !(($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615)));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:418:9+114
    assume {:print "$at(22,18455,18569)"} true;
    assert {:msg "assert_failed(22,18455,18569): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+101
    assume {:print "$at(22,18578,18679)"} true;
    assert {:msg "assert_failed(22,18578,18679): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+136
    assume {:print "$at(22,18688,18824)"} true;
    assert {:msg "assert_failed(22,18688,18824): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4)));

    // assert Not(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:152:9+64
    assume {:print "$at(22,6999,7063)"} true;
    assert {:msg "assert_failed(22,6999,7063): function does not abort under this condition"}
      !(($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<XDX::XDX>>($t12)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:894:9+68
    assume {:print "$at(12,39694,39762)"} true;
    assert {:msg "assert_failed(12,39694,39762): function does not abort under this condition"}
      !(($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276, $t12));

    // assert Not(And(Gt($t4, 0), Eq<u64>($t4, 0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !(($t4 > 0) && $IsEqual'u64'($t4, 0));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<XDX::XDX>($t4, VASP::spec_parent_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64()))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64))));

    // assert Not(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]()))))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))));

    // assert Not(And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t4 > 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266));

    // assert Not(And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<XDX::XDX>>($t12))), $t4))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !(($t4 > 0) && ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276, $t12))) < $t4));

    // assert Not(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263));

    // assert Not(And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !(($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12));

    // assert Not(Not(exists[@262]<Roles::RoleId>($t13))) at /home/ying/diem/language/diem-framework/modules/Roles.move:553:9+59
    assume {:print "$at(28,24626,24685)"} true;
    assert {:msg "assert_failed(28,24626,24685): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#262, $t13);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5)) at /home/ying/diem/language/diem-framework/modules/Roles.move:554:9+89
    assume {:print "$at(28,24694,24783)"} true;
    assert {:msg "assert_failed(28,24694,24783): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5);

    // assert DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1498:9+30
    assume {:print "$at(12,68750,68780)"} true;
    assert {:msg "assert_failed(12,68750,68780): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Roles::spec_has_child_VASP_role_addr($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1499:9+57
    assume {:print "$at(12,68789,68846)"} true;
    assert {:msg "assert_failed(12,68789,68846): post-condition does not hold"}
      $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, $t1);

    // assert Eq<u64>(VASP::spec_num_children($t6), Add(VASP::spec_num_children[@265]($t6), 1)) at /home/ying/diem/language/diem-framework/modules/VASP.move:107:9+82
    assume {:print "$at(35,5150,5232)"} true;
    assert {:msg "assert_failed(35,5150,5232): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $t6), ($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t6) + 1));

    // assert VASP::$is_child($t1) at /home/ying/diem/language/diem-framework/modules/VASP.move:108:9+29
    assume {:print "$at(35,5241,5270)"} true;
    assert {:msg "assert_failed(35,5241,5270): post-condition does not hold"}
      $1_VASP_$is_child($1_VASP_ChildVASP_$memory, $t1);

    // assert Eq<address>(VASP::spec_parent_address($t1), $t6) at /home/ying/diem/language/diem-framework/modules/VASP.move:109:9+55
    assume {:print "$at(35,5279,5334)"} true;
    assert {:msg "assert_failed(35,5279,5334): post-condition does not hold"}
      $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $t6);

    // assert Eq<u64>(DiemAccount::$balance<XDX::XDX>($t1), $t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:119:9+79
    assume {:print "$at(3,8419,8498)"} true;
    assert {:msg "assert_failed(3,8419,8498): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), $t4);

    // assert Eq<u64>(DiemAccount::$balance<XDX::XDX>($t6), Sub(DiemAccount::$balance[@276]<XDX::XDX>($t6), $t4)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:120:9+140
    assume {:print "$at(3,8507,8647)"} true;
    assert {:msg "assert_failed(3,8507,8647): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t6), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276, $t6) - $t4));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:120:9+140
    return;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:85:5+1
    assume {:print "$at(3,6933,6934)"} true;
L4:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(exists[@262]<Roles::RoleId>($t1), Not(DiemTimestamp::$is_operating[@263]())), Not(exists[@262]<Roles::RoleId>($t8))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5)), VASP::$is_vasp[@264, @265]($t1)), Not(VASP::$is_parent[@265]($t9))), Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536)), Not(exists[@262]<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5)), Not(Diem::spec_is_currency[@266]<XDX::XDX>())), And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>()))), And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>()))), Eq<address>($t1, 0)), Eq<address>($t1, 1)), exists[@271]<AccountFreezing::FreezingBit>($t1)), And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t2)), 32)), Gt($t4, MaxU64())), And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6)))), And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]())))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<XDX::XDX>())))), And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615)))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4))))), And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1)))))), And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<XDX::XDX>>($t12)))), And(Gt($t4, 0), Eq<u64>($t4, 0))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<XDX::XDX>($t4, VASP::spec_parent_address[@264, @265]($t1)))))), And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64()))))), And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]()))))), And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<XDX::XDX>()))), And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<XDX::XDX>>($t12))), $t4))), And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]()))), And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12))), Not(exists[@262]<Roles::RoleId>($t13))), Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    assume {:print "$at(3,6940,9487)"} true;
    assert {:msg "assert_failed(3,6940,9487): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#262, $t1) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t8)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5)) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)) || !$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9)) || (($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536)) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266)) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268))) || (($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270))) || $IsEqual'address'($t1, 0)) || $IsEqual'address'($t1, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816))) || !$IsEqual'num'((16 + LenVec($t2)), 32)) || ($t4 > $MAX_U64)) || (($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6))) || (($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274)))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266)))) || (($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615)))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4)))) || (($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276, $t12))) || (($t4 > 0) && $IsEqual'u64'($t4, 0))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64))))) || (($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))))) || (($t4 > 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266))) || (($t4 > 0) && ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276, $t12))) < $t4))) || (($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) || (($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12))) || !$ResourceExists($1_Roles_RoleId_$memory#262, $t13)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(exists[@262]<Roles::RoleId>($t1), Eq(6, $t17)), And(Not(DiemTimestamp::$is_operating[@263]()), Eq(1, $t17))), And(Not(exists[@262]<Roles::RoleId>($t8)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t8)), 5), Eq(3, $t17))), And(VASP::$is_vasp[@264, @265]($t1), Eq(6, $t17))), And(Not(VASP::$is_parent[@265]($t9)), Eq(7, $t17))), And(Gt(Add(VASP::spec_num_children[@265]($t9), 1), 65536), Eq(8, $t17))), And(Not(exists[@262]<Roles::RoleId>($t10)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t10)), 5), Eq(3, $t17))), And(Not(Diem::spec_is_currency[@266]<XDX::XDX>()), Eq(5, $t17))), And(And(And($t3, Not(exists[@267]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(Diem::spec_is_currency[@268]<XUS::XUS>())), Eq(5, $t17))), And(And(And($t3, Not(exists[@269]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(Diem::spec_is_currency[@270]<XDX::XDX>())), Eq(5, $t17))), And(Eq<address>($t1, 0), Eq(7, $t17))), And(Eq<address>($t1, 1), Eq(7, $t17))), And(exists[@271]<AccountFreezing::FreezingBit>($t1), Eq(6, $t17))), And(And(DiemTimestamp::$is_genesis[@263](), Not(exists[@272]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t17))), And(Neq<num>(Add(16, Len<u8>($t2)), 32), Eq(7, $t17))), And(Gt($t4, MaxU64()), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemAccount::$exists_at[@273]($t6))), Eq(5, $t17))), And(And(Gt($t4, 0), DiemAccount::spec_holds_delegated_withdraw_capability[@273]($t6)), Eq(1, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(DualAttestation::spec_is_published[@274]()))), Eq(5, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Not(Diem::spec_is_currency[@266]<XDX::XDX>()))), Eq(5, $t17))), And(And(Gt($t4, 0), And(Eq<num>(Len<u8>([]), 0), Gt(FixedPoint32::spec_multiply_u64[]($t4, $t11), 18446744073709551615))), Eq(8, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(1, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(1, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Not(DualAttestation::spec_signature_is_valid[@264, @265, @275]($t6, $t1, [], [], $t4)))), Eq(7, $t17))), And(And(Gt($t4, 0), And(Or(Neq<num>(Len<u8>([]), 0), DualAttestation::spec_dual_attestation_required[@266, @264, @265, @274]<XDX::XDX>($t6, $t1, $t4)), Not(DualAttestation::spec_has_credential[@275](DualAttestation::spec_credential_address[@264, @265]($t1))))), Eq(5, $t17))), And(And(Gt($t4, 0), Not(exists[@276]<DiemAccount::Balance<XDX::XDX>>($t12))), Eq(5, $t17))), And(And(Gt($t4, 0), Eq<u64>($t4, 0)), Eq(7, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@263, @278, @277]<XDX::XDX>($t4, VASP::spec_parent_address[@264, @265]($t1))))), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]())), Eq(1, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))))), Eq(5, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@278]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))))))), Eq(5, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), $t4), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1))))), MaxU64())))), Eq(8, $t17))), And(And(Gt($t4, 0), And(DiemAccount::spec_should_track_limits_for_account[@277, @264, @265]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@278]<XDX::XDX>(global[@277]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@264, @265]($t1)))), Not(DiemTimestamp::$is_operating[@263]())))), Eq(1, $t17))), And(And(Gt($t4, 0), Not(Diem::spec_is_currency[@266]<XDX::XDX>())), Eq(5, $t17))), And(And(Gt($t4, 0), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@276]<DiemAccount::Balance<XDX::XDX>>($t12))), $t4)), Eq(8, $t17))), And(And(Gt($t4, 0), Not(DiemTimestamp::$is_operating[@263]())), Eq(1, $t17))), And(And(Gt($t4, 0), AccountFreezing::spec_account_is_frozen[@271]($t12)), Eq(1, $t17))), And(Not(exists[@262]<Roles::RoleId>($t13)), Eq(5, $t17))), And(Neq<u64>(select Roles::RoleId.role_id(global[@262]<Roles::RoleId>($t13)), 5), Eq(3, $t17))), Eq(3, $t17)), Eq(6, $t17)), Eq(8, $t17)), Eq(5, $t17)), Eq(1, $t17)), Eq(7, $t17)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    assert {:msg "assert_failed(3,6940,9487): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((((((((((((((((((($ResourceExists($1_Roles_RoleId_$memory#262, $t1) && $IsEqual'num'(6, $t17)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t8) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t8)), 5) && $IsEqual'num'(3, $t17))) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1) && $IsEqual'num'(6, $t17))) || (!$1_VASP_$is_parent($1_VASP_ParentVASP_$memory#265, $t9) && $IsEqual'num'(7, $t17))) || ((($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory#265, $t9) + 1) > 65536) && $IsEqual'num'(8, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t10) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t10)), 5) && $IsEqual'num'(3, $t17))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266) && $IsEqual'num'(5, $t17))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#267, $t1)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#268)) && $IsEqual'num'(5, $t17))) || ((($t3 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#269, $t1)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#270)) && $IsEqual'num'(5, $t17))) || ($IsEqual'address'($t1, 0) && $IsEqual'num'(7, $t17))) || ($IsEqual'address'($t1, 1) && $IsEqual'num'(7, $t17))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#271, $t1) && $IsEqual'num'(6, $t17))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#272, 173345816)) && $IsEqual'num'(5, $t17))) || (!$IsEqual'num'((16 + LenVec($t2)), 32) && $IsEqual'num'(7, $t17))) || (($t4 > $MAX_U64) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#273, $t6)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#273, $t6)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#274))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($IsEqual'num'(LenVec($EmptyVec'u8'()), 0) && ($1_FixedPoint32_spec_multiply_u64($t4, $t11) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Credential_$memory#275, $t6, $t1, $EmptyVec'u8'(), $EmptyVec'u8'(), $t4))) && $IsEqual'num'(7, $t17))) || ((($t4 > 0) && ((!$IsEqual'num'(LenVec($EmptyVec'u8'()), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $1_DualAttestation_Limit_$memory#274, $t6, $t1, $t4)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#275, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276, $t12)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && $IsEqual'u64'($t4, 0)) && $IsEqual'num'(7, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $t4, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))))) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1)))) + $t4) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))))) > $MAX_U64)))) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#278, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#277, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#264, $1_VASP_ParentVASP_$memory#265, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)))) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#266)) && $IsEqual'num'(5, $t17))) || ((($t4 > 0) && ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#276, $t12))) < $t4)) && $IsEqual'num'(8, $t17))) || ((($t4 > 0) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) && $IsEqual'num'(1, $t17))) || ((($t4 > 0) && $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#271, $t12)) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_Roles_RoleId_$memory#262, $t13) && $IsEqual'num'(5, $t17))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#262, $t13)), 5) && $IsEqual'num'(3, $t17))) || $IsEqual'num'(3, $t17)) || $IsEqual'num'(6, $t17)) || $IsEqual'num'(8, $t17)) || $IsEqual'num'(5, $t17)) || $IsEqual'num'(1, $t17)) || $IsEqual'num'(7, $t17));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:87:5+2547
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_designated_dealer [verification] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
procedure {:timeLimit 40} $1_AccountCreationScripts_create_designated_dealer$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int), _$t5: bool) returns ()
{
    // declare local variables
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t11: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#247: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#248: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#249: $Memory $1_DesignatedDealer_Dealer;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Diem_Preburn'$1_XUS_XUS'_$memory#253: $Memory $1_Diem_Preburn'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'#0'_$memory#254: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#255: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_Preburn'#0'_$memory#256: $Memory $1_Diem_Preburn'#0';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#260: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#261: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,34085,34603)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XUS::XUS>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<#0>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<#0>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($ResourceValue($1_Diem_Preburn'#0'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr): Not(exists<Diem::Preburn<XUS::XUS>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr)));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<#0>>(dd_addr): Not(exists<Diem::Preburn<#0>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'bool'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @250 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @248 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#248 := $1_Roles_RoleId_$memory;

    // @247 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#247 := $1_SlidingNonce_SlidingNonce_$memory;

    // @251 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @253 := save_mem(Diem::Preburn<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_Preburn'$1_XUS_XUS'_$memory#253 := $1_Diem_Preburn'$1_XUS_XUS'_$memory;

    // @252 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @259 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @254 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#254 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @256 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_Preburn'#0'_$memory#256 := $1_Diem_Preburn'#0'_$memory;

    // @255 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'#0'_$memory#255 := $1_Diem_PreburnQueue'#0'_$memory;

    // @249 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DesignatedDealer_Dealer_$memory#249 := $1_DesignatedDealer_Dealer_$memory;

    // @260 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#260 := $1_AccountFreezing_FreezingBit_$memory;

    // @261 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#261 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @257 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @258 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$at(3,34085,34086)"} true;
    assume {:print "$track_local(37,1,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,1):", $t1} $t1 == $t1;

    // trace_local[addr]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,4):", $t4} $t4 == $t4;

    // trace_local[add_all_currencies]($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,5):", $t5} $t5 == $t5;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:486:9+63
    assume {:print "$at(3,34338,34401)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,34338,34401)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,1):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_designated_dealer<#0>($t0, $t2, $t3, $t4, $t5) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:487:9+185
    assume {:print "$at(3,34411,34596)"} true;
    call $1_DiemAccount_create_designated_dealer'#0'($t0, $t2, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(3,34411,34596)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,1):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:494:5+1
    assume {:print "$at(3,34602,34603)"} true;
L1:

    // assume Identical($t10, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t10 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t11, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t11 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(exists[@248]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1374:9+84
    assume {:print "$at(12,62442,62526)"} true;
    assert {:msg "assert_failed(12,62442,62526): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#248, $t2);

    // assert Not(exists[@249]<DesignatedDealer::Dealer>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1375:9+95
    assume {:print "$at(12,62535,62630)"} true;
    assert {:msg "assert_failed(12,62535,62630): function does not abort under this condition"}
      !$ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@250]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250);

    // assert Not(Not(exists[@248]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#248, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:128:9+80
    assume {:print "$at(10,5416,5496)"} true;
    assert {:msg "assert_failed(10,5416,5496): function does not abort under this condition"}
      !($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:129:9+87
    assume {:print "$at(10,5505,5592)"} true;
    assert {:msg "assert_failed(10,5505,5592): function does not abort under this condition"}
      !($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2));

    // assert Not(And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:9+78
    assume {:print "$at(10,5601,5679)"} true;
    assert {:msg "assert_failed(10,5601,5679): function does not abort under this condition"}
      !($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2));

    // assert Not(And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And(Not($t5), Diem::$is_synthetic_currency[@254]<#0>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:128:9+80
    assume {:print "$at(10,5416,5496)"} true;
    assert {:msg "assert_failed(10,5416,5496): function does not abort under this condition"}
      !(!$t5 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254));

    // assert Not(And(Not($t5), exists[@255]<Diem::PreburnQueue<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:129:9+87
    assume {:print "$at(10,5505,5592)"} true;
    assert {:msg "assert_failed(10,5505,5592): function does not abort under this condition"}
      !(!$t5 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#255, $t2));

    // assert Not(And(Not($t5), exists[@256]<Diem::Preburn<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:9+78
    assume {:print "$at(10,5601,5679)"} true;
    assert {:msg "assert_failed(10,5601,5679): function does not abort under this condition"}
      !(!$t5 && $ResourceExists($1_Diem_Preburn'#0'_$memory#256, $t2));

    // assert Not(And(Not($t5), Not(Diem::spec_is_currency[@254]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(!$t5 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254));

    // assert Not(Not(Diem::spec_is_currency[@254]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254);

    // assert Not(And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259));

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@260]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(exists[@248]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#248, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert exists<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1384:9+62
    assume {:print "$at(12,63103,63165)"} true;
    assert {:msg "assert_failed(12,63103,63165): post-condition does not hold"}
      $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1385:9+39
    assume {:print "$at(12,63174,63213)"} true;
    assert {:msg "assert_failed(12,63174,63213): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert Roles::spec_has_designated_dealer_role_addr($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1386:9+73
    assume {:print "$at(12,63222,63295)"} true;
    assert {:msg "assert_failed(12,63222,63295): post-condition does not hold"}
      $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, $t2);

    // assert exists<DiemAccount::Balance<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t2);

    // assert Eq<DiemAccount::Balance<#0>>(global<DiemAccount::Balance<#0>>($t2), pack DiemAccount::Balance<#0>(pack Diem::Diem<#0>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'#0''($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t2), $1_DiemAccount_Balance'#0'($1_Diem_Diem'#0'(0)));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), exists<DiemAccount::Balance<XUS::XUS>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), exists<DiemAccount::Balance<XDX::XDX>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assume {:print "$at(3,34609,35646)"} true;
    assert {:msg "assert_failed(3,34609,35646): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:494:5+1
    assume {:print "$at(3,34602,34603)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), exists[@248]<Roles::RoleId>($t2)), exists[@249]<DesignatedDealer::Dealer>($t2)), Not(DiemTimestamp::$is_operating[@250]())), Not(exists[@248]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>())), And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2))), And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2))), And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>()))), And(Not($t5), Diem::$is_synthetic_currency[@254]<#0>())), And(Not($t5), exists[@255]<Diem::PreburnQueue<#0>>($t2))), And(Not($t5), exists[@256]<Diem::Preburn<#0>>($t2))), And(Not($t5), Not(Diem::spec_is_currency[@254]<#0>()))), Not(Diem::spec_is_currency[@254]<#0>())), And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>()))), And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>()))), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@260]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(exists[@248]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assume {:print "$at(3,34609,35646)"} true;
    assert {:msg "assert_failed(3,34609,35646): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $ResourceExists($1_Roles_RoleId_$memory#248, $t2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250)) || !$ResourceExists($1_Roles_RoleId_$memory#248, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || ($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || ($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2))) || ($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2))) || ($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || (!$t5 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254))) || (!$t5 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#255, $t2))) || (!$t5 && $ResourceExists($1_Diem_Preburn'#0'_$memory#256, $t2))) || (!$t5 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254)) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259))) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$ResourceExists($1_Roles_RoleId_$memory#248, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t8)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t8))), And(exists[@248]<Roles::RoleId>($t2), Eq(6, $t8))), And(exists[@249]<DesignatedDealer::Dealer>($t2), Eq(6, $t8))), And(Not(DiemTimestamp::$is_operating[@250]()), Eq(1, $t8))), And(Not(exists[@248]<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), And(And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>()), Eq(7, $t8))), And(And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2)), Eq(6, $t8))), And(And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2)), Eq(1, $t8))), And(And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>())), Eq(5, $t8))), And(And(Not($t5), Diem::$is_synthetic_currency[@254]<#0>()), Eq(7, $t8))), And(And(Not($t5), exists[@255]<Diem::PreburnQueue<#0>>($t2)), Eq(6, $t8))), And(And(Not($t5), exists[@256]<Diem::Preburn<#0>>($t2)), Eq(1, $t8))), And(And(Not($t5), Not(Diem::spec_is_currency[@254]<#0>())), Eq(5, $t8))), And(Not(Diem::spec_is_currency[@254]<#0>()), Eq(5, $t8))), And(And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>())), Eq(5, $t8))), And(And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>())), Eq(5, $t8))), And(Eq<address>($t2, 0), Eq(7, $t8))), And(Eq<address>($t2, 1), Eq(7, $t8))), And(exists[@260]<AccountFreezing::FreezingBit>($t2), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t8))), And(Not(exists[@248]<Roles::RoleId>($t7)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), Eq(7, $t8)), Eq(2, $t8)), Eq(5, $t8)), Eq(6, $t8)), Eq(3, $t8)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assert {:msg "assert_failed(3,34609,35646): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#248, $t2) && $IsEqual'num'(6, $t8))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2) && $IsEqual'num'(6, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && $IsEqual'num'(1, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#248, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || (($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(7, $t8))) || (($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2)) && $IsEqual'num'(6, $t8))) || (($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2)) && $IsEqual'num'(1, $t8))) || (($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(5, $t8))) || ((!$t5 && $1_Diem_$is_synthetic_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254)) && $IsEqual'num'(7, $t8))) || ((!$t5 && $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#255, $t2)) && $IsEqual'num'(6, $t8))) || ((!$t5 && $ResourceExists($1_Diem_Preburn'#0'_$memory#256, $t2)) && $IsEqual'num'(1, $t8))) || ((!$t5 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254)) && $IsEqual'num'(5, $t8))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#254) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259)) && $IsEqual'num'(5, $t8))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t8))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#248, $t7) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || $IsEqual'num'(7, $t8)) || $IsEqual'num'(2, $t8)) || $IsEqual'num'(5, $t8)) || $IsEqual'num'(6, $t8)) || $IsEqual'num'(3, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_designated_dealer [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
procedure {:timeLimit 40} $1_AccountCreationScripts_create_designated_dealer$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int), _$t5: bool) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t11: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#247: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#248: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#249: $Memory $1_DesignatedDealer_Dealer;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Diem_Preburn'$1_XUS_XUS'_$memory#253: $Memory $1_Diem_Preburn'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#255: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Diem_Preburn'$1_XUS_XUS'_$memory#256: $Memory $1_Diem_Preburn'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#260: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#261: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,34085,34603)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XUS::XUS>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr): Not(exists<Diem::Preburn<XUS::XUS>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'bool'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @250 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @248 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#248 := $1_Roles_RoleId_$memory;

    // @247 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#247 := $1_SlidingNonce_SlidingNonce_$memory;

    // @251 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @253 := save_mem(Diem::Preburn<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_Preburn'$1_XUS_XUS'_$memory#253 := $1_Diem_Preburn'$1_XUS_XUS'_$memory;

    // @252 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @259 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @254 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @256 := save_mem(Diem::Preburn<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_Preburn'$1_XUS_XUS'_$memory#256 := $1_Diem_Preburn'$1_XUS_XUS'_$memory;

    // @255 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#255 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @249 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DesignatedDealer_Dealer_$memory#249 := $1_DesignatedDealer_Dealer_$memory;

    // @260 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#260 := $1_AccountFreezing_FreezingBit_$memory;

    // @261 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#261 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @257 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @258 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$at(3,34085,34086)"} true;
    assume {:print "$track_local(37,1,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,1):", $t1} $t1 == $t1;

    // trace_local[addr]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,4):", $t4} $t4 == $t4;

    // trace_local[add_all_currencies]($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,5):", $t5} $t5 == $t5;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:486:9+63
    assume {:print "$at(3,34338,34401)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,34338,34401)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,1):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_designated_dealer<XUS::XUS>($t0, $t2, $t3, $t4, $t5) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:487:9+185
    assume {:print "$at(3,34411,34596)"} true;
    call $1_DiemAccount_create_designated_dealer'$1_XUS_XUS'($t0, $t2, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(3,34411,34596)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,1):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:494:5+1
    assume {:print "$at(3,34602,34603)"} true;
L1:

    // assume Identical($t10, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t10 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t11, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t11 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(exists[@248]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1374:9+84
    assume {:print "$at(12,62442,62526)"} true;
    assert {:msg "assert_failed(12,62442,62526): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#248, $t2);

    // assert Not(exists[@249]<DesignatedDealer::Dealer>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1375:9+95
    assume {:print "$at(12,62535,62630)"} true;
    assert {:msg "assert_failed(12,62535,62630): function does not abort under this condition"}
      !$ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@250]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250);

    // assert Not(Not(exists[@248]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#248, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:128:9+80
    assume {:print "$at(10,5416,5496)"} true;
    assert {:msg "assert_failed(10,5416,5496): function does not abort under this condition"}
      !($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:129:9+87
    assume {:print "$at(10,5505,5592)"} true;
    assert {:msg "assert_failed(10,5505,5592): function does not abort under this condition"}
      !($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2));

    // assert Not(And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:9+78
    assume {:print "$at(10,5601,5679)"} true;
    assert {:msg "assert_failed(10,5601,5679): function does not abort under this condition"}
      !($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2));

    // assert Not(And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And(Not($t5), Diem::$is_synthetic_currency[@254]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:128:9+80
    assume {:print "$at(10,5416,5496)"} true;
    assert {:msg "assert_failed(10,5416,5496): function does not abort under this condition"}
      !(!$t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254));

    // assert Not(And(Not($t5), exists[@255]<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:129:9+87
    assume {:print "$at(10,5505,5592)"} true;
    assert {:msg "assert_failed(10,5505,5592): function does not abort under this condition"}
      !(!$t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#255, $t2));

    // assert Not(And(Not($t5), exists[@256]<Diem::Preburn<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:9+78
    assume {:print "$at(10,5601,5679)"} true;
    assert {:msg "assert_failed(10,5601,5679): function does not abort under this condition"}
      !(!$t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#256, $t2));

    // assert Not(And(Not($t5), Not(Diem::spec_is_currency[@254]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(!$t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254));

    // assert Not(Not(Diem::spec_is_currency[@254]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254);

    // assert Not(And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259));

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@260]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(exists[@248]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#248, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert exists<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1384:9+62
    assume {:print "$at(12,63103,63165)"} true;
    assert {:msg "assert_failed(12,63103,63165): post-condition does not hold"}
      $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1385:9+39
    assume {:print "$at(12,63174,63213)"} true;
    assert {:msg "assert_failed(12,63174,63213): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert Roles::spec_has_designated_dealer_role_addr($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1386:9+73
    assume {:print "$at(12,63222,63295)"} true;
    assert {:msg "assert_failed(12,63222,63295): post-condition does not hold"}
      $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, $t2);

    // assert exists<DiemAccount::Balance<XUS::XUS>>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2);

    // assert Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0)));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), exists<DiemAccount::Balance<XUS::XUS>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), exists<DiemAccount::Balance<XDX::XDX>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assume {:print "$at(3,34609,35646)"} true;
    assert {:msg "assert_failed(3,34609,35646): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:494:5+1
    assume {:print "$at(3,34602,34603)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), exists[@248]<Roles::RoleId>($t2)), exists[@249]<DesignatedDealer::Dealer>($t2)), Not(DiemTimestamp::$is_operating[@250]())), Not(exists[@248]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>())), And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2))), And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2))), And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>()))), And(Not($t5), Diem::$is_synthetic_currency[@254]<XUS::XUS>())), And(Not($t5), exists[@255]<Diem::PreburnQueue<XUS::XUS>>($t2))), And(Not($t5), exists[@256]<Diem::Preburn<XUS::XUS>>($t2))), And(Not($t5), Not(Diem::spec_is_currency[@254]<XUS::XUS>()))), Not(Diem::spec_is_currency[@254]<XUS::XUS>())), And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>()))), And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>()))), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@260]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(exists[@248]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assume {:print "$at(3,34609,35646)"} true;
    assert {:msg "assert_failed(3,34609,35646): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $ResourceExists($1_Roles_RoleId_$memory#248, $t2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250)) || !$ResourceExists($1_Roles_RoleId_$memory#248, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || ($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || ($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2))) || ($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2))) || ($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || (!$t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254))) || (!$t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#255, $t2))) || (!$t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#256, $t2))) || (!$t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254)) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259))) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$ResourceExists($1_Roles_RoleId_$memory#248, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t8)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t8))), And(exists[@248]<Roles::RoleId>($t2), Eq(6, $t8))), And(exists[@249]<DesignatedDealer::Dealer>($t2), Eq(6, $t8))), And(Not(DiemTimestamp::$is_operating[@250]()), Eq(1, $t8))), And(Not(exists[@248]<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), And(And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>()), Eq(7, $t8))), And(And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2)), Eq(6, $t8))), And(And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2)), Eq(1, $t8))), And(And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>())), Eq(5, $t8))), And(And(Not($t5), Diem::$is_synthetic_currency[@254]<XUS::XUS>()), Eq(7, $t8))), And(And(Not($t5), exists[@255]<Diem::PreburnQueue<XUS::XUS>>($t2)), Eq(6, $t8))), And(And(Not($t5), exists[@256]<Diem::Preburn<XUS::XUS>>($t2)), Eq(1, $t8))), And(And(Not($t5), Not(Diem::spec_is_currency[@254]<XUS::XUS>())), Eq(5, $t8))), And(Not(Diem::spec_is_currency[@254]<XUS::XUS>()), Eq(5, $t8))), And(And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>())), Eq(5, $t8))), And(And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>())), Eq(5, $t8))), And(Eq<address>($t2, 0), Eq(7, $t8))), And(Eq<address>($t2, 1), Eq(7, $t8))), And(exists[@260]<AccountFreezing::FreezingBit>($t2), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t8))), And(Not(exists[@248]<Roles::RoleId>($t7)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), Eq(7, $t8)), Eq(2, $t8)), Eq(5, $t8)), Eq(6, $t8)), Eq(3, $t8)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assert {:msg "assert_failed(3,34609,35646): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#248, $t2) && $IsEqual'num'(6, $t8))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2) && $IsEqual'num'(6, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && $IsEqual'num'(1, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#248, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || (($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(7, $t8))) || (($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2)) && $IsEqual'num'(6, $t8))) || (($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2)) && $IsEqual'num'(1, $t8))) || (($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(5, $t8))) || ((!$t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254)) && $IsEqual'num'(7, $t8))) || ((!$t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#255, $t2)) && $IsEqual'num'(6, $t8))) || ((!$t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#256, $t2)) && $IsEqual'num'(1, $t8))) || ((!$t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254)) && $IsEqual'num'(5, $t8))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#254) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259)) && $IsEqual'num'(5, $t8))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t8))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#248, $t7) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || $IsEqual'num'(7, $t8)) || $IsEqual'num'(2, $t8)) || $IsEqual'num'(5, $t8)) || $IsEqual'num'(6, $t8)) || $IsEqual'num'(3, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_designated_dealer [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
procedure {:timeLimit 40} $1_AccountCreationScripts_create_designated_dealer$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int), _$t5: bool) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t11: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#247: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#248: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#249: $Memory $1_DesignatedDealer_Dealer;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Diem_Preburn'$1_XUS_XUS'_$memory#253: $Memory $1_Diem_Preburn'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#255: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $1_Diem_Preburn'$1_XDX_XDX'_$memory#256: $Memory $1_Diem_Preburn'$1_XDX_XDX';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#260: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#261: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,34085,34603)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XUS::XUS>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XDX::XDX>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr): Not(exists<Diem::Preburn<XUS::XUS>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr)));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr): Not(exists<Diem::Preburn<XDX::XDX>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume $IsValid'bool'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XDX::XDX>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+518
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @250 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @248 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#248 := $1_Roles_RoleId_$memory;

    // @247 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#247 := $1_SlidingNonce_SlidingNonce_$memory;

    // @251 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @253 := save_mem(Diem::Preburn<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_Preburn'$1_XUS_XUS'_$memory#253 := $1_Diem_Preburn'$1_XUS_XUS'_$memory;

    // @252 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @259 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @254 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @256 := save_mem(Diem::Preburn<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_Preburn'$1_XDX_XDX'_$memory#256 := $1_Diem_Preburn'$1_XDX_XDX'_$memory;

    // @255 := save_mem(Diem::PreburnQueue<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#255 := $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory;

    // @249 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DesignatedDealer_Dealer_$memory#249 := $1_DesignatedDealer_Dealer_$memory;

    // @260 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#260 := $1_AccountFreezing_FreezingBit_$memory;

    // @261 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#261 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @257 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @258 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$at(3,34085,34086)"} true;
    assume {:print "$track_local(37,1,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,1):", $t1} $t1 == $t1;

    // trace_local[addr]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,4):", $t4} $t4 == $t4;

    // trace_local[add_all_currencies]($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:478:5+1
    assume {:print "$track_local(37,1,5):", $t5} $t5 == $t5;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:486:9+63
    assume {:print "$at(3,34338,34401)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,34338,34401)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,1):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_designated_dealer<XDX::XDX>($t0, $t2, $t3, $t4, $t5) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:487:9+185
    assume {:print "$at(3,34411,34596)"} true;
    call $1_DiemAccount_create_designated_dealer'$1_XDX_XDX'($t0, $t2, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(3,34411,34596)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,1):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:494:5+1
    assume {:print "$at(3,34602,34603)"} true;
L1:

    // assume Identical($t10, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t10 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t11, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t11 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(exists[@248]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1374:9+84
    assume {:print "$at(12,62442,62526)"} true;
    assert {:msg "assert_failed(12,62442,62526): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#248, $t2);

    // assert Not(exists[@249]<DesignatedDealer::Dealer>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1375:9+95
    assume {:print "$at(12,62535,62630)"} true;
    assert {:msg "assert_failed(12,62535,62630): function does not abort under this condition"}
      !$ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@250]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250);

    // assert Not(Not(exists[@248]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#248, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:128:9+80
    assume {:print "$at(10,5416,5496)"} true;
    assert {:msg "assert_failed(10,5416,5496): function does not abort under this condition"}
      !($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:129:9+87
    assume {:print "$at(10,5505,5592)"} true;
    assert {:msg "assert_failed(10,5505,5592): function does not abort under this condition"}
      !($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2));

    // assert Not(And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:9+78
    assume {:print "$at(10,5601,5679)"} true;
    assert {:msg "assert_failed(10,5601,5679): function does not abort under this condition"}
      !($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2));

    // assert Not(And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And(Not($t5), Diem::$is_synthetic_currency[@254]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:128:9+80
    assume {:print "$at(10,5416,5496)"} true;
    assert {:msg "assert_failed(10,5416,5496): function does not abort under this condition"}
      !(!$t5 && $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254));

    // assert Not(And(Not($t5), exists[@255]<Diem::PreburnQueue<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:129:9+87
    assume {:print "$at(10,5505,5592)"} true;
    assert {:msg "assert_failed(10,5505,5592): function does not abort under this condition"}
      !(!$t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#255, $t2));

    // assert Not(And(Not($t5), exists[@256]<Diem::Preburn<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:130:9+78
    assume {:print "$at(10,5601,5679)"} true;
    assert {:msg "assert_failed(10,5601,5679): function does not abort under this condition"}
      !(!$t5 && $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#256, $t2));

    // assert Not(And(Not($t5), Not(Diem::spec_is_currency[@254]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(!$t5 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254));

    // assert Not(Not(Diem::spec_is_currency[@254]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254);

    // assert Not(And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251));

    // assert Not(And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259));

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@260]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(exists[@248]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#248, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert exists<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1384:9+62
    assume {:print "$at(12,63103,63165)"} true;
    assert {:msg "assert_failed(12,63103,63165): post-condition does not hold"}
      $ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1385:9+39
    assume {:print "$at(12,63174,63213)"} true;
    assert {:msg "assert_failed(12,63174,63213): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert Roles::spec_has_designated_dealer_role_addr($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1386:9+73
    assume {:print "$at(12,63222,63295)"} true;
    assert {:msg "assert_failed(12,63222,63295): post-condition does not hold"}
      $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, $t2);

    // assert exists<DiemAccount::Balance<XDX::XDX>>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2);

    // assert Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0)));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), exists<DiemAccount::Balance<XUS::XUS>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), exists<DiemAccount::Balance<XDX::XDX>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assume {:print "$at(3,34609,35646)"} true;
    assert {:msg "assert_failed(3,34609,35646): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:494:5+1
    assume {:print "$at(3,34602,34603)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), exists[@248]<Roles::RoleId>($t2)), exists[@249]<DesignatedDealer::Dealer>($t2)), Not(DiemTimestamp::$is_operating[@250]())), Not(exists[@248]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>())), And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2))), And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2))), And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>()))), And(Not($t5), Diem::$is_synthetic_currency[@254]<XDX::XDX>())), And(Not($t5), exists[@255]<Diem::PreburnQueue<XDX::XDX>>($t2))), And(Not($t5), exists[@256]<Diem::Preburn<XDX::XDX>>($t2))), And(Not($t5), Not(Diem::spec_is_currency[@254]<XDX::XDX>()))), Not(Diem::spec_is_currency[@254]<XDX::XDX>())), And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>()))), And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>()))), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@260]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(exists[@248]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assume {:print "$at(3,34609,35646)"} true;
    assert {:msg "assert_failed(3,34609,35646): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $ResourceExists($1_Roles_RoleId_$memory#248, $t2)) || $ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250)) || !$ResourceExists($1_Roles_RoleId_$memory#248, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || ($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || ($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2))) || ($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2))) || ($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || (!$t5 && $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254))) || (!$t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#255, $t2))) || (!$t5 && $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#256, $t2))) || (!$t5 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254)) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251))) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259))) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$ResourceExists($1_Roles_RoleId_$memory#248, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@247]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t8)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t8))), And(exists[@248]<Roles::RoleId>($t2), Eq(6, $t8))), And(exists[@249]<DesignatedDealer::Dealer>($t2), Eq(6, $t8))), And(Not(DiemTimestamp::$is_operating[@250]()), Eq(1, $t8))), And(Not(exists[@248]<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), And(And($t5, Diem::$is_synthetic_currency[@251]<XUS::XUS>()), Eq(7, $t8))), And(And($t5, exists[@252]<Diem::PreburnQueue<XUS::XUS>>($t2)), Eq(6, $t8))), And(And($t5, exists[@253]<Diem::Preburn<XUS::XUS>>($t2)), Eq(1, $t8))), And(And($t5, Not(Diem::spec_is_currency[@251]<XUS::XUS>())), Eq(5, $t8))), And(And(Not($t5), Diem::$is_synthetic_currency[@254]<XDX::XDX>()), Eq(7, $t8))), And(And(Not($t5), exists[@255]<Diem::PreburnQueue<XDX::XDX>>($t2)), Eq(6, $t8))), And(And(Not($t5), exists[@256]<Diem::Preburn<XDX::XDX>>($t2)), Eq(1, $t8))), And(And(Not($t5), Not(Diem::spec_is_currency[@254]<XDX::XDX>())), Eq(5, $t8))), And(Not(Diem::spec_is_currency[@254]<XDX::XDX>()), Eq(5, $t8))), And(And(And($t5, Not(exists[@257]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@251]<XUS::XUS>())), Eq(5, $t8))), And(And(And($t5, Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@259]<XDX::XDX>())), Eq(5, $t8))), And(Eq<address>($t2, 0), Eq(7, $t8))), And(Eq<address>($t2, 1), Eq(7, $t8))), And(exists[@260]<AccountFreezing::FreezingBit>($t2), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@250](), Not(exists[@261]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t8))), And(Not(exists[@248]<Roles::RoleId>($t7)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@248]<Roles::RoleId>($t7)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), Eq(7, $t8)), Eq(2, $t8)), Eq(5, $t8)), Eq(6, $t8)), Eq(3, $t8)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    assert {:msg "assert_failed(3,34609,35646): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#247, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#248, $t2) && $IsEqual'num'(6, $t8))) || ($ResourceExists($1_DesignatedDealer_Dealer_$memory#249, $t2) && $IsEqual'num'(6, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && $IsEqual'num'(1, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#248, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || (($t5 && $1_Diem_$is_synthetic_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(7, $t8))) || (($t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#252, $t2)) && $IsEqual'num'(6, $t8))) || (($t5 && $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#253, $t2)) && $IsEqual'num'(1, $t8))) || (($t5 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(5, $t8))) || ((!$t5 && $1_Diem_$is_synthetic_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254)) && $IsEqual'num'(7, $t8))) || ((!$t5 && $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#255, $t2)) && $IsEqual'num'(6, $t8))) || ((!$t5 && $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#256, $t2)) && $IsEqual'num'(1, $t8))) || ((!$t5 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254)) && $IsEqual'num'(5, $t8))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#254) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#257, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#251)) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#259)) && $IsEqual'num'(5, $t8))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t8))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#260, $t2) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#250) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#261, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#248, $t7) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#248, $t7)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || $IsEqual'num'(7, $t8)) || $IsEqual'num'(2, $t8)) || $IsEqual'num'(5, $t8)) || $IsEqual'num'(6, $t8)) || $IsEqual'num'(3, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:496:5+1037
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_parent_vasp_account [verification] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
procedure {:timeLimit 40} $1_AccountCreationScripts_create_parent_vasp_account$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int), _$t5: bool) returns ()
{
    // declare local variables
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t11: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#234: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#235: $Memory $1_Roles_RoleId;
    var $1_VASP_ChildVASP_$memory#236: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#237: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_VASPDomain_VASPDomains_$memory#239: $Memory $1_VASPDomain_VASPDomains;
    var $1_Diem_CurrencyInfo'#0'_$memory#240: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#245: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#246: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,27370,27921)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'bool'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 63), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 63))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 63))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 63))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @238 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @235 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#235 := $1_Roles_RoleId_$memory;

    // @234 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#234 := $1_SlidingNonce_SlidingNonce_$memory;

    // @242 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @244 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @240 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#240 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @239 := save_mem(VASPDomain::VASPDomains) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASPDomain_VASPDomains_$memory#239 := $1_VASPDomain_VASPDomains_$memory;

    // @236 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#236 := $1_VASP_ChildVASP_$memory;

    // @237 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#237 := $1_VASP_ParentVASP_$memory;

    // @245 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#245 := $1_AccountFreezing_FreezingBit_$memory;

    // @246 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#246 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @241 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @243 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$at(3,27370,27371)"} true;
    assume {:print "$track_local(37,2,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,1):", $t1} $t1 == $t1;

    // trace_local[new_account_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,4):", $t4} $t4 == $t4;

    // trace_local[add_all_currencies]($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,5):", $t5} $t5 == $t5;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:394:9+63
    assume {:print "$at(3,27639,27702)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,27639,27702)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_parent_vasp_account<#0>($t0, $t2, $t3, $t4, $t5) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:395:9+202
    assume {:print "$at(3,27712,27914)"} true;
    call $1_DiemAccount_create_parent_vasp_account'#0'($t0, $t2, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(3,27712,27914)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:402:5+1
    assume {:print "$at(3,27920,27921)"} true;
L1:

    // assume Identical($t10, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t10 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t11, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t11 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(exists[@235]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:9+84
    assume {:print "$at(12,65596,65680)"} true;
    assert {:msg "assert_failed(12,65596,65680): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#235, $t2);

    // assert Not(VASP::$is_vasp[@236, @237]($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1435:9+76
    assume {:print "$at(12,65689,65765)"} true;
    assert {:msg "assert_failed(12,65689,65765): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@238]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238);

    // assert Not(Not(exists[@235]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#235, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(VASPDomain::$has_vasp_domains[@239]($t2)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:100:9+69
    assume {:print "$at(36,3762,3831)"} true;
    assert {:msg "assert_failed(36,3762,3831): function does not abort under this condition"}
      !$1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2);

    // assert Not(Not(Diem::spec_is_currency[@240]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240);

    // assert Not(And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242));

    // assert Not(And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244));

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@245]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(exists[@235]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#235, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1443:9+39
    assume {:print "$at(12,66100,66139)"} true;
    assert {:msg "assert_failed(12,66100,66139): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert Roles::spec_has_parent_VASP_role_addr($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1444:9+67
    assume {:print "$at(12,66148,66215)"} true;
    assert {:msg "assert_failed(12,66148,66215): post-condition does not hold"}
      $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, $t2);

    // assert VASP::$is_parent($t2) at /home/ying/diem/language/diem-framework/modules/VASP.move:63:9+29
    assume {:print "$at(35,2915,2944)"} true;
    assert {:msg "assert_failed(35,2915,2944): post-condition does not hold"}
      $1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t2);

    // assert Eq<u64>(VASP::spec_num_children($t2), 0) at /home/ying/diem/language/diem-framework/modules/VASP.move:64:9+42
    assume {:print "$at(35,2953,2995)"} true;
    assert {:msg "assert_failed(35,2953,2995): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $t2), 0);

    // assert exists<DiemAccount::Balance<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t2);

    // assert Eq<DiemAccount::Balance<#0>>(global<DiemAccount::Balance<#0>>($t2), pack DiemAccount::Balance<#0>(pack Diem::Diem<#0>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'#0''($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t2), $1_DiemAccount_Balance'#0'($1_Diem_Diem'#0'(0)));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), exists<DiemAccount::Balance<XUS::XUS>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), exists<DiemAccount::Balance<XDX::XDX>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert exists<VASPDomain::VASPDomains>($t2) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:104:9+39
    assume {:print "$at(36,3918,3957)"} true;
    assert {:msg "assert_failed(36,3918,3957): post-condition does not hold"}
      $ResourceExists($1_VASPDomain_VASPDomains_$memory, $t2);

    // assert Vector::$is_empty<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t2))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:105:9+65
    assume {:print "$at(36,3966,4031)"} true;
    assert {:msg "assert_failed(36,3966,4031): post-condition does not hold"}
      $1_Vector_$is_empty'$1_VASPDomain_VASPDomain'($domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t2)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assume {:print "$at(3,27927,28868)"} true;
    assert {:msg "assert_failed(3,27927,28868): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:402:5+1
    assume {:print "$at(3,27920,27921)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), exists[@235]<Roles::RoleId>($t2)), VASP::$is_vasp[@236, @237]($t2)), Not(DiemTimestamp::$is_operating[@238]())), Not(exists[@235]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), VASPDomain::$has_vasp_domains[@239]($t2)), Not(Diem::spec_is_currency[@240]<#0>())), And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>()))), And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>()))), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@245]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(exists[@235]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assume {:print "$at(3,27927,28868)"} true;
    assert {:msg "assert_failed(3,27927,28868): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $ResourceExists($1_Roles_RoleId_$memory#235, $t2)) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238)) || !$ResourceExists($1_Roles_RoleId_$memory#235, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || $1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240)) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242))) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244))) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$ResourceExists($1_Roles_RoleId_$memory#235, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t8)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t8))), And(exists[@235]<Roles::RoleId>($t2), Eq(6, $t8))), And(VASP::$is_vasp[@236, @237]($t2), Eq(6, $t8))), And(Not(DiemTimestamp::$is_operating[@238]()), Eq(1, $t8))), And(Not(exists[@235]<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), And(VASPDomain::$has_vasp_domains[@239]($t2), Eq(6, $t8))), And(Not(Diem::spec_is_currency[@240]<#0>()), Eq(5, $t8))), And(And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>())), Eq(5, $t8))), And(And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>())), Eq(5, $t8))), And(Eq<address>($t2, 0), Eq(7, $t8))), And(Eq<address>($t2, 1), Eq(7, $t8))), And(exists[@245]<AccountFreezing::FreezingBit>($t2), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t8))), And(Not(exists[@235]<Roles::RoleId>($t7)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), Eq(7, $t8)), Eq(2, $t8)), Eq(5, $t8)), Eq(6, $t8)), Eq(3, $t8)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assert {:msg "assert_failed(3,27927,28868): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#235, $t2) && $IsEqual'num'(6, $t8))) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2) && $IsEqual'num'(6, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && $IsEqual'num'(1, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#235, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || ($1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2) && $IsEqual'num'(6, $t8))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242)) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244)) && $IsEqual'num'(5, $t8))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t8))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#235, $t7) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || $IsEqual'num'(7, $t8)) || $IsEqual'num'(2, $t8)) || $IsEqual'num'(5, $t8)) || $IsEqual'num'(6, $t8)) || $IsEqual'num'(3, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_parent_vasp_account [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
procedure {:timeLimit 40} $1_AccountCreationScripts_create_parent_vasp_account$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int), _$t5: bool) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t11: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#234: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#235: $Memory $1_Roles_RoleId;
    var $1_VASP_ChildVASP_$memory#236: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#237: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_VASPDomain_VASPDomains_$memory#239: $Memory $1_VASPDomain_VASPDomains;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#245: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#246: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,27370,27921)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'bool'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 63), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 63))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 63))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 63))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @238 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @235 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#235 := $1_Roles_RoleId_$memory;

    // @234 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#234 := $1_SlidingNonce_SlidingNonce_$memory;

    // @242 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @244 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @240 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @239 := save_mem(VASPDomain::VASPDomains) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASPDomain_VASPDomains_$memory#239 := $1_VASPDomain_VASPDomains_$memory;

    // @236 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#236 := $1_VASP_ChildVASP_$memory;

    // @237 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#237 := $1_VASP_ParentVASP_$memory;

    // @245 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#245 := $1_AccountFreezing_FreezingBit_$memory;

    // @246 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#246 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @241 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @243 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$at(3,27370,27371)"} true;
    assume {:print "$track_local(37,2,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,1):", $t1} $t1 == $t1;

    // trace_local[new_account_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,4):", $t4} $t4 == $t4;

    // trace_local[add_all_currencies]($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,5):", $t5} $t5 == $t5;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:394:9+63
    assume {:print "$at(3,27639,27702)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,27639,27702)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_parent_vasp_account<XUS::XUS>($t0, $t2, $t3, $t4, $t5) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:395:9+202
    assume {:print "$at(3,27712,27914)"} true;
    call $1_DiemAccount_create_parent_vasp_account'$1_XUS_XUS'($t0, $t2, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(3,27712,27914)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:402:5+1
    assume {:print "$at(3,27920,27921)"} true;
L1:

    // assume Identical($t10, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t10 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t11, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t11 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(exists[@235]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:9+84
    assume {:print "$at(12,65596,65680)"} true;
    assert {:msg "assert_failed(12,65596,65680): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#235, $t2);

    // assert Not(VASP::$is_vasp[@236, @237]($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1435:9+76
    assume {:print "$at(12,65689,65765)"} true;
    assert {:msg "assert_failed(12,65689,65765): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@238]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238);

    // assert Not(Not(exists[@235]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#235, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(VASPDomain::$has_vasp_domains[@239]($t2)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:100:9+69
    assume {:print "$at(36,3762,3831)"} true;
    assert {:msg "assert_failed(36,3762,3831): function does not abort under this condition"}
      !$1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2);

    // assert Not(Not(Diem::spec_is_currency[@240]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240);

    // assert Not(And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242));

    // assert Not(And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244));

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@245]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(exists[@235]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#235, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1443:9+39
    assume {:print "$at(12,66100,66139)"} true;
    assert {:msg "assert_failed(12,66100,66139): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert Roles::spec_has_parent_VASP_role_addr($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1444:9+67
    assume {:print "$at(12,66148,66215)"} true;
    assert {:msg "assert_failed(12,66148,66215): post-condition does not hold"}
      $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, $t2);

    // assert VASP::$is_parent($t2) at /home/ying/diem/language/diem-framework/modules/VASP.move:63:9+29
    assume {:print "$at(35,2915,2944)"} true;
    assert {:msg "assert_failed(35,2915,2944): post-condition does not hold"}
      $1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t2);

    // assert Eq<u64>(VASP::spec_num_children($t2), 0) at /home/ying/diem/language/diem-framework/modules/VASP.move:64:9+42
    assume {:print "$at(35,2953,2995)"} true;
    assert {:msg "assert_failed(35,2953,2995): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $t2), 0);

    // assert exists<DiemAccount::Balance<XUS::XUS>>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2);

    // assert Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0)));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), exists<DiemAccount::Balance<XUS::XUS>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), exists<DiemAccount::Balance<XDX::XDX>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert exists<VASPDomain::VASPDomains>($t2) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:104:9+39
    assume {:print "$at(36,3918,3957)"} true;
    assert {:msg "assert_failed(36,3918,3957): post-condition does not hold"}
      $ResourceExists($1_VASPDomain_VASPDomains_$memory, $t2);

    // assert Vector::$is_empty<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t2))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:105:9+65
    assume {:print "$at(36,3966,4031)"} true;
    assert {:msg "assert_failed(36,3966,4031): post-condition does not hold"}
      $1_Vector_$is_empty'$1_VASPDomain_VASPDomain'($domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t2)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assume {:print "$at(3,27927,28868)"} true;
    assert {:msg "assert_failed(3,27927,28868): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:402:5+1
    assume {:print "$at(3,27920,27921)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), exists[@235]<Roles::RoleId>($t2)), VASP::$is_vasp[@236, @237]($t2)), Not(DiemTimestamp::$is_operating[@238]())), Not(exists[@235]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), VASPDomain::$has_vasp_domains[@239]($t2)), Not(Diem::spec_is_currency[@240]<XUS::XUS>())), And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>()))), And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>()))), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@245]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(exists[@235]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assume {:print "$at(3,27927,28868)"} true;
    assert {:msg "assert_failed(3,27927,28868): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $ResourceExists($1_Roles_RoleId_$memory#235, $t2)) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238)) || !$ResourceExists($1_Roles_RoleId_$memory#235, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || $1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240)) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242))) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244))) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$ResourceExists($1_Roles_RoleId_$memory#235, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t8)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t8))), And(exists[@235]<Roles::RoleId>($t2), Eq(6, $t8))), And(VASP::$is_vasp[@236, @237]($t2), Eq(6, $t8))), And(Not(DiemTimestamp::$is_operating[@238]()), Eq(1, $t8))), And(Not(exists[@235]<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), And(VASPDomain::$has_vasp_domains[@239]($t2), Eq(6, $t8))), And(Not(Diem::spec_is_currency[@240]<XUS::XUS>()), Eq(5, $t8))), And(And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>())), Eq(5, $t8))), And(And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>())), Eq(5, $t8))), And(Eq<address>($t2, 0), Eq(7, $t8))), And(Eq<address>($t2, 1), Eq(7, $t8))), And(exists[@245]<AccountFreezing::FreezingBit>($t2), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t8))), And(Not(exists[@235]<Roles::RoleId>($t7)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), Eq(7, $t8)), Eq(2, $t8)), Eq(5, $t8)), Eq(6, $t8)), Eq(3, $t8)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assert {:msg "assert_failed(3,27927,28868): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#235, $t2) && $IsEqual'num'(6, $t8))) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2) && $IsEqual'num'(6, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && $IsEqual'num'(1, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#235, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || ($1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2) && $IsEqual'num'(6, $t8))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242)) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244)) && $IsEqual'num'(5, $t8))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t8))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#235, $t7) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || $IsEqual'num'(7, $t8)) || $IsEqual'num'(2, $t8)) || $IsEqual'num'(5, $t8)) || $IsEqual'num'(6, $t8)) || $IsEqual'num'(3, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_parent_vasp_account [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
procedure {:timeLimit 40} $1_AccountCreationScripts_create_parent_vasp_account$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int), _$t5: bool) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t11: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $t5: bool;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#234: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#235: $Memory $1_Roles_RoleId;
    var $1_VASP_ChildVASP_$memory#236: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#237: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_VASPDomain_VASPDomains_$memory#239: $Memory $1_VASPDomain_VASPDomains;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#245: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#246: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,27370,27921)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'vec'u8''($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume $IsValid'bool'($t5);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 63), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 63))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 63))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 63))))))))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+551
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @238 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @235 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#235 := $1_Roles_RoleId_$memory;

    // @234 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#234 := $1_SlidingNonce_SlidingNonce_$memory;

    // @242 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @244 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @240 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @239 := save_mem(VASPDomain::VASPDomains) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASPDomain_VASPDomains_$memory#239 := $1_VASPDomain_VASPDomains_$memory;

    // @236 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#236 := $1_VASP_ChildVASP_$memory;

    // @237 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#237 := $1_VASP_ParentVASP_$memory;

    // @245 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#245 := $1_AccountFreezing_FreezingBit_$memory;

    // @246 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#246 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @241 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // @243 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$at(3,27370,27371)"} true;
    assume {:print "$track_local(37,2,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,1):", $t1} $t1 == $t1;

    // trace_local[new_account_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,4):", $t4} $t4 == $t4;

    // trace_local[add_all_currencies]($t5) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:386:5+1
    assume {:print "$track_local(37,2,5):", $t5} $t5 == $t5;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:394:9+63
    assume {:print "$at(3,27639,27702)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,27639,27702)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // DiemAccount::create_parent_vasp_account<XDX::XDX>($t0, $t2, $t3, $t4, $t5) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:395:9+202
    assume {:print "$at(3,27712,27914)"} true;
    call $1_DiemAccount_create_parent_vasp_account'$1_XDX_XDX'($t0, $t2, $t3, $t4, $t5);
    if ($abort_flag) {
        assume {:print "$at(3,27712,27914)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(37,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:402:5+1
    assume {:print "$at(3,27920,27921)"} true;
L1:

    // assume Identical($t10, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t10 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t11, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t11 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(exists[@235]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1434:9+84
    assume {:print "$at(12,65596,65680)"} true;
    assert {:msg "assert_failed(12,65596,65680): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#235, $t2);

    // assert Not(VASP::$is_vasp[@236, @237]($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1435:9+76
    assume {:print "$at(12,65689,65765)"} true;
    assert {:msg "assert_failed(12,65689,65765): function does not abort under this condition"}
      !$1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@238]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238);

    // assert Not(Not(exists[@235]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#235, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(VASPDomain::$has_vasp_domains[@239]($t2)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:100:9+69
    assume {:print "$at(36,3762,3831)"} true;
    assert {:msg "assert_failed(36,3762,3831): function does not abort under this condition"}
      !$1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2);

    // assert Not(Not(Diem::spec_is_currency[@240]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240);

    // assert Not(And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242));

    // assert Not(And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !(($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244));

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@245]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(exists[@235]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#235, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1443:9+39
    assume {:print "$at(12,66100,66139)"} true;
    assert {:msg "assert_failed(12,66100,66139): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert Roles::spec_has_parent_VASP_role_addr($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1444:9+67
    assume {:print "$at(12,66148,66215)"} true;
    assert {:msg "assert_failed(12,66148,66215): post-condition does not hold"}
      $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, $t2);

    // assert VASP::$is_parent($t2) at /home/ying/diem/language/diem-framework/modules/VASP.move:63:9+29
    assume {:print "$at(35,2915,2944)"} true;
    assert {:msg "assert_failed(35,2915,2944): post-condition does not hold"}
      $1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $t2);

    // assert Eq<u64>(VASP::spec_num_children($t2), 0) at /home/ying/diem/language/diem-framework/modules/VASP.move:64:9+42
    assume {:print "$at(35,2953,2995)"} true;
    assert {:msg "assert_failed(35,2953,2995): post-condition does not hold"}
      $IsEqual'u64'($1_VASP_spec_num_children($1_VASP_ParentVASP_$memory, $t2), 0);

    // assert exists<DiemAccount::Balance<XDX::XDX>>($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2);

    // assert Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0)));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), exists<DiemAccount::Balance<XUS::XUS>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), Eq<DiemAccount::Balance<XUS::XUS>>(global<DiemAccount::Balance<XUS::XUS>>($t2), pack DiemAccount::Balance<XUS::XUS>(pack Diem::Diem<XUS::XUS>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2), $1_DiemAccount_Balance'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(0))));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), exists<DiemAccount::Balance<XDX::XDX>>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1573:9+37
    assume {:print "$at(12,72040,72077)"} true;
    assert {:msg "assert_failed(12,72040,72077): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2));

    // assert Implies(And($t5, Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), Eq<DiemAccount::Balance<XDX::XDX>>(global<DiemAccount::Balance<XDX::XDX>>($t2), pack DiemAccount::Balance<XDX::XDX>(pack Diem::Diem<XDX::XDX>(0)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1574:9+101
    assume {:print "$at(12,72086,72187)"} true;
    assert {:msg "assert_failed(12,72086,72187): post-condition does not hold"}
      (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) ==> $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2), $1_DiemAccount_Balance'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(0))));

    // assert exists<VASPDomain::VASPDomains>($t2) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:104:9+39
    assume {:print "$at(36,3918,3957)"} true;
    assert {:msg "assert_failed(36,3918,3957): post-condition does not hold"}
      $ResourceExists($1_VASPDomain_VASPDomains_$memory, $t2);

    // assert Vector::$is_empty<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t2))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:105:9+65
    assume {:print "$at(36,3966,4031)"} true;
    assert {:msg "assert_failed(36,3966,4031): post-condition does not hold"}
      $1_Vector_$is_empty'$1_VASPDomain_VASPDomain'($domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t2)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assume {:print "$at(3,27927,28868)"} true;
    assert {:msg "assert_failed(3,27927,28868): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:402:5+1
    assume {:print "$at(3,27920,27921)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), exists[@235]<Roles::RoleId>($t2)), VASP::$is_vasp[@236, @237]($t2)), Not(DiemTimestamp::$is_operating[@238]())), Not(exists[@235]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), VASPDomain::$has_vasp_domains[@239]($t2)), Not(Diem::spec_is_currency[@240]<XDX::XDX>())), And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>()))), And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>()))), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@245]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(exists[@235]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assume {:print "$at(3,27927,28868)"} true;
    assert {:msg "assert_failed(3,27927,28868): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $ResourceExists($1_Roles_RoleId_$memory#235, $t2)) || $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238)) || !$ResourceExists($1_Roles_RoleId_$memory#235, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || $1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240)) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242))) || (($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244))) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$ResourceExists($1_Roles_RoleId_$memory#235, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@234]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t8)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t8))), And(exists[@235]<Roles::RoleId>($t2), Eq(6, $t8))), And(VASP::$is_vasp[@236, @237]($t2), Eq(6, $t8))), And(Not(DiemTimestamp::$is_operating[@238]()), Eq(1, $t8))), And(Not(exists[@235]<Roles::RoleId>($t6)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), And(VASPDomain::$has_vasp_domains[@239]($t2), Eq(6, $t8))), And(Not(Diem::spec_is_currency[@240]<XDX::XDX>()), Eq(5, $t8))), And(And(And($t5, Not(exists[@241]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(Diem::spec_is_currency[@242]<XUS::XUS>())), Eq(5, $t8))), And(And(And($t5, Not(exists[@243]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(Diem::spec_is_currency[@244]<XDX::XDX>())), Eq(5, $t8))), And(Eq<address>($t2, 0), Eq(7, $t8))), And(Eq<address>($t2, 1), Eq(7, $t8))), And(exists[@245]<AccountFreezing::FreezingBit>($t2), Eq(6, $t8))), And(And(DiemTimestamp::$is_genesis[@238](), Not(exists[@246]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t8))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t8))), And(Not(exists[@235]<Roles::RoleId>($t7)), Eq(5, $t8))), And(Neq<u64>(select Roles::RoleId.role_id(global[@235]<Roles::RoleId>($t7)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t8))), Eq(7, $t8)), Eq(2, $t8)), Eq(5, $t8)), Eq(6, $t8)), Eq(3, $t8)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    assert {:msg "assert_failed(3,27927,28868): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#234, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_Roles_RoleId_$memory#235, $t2) && $IsEqual'num'(6, $t8))) || ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory#236, $1_VASP_ParentVASP_$memory#237, $t2) && $IsEqual'num'(6, $t8))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && $IsEqual'num'(1, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#235, $t6) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || ($1_VASPDomain_$has_vasp_domains($1_VASPDomain_VASPDomains_$memory#239, $t2) && $IsEqual'num'(6, $t8))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#241, $t2)) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#242)) && $IsEqual'num'(5, $t8))) || ((($t5 && !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#243, $t2)) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#244)) && $IsEqual'num'(5, $t8))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t8))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t8))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#245, $t2) && $IsEqual'num'(6, $t8))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#238) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#246, 173345816)) && $IsEqual'num'(5, $t8))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t8))) || (!$ResourceExists($1_Roles_RoleId_$memory#235, $t7) && $IsEqual'num'(5, $t8))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#235, $t7)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8))) || $IsEqual'num'(7, $t8)) || $IsEqual'num'(2, $t8)) || $IsEqual'num'(5, $t8)) || $IsEqual'num'(6, $t8)) || $IsEqual'num'(3, $t8));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:404:5+941
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_validator_account [verification] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
procedure {:timeLimit 40} $1_AccountCreationScripts_create_validator_account$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int)) returns ()
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t10: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#184: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_ValidatorConfig_ValidatorConfig_$memory#185: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_Roles_RoleId_$memory#186: $Memory $1_Roles_RoleId;
    var $1_AccountFreezing_FreezingBit_$memory#187: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_AccountOperationsCapability_$memory#189: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,20144,20609)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume $IsValid'vec'u8''($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorConfig::ValidatorConfig>(): And(WellFormed($rsc), And(Le(Len<ValidatorConfig::Config>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.config($rsc))), 1), Le(Len<address>(select Option::Option.vec(select ValidatorConfig::ValidatorConfig.operator_account($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, $a_0);
    (($IsValid'$1_ValidatorConfig_ValidatorConfig'($rsc) && ((LenVec($vec#$1_Option_Option'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'address'($operator_account#$1_ValidatorConfig_ValidatorConfig($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+465
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assume CanModify<Roles::RoleId>($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    assume {:print "$at(28,7822,7852)"} true;
    assume $1_Roles_RoleId_$modifies[$t2];

    // @188 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @186 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_Roles_RoleId_$memory#186 := $1_Roles_RoleId_$memory;

    // @185 := save_mem(ValidatorConfig::ValidatorConfig) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_ValidatorConfig_ValidatorConfig_$memory#185 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @184 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_SlidingNonce_SlidingNonce_$memory#184 := $1_SlidingNonce_SlidingNonce_$memory;

    // @187 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_AccountFreezing_FreezingBit_$memory#187 := $1_AccountFreezing_FreezingBit_$memory;

    // @189 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_DiemAccount_AccountOperationsCapability_$memory#189 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+1
    assume {:print "$at(3,20144,20145)"} true;
    assume {:print "$track_local(37,3,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+1
    assume {:print "$track_local(37,3,1):", $t1} $t1 == $t1;

    // trace_local[new_account_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+1
    assume {:print "$track_local(37,3,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+1
    assume {:print "$track_local(37,3,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:291:5+1
    assume {:print "$track_local(37,3,4):", $t4} $t4 == $t4;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:298:9+63
    assume {:print "$at(3,20368,20431)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,20368,20431)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(37,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Roles::RoleId>($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:299:9+159
    assume {:print "$at(3,20441,20600)"} true;
    assert {:msg "assert_failed(3,20441,20600): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$t2];

    // DiemAccount::create_validator_account($t0, $t2, $t3, $t4) on_abort goto L2 with $t7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:299:9+159
    call $1_DiemAccount_create_validator_account($t0, $t2, $t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,20441,20600)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(37,3):", $t7} $t7 == $t7;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:305:7+1
    assume {:print "$at(3,20608,20609)"} true;
L1:

    // assume Identical($t9, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t9 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t10, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t10 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@184]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#184, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(ValidatorConfig::$exists_config[@185]($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2207:9+93
    assume {:print "$at(12,99238,99331)"} true;
    assert {:msg "assert_failed(12,99238,99331): function does not abort under this condition"}
      !$1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory#185, $t2);

    // assert Not(Not(exists[@186]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#186, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@186]<Roles::RoleId>($t5)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#186, $t5)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@187]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#187, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@188](), Not(exists[@189]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#189, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(DiemTimestamp::$is_operating[@188]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188);

    // assert Not(exists[@186]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+62
    assume {:print "$at(28,7656,7718)"} true;
    assert {:msg "assert_failed(28,7656,7718): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#186, $t2);

    // assert Not(Not(exists[@186]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#186, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@186]<Roles::RoleId>($t6)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#186, $t6)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2214:9+39
    assume {:print "$at(12,99600,99639)"} true;
    assert {:msg "assert_failed(12,99600,99639): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert ValidatorConfig::$exists_config($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2215:9+60
    assume {:print "$at(12,99648,99708)"} true;
    assert {:msg "assert_failed(12,99648,99708): post-condition does not hold"}
      $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, $t2);

    // assert exists<Roles::RoleId>($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+29
    assume {:print "$at(28,7727,7756)"} true;
    assert {:msg "assert_failed(28,7727,7756): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $t2);

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 3) at /home/ying/diem/language/diem-framework/modules/Roles.move:183:9+48
    assume {:print "$at(28,7765,7813)"} true;
    assert {:msg "assert_failed(28,7765,7813): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 3);

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:314:5+866
    assume {:print "$at(3,21163,22029)"} true;
    assert {:msg "assert_failed(3,21163,22029): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:314:5+866
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:305:7+1
    assume {:print "$at(3,20608,20609)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@184]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), ValidatorConfig::$exists_config[@185]($t2)), Not(exists[@186]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@186]<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@187]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@188](), Not(exists[@189]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(DiemTimestamp::$is_operating[@188]())), exists[@186]<Roles::RoleId>($t2)), Not(exists[@186]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@186]<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:314:5+866
    assume {:print "$at(3,21163,22029)"} true;
    assert {:msg "assert_failed(3,21163,22029): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#184, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory#185, $t2)) || !$ResourceExists($1_Roles_RoleId_$memory#186, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#186, $t5)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#187, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#189, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188)) || $ResourceExists($1_Roles_RoleId_$memory#186, $t2)) || !$ResourceExists($1_Roles_RoleId_$memory#186, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#186, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@184]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t7)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t7))), And(ValidatorConfig::$exists_config[@185]($t2), Eq(6, $t7))), And(Not(exists[@186]<Roles::RoleId>($t5)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global[@186]<Roles::RoleId>($t5)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t7))), And(Eq<address>($t2, 0), Eq(7, $t7))), And(Eq<address>($t2, 1), Eq(7, $t7))), And(exists[@187]<AccountFreezing::FreezingBit>($t2), Eq(6, $t7))), And(And(DiemTimestamp::$is_genesis[@188](), Not(exists[@189]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t7))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t7))), And(Not(DiemTimestamp::$is_operating[@188]()), Eq(1, $t7))), And(exists[@186]<Roles::RoleId>($t2), Eq(6, $t7))), And(Not(exists[@186]<Roles::RoleId>($t6)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global[@186]<Roles::RoleId>($t6)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t7))), Eq(7, $t7)), Eq(5, $t7)), Eq(2, $t7)), Eq(6, $t7)), Eq(3, $t7)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:314:5+866
    assert {:msg "assert_failed(3,21163,22029): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#184, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t7)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t7))) || ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory#185, $t2) && $IsEqual'num'(6, $t7))) || (!$ResourceExists($1_Roles_RoleId_$memory#186, $t5) && $IsEqual'num'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#186, $t5)), 0) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t7))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t7))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t7))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#187, $t2) && $IsEqual'num'(6, $t7))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#189, 173345816)) && $IsEqual'num'(5, $t7))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t7))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#188) && $IsEqual'num'(1, $t7))) || ($ResourceExists($1_Roles_RoleId_$memory#186, $t2) && $IsEqual'num'(6, $t7))) || (!$ResourceExists($1_Roles_RoleId_$memory#186, $t6) && $IsEqual'num'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#186, $t6)), 0) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t7))) || $IsEqual'num'(7, $t7)) || $IsEqual'num'(5, $t7)) || $IsEqual'num'(2, $t7)) || $IsEqual'num'(6, $t7)) || $IsEqual'num'(3, $t7));

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:314:5+866
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun AccountCreationScripts::create_validator_operator_account [verification] at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
procedure {:timeLimit 40} $1_AccountCreationScripts_create_validator_operator_account$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int)) returns ()
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    var $t10: $1_DiemAccount_CreateAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_SlidingNonce_SlidingNonce_$memory#178: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#179: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
    var $1_Roles_RoleId_$memory#180: $Memory $1_Roles_RoleId;
    var $1_AccountFreezing_FreezingBit_$memory#181: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_AccountOperationsCapability_$memory#183: $Memory $1_DiemAccount_AccountOperationsCapability;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(3,13788,14268)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume $IsValid'vec'u8''($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<ValidatorOperatorConfig::ValidatorOperatorConfig>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume (forall $a_0: int :: {$ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $a_0);
    ($IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+480
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assume CanModify<Roles::RoleId>($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    assume {:print "$at(28,7822,7852)"} true;
    assume $1_Roles_RoleId_$modifies[$t2];

    // @182 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @180 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_Roles_RoleId_$memory#180 := $1_Roles_RoleId_$memory;

    // @179 := save_mem(ValidatorOperatorConfig::ValidatorOperatorConfig) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#179 := $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory;

    // @178 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_SlidingNonce_SlidingNonce_$memory#178 := $1_SlidingNonce_SlidingNonce_$memory;

    // @181 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_AccountFreezing_FreezingBit_$memory#181 := $1_AccountFreezing_FreezingBit_$memory;

    // @183 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_DiemAccount_AccountOperationsCapability_$memory#183 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+1
    assume {:print "$at(3,13788,13789)"} true;
    assume {:print "$track_local(37,4,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+1
    assume {:print "$track_local(37,4,1):", $t1} $t1 == $t1;

    // trace_local[new_account_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+1
    assume {:print "$track_local(37,4,2):", $t2} $t2 == $t2;

    // trace_local[auth_key_prefix]($t3) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+1
    assume {:print "$track_local(37,4,3):", $t3} $t3 == $t3;

    // trace_local[human_name]($t4) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:195:5+1
    assume {:print "$track_local(37,4,4):", $t4} $t4 == $t4;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:202:9+63
    assume {:print "$at(3,14020,14083)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(3,14020,14083)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(37,4):", $t7} $t7 == $t7;
        goto L2;
    }

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assert CanModify<Roles::RoleId>($t2) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:203:9+168
    assume {:print "$at(3,14093,14261)"} true;
    assert {:msg "assert_failed(3,14093,14261): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$t2];

    // DiemAccount::create_validator_operator_account($t0, $t2, $t3, $t4) on_abort goto L2 with $t7 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:203:9+168
    call $1_DiemAccount_create_validator_operator_account($t0, $t2, $t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(3,14093,14261)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(37,4):", $t7} $t7 == $t7;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:209:5+1
    assume {:print "$at(3,14267,14268)"} true;
L1:

    // assume Identical($t9, select DiemAccount::AccountOperationsCapability.creation_events(global<DiemAccount::AccountOperationsCapability>(a550c18))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1149:9+81
    assume {:print "$at(12,51646,51727)"} true;
    assume ($t9 == $creation_events#$1_DiemAccount_AccountOperationsCapability($ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)));

    // assume Identical($t10, pack DiemAccount::CreateAccountEvent($t2, Roles::spec_get_role_id($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1150:9+154
    assume {:print "$at(12,51736,51890)"} true;
    assume ($t10 == $1_DiemAccount_CreateAccountEvent($t2, $1_Roles_spec_get_role_id($1_Roles_RoleId_$memory, $t2)));

    // assert Not(Not(exists[@178]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#178, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(ValidatorOperatorConfig::$has_validator_operator_config[@179]($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2248:9+117
    assume {:print "$at(12,101075,101192)"} true;
    assert {:msg "assert_failed(12,101075,101192): function does not abort under this condition"}
      !$1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#179, $t2);

    // assert Not(Not(exists[@180]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#180, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@180]<Roles::RoleId>($t5)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#180, $t5)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert Not(Eq<address>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1135:9+60
    assume {:print "$at(12,50809,50869)"} true;
    assert {:msg "assert_failed(12,50809,50869): function does not abort under this condition"}
      !$IsEqual'address'($t2, 0);

    // assert Not(Eq<address>($t2, 1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1136:9+63
    assume {:print "$at(12,50878,50941)"} true;
    assert {:msg "assert_failed(12,50878,50941): function does not abort under this condition"}
      !$IsEqual'address'($t2, 1);

    // assert Not(exists[@181]<AccountFreezing::FreezingBit>($t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1137:9+84
    assume {:print "$at(12,50950,51034)"} true;
    assert {:msg "assert_failed(12,50950,51034): function does not abort under this condition"}
      !$ResourceExists($1_AccountFreezing_FreezingBit_$memory#181, $t2);

    // assert Not(And(DiemTimestamp::$is_genesis[@182](), Not(exists[@183]<DiemAccount::AccountOperationsCapability>(a550c18)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1140:9+140
    assume {:print "$at(12,51209,51349)"} true;
    assert {:msg "assert_failed(12,51209,51349): function does not abort under this condition"}
      !($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#183, 173345816));

    // assert Not(Neq<num>(Add(16, Len<u8>($t3)), 32)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1184:9+72
    assume {:print "$at(12,53293,53365)"} true;
    assert {:msg "assert_failed(12,53293,53365): function does not abort under this condition"}
      !!$IsEqual'num'((16 + LenVec($t3)), 32);

    // assert Not(Not(DiemTimestamp::$is_operating[@182]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182);

    // assert Not(exists[@180]<Roles::RoleId>($t2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+62
    assume {:print "$at(28,7656,7718)"} true;
    assert {:msg "assert_failed(28,7656,7718): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#180, $t2);

    // assert Not(Not(exists[@180]<Roles::RoleId>($t6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#180, $t6);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@180]<Roles::RoleId>($t6)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#180, $t6)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // assert DiemAccount::$exists_at($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2254:9+39
    assume {:print "$at(12,101407,101446)"} true;
    assert {:msg "assert_failed(12,101407,101446): post-condition does not hold"}
      $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2);

    // assert ValidatorOperatorConfig::$has_validator_operator_config($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2255:9+84
    assume {:print "$at(12,101455,101539)"} true;
    assert {:msg "assert_failed(12,101455,101539): post-condition does not hold"}
      $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, $t2);

    // assert exists<Roles::RoleId>($t2) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+29
    assume {:print "$at(28,7727,7756)"} true;
    assert {:msg "assert_failed(28,7727,7756): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $t2);

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t2)), 4) at /home/ying/diem/language/diem-framework/modules/Roles.move:183:9+48
    assume {:print "$at(28,7765,7813)"} true;
    assert {:msg "assert_failed(28,7765,7813): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t2)), 4);

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1154:9+20
    assume {:print "$at(12,51899,51919)"} true;
    assert {:msg "assert_failed(12,51899,51919): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:218:5+900
    assume {:print "$at(3,14831,15731)"} true;
    assert {:msg "assert_failed(3,14831,15731): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:218:5+900
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:209:5+1
    assume {:print "$at(3,14267,14268)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@178]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), ValidatorOperatorConfig::$has_validator_operator_config[@179]($t2)), Not(exists[@180]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@180]<Roles::RoleId>($t5)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)), Eq<address>($t2, 0)), Eq<address>($t2, 1)), exists[@181]<AccountFreezing::FreezingBit>($t2)), And(DiemTimestamp::$is_genesis[@182](), Not(exists[@183]<DiemAccount::AccountOperationsCapability>(a550c18)))), Neq<num>(Add(16, Len<u8>($t3)), 32)), Not(DiemTimestamp::$is_operating[@182]())), exists[@180]<Roles::RoleId>($t2)), Not(exists[@180]<Roles::RoleId>($t6))), Neq<u64>(select Roles::RoleId.role_id(global[@180]<Roles::RoleId>($t6)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:218:5+900
    assume {:print "$at(3,14831,15731)"} true;
    assert {:msg "assert_failed(3,14831,15731): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#178, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#179, $t2)) || !$ResourceExists($1_Roles_RoleId_$memory#180, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#180, $t5)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)) || $IsEqual'address'($t2, 0)) || $IsEqual'address'($t2, 1)) || $ResourceExists($1_AccountFreezing_FreezingBit_$memory#181, $t2)) || ($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#183, 173345816))) || !$IsEqual'num'((16 + LenVec($t3)), 32)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182)) || $ResourceExists($1_Roles_RoleId_$memory#180, $t2)) || !$ResourceExists($1_Roles_RoleId_$memory#180, $t6)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#180, $t6)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@178]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t7)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t7))), And(ValidatorOperatorConfig::$has_validator_operator_config[@179]($t2), Eq(6, $t7))), And(Not(exists[@180]<Roles::RoleId>($t5)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global[@180]<Roles::RoleId>($t5)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t7))), And(Eq<address>($t2, 0), Eq(7, $t7))), And(Eq<address>($t2, 1), Eq(7, $t7))), And(exists[@181]<AccountFreezing::FreezingBit>($t2), Eq(6, $t7))), And(And(DiemTimestamp::$is_genesis[@182](), Not(exists[@183]<DiemAccount::AccountOperationsCapability>(a550c18))), Eq(5, $t7))), And(Neq<num>(Add(16, Len<u8>($t3)), 32), Eq(7, $t7))), And(Not(DiemTimestamp::$is_operating[@182]()), Eq(1, $t7))), And(exists[@180]<Roles::RoleId>($t2), Eq(6, $t7))), And(Not(exists[@180]<Roles::RoleId>($t6)), Eq(5, $t7))), And(Neq<u64>(select Roles::RoleId.role_id(global[@180]<Roles::RoleId>($t6)), 0), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t7))), Eq(7, $t7)), Eq(5, $t7)), Eq(2, $t7)), Eq(6, $t7)), Eq(3, $t7)) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:218:5+900
    assert {:msg "assert_failed(3,14831,15731): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#178, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t7)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t7))) || ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory#179, $t2) && $IsEqual'num'(6, $t7))) || (!$ResourceExists($1_Roles_RoleId_$memory#180, $t5) && $IsEqual'num'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#180, $t5)), 0) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t7))) || ($IsEqual'address'($t2, 0) && $IsEqual'num'(7, $t7))) || ($IsEqual'address'($t2, 1) && $IsEqual'num'(7, $t7))) || ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#181, $t2) && $IsEqual'num'(6, $t7))) || (($1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182) && !$ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory#183, 173345816)) && $IsEqual'num'(5, $t7))) || (!$IsEqual'num'((16 + LenVec($t3)), 32) && $IsEqual'num'(7, $t7))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#182) && $IsEqual'num'(1, $t7))) || ($ResourceExists($1_Roles_RoleId_$memory#180, $t2) && $IsEqual'num'(6, $t7))) || (!$ResourceExists($1_Roles_RoleId_$memory#180, $t6) && $IsEqual'num'(5, $t7))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#180, $t6)), 0) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t7))) || $IsEqual'num'(7, $t7)) || $IsEqual'num'(5, $t7)) || $IsEqual'num'(2, $t7)) || $IsEqual'num'(6, $t7)) || $IsEqual'num'(3, $t7));

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountCreationScripts.move:218:5+900
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:55:5+75
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, 173345816)
}

// struct DiemBlock::BlockMetadata at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:9:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    s1 == s2
}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:16:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    s1 == s2
}

// struct DiemVMConfig::DiemVMConfig at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:13:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    s1 == s2
}

// struct DiemVMConfig::GasConstants at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:35:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:29:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    s1 == s2
}

// struct DiemVersion::DiemVersion at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:9:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}
