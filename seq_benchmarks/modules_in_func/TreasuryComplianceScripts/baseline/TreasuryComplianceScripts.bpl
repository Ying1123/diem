
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

type {:datatype} Vec _;

function {:constructor} Vec<T>(v: [int]T, l: int): Vec T;

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := l#Vec(v);
    Vec(v#Vec(v)[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v#Vec(v)[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    l#Vec(v)
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    l#Vec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(v#Vec(v)[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := l#Vec(v) - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v#Vec(v)[j] else v#Vec(v)[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := l#Vec(v1), v#Vec(v1), l#Vec(v2), v#Vec(v2);
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := l#Vec(v);
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v#Vec(v)[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v#Vec(v)[i := elem], l#Vec(v))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v#Vec(v);
    Vec(m[i := m[j]][j := m[i]], l#Vec(v)))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := l#Vec(v);
    (exists i: int :: InRangeVec(v, i) && v#Vec(v)[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'#0'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''(v1: Vec ($1_Diem_PreburnWithMetadata'#0'), v2: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'#0''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'#0''() returns (v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'#0''(): Vec ($1_Diem_PreburnWithMetadata'#0') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), val: $1_Diem_PreburnWithMetadata'#0') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), val: $1_Diem_PreburnWithMetadata'#0'): Vec ($1_Diem_PreburnWithMetadata'#0') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), other: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'#0') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'#0'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int): $1_Diem_PreburnWithMetadata'#0' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'#0') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'#0''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')), i: int) returns (e: $1_Diem_PreburnWithMetadata'#0', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'#0')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'#0');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'#0''(v: Vec ($1_Diem_PreburnWithMetadata'#0'), e: $1_Diem_PreburnWithMetadata'#0') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'#0''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XDX_XDX'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), val: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX'), e: $1_Diem_PreburnWithMetadata'$1_XDX_XDX') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_Diem_PreburnWithMetadata'$1_XUS_XUS'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v1: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), v2: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): int;
axiom (forall v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS':: {$IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)}
    (var i := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
     if (!$ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''() returns (v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), val: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), other: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int) returns (dst: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), index: int)
returns (dst: $Mutation ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int, j: int) returns (m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), i: int, j: int): Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(m: $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')), i: int) returns (e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', m': $Mutation (Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')))
{
    var len: int;
    var v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res: bool)  {
    res := $ContainsVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS'), e: $1_Diem_PreburnWithMetadata'$1_XUS_XUS') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_VASPDomain_VASPDomain`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_VASPDomain_VASPDomain''(v1: Vec ($1_VASPDomain_VASPDomain), v2: Vec ($1_VASPDomain_VASPDomain)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_VASPDomain_VASPDomain''(v: Vec ($1_VASPDomain_VASPDomain)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_VASPDomain_VASPDomain'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): int;
axiom (forall v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain:: {$IndexOfVec'$1_VASPDomain_VASPDomain'(v, e)}
    (var i := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
     if (!$ContainsVec'$1_VASPDomain_VASPDomain'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_VASPDomain_VASPDomain'() returns (v: Vec ($1_VASPDomain_VASPDomain)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), val: $1_VASPDomain_VASPDomain) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), val: $1_VASPDomain_VASPDomain): Vec ($1_VASPDomain_VASPDomain) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    var v: Vec ($1_VASPDomain_VASPDomain);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), other: Vec ($1_VASPDomain_VASPDomain)) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int) returns (dst: $1_VASPDomain_VASPDomain) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), index: int)
returns (dst: $Mutation ($1_VASPDomain_VASPDomain), m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int, j: int) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int, j: int): Vec ($1_VASPDomain_VASPDomain) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var len: int;
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res: bool)  {
    res := $ContainsVec'$1_VASPDomain_VASPDomain'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ValidatorConfig_Config`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_ValidatorConfig_Config''(v1: Vec ($1_ValidatorConfig_Config), v2: Vec ($1_ValidatorConfig_Config)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_ValidatorConfig_Config''(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ValidatorConfig_Config'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): int;
axiom (forall v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config:: {$IndexOfVec'$1_ValidatorConfig_Config'(v, e)}
    (var i := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
     if (!$ContainsVec'$1_ValidatorConfig_Config'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_ValidatorConfig_Config'() returns (v: Vec ($1_ValidatorConfig_Config)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), val: $1_ValidatorConfig_Config) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), val: $1_ValidatorConfig_Config): Vec ($1_ValidatorConfig_Config) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    var v: Vec ($1_ValidatorConfig_Config);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), other: Vec ($1_ValidatorConfig_Config)) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int) returns (dst: $1_ValidatorConfig_Config) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), index: int)
returns (dst: $Mutation ($1_ValidatorConfig_Config), m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int, j: int) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int, j: int): Vec ($1_ValidatorConfig_Config) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var len: int;
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res: bool)  {
    res := $ContainsVec'$1_ValidatorConfig_Config'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XDX_XDX`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_XDX_XDX''(v1: Vec ($1_XDX_XDX), v2: Vec ($1_XDX_XDX)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_XDX_XDX'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_XDX_XDX''(v: Vec ($1_XDX_XDX)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XDX_XDX'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): int;
axiom (forall v: Vec ($1_XDX_XDX), e: $1_XDX_XDX:: {$IndexOfVec'$1_XDX_XDX'(v, e)}
    (var i := $IndexOfVec'$1_XDX_XDX'(v, e);
     if (!$ContainsVec'$1_XDX_XDX'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XDX_XDX'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XDX_XDX'() returns (v: Vec ($1_XDX_XDX)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), val: $1_XDX_XDX) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), val: $1_XDX_XDX): Vec ($1_XDX_XDX) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX))) {
    var v: Vec ($1_XDX_XDX);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), other: Vec ($1_XDX_XDX)) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int) returns (dst: $1_XDX_XDX) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), index: int)
returns (dst: $Mutation ($1_XDX_XDX), m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int, j: int) returns (m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int, j: int): Vec ($1_XDX_XDX) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var len: int;
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res: bool)  {
    res := $ContainsVec'$1_XDX_XDX'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XDX_XDX'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XUS_XUS`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_XUS_XUS''(v1: Vec ($1_XUS_XUS), v2: Vec ($1_XUS_XUS)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_XUS_XUS'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'$1_XUS_XUS''(v: Vec ($1_XUS_XUS)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XUS_XUS'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): int;
axiom (forall v: Vec ($1_XUS_XUS), e: $1_XUS_XUS:: {$IndexOfVec'$1_XUS_XUS'(v, e)}
    (var i := $IndexOfVec'$1_XUS_XUS'(v, e);
     if (!$ContainsVec'$1_XUS_XUS'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XUS_XUS'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XUS_XUS'() returns (v: Vec ($1_XUS_XUS)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), val: $1_XUS_XUS) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), val: $1_XUS_XUS): Vec ($1_XUS_XUS) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS))) {
    var v: Vec ($1_XUS_XUS);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), other: Vec ($1_XUS_XUS)) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int) returns (dst: $1_XUS_XUS) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), index: int)
returns (dst: $Mutation ($1_XUS_XUS), m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int, j: int) returns (m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int, j: int): Vec ($1_XUS_XUS) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var len: int;
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res: bool)  {
    res := $ContainsVec'$1_XUS_XUS'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XUS_XUS'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'vec'u8''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`

// Not inlined. It appears faster this way.
function $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'address'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u64`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u64''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u64'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'u64''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u64'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u64'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e))
}

function $IndexOfVec'u64'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u64'(v, e)}
    (var i := $IndexOfVec'u64'(v, e);
     if (!$ContainsVec'u64'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u64'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u64'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u64'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u64'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u64'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u64'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u64'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u64'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u64'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u64'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u64'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u64'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u64'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u64'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u64'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u64'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u64'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u64'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u64'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u64'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u64'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u64'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u64'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u64'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native Signer

type {:datatype} $signer;
function {:constructor} $signer($addr: int): $signer;
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'($addr#$signer(s))
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_Signer_borrow_address(signer: $signer) returns (res: int) {
    res := $addr#$signer(signer);
}

function {:inline} $1_Signer_$borrow_address(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_spec_address_of(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_is_txn_signer(s: $signer): bool;

function {:inline} $1_Signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize


// ==================================================================================
// Native Event module




// Publishing a generator does nothing. Currently we just ignore this function and do not represent generators
// at all because they are not publicly exposed by the Event module.
// TODO: we should check (and abort with the right code) if a generator already exists for
// the signer.

procedure {:inline 1} $1_Event_publish_generator(signer: $signer) {
}

// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DesignatedDealer_ReceivedMintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(a: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', b: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(h: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    true
}

// Embed event `$1_DesignatedDealer_ReceivedMintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(e: $1_DesignatedDealer_ReceivedMintEvent): $EventRep;
axiom (forall v1, v2: $1_DesignatedDealer_ReceivedMintEvent :: {$ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1), $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2)}
    $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(v1, v2) <==> $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1) == $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    var handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DesignatedDealer_ReceivedMintEvent'(handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
}

function {:inline} $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_VASPDomain_VASPDomainEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(a: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', b: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(h: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    true
}

// Embed event `$1_VASPDomain_VASPDomainEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_VASPDomain_VASPDomainEvent'(e: $1_VASPDomain_VASPDomainEvent): $EventRep;
axiom (forall v1, v2: $1_VASPDomain_VASPDomainEvent :: {$ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1), $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2)}
    $IsEqual'$1_VASPDomain_VASPDomainEvent'(v1, v2) <==> $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1) == $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_VASPDomain_VASPDomainEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_VASPDomain_VASPDomainEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    var handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_VASPDomain_VASPDomainEvent'(handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
}

function {:inline} $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_VASPDomain_VASPDomainEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:158:5+90
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:120:10+104
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816))
}

// struct DiemTimestamp::CurrentTimeMicroseconds at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:20:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:481:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:485:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:489:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 1)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:493:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:497:9+124
function {:inline} $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 3)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:501:9+142
function {:inline} $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 4)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:505:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 5)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:509:9+126
function {:inline} $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 6)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:513:9+229
function {:inline} $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    (($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr)) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))
}

// struct Roles::RoleId at /home/ying/diem/language/diem-framework/modules/Roles.move:53:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:63:5+153
function {:inline} $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig, validator_operator_addr: int): bool {
    $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, validator_operator_addr)
}

// struct ValidatorOperatorConfig::ValidatorOperatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:9:5+141
type {:datatype} $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:constructor} $1_ValidatorOperatorConfig_ValidatorOperatorConfig($human_name: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:inline} $Update'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'_human_name(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, x: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig {
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig(x)
}
function $IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsValid'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s1: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, s2: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsEqual'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s1), $human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s2))}
var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'u8'(v: Vec (int)): bool {
    $IsEqual'u64'($1_Vector_$length'u8'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_ValidatorConfig_Config'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_KeyRotationCapability {
    $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_WithdrawCapability {
    $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_ValidatorConfig_Config'(t: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    !$1_Vector_$is_empty'$1_ValidatorConfig_Config'($vec#$1_Option_Option'$1_ValidatorConfig_Config'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:33:10+78
function {:inline} $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'(): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'($EmptyVec'$1_DiemAccount_WithdrawCapability'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:46:10+89
function {:inline} $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'(e: $1_DiemAccount_WithdrawCapability): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(MakeVec1(e))
}

// struct Option::Option<address> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'address';
function {:constructor} $1_Option_Option'address'($vec: Vec (int)): $1_Option_Option'address';
function {:inline} $Update'$1_Option_Option'address''_vec(s: $1_Option_Option'address', x: Vec (int)): $1_Option_Option'address' {
    $1_Option_Option'address'(x)
}
function $IsValid'$1_Option_Option'address''(s: $1_Option_Option'address'): bool {
    $IsValid'vec'address''($vec#$1_Option_Option'address'(s))
}
function {:inline} $IsEqual'$1_Option_Option'address''(s1: $1_Option_Option'address', s2: $1_Option_Option'address'): bool {
    $IsEqual'vec'address''($vec#$1_Option_Option'address'(s1), $vec#$1_Option_Option'address'(s2))}

// struct Option::Option<ValidatorConfig::Config> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_ValidatorConfig_Config';
function {:constructor} $1_Option_Option'$1_ValidatorConfig_Config'($vec: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config';
function {:inline} $Update'$1_Option_Option'$1_ValidatorConfig_Config''_vec(s: $1_Option_Option'$1_ValidatorConfig_Config', x: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'(x)
}
function $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''(s: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsValid'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''(s1: $1_Option_Option'$1_ValidatorConfig_Config', s2: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsEqual'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s1), $vec#$1_Option_Option'$1_ValidatorConfig_Config'(s2))}

// struct Option::Option<DiemAccount::KeyRotationCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s1), $vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s2))}

// struct Option::Option<DiemAccount::WithdrawCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsEqual'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s1), $vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s2))}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:84:5+84
function {:inline} $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:229:5+176
function {:inline} $1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr) && $1_Option_$is_some'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, addr))))
}

// struct ValidatorConfig::ValidatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:22:5+260
type {:datatype} $1_ValidatorConfig_ValidatorConfig;
function {:constructor} $1_ValidatorConfig_ValidatorConfig($config: $1_Option_Option'$1_ValidatorConfig_Config', $operator_account: $1_Option_Option'address', $human_name: Vec (int)): $1_ValidatorConfig_ValidatorConfig;
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_config(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'$1_ValidatorConfig_Config'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig(x, $operator_account#$1_ValidatorConfig_ValidatorConfig(s), $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_operator_account(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'address'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), x, $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_human_name(s: $1_ValidatorConfig_ValidatorConfig, x: Vec (int)): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), $operator_account#$1_ValidatorConfig_ValidatorConfig(s), x)
}
function $IsValid'$1_ValidatorConfig_ValidatorConfig'(s: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_ValidatorConfig'(s1: $1_ValidatorConfig_ValidatorConfig, s2: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s1), $config#$1_ValidatorConfig_ValidatorConfig(s2))
    && $IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s1), $operator_account#$1_ValidatorConfig_ValidatorConfig(s2))
    && $IsEqual'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s1), $human_name#$1_ValidatorConfig_ValidatorConfig(s2))}
var $1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig;

// struct ValidatorConfig::Config at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:16:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    $IsEqual'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s1), $consensus_pubkey#$1_ValidatorConfig_Config(s2))
    && $IsEqual'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s1), $validator_network_addresses#$1_ValidatorConfig_Config(s2))
    && $IsEqual'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s1), $fullnode_network_addresses#$1_ValidatorConfig_Config(s2))}

// spec fun at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:258:10+64
function {:inline} $1_SlidingNonce_spec_try_record_nonce(account: $signer, seq_nonce: int): int;
axiom (forall account: $signer, seq_nonce: int ::
(var $$res := $1_SlidingNonce_spec_try_record_nonce(account, seq_nonce);
$IsValid'u64'($$res)));

// struct SlidingNonce::SlidingNonce at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:11:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// fun SlidingNonce::record_nonce_or_abort [baseline] at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:35:5+212
procedure {:inline 1} $1_SlidingNonce_record_nonce_or_abort(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_SlidingNonce_SlidingNonce': $1_SlidingNonce_SlidingNonce;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:35:5+1
    assume {:print "$at(31,1585,1586)"} true;
    assume {:print "$track_local(10,1,0):", $t0} $t0 == $t0;

    // trace_local[seq_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:35:5+1
    assume {:print "$track_local(10,1,1):", $t1} $t1 == $t1;

    // $t5 := opaque begin: SlidingNonce::try_record_nonce($t0, $t1) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume {:print "$at(31,1695,1731)"} true;

    // assume Identical($t6, Not(exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume ($t6 == !$ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
L5:

    // assume And(Not(exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0))), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume (!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume {:print "$at(31,1695,1731)"} true;
    assume {:print "$track_abort(10,1):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
L4:

    // modifies global<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_SlidingNonce_SlidingNonce';
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceUpdate($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0), $temp_0'$1_SlidingNonce_SlidingNonce');
    } else {
        $1_SlidingNonce_SlidingNonce_$memory := $ResourceRemove($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0));
    }

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume $IsValid'u64'($t5);

    // assume Eq<u64>($t5, SlidingNonce::spec_try_record_nonce($t0, $t1)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume $IsEqual'u64'($t5, $1_SlidingNonce_spec_try_record_nonce($t0, $t1));

    // assume exists<SlidingNonce::SlidingNonce>(Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36
    assume $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: SlidingNonce::try_record_nonce($t0, $t1) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:20+36

    // trace_local[code]($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:36:13+4
    assume {:print "$track_local(10,1,4):", $t5} $t5 == $t5;

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:24+1
    assume {:print "$at(31,1756,1757)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := ==($t5, $t8) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:21+2
    $t9 := $IsEqual'u64'($t5, $t8);

    // $t10 := opaque begin: Errors::invalid_argument($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30
    assume $IsValid'u64'($t10);

    // assume Eq<u64>($t10, 7) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30
    assume $IsEqual'u64'($t10, 7);

    // $t10 := opaque end: Errors::invalid_argument($t5) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:27+30

    // trace_local[tmp#$3]($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    assume {:print "$track_local(10,1,3):", $t10} $t10 == $t10;

    // trace_local[tmp#$2]($t9) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    assume {:print "$track_local(10,1,2):", $t9} $t9 == $t9;

    // if ($t9) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
L1:

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    assume {:print "$at(31,1741,1790)"} true;
    assume {:print "$track_abort(10,1):", $t10} $t10 == $t10;

    // $t7 := move($t10) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    $t7 := $t10;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:9+49
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:37:58+1
L0:

    // label L2 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
    assume {:print "$at(31,1796,1797)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:38:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:93:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:93:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:95:5+260
function {:inline} $1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): $1_DiemSystem_DiemSystem {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:457:9+84
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816)
}

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsEqual'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s1), $payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s2))}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsEqual'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s1), $payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s2))}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:31:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    $IsEqual'u64'($epoch#$1_DiemConfig_Configuration(s1), $epoch#$1_DiemConfig_Configuration(s2))
    && $IsEqual'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s1), $last_reconfiguration_time#$1_DiemConfig_Configuration(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s1), $events#$1_DiemConfig_Configuration(s2))}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:41:5+65
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::NewEpochEvent at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:26:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:647:10+105
function {:inline} $1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): Vec ($1_DiemSystem_ValidatorInfo) {
    $validators#$1_DiemSystem_DiemSystem($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))
}

// struct DiemSystem::DiemSystem at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:48:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    $IsEqual'u8'($scheme#$1_DiemSystem_DiemSystem(s1), $scheme#$1_DiemSystem_DiemSystem(s2))
    && $IsEqual'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s1), $validators#$1_DiemSystem_DiemSystem(s2))}

// struct DiemSystem::CapabilityHolder at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:39:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:18:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    $IsEqual'address'($addr#$1_DiemSystem_ValidatorInfo(s1), $addr#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s1), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s1), $config#$1_DiemSystem_ValidatorInfo(s2))
    && $IsEqual'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s1), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s2))}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:227:5+74
function {:inline} $1_FixedPoint32_$get_raw_value(num: $1_FixedPoint32_FixedPoint32): int {
    $value#$1_FixedPoint32_FixedPoint32(num)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:78:10+360
function {:inline} $1_FixedPoint32_spec_multiply_u64(val: int, multiplier: $1_FixedPoint32_FixedPoint32): int {
    if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 0)) then (0) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 1)) then (val) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 2)) then ((val div 2)) else ((18446744073709551615 + 1))))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:204:10+244
function {:inline} $1_FixedPoint32_spec_create_from_rational(numerator: int, denominator: int): $1_FixedPoint32_FixedPoint32 {
    if ($IsEqual'num'(numerator, denominator)) then ($1_FixedPoint32_FixedPoint32(1)) else ($1_FixedPoint32_FixedPoint32(2))
}

// struct FixedPoint32::FixedPoint32 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:17:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// fun FixedPoint32::get_raw_value [baseline] at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:227:5+74
procedure {:inline 1} $1_FixedPoint32_get_raw_value(_$t0: $1_FixedPoint32_FixedPoint32) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[num]($t0) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:227:5+1
    assume {:print "$at(46,9992,9993)"} true;
    assume {:print "$track_local(16,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<FixedPoint32::FixedPoint32>.value($t0) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:228:9+9
    assume {:print "$at(46,10051,10060)"} true;
    $t1 := $value#$1_FixedPoint32_FixedPoint32($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:228:9+9
    assume {:print "$track_return(16,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:229:5+1
    assume {:print "$at(46,10065,10066)"} true;
L1:

    // return $t1 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:229:5+1
    $ret0 := $t1;
    return;

}

// struct RegisteredCurrencies::RegisteredCurrencies at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:13:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsEqual'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s1), $currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s2))}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    ($1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    ($1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    ($1_Diem_$is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'$1_XUS_XUS'(coin: $1_Diem_Diem'$1_XUS_XUS'): int {
    $value#$1_Diem_Diem'$1_XUS_XUS'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'$1_XDX_XDX'(coin: $1_Diem_Diem'$1_XDX_XDX'): int {
    $value#$1_Diem_Diem'$1_XDX_XDX'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'#0'(coin: $1_Diem_Diem'#0'): int {
    $value#$1_Diem_Diem'#0'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_Diem_CurrencyInfo'#0' {
    $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1862:9+130
function {:inline} $1_Diem_spec_make_preburn'$1_XUS_XUS'(amount: int): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'($1_Diem_Diem'$1_XUS_XUS'(amount))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1862:9+130
function {:inline} $1_Diem_spec_make_preburn'$1_XDX_XDX'(amount: int): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'($1_Diem_Diem'$1_XDX_XDX'(amount))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1862:9+130
function {:inline} $1_Diem_spec_make_preburn'#0'(amount: int): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'($1_Diem_Diem'#0'(amount))
}

// struct Diem::Diem<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::Diem<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'#0';
function {:constructor} $1_Diem_Diem'#0'($value: int): $1_Diem_Diem'#0';
function {:inline} $Update'$1_Diem_Diem'#0''_value(s: $1_Diem_Diem'#0', x: int): $1_Diem_Diem'#0' {
    $1_Diem_Diem'#0'(x)
}
function $IsValid'$1_Diem_Diem'#0''(s: $1_Diem_Diem'#0'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#0''(s1: $1_Diem_Diem'#0', s2: $1_Diem_Diem'#0'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+58
type {:datatype} $1_Diem_BurnCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_BurnCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_BurnCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_BurnCapability'$1_XUS_XUS', x: bool): $1_Diem_BurnCapability'$1_XUS_XUS' {
    $1_Diem_BurnCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''(s: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XUS_XUS''(s1: $1_Diem_BurnCapability'$1_XUS_XUS', s2: $1_Diem_BurnCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_BurnCapability'$1_XUS_XUS';

// struct Diem::BurnCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+58
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+58
type {:datatype} $1_Diem_BurnCapability'#0';
function {:constructor} $1_Diem_BurnCapability'#0'($dummy_field: bool): $1_Diem_BurnCapability'#0';
function {:inline} $Update'$1_Diem_BurnCapability'#0''_dummy_field(s: $1_Diem_BurnCapability'#0', x: bool): $1_Diem_BurnCapability'#0' {
    $1_Diem_BurnCapability'#0'(x)
}
function $IsValid'$1_Diem_BurnCapability'#0''(s: $1_Diem_BurnCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'#0''(s1: $1_Diem_BurnCapability'#0', s2: $1_Diem_BurnCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'#0'_$memory: $Memory $1_Diem_BurnCapability'#0';

// struct Diem::BurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:58:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_BurnEvent(s1), $amount#$1_Diem_BurnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_BurnEvent(s1), $currency_code#$1_Diem_BurnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_BurnEvent(s1), $preburn_address#$1_Diem_BurnEvent(s2))}

// struct Diem::CancelBurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:83:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_CancelBurnEvent(s1), $amount#$1_Diem_CancelBurnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s1), $currency_code#$1_Diem_CancelBurnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_CancelBurnEvent(s1), $preburn_address#$1_Diem_CancelBurnEvent(s2))}

// struct Diem::CurrencyInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s2))}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s2))}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::CurrencyInfo<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'#0';
function {:constructor} $1_Diem_CurrencyInfo'#0'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0';
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_total_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'(x, $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#0', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_is_synthetic(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_scaling_factor(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_fractional_part(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), x, $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_currency_code(s: $1_Diem_CurrencyInfo'#0', x: Vec (int)): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), x, $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_can_mint(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), x, $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_mint_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), x, $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#0''(s: $1_Diem_CurrencyInfo'#0'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#0''(s1: $1_Diem_CurrencyInfo'#0', s2: $1_Diem_CurrencyInfo'#0'): bool {
    $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s1), $total_value#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s1), $preburn_value#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s1), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s1), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s1), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s1), $fractional_part#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s1), $currency_code#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s1), $can_mint#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s1), $mint_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s1), $burn_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s1), $preburn_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s1), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s2))
    && $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s1), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s2))}
var $1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0';

// struct Diem::MintCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_MintCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_MintCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_MintCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_MintCapability'$1_XUS_XUS', x: bool): $1_Diem_MintCapability'$1_XUS_XUS' {
    $1_Diem_MintCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XUS_XUS''(s: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XUS_XUS''(s1: $1_Diem_MintCapability'$1_XUS_XUS', s2: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS';

// struct Diem::MintCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'#0';
function {:constructor} $1_Diem_MintCapability'#0'($dummy_field: bool): $1_Diem_MintCapability'#0';
function {:inline} $Update'$1_Diem_MintCapability'#0''_dummy_field(s: $1_Diem_MintCapability'#0', x: bool): $1_Diem_MintCapability'#0' {
    $1_Diem_MintCapability'#0'(x)
}
function $IsValid'$1_Diem_MintCapability'#0''(s: $1_Diem_MintCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'#0''(s1: $1_Diem_MintCapability'#0', s2: $1_Diem_MintCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0';

// struct Diem::MintEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:44:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_MintEvent(s1), $amount#$1_Diem_MintEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_MintEvent(s1), $currency_code#$1_Diem_MintEvent(s2))}

// struct Diem::Preburn<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::Preburn<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'#0';
function {:constructor} $1_Diem_Preburn'#0'($to_burn: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0';
function {:inline} $Update'$1_Diem_Preburn'#0''_to_burn(s: $1_Diem_Preburn'#0', x: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'(x)
}
function $IsValid'$1_Diem_Preburn'#0''(s: $1_Diem_Preburn'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($to_burn#$1_Diem_Preburn'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#0''(s1: $1_Diem_Preburn'#0', s2: $1_Diem_Preburn'#0'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#0'_$memory: $Memory $1_Diem_Preburn'#0';

// struct Diem::PreburnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:70:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    $IsEqual'u64'($amount#$1_Diem_PreburnEvent(s1), $amount#$1_Diem_PreburnEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_Diem_PreburnEvent(s1), $currency_code#$1_Diem_PreburnEvent(s2))
    && $IsEqual'address'($preburn_address#$1_Diem_PreburnEvent(s1), $preburn_address#$1_Diem_PreburnEvent(s2))}

// struct Diem::PreburnQueue<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+152
type {:datatype} $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnQueue'$1_XUS_XUS'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XUS_XUS''_preburns(s: $1_Diem_PreburnQueue'$1_XUS_XUS', x: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS')): $1_Diem_PreburnQueue'$1_XUS_XUS' {
    $1_Diem_PreburnQueue'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''(s: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XUS_XUS''(s1: $1_Diem_PreburnQueue'$1_XUS_XUS', s2: $1_Diem_PreburnQueue'$1_XUS_XUS'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XUS_XUS'''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s1), $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'(s2))}
var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';

// struct Diem::PreburnQueue<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+152
type {:datatype} $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnQueue'$1_XDX_XDX'($preburns: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnQueue'$1_XDX_XDX''_preburns(s: $1_Diem_PreburnQueue'$1_XDX_XDX', x: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX')): $1_Diem_PreburnQueue'$1_XDX_XDX' {
    $1_Diem_PreburnQueue'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''(s: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'$1_XDX_XDX''(s1: $1_Diem_PreburnQueue'$1_XDX_XDX', s2: $1_Diem_PreburnQueue'$1_XDX_XDX'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'$1_XDX_XDX'''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s1), $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'(s2))}
var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';

// struct Diem::PreburnQueue<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:194:5+152
type {:datatype} $1_Diem_PreburnQueue'#0';
function {:constructor} $1_Diem_PreburnQueue'#0'($preburns: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0';
function {:inline} $Update'$1_Diem_PreburnQueue'#0''_preburns(s: $1_Diem_PreburnQueue'#0', x: Vec ($1_Diem_PreburnWithMetadata'#0')): $1_Diem_PreburnQueue'#0' {
    $1_Diem_PreburnQueue'#0'(x)
}
function $IsValid'$1_Diem_PreburnQueue'#0''(s: $1_Diem_PreburnQueue'#0'): bool {
    $IsValid'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnQueue'#0''(s1: $1_Diem_PreburnQueue'#0', s2: $1_Diem_PreburnQueue'#0'): bool {
    $IsEqual'vec'$1_Diem_PreburnWithMetadata'#0'''($preburns#$1_Diem_PreburnQueue'#0'(s1), $preburns#$1_Diem_PreburnQueue'#0'(s2))}
var $1_Diem_PreburnQueue'#0'_$memory: $Memory $1_Diem_PreburnQueue'#0';

// struct Diem::PreburnWithMetadata<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn: $1_Diem_Preburn'$1_XUS_XUS', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XUS_XUS' {
    $1_Diem_PreburnWithMetadata'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''(s1: $1_Diem_PreburnWithMetadata'$1_XUS_XUS', s2: $1_Diem_PreburnWithMetadata'$1_XUS_XUS'): bool {
    $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s1), $preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s1), $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(s2))}

// struct Diem::PreburnWithMetadata<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:constructor} $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn: $1_Diem_Preburn'$1_XDX_XDX', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_preburn(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: $1_Diem_Preburn'$1_XDX_XDX'): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'(x, $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''_metadata(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', x: Vec (int)): $1_Diem_PreburnWithMetadata'$1_XDX_XDX' {
    $1_Diem_PreburnWithMetadata'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''(s1: $1_Diem_PreburnWithMetadata'$1_XDX_XDX', s2: $1_Diem_PreburnWithMetadata'$1_XDX_XDX'): bool {
    $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s1), $preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s1), $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(s2))}

// struct Diem::PreburnWithMetadata<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:178:5+128
type {:datatype} $1_Diem_PreburnWithMetadata'#0';
function {:constructor} $1_Diem_PreburnWithMetadata'#0'($preburn: $1_Diem_Preburn'#0', $metadata: Vec (int)): $1_Diem_PreburnWithMetadata'#0';
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_preburn(s: $1_Diem_PreburnWithMetadata'#0', x: $1_Diem_Preburn'#0'): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'(x, $metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $Update'$1_Diem_PreburnWithMetadata'#0''_metadata(s: $1_Diem_PreburnWithMetadata'#0', x: Vec (int)): $1_Diem_PreburnWithMetadata'#0' {
    $1_Diem_PreburnWithMetadata'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(s), x)
}
function $IsValid'$1_Diem_PreburnWithMetadata'#0''(s: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsValid'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s))
      && $IsValid'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnWithMetadata'#0''(s1: $1_Diem_PreburnWithMetadata'#0', s2: $1_Diem_PreburnWithMetadata'#0'): bool {
    $IsEqual'$1_Diem_Preburn'#0''($preburn#$1_Diem_PreburnWithMetadata'#0'(s1), $preburn#$1_Diem_PreburnWithMetadata'#0'(s2))
    && $IsEqual'vec'u8''($metadata#$1_Diem_PreburnWithMetadata'#0'(s1), $metadata#$1_Diem_PreburnWithMetadata'#0'(s2))}

// struct Diem::ToXDXExchangeRateUpdateEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:94:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsEqual'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s1), $currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s2))
    && $IsEqual'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s1), $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s2))}

// fun Diem::value<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
procedure {:inline 1} $1_Diem_value'$1_XUS_XUS'(_$t0: $1_Diem_Diem'$1_XUS_XUS') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+1
    assume {:print "$at(11,54158,54159)"} true;
    assume {:print "$track_local(18,40,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1130:9+10
    assume {:print "$at(11,54223,54233)"} true;
    $t1 := $value#$1_Diem_Diem'$1_XUS_XUS'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1130:9+10
    assume {:print "$track_return(18,40,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:5+1
    assume {:print "$at(11,54238,54239)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::value<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
procedure {:inline 1} $1_Diem_value'$1_XDX_XDX'(_$t0: $1_Diem_Diem'$1_XDX_XDX') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+1
    assume {:print "$at(11,54158,54159)"} true;
    assume {:print "$track_local(18,40,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1130:9+10
    assume {:print "$at(11,54223,54233)"} true;
    $t1 := $value#$1_Diem_Diem'$1_XDX_XDX'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1130:9+10
    assume {:print "$track_return(18,40,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:5+1
    assume {:print "$at(11,54238,54239)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::value<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
procedure {:inline 1} $1_Diem_value'#0'(_$t0: $1_Diem_Diem'#0') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+1
    assume {:print "$at(11,54158,54159)"} true;
    assume {:print "$track_local(18,40,0):", $t0} $t0 == $t0;

    // $t1 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1130:9+10
    assume {:print "$at(11,54223,54233)"} true;
    $t1 := $value#$1_Diem_Diem'#0'($t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1130:9+10
    assume {:print "$track_return(18,40,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:5+1
    assume {:print "$at(11,54238,54239)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1131:5+1
    $ret0 := $t1;
    return;

}

// fun Diem::burn<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+471
procedure {:inline 1} $1_Diem_burn'$1_XUS_XUS'(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Diem_Preburn'$1_XUS_XUS';
    var $t7: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t8: int;
    var $t9: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t10: $1_Diem_Preburn'$1_XUS_XUS';
    var $t11: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t20: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t21: Vec (int);
    var $t22: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t23: $1_Diem_Preburn'$1_XUS_XUS';
    var $t24: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t25: int;
    var $t26: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t27: $1_Diem_Preburn'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t6, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t6 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t2));

    // assume Identical($t7, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t7 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t8, select Diem::Diem.value(select Diem::Preburn.to_burn($t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t8 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t6)));

    // assume Identical($t9, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t10, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t10 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t2));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t13 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t11));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$at(11,16019,16020)"} true;
    assume {:print "$track_local(18,5,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(18,5,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(18,5,2):", $t2} $t2 == $t2;

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume {:print "$at(11,16206,16233)"} true;

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27

    // trace_local[addr]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:13+4
    assume {:print "$track_local(18,5,5):", $t14} $t14 == $t14;

    // $t15 := exists<Diem::BurnCapability<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:16+6
    assume {:print "$at(11,16250,16256)"} true;
    $t15 := $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t14);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:84+16
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := opaque begin: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsEqual'u64'($t17, 4);

    // $t17 := opaque end: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(18,5,4):", $t17} $t17 == $t17;

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(18,5,3):", $t15} $t15 == $t15;

    // if ($t15) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
L1:

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$at(11,16243,16336)"} true;
    assume {:print "$track_abort(18,5):", $t17} $t17 == $t17;

    // $t18 := move($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    $t18 := $t17;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:329:13+15
    assume {:print "$at(11,16380,16395)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t14) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:330:13+13
    assume {:print "$at(11,16409,16422)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t14)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(11,16409,16422)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // assume Identical($t20, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t20 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t21 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t22, select Diem::CurrencyInfo.burn_events($t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t22 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t20));

    // assume Identical($t23, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t23 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t2));

    // assume Identical($t24, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t24 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t25, select Diem::Diem.value(select Diem::Preburn.to_burn($t23))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t25 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t23)));

    // assume Identical($t26, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t26 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t27, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t27 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t2));

    // Diem::burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:328:9+138
    assume {:print "$at(11,16346,16484)"} true;
    call $1_Diem_burn_with_capability'$1_XUS_XUS'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,16346,16484)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    assume {:print "$at(11,16489,16490)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
L3:

    // abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    $abort_code := $t18;
    $abort_flag := true;
    return;

}

// fun Diem::burn<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+471
procedure {:inline 1} $1_Diem_burn'$1_XDX_XDX'(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Diem_Preburn'$1_XDX_XDX';
    var $t7: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t8: int;
    var $t9: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t10: $1_Diem_Preburn'$1_XDX_XDX';
    var $t11: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t20: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t21: Vec (int);
    var $t22: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t23: $1_Diem_Preburn'$1_XDX_XDX';
    var $t24: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t25: int;
    var $t26: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t27: $1_Diem_Preburn'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t6, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t6 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t2));

    // assume Identical($t7, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t7 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t8, select Diem::Diem.value(select Diem::Preburn.to_burn($t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t8 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t6)));

    // assume Identical($t9, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t10, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t10 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t2));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t13 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t11));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$at(11,16019,16020)"} true;
    assume {:print "$track_local(18,5,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(18,5,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(18,5,2):", $t2} $t2 == $t2;

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume {:print "$at(11,16206,16233)"} true;

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27

    // trace_local[addr]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:13+4
    assume {:print "$track_local(18,5,5):", $t14} $t14 == $t14;

    // $t15 := exists<Diem::BurnCapability<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:16+6
    assume {:print "$at(11,16250,16256)"} true;
    $t15 := $ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t14);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:84+16
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := opaque begin: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsEqual'u64'($t17, 4);

    // $t17 := opaque end: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(18,5,4):", $t17} $t17 == $t17;

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(18,5,3):", $t15} $t15 == $t15;

    // if ($t15) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
L1:

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$at(11,16243,16336)"} true;
    assume {:print "$track_abort(18,5):", $t17} $t17 == $t17;

    // $t18 := move($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    $t18 := $t17;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:329:13+15
    assume {:print "$at(11,16380,16395)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t14) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:330:13+13
    assume {:print "$at(11,16409,16422)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t14)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(11,16409,16422)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // assume Identical($t20, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t20 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t21 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t22, select Diem::CurrencyInfo.burn_events($t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t22 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t20));

    // assume Identical($t23, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t23 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t2));

    // assume Identical($t24, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t24 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t25, select Diem::Diem.value(select Diem::Preburn.to_burn($t23))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t25 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t23)));

    // assume Identical($t26, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t26 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t27, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t27 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t2));

    // Diem::burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:328:9+138
    assume {:print "$at(11,16346,16484)"} true;
    call $1_Diem_burn_with_capability'$1_XDX_XDX'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,16346,16484)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    assume {:print "$at(11,16489,16490)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
L3:

    // abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    $abort_code := $t18;
    $abort_flag := true;
    return;

}

// fun Diem::burn<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+471
procedure {:inline 1} $1_Diem_burn'#0'(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Diem_Preburn'#0';
    var $t7: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t8: int;
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Diem_Preburn'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'#0';
    var $t20: $1_Diem_CurrencyInfo'#0';
    var $t21: Vec (int);
    var $t22: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t23: $1_Diem_Preburn'#0';
    var $t24: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t25: int;
    var $t26: $1_Diem_CurrencyInfo'#0';
    var $t27: $1_Diem_Preburn'#0';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t6, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t6 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t7, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t7 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t8, select Diem::Diem.value(select Diem::Preburn.to_burn($t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t8 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t6)));

    // assume Identical($t9, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t10 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t13 == $burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$at(11,16019,16020)"} true;
    assume {:print "$track_local(18,5,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(18,5,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:321:5+1
    assume {:print "$track_local(18,5,2):", $t2} $t2 == $t2;

    // $t14 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume {:print "$at(11,16206,16233)"} true;

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsValid'address'($t14);

    // assume Eq<address>($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27
    assume $IsEqual'address'($t14, $1_Signer_spec_address_of($t0));

    // $t14 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:20+27

    // trace_local[addr]($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:326:13+4
    assume {:print "$track_local(18,5,5):", $t14} $t14 == $t14;

    // $t15 := exists<Diem::BurnCapability<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:16+6
    assume {:print "$at(11,16250,16256)"} true;
    $t15 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t14);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:84+16
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := opaque begin: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsValid'u64'($t17);

    // assume Eq<u64>($t17, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45
    assume $IsEqual'u64'($t17, 4);

    // $t17 := opaque end: Errors::requires_capability($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:56+45

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(18,5,4):", $t17} $t17 == $t17;

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$track_local(18,5,3):", $t15} $t15 == $t15;

    // if ($t15) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    if ($t15) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
L1:

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    assume {:print "$at(11,16243,16336)"} true;
    assume {:print "$track_abort(18,5):", $t17} $t17 == $t17;

    // $t18 := move($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    $t18 := $t17;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:327:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:329:13+15
    assume {:print "$at(11,16380,16395)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t14) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:330:13+13
    assume {:print "$at(11,16409,16422)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t14)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(11,16409,16422)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // assume Identical($t20, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t20 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t21 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t22, select Diem::CurrencyInfo.burn_events($t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t22 == $burn_events#$1_Diem_CurrencyInfo'#0'($t20));

    // assume Identical($t23, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t23 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t24, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t24 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t25, select Diem::Diem.value(select Diem::Preburn.to_burn($t23))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t25 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t23)));

    // assume Identical($t26, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t26 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t27, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t27 == $1_Diem_spec_make_preburn'#0'($t2));

    // Diem::burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t18 at /home/ying/diem/language/diem-framework/modules/Diem.move:328:9+138
    assume {:print "$at(11,16346,16484)"} true;
    call $1_Diem_burn_with_capability'#0'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,16346,16484)"} true;
        $t18 := $abort_code;
        assume {:print "$track_abort(18,5):", $t18} $t18 == $t18;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    assume {:print "$at(11,16489,16490)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
L3:

    // abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:333:5+1
    $abort_code := $t18;
    $abort_flag := true;
    return;

}

// fun Diem::burn_now<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+415
procedure {:inline 1} $1_Diem_burn_now'$1_XUS_XUS'(_$t0: $1_Diem_Diem'$1_XUS_XUS', _$t1: $Mutation ($1_Diem_Preburn'$1_XUS_XUS'), _$t2: int, _$t3: $1_Diem_BurnCapability'$1_XUS_XUS') returns ($ret0: $Mutation ($1_Diem_Preburn'$1_XUS_XUS'))
{
    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t7: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t8: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t11: $1_Diem_PreburnEvent;
    var $t12: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t13: Vec (int);
    var $t14: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t22: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t23: Vec (int);
    var $t24: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t25: $1_Diem_PreburnEvent;
    var $t26: $1_Diem_Preburn'$1_XUS_XUS';
    var $t27: int;
    var $t28: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t29: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t30: Vec (int);
    var $t31: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t0: $1_Diem_Diem'$1_XUS_XUS';
    var $t1: $Mutation ($1_Diem_Preburn'$1_XUS_XUS');
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1076:9+42
    assume {:print "$at(11,51502,51544)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t7, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.preburn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t10 == $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t8));

    // assume Identical($t11, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t9, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t11 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XUS_XUS'($t0), $t9, $t2));

    // assume Identical($t12, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t12 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t13, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t13 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t14, select Diem::CurrencyInfo.burn_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t14 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t12));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$at(11,51015,51016)"} true;
    assume {:print "$track_local(18,6,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'$1_XUS_XUS''} $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' == $temp_0'$1_Diem_Preburn'$1_XUS_XUS'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$track_local(18,6,2):", $t2} $t2 == $t2;

    // trace_local[capability]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$track_local(18,6,3):", $t3} $t3 == $t3;

    // $t15 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:16+10
    assume {:print "$at(11,51242,51252)"} true;
    $t15 := $value#$1_Diem_Diem'$1_XUS_XUS'($t0);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:29+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t15, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:27+1
    call $t17 := $Gt($t15, $t16);

    // $t18 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:57+5
    $t18 := 7;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31
    assume $IsEqual'u64'($t19, 7);

    // $t19 := opaque end: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31

    // trace_local[tmp#$5]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$track_local(18,6,5):", $t19} $t19 == $t19;

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$track_local(18,6,4):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55

    // destroy($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$at(11,51235,51290)"} true;
    assume {:print "$track_abort(18,6):", $t19} $t19 == $t19;

    // $t20 := move($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    $t20 := $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1071:31+4
    assume {:print "$at(11,51322,51326)"} true;
L0:

    // assume Identical($t21, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t21 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t23, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t23 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t24, select Diem::CurrencyInfo.preburn_events($t22)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t24 == $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t22));

    // assume Identical($t25, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t23, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t25 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XUS_XUS'($t0), $t23, $t2));

    // Diem::preburn_with_resource<#0>($t0, $t1, $t2) on_abort goto L3 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1071:9+53
    assume {:print "$at(11,51300,51353)"} true;
    call $t1 := $1_Diem_preburn_with_resource'$1_XUS_XUS'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,51300,51353)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,6):", $t20} $t20 == $t20;
        goto L3;
    }

    // assume Identical($t26, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t26 == $Dereference($t1));

    // assume Identical($t27, select Diem::Diem.value(select Diem::Preburn.to_burn($t26))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t27 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t26)));

    // assume Identical($t28, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t28 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t30, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t30 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t31, select Diem::CurrencyInfo.burn_events($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t31 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t29));

    // Diem::burn_with_resource_cap<#0>($t1, $t2, $t3) on_abort goto L3 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1072:9+60
    assume {:print "$at(11,51363,51423)"} true;
    call $t1 := $1_Diem_burn_with_resource_cap'$1_XUS_XUS'($t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,51363,51423)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,6):", $t20} $t20 == $t20;
        goto L3;
    }

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1072:69+1
    $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'$1_XUS_XUS''} $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' == $temp_0'$1_Diem_Preburn'$1_XUS_XUS'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    assume {:print "$at(11,51429,51430)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    $ret0 := $t1;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
L3:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun Diem::burn_now<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+415
procedure {:inline 1} $1_Diem_burn_now'$1_XDX_XDX'(_$t0: $1_Diem_Diem'$1_XDX_XDX', _$t1: $Mutation ($1_Diem_Preburn'$1_XDX_XDX'), _$t2: int, _$t3: $1_Diem_BurnCapability'$1_XDX_XDX') returns ($ret0: $Mutation ($1_Diem_Preburn'$1_XDX_XDX'))
{
    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t7: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t8: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t11: $1_Diem_PreburnEvent;
    var $t12: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t13: Vec (int);
    var $t14: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t22: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t23: Vec (int);
    var $t24: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t25: $1_Diem_PreburnEvent;
    var $t26: $1_Diem_Preburn'$1_XDX_XDX';
    var $t27: int;
    var $t28: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t29: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t30: Vec (int);
    var $t31: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t0: $1_Diem_Diem'$1_XDX_XDX';
    var $t1: $Mutation ($1_Diem_Preburn'$1_XDX_XDX');
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1076:9+42
    assume {:print "$at(11,51502,51544)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t7, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.preburn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t10 == $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t8));

    // assume Identical($t11, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t9, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t11 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XDX_XDX'($t0), $t9, $t2));

    // assume Identical($t12, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t12 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t13, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t13 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t14, select Diem::CurrencyInfo.burn_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t14 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t12));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$at(11,51015,51016)"} true;
    assume {:print "$track_local(18,6,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'$1_XDX_XDX''} $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' == $temp_0'$1_Diem_Preburn'$1_XDX_XDX'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$track_local(18,6,2):", $t2} $t2 == $t2;

    // trace_local[capability]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$track_local(18,6,3):", $t3} $t3 == $t3;

    // $t15 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:16+10
    assume {:print "$at(11,51242,51252)"} true;
    $t15 := $value#$1_Diem_Diem'$1_XDX_XDX'($t0);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:29+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t15, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:27+1
    call $t17 := $Gt($t15, $t16);

    // $t18 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:57+5
    $t18 := 7;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31
    assume $IsEqual'u64'($t19, 7);

    // $t19 := opaque end: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31

    // trace_local[tmp#$5]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$track_local(18,6,5):", $t19} $t19 == $t19;

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$track_local(18,6,4):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55

    // destroy($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$at(11,51235,51290)"} true;
    assume {:print "$track_abort(18,6):", $t19} $t19 == $t19;

    // $t20 := move($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    $t20 := $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1071:31+4
    assume {:print "$at(11,51322,51326)"} true;
L0:

    // assume Identical($t21, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t21 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t23, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t23 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t24, select Diem::CurrencyInfo.preburn_events($t22)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t24 == $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t22));

    // assume Identical($t25, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t23, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t25 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XDX_XDX'($t0), $t23, $t2));

    // Diem::preburn_with_resource<#0>($t0, $t1, $t2) on_abort goto L3 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1071:9+53
    assume {:print "$at(11,51300,51353)"} true;
    call $t1 := $1_Diem_preburn_with_resource'$1_XDX_XDX'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,51300,51353)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,6):", $t20} $t20 == $t20;
        goto L3;
    }

    // assume Identical($t26, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t26 == $Dereference($t1));

    // assume Identical($t27, select Diem::Diem.value(select Diem::Preburn.to_burn($t26))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t27 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t26)));

    // assume Identical($t28, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t28 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t30, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t30 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t31, select Diem::CurrencyInfo.burn_events($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t31 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t29));

    // Diem::burn_with_resource_cap<#0>($t1, $t2, $t3) on_abort goto L3 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1072:9+60
    assume {:print "$at(11,51363,51423)"} true;
    call $t1 := $1_Diem_burn_with_resource_cap'$1_XDX_XDX'($t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,51363,51423)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,6):", $t20} $t20 == $t20;
        goto L3;
    }

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1072:69+1
    $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'$1_XDX_XDX''} $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' == $temp_0'$1_Diem_Preburn'$1_XDX_XDX'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    assume {:print "$at(11,51429,51430)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    $ret0 := $t1;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
L3:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun Diem::burn_now<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+415
procedure {:inline 1} $1_Diem_burn_now'#0'(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int, _$t3: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t11: $1_Diem_PreburnEvent;
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: Vec (int);
    var $t14: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $1_Diem_CurrencyInfo'#0';
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: Vec (int);
    var $t24: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t25: $1_Diem_PreburnEvent;
    var $t26: $1_Diem_Preburn'#0';
    var $t27: int;
    var $t28: $1_Diem_CurrencyInfo'#0';
    var $t29: $1_Diem_CurrencyInfo'#0';
    var $t30: Vec (int);
    var $t31: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // bytecode translation starts here
    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1076:9+42
    assume {:print "$at(11,51502,51544)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.preburn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t10 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t8));

    // assume Identical($t11, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t9, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t11 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t9, $t2));

    // assume Identical($t12, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t12 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t13 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t14, select Diem::CurrencyInfo.burn_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t14 == $burn_events#$1_Diem_CurrencyInfo'#0'($t12));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$at(11,51015,51016)"} true;
    assume {:print "$track_local(18,6,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$track_local(18,6,2):", $t2} $t2 == $t2;

    // trace_local[capability]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1064:5+1
    assume {:print "$track_local(18,6,3):", $t3} $t3 == $t3;

    // $t15 := get_field<Diem::Diem<#0>>.value($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:16+10
    assume {:print "$at(11,51242,51252)"} true;
    $t15 := $value#$1_Diem_Diem'#0'($t0);

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:29+1
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t15, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:27+1
    call $t17 := $Gt($t15, $t16);

    // $t18 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:57+5
    $t18 := 7;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31
    assume $IsEqual'u64'($t19, 7);

    // $t19 := opaque end: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:32+31

    // trace_local[tmp#$5]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$track_local(18,6,5):", $t19} $t19 == $t19;

    // trace_local[tmp#$4]($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$track_local(18,6,4):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55

    // destroy($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    assume {:print "$at(11,51235,51290)"} true;
    assume {:print "$track_abort(18,6):", $t19} $t19 == $t19;

    // $t20 := move($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    $t20 := $t19;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1070:9+55
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1071:31+4
    assume {:print "$at(11,51322,51326)"} true;
L0:

    // assume Identical($t21, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t21 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t23 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, select Diem::CurrencyInfo.preburn_events($t22)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t24 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t22));

    // assume Identical($t25, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t23, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t25 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t23, $t2));

    // Diem::preburn_with_resource<#0>($t0, $t1, $t2) on_abort goto L3 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1071:9+53
    assume {:print "$at(11,51300,51353)"} true;
    call $t1 := $1_Diem_preburn_with_resource'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,51300,51353)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,6):", $t20} $t20 == $t20;
        goto L3;
    }

    // assume Identical($t26, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t26 == $Dereference($t1));

    // assume Identical($t27, select Diem::Diem.value(select Diem::Preburn.to_burn($t26))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t27 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t26)));

    // assume Identical($t28, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t28 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t30, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t30 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t31, select Diem::CurrencyInfo.burn_events($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t31 == $burn_events#$1_Diem_CurrencyInfo'#0'($t29));

    // Diem::burn_with_resource_cap<#0>($t1, $t2, $t3) on_abort goto L3 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1072:9+60
    assume {:print "$at(11,51363,51423)"} true;
    call $t1 := $1_Diem_burn_with_resource_cap'#0'($t1, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(11,51363,51423)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,6):", $t20} $t20 == $t20;
        goto L3;
    }

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1072:69+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,6,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    assume {:print "$at(11,51429,51430)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    $ret0 := $t1;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
L3:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1073:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_capability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+540
procedure {:inline 1} $1_Diem_burn_with_capability'$1_XUS_XUS'(_$t0: int, _$t1: $1_Diem_BurnCapability'$1_XUS_XUS', _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Preburn'$1_XUS_XUS';
    var $t4: $1_Diem_Diem'$1_XUS_XUS';
    var $t5: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t6: Vec (int);
    var $t7: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t8: $1_Diem_Preburn'$1_XUS_XUS';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t10: int;
    var $t11: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t12: $1_Diem_Preburn'$1_XUS_XUS';
    var $t13: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t14: $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
    var $t15: bool;
    var $t16: int;
    var $t17: $1_Diem_Preburn'$1_XUS_XUS';
    var $t18: Vec (int);
    var $t19: $Mutation ($1_Diem_Preburn'$1_XUS_XUS');
    var $t20: $1_Diem_Preburn'$1_XUS_XUS';
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t23: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t26: $1_Diem_Preburn'$1_XUS_XUS';
    var $t27: $1_Diem_Diem'$1_XUS_XUS';
    var $t28: bool;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t2: int;
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#193: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // assume Identical($t5, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t5 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t6, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t6 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t7, select Diem::CurrencyInfo.burn_events($t5)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t7 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t5));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t2));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0)));

    // assume Identical($t10, select Diem::Diem.value(select Diem::Preburn.to_burn($t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t10 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t8)));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t12, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t12 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t2));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$at(11,42715,42716)"} true;
    assume {:print "$track_local(18,7,0):", $t0} $t0 == $t0;

    // trace_local[capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$track_local(18,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$track_local(18,7,2):", $t2} $t2 == $t2;

    // assume Identical($t13, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t13 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0)));

    // $t14 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume {:print "$at(11,43001,43061)"} true;

    // assume Identical($t15, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ($t15 == (!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t13, i)))), $t2)))))));

    // if ($t15) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
L4:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0) && $IsEqual'num'(5, $t16)) || ((var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t13, i)))), $t2))))) && $IsEqual'num'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume {:print "$at(11,43001,43061)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
L3:

    // @193 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#193 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''($t14);

    // assume Implies(exists[@193]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#193, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t14))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($t14))), $t2);

    // $t14 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60

    // ($t17, $t18) := unpack Diem::PreburnWithMetadata<#0>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:13+43
    $t17 := $preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($t14);
    $t18 := $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($t14);

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:53+1

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:34+7
    $t3 := $t17;

    // trace_local[preburn]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:34+7
    assume {:print "$track_local(18,7,3):", $t3} $t3 == $t3;

    // $t19 := borrow_local($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:892:32+12
    assume {:print "$at(11,43131,43143)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // assume Identical($t20, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t20 == $Dereference($t19));

    // assume Identical($t21, select Diem::Diem.value(select Diem::Preburn.to_burn($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t21 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t20)));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t25 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t23));

    // Diem::burn_with_resource_cap<#0>($t19, $t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:892:9+65
    assume {:print "$at(11,43108,43173)"} true;
    call $t19 := $1_Diem_burn_with_resource_cap'$1_XUS_XUS'($t19, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(11,43108,43173)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:892:9+65
    $t3 := $Dereference($t19);

    // $t26 := move($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:35+7
    assume {:print "$at(11,43210,43217)"} true;
    $t26 := $t3;

    // $t27 := unpack Diem::Preburn<#0>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:13+19
    $t27 := $to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t26);

    // trace_local[to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:23+7
    assume {:print "$track_local(18,7,4):", $t27} $t27 == $t27;

    // opaque begin: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume {:print "$at(11,43227,43248)"} true;

    // assume Identical($t28, Gt(select Diem::Diem.value($t27), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume ($t28 == ($value#$1_Diem_Diem'$1_XUS_XUS'($t27) > 0));

    // if ($t28) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    if ($t28) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
L6:

    // assume And(Gt(select Diem::Diem.value($t27), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume (($value#$1_Diem_Diem'$1_XUS_XUS'($t27) > 0) && $IsEqual'num'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume {:print "$at(11,43227,43248)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
L5:

    // opaque end: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    assume {:print "$at(11,43254,43255)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
L2:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_capability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+540
procedure {:inline 1} $1_Diem_burn_with_capability'$1_XDX_XDX'(_$t0: int, _$t1: $1_Diem_BurnCapability'$1_XDX_XDX', _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Preburn'$1_XDX_XDX';
    var $t4: $1_Diem_Diem'$1_XDX_XDX';
    var $t5: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t6: Vec (int);
    var $t7: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t8: $1_Diem_Preburn'$1_XDX_XDX';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t10: int;
    var $t11: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t12: $1_Diem_Preburn'$1_XDX_XDX';
    var $t13: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t14: $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
    var $t15: bool;
    var $t16: int;
    var $t17: $1_Diem_Preburn'$1_XDX_XDX';
    var $t18: Vec (int);
    var $t19: $Mutation ($1_Diem_Preburn'$1_XDX_XDX');
    var $t20: $1_Diem_Preburn'$1_XDX_XDX';
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t23: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t26: $1_Diem_Preburn'$1_XDX_XDX';
    var $t27: $1_Diem_Diem'$1_XDX_XDX';
    var $t28: bool;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t2: int;
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'': $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#193: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // assume Identical($t5, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t5 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t6, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t6 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t7, select Diem::CurrencyInfo.burn_events($t5)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t7 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t5));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t2));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0)));

    // assume Identical($t10, select Diem::Diem.value(select Diem::Preburn.to_burn($t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t10 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t8)));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t12, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t12 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t2));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$at(11,42715,42716)"} true;
    assume {:print "$track_local(18,7,0):", $t0} $t0 == $t0;

    // trace_local[capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$track_local(18,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$track_local(18,7,2):", $t2} $t2 == $t2;

    // assume Identical($t13, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t13 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0)));

    // $t14 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume {:print "$at(11,43001,43061)"} true;

    // assume Identical($t15, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ($t15 == (!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t13, i)))), $t2)))))));

    // if ($t15) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
L4:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0) && $IsEqual'num'(5, $t16)) || ((var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t13, i)))), $t2))))) && $IsEqual'num'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume {:print "$at(11,43001,43061)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
L3:

    // @193 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#193 := $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'';
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'');
    } else {
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''($t14);

    // assume Implies(exists[@193]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#193, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t14))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($t14))), $t2);

    // $t14 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60

    // ($t17, $t18) := unpack Diem::PreburnWithMetadata<#0>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:13+43
    $t17 := $preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($t14);
    $t18 := $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($t14);

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:53+1

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:34+7
    $t3 := $t17;

    // trace_local[preburn]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:34+7
    assume {:print "$track_local(18,7,3):", $t3} $t3 == $t3;

    // $t19 := borrow_local($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:892:32+12
    assume {:print "$at(11,43131,43143)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // assume Identical($t20, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t20 == $Dereference($t19));

    // assume Identical($t21, select Diem::Diem.value(select Diem::Preburn.to_burn($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t21 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t20)));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t25 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t23));

    // Diem::burn_with_resource_cap<#0>($t19, $t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:892:9+65
    assume {:print "$at(11,43108,43173)"} true;
    call $t19 := $1_Diem_burn_with_resource_cap'$1_XDX_XDX'($t19, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(11,43108,43173)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:892:9+65
    $t3 := $Dereference($t19);

    // $t26 := move($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:35+7
    assume {:print "$at(11,43210,43217)"} true;
    $t26 := $t3;

    // $t27 := unpack Diem::Preburn<#0>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:13+19
    $t27 := $to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t26);

    // trace_local[to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:23+7
    assume {:print "$track_local(18,7,4):", $t27} $t27 == $t27;

    // opaque begin: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume {:print "$at(11,43227,43248)"} true;

    // assume Identical($t28, Gt(select Diem::Diem.value($t27), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume ($t28 == ($value#$1_Diem_Diem'$1_XDX_XDX'($t27) > 0));

    // if ($t28) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    if ($t28) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
L6:

    // assume And(Gt(select Diem::Diem.value($t27), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume (($value#$1_Diem_Diem'$1_XDX_XDX'($t27) > 0) && $IsEqual'num'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume {:print "$at(11,43227,43248)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
L5:

    // opaque end: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    assume {:print "$at(11,43254,43255)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
L2:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+540
procedure {:inline 1} $1_Diem_burn_with_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Preburn'#0';
    var $t4: $1_Diem_Diem'#0';
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: Vec (int);
    var $t7: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t8: $1_Diem_Preburn'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: int;
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: $1_Diem_Preburn'#0';
    var $t13: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t14: $1_Diem_PreburnWithMetadata'#0';
    var $t15: bool;
    var $t16: int;
    var $t17: $1_Diem_Preburn'#0';
    var $t18: Vec (int);
    var $t19: $Mutation ($1_Diem_Preburn'#0');
    var $t20: $1_Diem_Preburn'#0';
    var $t21: int;
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t26: $1_Diem_Preburn'#0';
    var $t27: $1_Diem_Diem'#0';
    var $t28: bool;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_Diem_PreburnQueue'#0'_$memory#193: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t19));

    // bytecode translation starts here
    // assume Identical($t5, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t5 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t6, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t6 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, select Diem::CurrencyInfo.burn_events($t5)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t7 == $burn_events#$1_Diem_CurrencyInfo'#0'($t5));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'#0'($t2));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, select Diem::Diem.value(select Diem::Preburn.to_burn($t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t10 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t8)));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_make_preburn<#0>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t12 == $1_Diem_spec_make_preburn'#0'($t2));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$at(11,42715,42716)"} true;
    assume {:print "$track_local(18,7,0):", $t0} $t0 == $t0;

    // trace_local[capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$track_local(18,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:882:5+1
    assume {:print "$track_local(18,7,2):", $t2} $t2 == $t2;

    // assume Identical($t13, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t13 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t14 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume {:print "$at(11,43001,43061)"} true;

    // assume Identical($t15, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ($t15 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2)))))));

    // if ($t15) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
L4:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t16)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t13)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t13, i)))), $t2), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'num'(5, $t16)) || ((var $range_0 := $Range(0, LenVec($t13)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t13, i)))), $t2))))) && $IsEqual'num'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume {:print "$at(11,43001,43061)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
L3:

    // @193 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    $1_Diem_PreburnQueue'#0'_$memory#193 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t14);

    // assume Implies(exists[@193]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#193, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t14))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t14))), $t2);

    // $t14 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:59+60

    // ($t17, $t18) := unpack Diem::PreburnWithMetadata<#0>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:13+43
    $t17 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t14);
    $t18 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t14);

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:53+1

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:889:34+7
    $t3 := $t17;

    // trace_local[preburn]($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:889:34+7
    assume {:print "$track_local(18,7,3):", $t3} $t3 == $t3;

    // $t19 := borrow_local($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:892:32+12
    assume {:print "$at(11,43131,43143)"} true;
    $t19 := $Mutation($Local(3), EmptyVec(), $t3);

    // assume Identical($t20, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t20 == $Dereference($t19));

    // assume Identical($t21, select Diem::Diem.value(select Diem::Preburn.to_burn($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t21 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t20)));

    // assume Identical($t22, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t22 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t25 == $burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // Diem::burn_with_resource_cap<#0>($t19, $t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:892:9+65
    assume {:print "$at(11,43108,43173)"} true;
    call $t19 := $1_Diem_burn_with_resource_cap'#0'($t19, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(11,43108,43173)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // write_back[LocalRoot($t3)@]($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:892:9+65
    $t3 := $Dereference($t19);

    // $t26 := move($t3) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:35+7
    assume {:print "$at(11,43210,43217)"} true;
    $t26 := $t3;

    // $t27 := unpack Diem::Preburn<#0>($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:13+19
    $t27 := $to_burn#$1_Diem_Preburn'#0'($t26);

    // trace_local[to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:894:23+7
    assume {:print "$track_local(18,7,4):", $t27} $t27 == $t27;

    // opaque begin: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume {:print "$at(11,43227,43248)"} true;

    // assume Identical($t28, Gt(select Diem::Diem.value($t27), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume ($t28 == ($value#$1_Diem_Diem'#0'($t27) > 0));

    // if ($t28) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    if ($t28) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
L6:

    // assume And(Gt(select Diem::Diem.value($t27), 0), Eq(7, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume (($value#$1_Diem_Diem'#0'($t27) > 0) && $IsEqual'num'(7, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    assume {:print "$at(11,43227,43248)"} true;
    assume {:print "$track_abort(18,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21
L5:

    // opaque end: Diem::destroy_zero<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:895:9+21

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    assume {:print "$at(11,43254,43255)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
L2:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:896:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun Diem::burn_with_resource_cap<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1372
procedure {:inline 1} $1_Diem_burn_with_resource_cap'$1_XUS_XUS'(_$t0: $Mutation ($1_Diem_Preburn'$1_XUS_XUS'), _$t1: int, _$t2: $1_Diem_BurnCapability'$1_XUS_XUS') returns ($ret0: $Mutation ($1_Diem_Preburn'$1_XUS_XUS'))
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: Vec (int);
    var $t10: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t11: int;
    var $t12: $1_Diem_Preburn'$1_XUS_XUS';
    var $t13: int;
    var $t14: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t15: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: $1_Diem_Diem'$1_XUS_XUS';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_Diem_Diem'$1_XUS_XUS');
    var $t28: $1_Diem_Diem'$1_XUS_XUS';
    var $t29: $1_Diem_Diem'$1_XUS_XUS';
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $Mutation (int);
    var $t50: bool;
    var $t51: bool;
    var $t52: $Mutation ($1_Event_EventHandle'$1_Diem_BurnEvent');
    var $t53: $1_Diem_BurnEvent;
    var $t0: $Mutation ($1_Diem_Preburn'$1_XUS_XUS');
    var $t1: int;
    var $t2: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'': $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t42));
    assume IsEmptyVec(p#$Mutation($t49));
    assume IsEmptyVec(p#$Mutation($t52));

    // bytecode translation starts here
    // assume Identical($t12, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t12 == $Dereference($t0));

    // assume Identical($t13, select Diem::Diem.value(select Diem::Preburn.to_burn($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t13 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t12)));

    // assume Identical($t14, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t14 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t17 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t15));

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$at(11,44532,44533)"} true;
    $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'$1_XUS_XUS''} $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' == $temp_0'$1_Diem_Preburn'$1_XUS_XUS'';

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$track_local(18,8,1):", $t1} $t1 == $t1;

    // trace_local[_capability]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$track_local(18,8,2):", $t2} $t2 == $t2;

    // $t18 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume {:print "$at(11,44750,44775)"} true;

    // assume Identical($t19, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume ($t19 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t19) goto L18 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    if ($t19) { goto L18; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
L15:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume {:print "$at(11,44750,44775)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
L14:

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume $IsValid'vec'u8''($t18);

    // assume Eq<vector<u8>>($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume $IsEqual'vec'u8''($t18, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // $t18 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25

    // trace_local[currency_code]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:13+13
    assume {:print "$track_local(18,8,9):", $t18} $t18 == $t18;

    // $t21 := get_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:16+15
    assume {:print "$at(11,44844,44859)"} true;
    $t21 := $to_burn#$1_Diem_Preburn'$1_XUS_XUS'($Dereference($t0));

    // $t22 := get_field<Diem::Diem<#0>>.value($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:16+21
    $t22 := $value#$1_Diem_Diem'$1_XUS_XUS'($t21);

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:40+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:38+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 4 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:65+14
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // $t26 := opaque begin: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37
    assume $IsEqual'u64'($t26, 1);

    // $t26 := opaque end: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37

    // trace_local[tmp#$4]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$track_local(18,8,4):", $t26} $t26 == $t26;

    // trace_local[tmp#$3]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$track_local(18,8,3):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$at(11,44837,44909)"} true;
    assume {:print "$track_abort(18,8):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    $t20 := $t26;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    goto L13;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:931:58+7
    assume {:print "$at(11,45012,45019)"} true;
L0:

    // $t27 := borrow_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:53+20
    $t27 := $ChildMutation($t0, 0, $to_burn#$1_Diem_Preburn'$1_XUS_XUS'($Dereference($t0)));

    // $t28 := opaque begin: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44

    // $t29 := read_ref($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    $t29 := $Dereference($t27);

    // havoc[mut]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    havoc $temp_0'$1_Diem_Diem'$1_XUS_XUS'';
    $t27 := $UpdateMutation($t27, $temp_0'$1_Diem_Diem'$1_XUS_XUS'');
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t27));

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t27));

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($t28);

    // assume Eq<u64>(select Diem::Diem.value($t28), select Diem::Diem.value($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($t28), $value#$1_Diem_Diem'$1_XUS_XUS'($t29));

    // assume Eq<u64>(select Diem::Diem.value($t27), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t27)), 0);

    // $t28 := opaque end: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44

    // write_back[Reference($t0).to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn($Dereference($t0), $Dereference($t27)));

    // $t30 := unpack Diem::Diem<#0>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:13+14
    $t30 := $value#$1_Diem_Diem'$1_XUS_XUS'($t28);

    // trace_local[value]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:20+5
    assume {:print "$track_local(18,8,11):", $t30} $t30 == $t30;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume {:print "$at(11,45071,45101)"} true;

    // assume Identical($t31, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume ($t31 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t31) goto L19 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    if ($t31) { goto L19; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
L17:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume {:print "$at(11,45071,45101)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
L16:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30

    // $t32 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:934:62+13
    assume {:print "$at(11,45164,45177)"} true;
    $t32 := 173345816;
    assume $IsValid'address'($t32);

    // $t33 := borrow_global<Diem::CurrencyInfo<#0>>($t32) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:934:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(11,45122,45139)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // trace_local[info]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:934:13+4
    $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' := $Dereference($t33);
    assume {:print "$track_local(18,8,10):", $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS''} $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' == $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'';

    // $t34 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:16+16
    assume {:print "$at(11,45195,45211)"} true;
    $t34 := $total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33));

    // $t35 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:36+15
    call $t35 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(11,45215,45230)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t36 := >=($t34, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:33+2
    call $t36 := $Ge($t34, $t35);

    // $t37 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:76+14
    $t37 := 1;
    assume $IsValid'u64'($t37);

    // $t38 := opaque begin: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38

    // assume WellFormed($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38
    assume $IsValid'u64'($t38);

    // assume Eq<u64>($t38, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38
    assume $IsEqual'u64'($t38, 8);

    // $t38 := opaque end: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38

    // trace_local[tmp#$6]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$track_local(18,8,6):", $t38} $t38 == $t38;

    // trace_local[tmp#$5]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$track_local(18,8,5):", $t36} $t36 == $t36;

    // if ($t36) goto L2 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    if ($t36) { goto L2; } else { goto L10; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
L3:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83

    // trace_abort($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$at(11,45188,45271)"} true;
    assume {:print "$track_abort(18,8):", $t38} $t38 == $t38;

    // $t20 := move($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    $t20 := $t38;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:28+4
    assume {:print "$at(11,45300,45304)"} true;
L2:

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:28+16
    $t39 := $total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33));

    // $t40 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:47+15
    call $t40 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(11,45319,45334)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t41 := -($t39, $t40) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:45+1
    call $t41 := $Sub($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(11,45317,45318)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+16
    $t42 := $ChildMutation($t33, 0, $total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33)));

    // write_ref($t42, $t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+53
    $t42 := $UpdateMutation($t42, $t41);

    // write_back[Reference($t33).total_value]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+53
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value($Dereference($t33), $Dereference($t42)));

    // $t43 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:16+18
    assume {:print "$at(11,45351,45369)"} true;
    $t43 := $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33));

    // $t44 := >=($t43, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:35+2
    call $t44 := $Ge($t43, $t30);

    // $t45 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:68+8
    $t45 := 2;
    assume $IsValid'u64'($t45);

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32

    // trace_local[tmp#$8]($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$track_local(18,8,8):", $t46} $t46 == $t46;

    // trace_local[tmp#$7]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$track_local(18,8,7):", $t44} $t44 == $t44;

    // if ($t44) goto L4 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    if ($t44) { goto L4; } else { goto L11; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
L5:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$at(11,45344,45413)"} true;
    assume {:print "$track_abort(18,8):", $t46} $t46 == $t46;

    // $t20 := move($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    $t20 := $t46;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:30+4
    assume {:print "$at(11,45444,45448)"} true;
L4:

    // $t47 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:30+18
    $t47 := $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33));

    // $t48 := -($t47, $t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:49+1
    call $t48 := $Sub($t47, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,45463,45464)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t49 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+18
    $t49 := $ChildMutation($t33, 1, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33)));

    // write_ref($t49, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+47
    $t49 := $UpdateMutation($t49, $t48);

    // write_back[Reference($t33).preburn_value]($t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+47
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value($Dereference($t33), $Dereference($t49)));

    // $t50 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:14+17
    assume {:print "$at(11,45629,45646)"} true;
    $t50 := $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33));

    // $t51 := !($t50) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:13+1
    call $t51 := $Not($t50);

    // if ($t51) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    if ($t51) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:943:22+4
    assume {:print "$at(11,45702,45706)"} true;
L6:

    // $t52 := borrow_field<Diem::CurrencyInfo<#0>>.burn_events($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:943:17+21
    $t52 := $ChildMutation($t33, 9, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t33)));

    // $t53 := pack Diem::BurnEvent($t30, $t18, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:944:17+136
    assume {:print "$at(11,45736,45872)"} true;
    $t53 := $1_Diem_BurnEvent($t30, $t18, $t1);

    // Event::emit_event<Diem::BurnEvent>($t52, $t53) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224
    assume {:print "$at(11,45662,45886)"} true;
    call $t52 := $1_Event_emit_event'$1_Diem_BurnEvent'($t52, $t53);
    if ($abort_flag) {
        assume {:print "$at(11,45662,45886)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:949:14+1
    assume {:print "$at(11,45886,45887)"} true;
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    assume {:print "$at(11,45624,45897)"} true;
L8:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    assume {:print "$at(11,45897,45898)"} true;
L9:

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'$1_XUS_XUS''} $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' == $temp_0'$1_Diem_Preburn'$1_XUS_XUS'';

    // goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    goto L12;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    assume {:print "$at(11,45903,45904)"} true;
L12:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    $ret0 := $t0;
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
L13:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L18 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L18:

    // destroy($t0) at <internal>:1:1+10

    // goto L15 at <internal>:1:1+10
    goto L15;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t0) at <internal>:1:1+10

    // goto L17 at <internal>:1:1+10
    goto L17;

}

// fun Diem::burn_with_resource_cap<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1372
procedure {:inline 1} $1_Diem_burn_with_resource_cap'$1_XDX_XDX'(_$t0: $Mutation ($1_Diem_Preburn'$1_XDX_XDX'), _$t1: int, _$t2: $1_Diem_BurnCapability'$1_XDX_XDX') returns ($ret0: $Mutation ($1_Diem_Preburn'$1_XDX_XDX'))
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: Vec (int);
    var $t10: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t11: int;
    var $t12: $1_Diem_Preburn'$1_XDX_XDX';
    var $t13: int;
    var $t14: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t15: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: $1_Diem_Diem'$1_XDX_XDX';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_Diem_Diem'$1_XDX_XDX');
    var $t28: $1_Diem_Diem'$1_XDX_XDX';
    var $t29: $1_Diem_Diem'$1_XDX_XDX';
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $Mutation (int);
    var $t50: bool;
    var $t51: bool;
    var $t52: $Mutation ($1_Event_EventHandle'$1_Diem_BurnEvent');
    var $t53: $1_Diem_BurnEvent;
    var $t0: $Mutation ($1_Diem_Preburn'$1_XDX_XDX');
    var $t1: int;
    var $t2: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t42));
    assume IsEmptyVec(p#$Mutation($t49));
    assume IsEmptyVec(p#$Mutation($t52));

    // bytecode translation starts here
    // assume Identical($t12, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t12 == $Dereference($t0));

    // assume Identical($t13, select Diem::Diem.value(select Diem::Preburn.to_burn($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t13 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t12)));

    // assume Identical($t14, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t14 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t17 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t15));

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$at(11,44532,44533)"} true;
    $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'$1_XDX_XDX''} $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' == $temp_0'$1_Diem_Preburn'$1_XDX_XDX'';

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$track_local(18,8,1):", $t1} $t1 == $t1;

    // trace_local[_capability]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$track_local(18,8,2):", $t2} $t2 == $t2;

    // $t18 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume {:print "$at(11,44750,44775)"} true;

    // assume Identical($t19, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume ($t19 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t19) goto L18 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    if ($t19) { goto L18; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
L15:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume {:print "$at(11,44750,44775)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
L14:

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume $IsValid'vec'u8''($t18);

    // assume Eq<vector<u8>>($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume $IsEqual'vec'u8''($t18, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // $t18 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25

    // trace_local[currency_code]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:13+13
    assume {:print "$track_local(18,8,9):", $t18} $t18 == $t18;

    // $t21 := get_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:16+15
    assume {:print "$at(11,44844,44859)"} true;
    $t21 := $to_burn#$1_Diem_Preburn'$1_XDX_XDX'($Dereference($t0));

    // $t22 := get_field<Diem::Diem<#0>>.value($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:16+21
    $t22 := $value#$1_Diem_Diem'$1_XDX_XDX'($t21);

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:40+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:38+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 4 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:65+14
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // $t26 := opaque begin: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37
    assume $IsEqual'u64'($t26, 1);

    // $t26 := opaque end: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37

    // trace_local[tmp#$4]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$track_local(18,8,4):", $t26} $t26 == $t26;

    // trace_local[tmp#$3]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$track_local(18,8,3):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$at(11,44837,44909)"} true;
    assume {:print "$track_abort(18,8):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    $t20 := $t26;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    goto L13;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:931:58+7
    assume {:print "$at(11,45012,45019)"} true;
L0:

    // $t27 := borrow_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:53+20
    $t27 := $ChildMutation($t0, 0, $to_burn#$1_Diem_Preburn'$1_XDX_XDX'($Dereference($t0)));

    // $t28 := opaque begin: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44

    // $t29 := read_ref($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    $t29 := $Dereference($t27);

    // havoc[mut]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    havoc $temp_0'$1_Diem_Diem'$1_XDX_XDX'';
    $t27 := $UpdateMutation($t27, $temp_0'$1_Diem_Diem'$1_XDX_XDX'');
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($Dereference($t27));

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($Dereference($t27));

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($t28);

    // assume Eq<u64>(select Diem::Diem.value($t28), select Diem::Diem.value($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($t28), $value#$1_Diem_Diem'$1_XDX_XDX'($t29));

    // assume Eq<u64>(select Diem::Diem.value($t27), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($Dereference($t27)), 0);

    // $t28 := opaque end: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44

    // write_back[Reference($t0).to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn($Dereference($t0), $Dereference($t27)));

    // $t30 := unpack Diem::Diem<#0>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:13+14
    $t30 := $value#$1_Diem_Diem'$1_XDX_XDX'($t28);

    // trace_local[value]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:20+5
    assume {:print "$track_local(18,8,11):", $t30} $t30 == $t30;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume {:print "$at(11,45071,45101)"} true;

    // assume Identical($t31, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume ($t31 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t31) goto L19 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    if ($t31) { goto L19; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
L17:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume {:print "$at(11,45071,45101)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
L16:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30

    // $t32 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:934:62+13
    assume {:print "$at(11,45164,45177)"} true;
    $t32 := 173345816;
    assume $IsValid'address'($t32);

    // $t33 := borrow_global<Diem::CurrencyInfo<#0>>($t32) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:934:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(11,45122,45139)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // trace_local[info]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:934:13+4
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t33);
    assume {:print "$track_local(18,8,10):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t34 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:16+16
    assume {:print "$at(11,45195,45211)"} true;
    $t34 := $total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33));

    // $t35 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:36+15
    call $t35 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(11,45215,45230)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t36 := >=($t34, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:33+2
    call $t36 := $Ge($t34, $t35);

    // $t37 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:76+14
    $t37 := 1;
    assume $IsValid'u64'($t37);

    // $t38 := opaque begin: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38

    // assume WellFormed($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38
    assume $IsValid'u64'($t38);

    // assume Eq<u64>($t38, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38
    assume $IsEqual'u64'($t38, 8);

    // $t38 := opaque end: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38

    // trace_local[tmp#$6]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$track_local(18,8,6):", $t38} $t38 == $t38;

    // trace_local[tmp#$5]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$track_local(18,8,5):", $t36} $t36 == $t36;

    // if ($t36) goto L2 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    if ($t36) { goto L2; } else { goto L10; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
L3:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83

    // trace_abort($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$at(11,45188,45271)"} true;
    assume {:print "$track_abort(18,8):", $t38} $t38 == $t38;

    // $t20 := move($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    $t20 := $t38;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:28+4
    assume {:print "$at(11,45300,45304)"} true;
L2:

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:28+16
    $t39 := $total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33));

    // $t40 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:47+15
    call $t40 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(11,45319,45334)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t41 := -($t39, $t40) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:45+1
    call $t41 := $Sub($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(11,45317,45318)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+16
    $t42 := $ChildMutation($t33, 0, $total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33)));

    // write_ref($t42, $t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+53
    $t42 := $UpdateMutation($t42, $t41);

    // write_back[Reference($t33).total_value]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+53
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value($Dereference($t33), $Dereference($t42)));

    // $t43 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:16+18
    assume {:print "$at(11,45351,45369)"} true;
    $t43 := $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33));

    // $t44 := >=($t43, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:35+2
    call $t44 := $Ge($t43, $t30);

    // $t45 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:68+8
    $t45 := 2;
    assume $IsValid'u64'($t45);

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32

    // trace_local[tmp#$8]($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$track_local(18,8,8):", $t46} $t46 == $t46;

    // trace_local[tmp#$7]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$track_local(18,8,7):", $t44} $t44 == $t44;

    // if ($t44) goto L4 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    if ($t44) { goto L4; } else { goto L11; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
L5:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$at(11,45344,45413)"} true;
    assume {:print "$track_abort(18,8):", $t46} $t46 == $t46;

    // $t20 := move($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    $t20 := $t46;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:30+4
    assume {:print "$at(11,45444,45448)"} true;
L4:

    // $t47 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:30+18
    $t47 := $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33));

    // $t48 := -($t47, $t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:49+1
    call $t48 := $Sub($t47, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,45463,45464)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t49 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+18
    $t49 := $ChildMutation($t33, 1, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33)));

    // write_ref($t49, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+47
    $t49 := $UpdateMutation($t49, $t48);

    // write_back[Reference($t33).preburn_value]($t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+47
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value($Dereference($t33), $Dereference($t49)));

    // $t50 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:14+17
    assume {:print "$at(11,45629,45646)"} true;
    $t50 := $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33));

    // $t51 := !($t50) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:13+1
    call $t51 := $Not($t50);

    // if ($t51) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    if ($t51) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:943:22+4
    assume {:print "$at(11,45702,45706)"} true;
L6:

    // $t52 := borrow_field<Diem::CurrencyInfo<#0>>.burn_events($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:943:17+21
    $t52 := $ChildMutation($t33, 9, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t33)));

    // $t53 := pack Diem::BurnEvent($t30, $t18, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:944:17+136
    assume {:print "$at(11,45736,45872)"} true;
    $t53 := $1_Diem_BurnEvent($t30, $t18, $t1);

    // Event::emit_event<Diem::BurnEvent>($t52, $t53) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224
    assume {:print "$at(11,45662,45886)"} true;
    call $t52 := $1_Event_emit_event'$1_Diem_BurnEvent'($t52, $t53);
    if ($abort_flag) {
        assume {:print "$at(11,45662,45886)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:949:14+1
    assume {:print "$at(11,45886,45887)"} true;
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    assume {:print "$at(11,45624,45897)"} true;
L8:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    assume {:print "$at(11,45897,45898)"} true;
L9:

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'$1_XDX_XDX''} $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' == $temp_0'$1_Diem_Preburn'$1_XDX_XDX'';

    // goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    goto L12;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    assume {:print "$at(11,45903,45904)"} true;
L12:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    $ret0 := $t0;
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
L13:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L18 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L18:

    // destroy($t0) at <internal>:1:1+10

    // goto L15 at <internal>:1:1+10
    goto L15;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t0) at <internal>:1:1+10

    // goto L17 at <internal>:1:1+10
    goto L17;

}

// fun Diem::burn_with_resource_cap<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1372
procedure {:inline 1} $1_Diem_burn_with_resource_cap'#0'(_$t0: $Mutation ($1_Diem_Preburn'#0'), _$t1: int, _$t2: $1_Diem_BurnCapability'#0') returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: Vec (int);
    var $t10: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t11: int;
    var $t12: $1_Diem_Preburn'#0';
    var $t13: int;
    var $t14: $1_Diem_CurrencyInfo'#0';
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t18: Vec (int);
    var $t19: bool;
    var $t20: int;
    var $t21: $1_Diem_Diem'#0';
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_Diem_Diem'#0');
    var $t28: $1_Diem_Diem'#0';
    var $t29: $1_Diem_Diem'#0';
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t34: int;
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: $Mutation (int);
    var $t43: int;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: int;
    var $t48: int;
    var $t49: $Mutation (int);
    var $t50: bool;
    var $t51: bool;
    var $t52: $Mutation ($1_Event_EventHandle'$1_Diem_BurnEvent');
    var $t53: $1_Diem_BurnEvent;
    var $t0: $Mutation ($1_Diem_Preburn'#0');
    var $t1: int;
    var $t2: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t27));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t42));
    assume IsEmptyVec(p#$Mutation($t49));
    assume IsEmptyVec(p#$Mutation($t52));

    // bytecode translation starts here
    // assume Identical($t12, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:953:9+26
    assume {:print "$at(11,45947,45973)"} true;
    assume ($t12 == $Dereference($t0));

    // assume Identical($t13, select Diem::Diem.value(select Diem::Preburn.to_burn($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t13 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t12)));

    // assume Identical($t14, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t14 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t17 == $burn_events#$1_Diem_CurrencyInfo'#0'($t15));

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$at(11,44532,44533)"} true;
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$track_local(18,8,1):", $t1} $t1 == $t1;

    // trace_local[_capability]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:922:5+1
    assume {:print "$track_local(18,8,2):", $t2} $t2 == $t2;

    // $t18 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume {:print "$at(11,44750,44775)"} true;

    // assume Identical($t19, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume ($t19 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t19) goto L18 else goto L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    if ($t19) { goto L18; } else { goto L14; }

    // label L15 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
L15:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume {:print "$at(11,44750,44775)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    goto L13;

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
L14:

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume $IsValid'vec'u8''($t18);

    // assume Eq<vector<u8>>($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25
    assume $IsEqual'vec'u8''($t18, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t18 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:927:29+25

    // trace_local[currency_code]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:927:13+13
    assume {:print "$track_local(18,8,9):", $t18} $t18 == $t18;

    // $t21 := get_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:16+15
    assume {:print "$at(11,44844,44859)"} true;
    $t21 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t0));

    // $t22 := get_field<Diem::Diem<#0>>.value($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:16+21
    $t22 := $value#$1_Diem_Diem'#0'($t21);

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:40+1
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := >($t22, $t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:38+1
    call $t24 := $Gt($t22, $t23);

    // $t25 := 4 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:65+14
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // $t26 := opaque begin: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37
    assume $IsEqual'u64'($t26, 1);

    // $t26 := opaque end: Errors::invalid_state($t25) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:43+37

    // trace_local[tmp#$4]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$track_local(18,8,4):", $t26} $t26 == $t26;

    // trace_local[tmp#$3]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$track_local(18,8,3):", $t24} $t24 == $t24;

    // if ($t24) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    if ($t24) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    assume {:print "$at(11,44837,44909)"} true;
    assume {:print "$track_abort(18,8):", $t26} $t26 == $t26;

    // $t20 := move($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    $t20 := $t26;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:929:9+72
    goto L13;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:931:58+7
    assume {:print "$at(11,45012,45019)"} true;
L0:

    // $t27 := borrow_field<Diem::Preburn<#0>>.to_burn($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:53+20
    $t27 := $ChildMutation($t0, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t0)));

    // $t28 := opaque begin: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44

    // $t29 := read_ref($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    $t29 := $Dereference($t27);

    // havoc[mut]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t27 := $UpdateMutation($t27, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t27));

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsValid'$1_Diem_Diem'#0''($t28);

    // assume Eq<u64>(select Diem::Diem.value($t28), select Diem::Diem.value($t29)) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t28), $value#$1_Diem_Diem'#0'($t29));

    // assume Eq<u64>(select Diem::Diem.value($t27), 0) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t27)), 0);

    // $t28 := opaque end: Diem::withdraw_all<#0>($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44

    // write_back[Reference($t0).to_burn]($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:30+44
    $t0 := $UpdateMutation($t0, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t0), $Dereference($t27)));

    // $t30 := unpack Diem::Diem<#0>($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:13+14
    $t30 := $value#$1_Diem_Diem'#0'($t28);

    // trace_local[value]($t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:931:20+5
    assume {:print "$track_local(18,8,11):", $t30} $t30 == $t30;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume {:print "$at(11,45071,45101)"} true;

    // assume Identical($t31, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume ($t31 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t31) goto L19 else goto L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    if ($t31) { goto L19; } else { goto L16; }

    // label L17 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
L17:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20)) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t20));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    assume {:print "$at(11,45071,45101)"} true;
    assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
    goto L13;

    // label L16 at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30
L16:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:933:9+30

    // $t32 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:934:62+13
    assume {:print "$at(11,45164,45177)"} true;
    $t32 := 173345816;
    assume $IsValid'address'($t32);

    // $t33 := borrow_global<Diem::CurrencyInfo<#0>>($t32) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:934:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(11,45122,45139)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // trace_local[info]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:934:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t33);
    assume {:print "$track_local(18,8,10):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t34 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:16+16
    assume {:print "$at(11,45195,45211)"} true;
    $t34 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t35 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:36+15
    call $t35 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(11,45215,45230)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t36 := >=($t34, $t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:33+2
    call $t36 := $Ge($t34, $t35);

    // $t37 := 1 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:76+14
    $t37 := 1;
    assume $IsValid'u64'($t37);

    // $t38 := opaque begin: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38

    // assume WellFormed($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38
    assume $IsValid'u64'($t38);

    // assume Eq<u64>($t38, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38
    assume $IsEqual'u64'($t38, 8);

    // $t38 := opaque end: Errors::limit_exceeded($t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:53+38

    // trace_local[tmp#$6]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$track_local(18,8,6):", $t38} $t38 == $t38;

    // trace_local[tmp#$5]($t36) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$track_local(18,8,5):", $t36} $t36 == $t36;

    // if ($t36) goto L2 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    if ($t36) { goto L2; } else { goto L10; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
L3:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83

    // trace_abort($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    assume {:print "$at(11,45188,45271)"} true;
    assume {:print "$track_abort(18,8):", $t38} $t38 == $t38;

    // $t20 := move($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    $t20 := $t38;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:935:9+83
    goto L13;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:28+4
    assume {:print "$at(11,45300,45304)"} true;
L2:

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:28+16
    $t39 := $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t40 := (u128)($t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:47+15
    call $t40 := $CastU128($t30);
    if ($abort_flag) {
        assume {:print "$at(11,45319,45334)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t41 := -($t39, $t40) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:936:45+1
    call $t41 := $Sub($t39, $t40);
    if ($abort_flag) {
        assume {:print "$at(11,45317,45318)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t42 := borrow_field<Diem::CurrencyInfo<#0>>.total_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+16
    $t42 := $ChildMutation($t33, 0, $total_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t42, $t41) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+53
    $t42 := $UpdateMutation($t42, $t41);

    // write_back[Reference($t33).total_value]($t42) at /home/ying/diem/language/diem-framework/modules/Diem.move:936:9+53
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_total_value($Dereference($t33), $Dereference($t42)));

    // $t43 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:16+18
    assume {:print "$at(11,45351,45369)"} true;
    $t43 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t44 := >=($t43, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:35+2
    call $t44 := $Ge($t43, $t30);

    // $t45 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:68+8
    $t45 := 2;
    assume $IsValid'u64'($t45);

    // $t46 := opaque begin: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32

    // assume WellFormed($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32
    assume $IsValid'u64'($t46);

    // assume Eq<u64>($t46, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32
    assume $IsEqual'u64'($t46, 8);

    // $t46 := opaque end: Errors::limit_exceeded($t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:45+32

    // trace_local[tmp#$8]($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$track_local(18,8,8):", $t46} $t46 == $t46;

    // trace_local[tmp#$7]($t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$track_local(18,8,7):", $t44} $t44 == $t44;

    // if ($t44) goto L4 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    if ($t44) { goto L4; } else { goto L11; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
L5:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69

    // trace_abort($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    assume {:print "$at(11,45344,45413)"} true;
    assume {:print "$track_abort(18,8):", $t46} $t46 == $t46;

    // $t20 := move($t46) at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    $t20 := $t46;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:937:9+69
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:30+4
    assume {:print "$at(11,45444,45448)"} true;
L4:

    // $t47 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:30+18
    $t47 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t48 := -($t47, $t30) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:938:49+1
    call $t48 := $Sub($t47, $t30);
    if ($abort_flag) {
        assume {:print "$at(11,45463,45464)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // $t49 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+18
    $t49 := $ChildMutation($t33, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // write_ref($t49, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+47
    $t49 := $UpdateMutation($t49, $t48);

    // write_back[Reference($t33).preburn_value]($t49) at /home/ying/diem/language/diem-framework/modules/Diem.move:938:9+47
    $t33 := $UpdateMutation($t33, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t33), $Dereference($t49)));

    // $t50 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:14+17
    assume {:print "$at(11,45629,45646)"} true;
    $t50 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t33));

    // $t51 := !($t50) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:13+1
    call $t51 := $Not($t50);

    // if ($t51) goto L6 else goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    if ($t51) { goto L6; } else { goto L7; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
L7:

    // goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    goto L8;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:943:22+4
    assume {:print "$at(11,45702,45706)"} true;
L6:

    // $t52 := borrow_field<Diem::CurrencyInfo<#0>>.burn_events($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:943:17+21
    $t52 := $ChildMutation($t33, 9, $burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t33)));

    // $t53 := pack Diem::BurnEvent($t30, $t18, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:944:17+136
    assume {:print "$at(11,45736,45872)"} true;
    $t53 := $1_Diem_BurnEvent($t30, $t18, $t1);

    // Event::emit_event<Diem::BurnEvent>($t52, $t53) on_abort goto L13 with $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224
    assume {:print "$at(11,45662,45886)"} true;
    call $t52 := $1_Event_emit_event'$1_Diem_BurnEvent'($t52, $t53);
    if ($abort_flag) {
        assume {:print "$at(11,45662,45886)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(18,8):", $t20} $t20 == $t20;
        goto L13;
    }

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:942:13+224
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:949:14+1
    assume {:print "$at(11,45886,45887)"} true;
    goto L9;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    assume {:print "$at(11,45624,45897)"} true;
L8:

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273

    // write_back[Diem::CurrencyInfo<#0>@]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t33),
        $Dereference($t33));

    // destroy($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:941:9+273

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    assume {:print "$at(11,45897,45898)"} true;
L9:

    // trace_local[preburn]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t0);
    assume {:print "$track_local(18,8,0):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:950:10+1
    goto L12;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L11 at <internal>:1:1+10
L11:

    // destroy($t0) at <internal>:1:1+10

    // goto L5 at <internal>:1:1+10
    goto L5;

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    assume {:print "$at(11,45903,45904)"} true;
L12:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    $ret0 := $t0;
    return;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
L13:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:951:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

    // label L18 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L18:

    // destroy($t0) at <internal>:1:1+10

    // goto L15 at <internal>:1:1+10
    goto L15;

    // label L19 at <internal>:1:1+10
L19:

    // destroy($t0) at <internal>:1:1+10

    // goto L17 at <internal>:1:1+10
    goto L17;

}

// fun Diem::cancel_burn<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+542
procedure {:inline 1} $1_Diem_cancel_burn'$1_XUS_XUS'(_$t0: $signer, _$t1: int, _$t2: int) returns ($ret0: $1_Diem_Diem'$1_XUS_XUS')
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t7: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t8: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t9: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t10: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t11: Vec (int);
    var $t12: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t20: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t21: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t22: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t23: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t26: $1_Diem_Diem'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t6, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+66
    assume {:print "$at(11,18397,18463)"} true;
    assume ($t6 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t8, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t8 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t11, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t11 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t12, select Diem::CurrencyInfo.cancel_burn_events($t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t12 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t10));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$at(11,17823,17824)"} true;
    assume {:print "$track_local(18,9,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(18,9,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(18,9,2):", $t2} $t2 == $t2;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(11,18022,18052)"} true;

    // assume Identical($t13, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume ($t13 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t13) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    if ($t13) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t14)) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t14));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(11,18022,18052)"} true;
    assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30

    // $t15 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume {:print "$at(11,18073,18100)"} true;

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsEqual'address'($t15, $1_Signer_spec_address_of($t0));

    // $t15 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27

    // trace_local[addr]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:13+4
    assume {:print "$track_local(18,9,5):", $t15} $t15 == $t15;

    // $t16 := exists<Diem::BurnCapability<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:16+6
    assume {:print "$at(11,18117,18123)"} true;
    $t16 := $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:84+16
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := opaque begin: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsEqual'u64'($t18, 4);

    // $t18 := opaque end: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(18,9,4):", $t18} $t18 == $t18;

    // trace_local[tmp#$3]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(18,9,3):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
L1:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$at(11,18110,18203)"} true;
    assume {:print "$track_abort(18,9):", $t18} $t18 == $t18;

    // $t14 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    $t14 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:372:13+15
    assume {:print "$at(11,18254,18269)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t15) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:373:13+13
    assume {:print "$at(11,18283,18296)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(11,18283,18296)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // assume Identical($t20, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t20 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t21, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t21 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.cancel_burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t25 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t23));

    // $t26 := Diem::cancel_burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$at(11,18213,18359)"} true;
    call $t26 := $1_Diem_cancel_burn_with_capability'$1_XUS_XUS'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,18213,18359)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // trace_return[0]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$track_return(18,9,0):", $t26} $t26 == $t26;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    assume {:print "$at(11,18364,18365)"} true;
L2:

    // return $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $ret0 := $t26;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
L3:

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+542
procedure {:inline 1} $1_Diem_cancel_burn'$1_XDX_XDX'(_$t0: $signer, _$t1: int, _$t2: int) returns ($ret0: $1_Diem_Diem'$1_XDX_XDX')
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t7: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t8: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t9: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t10: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t11: Vec (int);
    var $t12: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t20: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t21: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t22: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t23: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t26: $1_Diem_Diem'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t6, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+66
    assume {:print "$at(11,18397,18463)"} true;
    assume ($t6 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t8, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t8 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t11, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t11 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t12, select Diem::CurrencyInfo.cancel_burn_events($t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t12 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t10));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$at(11,17823,17824)"} true;
    assume {:print "$track_local(18,9,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(18,9,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(18,9,2):", $t2} $t2 == $t2;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(11,18022,18052)"} true;

    // assume Identical($t13, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume ($t13 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t13) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    if ($t13) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t14)) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t14));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(11,18022,18052)"} true;
    assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30

    // $t15 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume {:print "$at(11,18073,18100)"} true;

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsEqual'address'($t15, $1_Signer_spec_address_of($t0));

    // $t15 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27

    // trace_local[addr]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:13+4
    assume {:print "$track_local(18,9,5):", $t15} $t15 == $t15;

    // $t16 := exists<Diem::BurnCapability<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:16+6
    assume {:print "$at(11,18117,18123)"} true;
    $t16 := $ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:84+16
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := opaque begin: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsEqual'u64'($t18, 4);

    // $t18 := opaque end: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(18,9,4):", $t18} $t18 == $t18;

    // trace_local[tmp#$3]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(18,9,3):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
L1:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$at(11,18110,18203)"} true;
    assume {:print "$track_abort(18,9):", $t18} $t18 == $t18;

    // $t14 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    $t14 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:372:13+15
    assume {:print "$at(11,18254,18269)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t15) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:373:13+13
    assume {:print "$at(11,18283,18296)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(11,18283,18296)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // assume Identical($t20, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t20 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t21, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t21 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.cancel_burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t25 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t23));

    // $t26 := Diem::cancel_burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$at(11,18213,18359)"} true;
    call $t26 := $1_Diem_cancel_burn_with_capability'$1_XDX_XDX'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,18213,18359)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // trace_return[0]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$track_return(18,9,0):", $t26} $t26 == $t26;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    assume {:print "$at(11,18364,18365)"} true;
L2:

    // return $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $ret0 := $t26;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
L3:

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+542
procedure {:inline 1} $1_Diem_cancel_burn'#0'(_$t0: $signer, _$t1: int, _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: Vec (int);
    var $t12: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_BurnCapability'#0';
    var $t20: $1_Diem_CurrencyInfo'#0';
    var $t21: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t22: $1_Diem_CurrencyInfo'#0';
    var $t23: $1_Diem_CurrencyInfo'#0';
    var $t24: Vec (int);
    var $t25: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t26: $1_Diem_Diem'#0';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t6, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+66
    assume {:print "$at(11,18397,18463)"} true;
    assume ($t6 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t8, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t8 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t11 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, select Diem::CurrencyInfo.cancel_burn_events($t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t12 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t10));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$at(11,17823,17824)"} true;
    assume {:print "$track_local(18,9,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(18,9,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:363:5+1
    assume {:print "$track_local(18,9,2):", $t2} $t2 == $t2;

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(11,18022,18052)"} true;

    // assume Identical($t13, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume ($t13 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t13) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    if ($t13) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L5:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t14)) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t14));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    assume {:print "$at(11,18022,18052)"} true;
    assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30
L4:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:368:9+30

    // $t15 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume {:print "$at(11,18073,18100)"} true;

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsValid'address'($t15);

    // assume Eq<address>($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27
    assume $IsEqual'address'($t15, $1_Signer_spec_address_of($t0));

    // $t15 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:20+27

    // trace_local[addr]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:369:13+4
    assume {:print "$track_local(18,9,5):", $t15} $t15 == $t15;

    // $t16 := exists<Diem::BurnCapability<#0>>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:16+6
    assume {:print "$at(11,18117,18123)"} true;
    $t16 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15);

    // $t17 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:84+16
    $t17 := 0;
    assume $IsValid'u64'($t17);

    // $t18 := opaque begin: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsValid'u64'($t18);

    // assume Eq<u64>($t18, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45
    assume $IsEqual'u64'($t18, 4);

    // $t18 := opaque end: Errors::requires_capability($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:56+45

    // trace_local[tmp#$4]($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(18,9,4):", $t18} $t18 == $t18;

    // trace_local[tmp#$3]($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$track_local(18,9,3):", $t16} $t16 == $t16;

    // if ($t16) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    if ($t16) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
L1:

    // trace_abort($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    assume {:print "$at(11,18110,18203)"} true;
    assume {:print "$track_abort(18,9):", $t18} $t18 == $t18;

    // $t14 := move($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    $t14 := $t18;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:370:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:372:13+15
    assume {:print "$at(11,18254,18269)"} true;
L0:

    // $t19 := get_global<Diem::BurnCapability<#0>>($t15) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:373:13+13
    assume {:print "$at(11,18283,18296)"} true;
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(11,18283,18296)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // assume Identical($t20, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t20 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t21, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t21 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t22, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t22 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t23, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t23 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t24, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t24 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t25, select Diem::CurrencyInfo.cancel_burn_events($t23)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t25 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t23));

    // $t26 := Diem::cancel_burn_with_capability<#0>($t1, $t19, $t2) on_abort goto L3 with $t14 at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$at(11,18213,18359)"} true;
    call $t26 := $1_Diem_cancel_burn_with_capability'#0'($t1, $t19, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,18213,18359)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(18,9):", $t14} $t14 == $t14;
        goto L3;
    }

    // trace_return[0]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:371:9+146
    assume {:print "$track_return(18,9,0):", $t26} $t26 == $t26;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    assume {:print "$at(11,18364,18365)"} true;
L2:

    // return $t26 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $ret0 := $t26;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
L3:

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:376:5+1
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1169
procedure {:inline 1} $1_Diem_cancel_burn_with_capability'$1_XUS_XUS'(_$t0: int, _$t1: $1_Diem_BurnCapability'$1_XUS_XUS', _$t2: int) returns ($ret0: $1_Diem_Diem'$1_XUS_XUS')
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t7: $1_Diem_Diem'$1_XUS_XUS';
    var $t8: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t10: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t11: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t15: $1_Diem_PreburnWithMetadata'$1_XUS_XUS';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'$1_XUS_XUS';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'$1_XUS_XUS';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t2: int;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'': $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#156: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // bytecode translation starts here
    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t11));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$at(11,47972,47973)"} true;
    assume {:print "$track_local(18,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$track_local(18,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$track_local(18,10,2):", $t2} $t2 == $t2;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0)));

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume {:print "$at(11,48313,48373)"} true;

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0) && $IsEqual'num'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t14, i)))), $t2))))) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume {:print "$at(11,48313,48373)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
L8:

    // @156 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#156 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''($t15);

    // assume Implies(exists[@156]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#156, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:43+19
    $t20 := $to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:53+7
    assume {:print "$track_local(18,10,7):", $t20} $t20 == $t20;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume {:print "$at(11,48437,48462)"} true;

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume {:print "$at(11,48437,48462)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:13+13
    assume {:print "$track_local(18,10,5):", $t21} $t21 == $t21;

    // $t23 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:62+13
    assume {:print "$at(11,48525,48538)"} true;
    $t23 := 173345816;
    assume $IsValid'address'($t23);

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,48483,48500)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:13+4
    $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' := $Dereference($t24);
    assume {:print "$track_local(18,10,6):", $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS''} $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' == $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:16+18
    assume {:print "$at(11,48556,48574)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32

    // trace_local[tmp#$4]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$track_local(18,10,4):", $t28} $t28 == $t28;

    // trace_local[tmp#$3]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$track_local(18,10,3):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
L1:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$at(11,48549,48619)"} true;
    assume {:print "$track_abort(18,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:30+4
    assume {:print "$at(11,48650,48654)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,48669,48670)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:14+17
    assume {:print "$at(11,48843,48860)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1011:22+4
    assume {:print "$at(11,48916,48920)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1011:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:17+135
    assume {:print "$at(11,48957,49092)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230
    assume {:print "$at(11,48876,49106)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(11,48876,49106)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1017:14+1
    assume {:print "$at(11,49106,49107)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    assume {:print "$at(11,48838,49117)"} true;
L4:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1020:9+7
    assume {:print "$at(11,49128,49135)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1020:9+7
    assume {:print "$track_return(18,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    assume {:print "$at(11,49140,49141)"} true;
L6:

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1169
procedure {:inline 1} $1_Diem_cancel_burn_with_capability'$1_XDX_XDX'(_$t0: int, _$t1: $1_Diem_BurnCapability'$1_XDX_XDX', _$t2: int) returns ($ret0: $1_Diem_Diem'$1_XDX_XDX')
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t7: $1_Diem_Diem'$1_XDX_XDX';
    var $t8: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t10: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t11: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t15: $1_Diem_PreburnWithMetadata'$1_XDX_XDX';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'$1_XDX_XDX';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'$1_XDX_XDX';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t2: int;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'': $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#156: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // bytecode translation starts here
    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t11));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$at(11,47972,47973)"} true;
    assume {:print "$track_local(18,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$track_local(18,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$track_local(18,10,2):", $t2} $t2 == $t2;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0)));

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume {:print "$at(11,48313,48373)"} true;

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0) && $IsEqual'num'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t14, i)))), $t2))))) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume {:print "$at(11,48313,48373)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
L8:

    // @156 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#156 := $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'';
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'');
    } else {
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''($t15);

    // assume Implies(exists[@156]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#156, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:43+19
    $t20 := $to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:53+7
    assume {:print "$track_local(18,10,7):", $t20} $t20 == $t20;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume {:print "$at(11,48437,48462)"} true;

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume {:print "$at(11,48437,48462)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:13+13
    assume {:print "$track_local(18,10,5):", $t21} $t21 == $t21;

    // $t23 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:62+13
    assume {:print "$at(11,48525,48538)"} true;
    $t23 := 173345816;
    assume $IsValid'address'($t23);

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,48483,48500)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:13+4
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t24);
    assume {:print "$track_local(18,10,6):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:16+18
    assume {:print "$at(11,48556,48574)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32

    // trace_local[tmp#$4]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$track_local(18,10,4):", $t28} $t28 == $t28;

    // trace_local[tmp#$3]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$track_local(18,10,3):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
L1:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$at(11,48549,48619)"} true;
    assume {:print "$track_abort(18,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:30+4
    assume {:print "$at(11,48650,48654)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,48669,48670)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:14+17
    assume {:print "$at(11,48843,48860)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1011:22+4
    assume {:print "$at(11,48916,48920)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1011:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:17+135
    assume {:print "$at(11,48957,49092)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230
    assume {:print "$at(11,48876,49106)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(11,48876,49106)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1017:14+1
    assume {:print "$at(11,49106,49107)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    assume {:print "$at(11,48838,49117)"} true;
L4:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1020:9+7
    assume {:print "$at(11,49128,49135)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1020:9+7
    assume {:print "$track_return(18,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    assume {:print "$at(11,49140,49141)"} true;
L6:

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::cancel_burn_with_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1169
procedure {:inline 1} $1_Diem_cancel_burn_with_capability'#0'(_$t0: int, _$t1: $1_Diem_BurnCapability'#0', _$t2: int) returns ($ret0: $1_Diem_Diem'#0')
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: Vec (int);
    var $t6: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t7: $1_Diem_Diem'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_PreburnWithMetadata'#0';
    var $t16: bool;
    var $t17: int;
    var $t18: $1_Diem_Preburn'#0';
    var $t19: Vec (int);
    var $t20: $1_Diem_Diem'#0';
    var $t21: Vec (int);
    var $t22: bool;
    var $t23: int;
    var $t24: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t32: bool;
    var $t33: bool;
    var $t34: $Mutation ($1_Event_EventHandle'$1_Diem_CancelBurnEvent');
    var $t35: $1_Diem_CancelBurnEvent;
    var $t0: int;
    var $t1: $1_Diem_BurnCapability'#0';
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_Diem_PreburnQueue'#0'_$memory#156: $Memory $1_Diem_PreburnQueue'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));

    // bytecode translation starts here
    // assume Identical($t8, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t8 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t9, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t9 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // assume Identical($t10, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t10 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.cancel_burn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t13 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // trace_local[preburn_address]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$at(11,47972,47973)"} true;
    assume {:print "$track_local(18,10,0):", $t0} $t0 == $t0;

    // trace_local[_capability]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$track_local(18,10,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:993:5+1
    assume {:print "$track_local(18,10,2):", $t2} $t2 == $t2;

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t0)));

    // $t15 := opaque begin: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume {:print "$at(11,48313,48373)"} true;

    // assume Identical($t16, Or(Not(exists<Diem::PreburnQueue<#0>>($t0)), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ($t16 == (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) || (var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2)))))));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
L9:

    // assume Or(And(Not(exists<Diem::PreburnQueue<#0>>($t0)), Eq(5, $t17)), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t14)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t14, i)))), $t2), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ((!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0) && $IsEqual'num'(5, $t17)) || ((var $range_0 := $Range(0, LenVec($t14)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t14, i)))), $t2))))) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume {:print "$at(11,48313,48373)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
L8:

    // @156 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    $1_Diem_PreburnQueue'#0'_$memory#156 := $1_Diem_PreburnQueue'#0'_$memory;

    // modifies global<Diem::PreburnQueue<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t0, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t0);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume $IsValid'$1_Diem_PreburnWithMetadata'#0''($t15);

    // assume Implies(exists[@156]<Diem::PreburnQueue<#0>>($t0), exists<Diem::PreburnQueue<#0>>($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#156, $t0) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t0));

    // assume Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn($t15))), $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($t15))), $t2);

    // $t15 := opaque end: Diem::remove_preburn_from_queue<#0>($t0, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:80+60

    // ($t18, $t19) := unpack Diem::PreburnWithMetadata<#0>($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:13+64
    $t18 := $preburn#$1_Diem_PreburnWithMetadata'#0'($t15);
    $t19 := $metadata#$1_Diem_PreburnWithMetadata'#0'($t15);

    // destroy($t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:74+1

    // $t20 := unpack Diem::Preburn<#0>($t18) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:43+19
    $t20 := $to_burn#$1_Diem_Preburn'#0'($t18);

    // trace_local[to_burn]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1000:53+7
    assume {:print "$track_local(18,10,7):", $t20} $t20 == $t20;

    // $t21 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume {:print "$at(11,48437,48462)"} true;

    // assume Identical($t22, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume ($t22 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t22) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    if ($t22) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
L11:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t17));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume {:print "$at(11,48437,48462)"} true;
    assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
L10:

    // assume WellFormed($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume $IsValid'vec'u8''($t21);

    // assume Eq<vector<u8>>($t21, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25
    assume $IsEqual'vec'u8''($t21, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t21 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:29+25

    // trace_local[currency_code]($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:1003:13+13
    assume {:print "$track_local(18,10,5):", $t21} $t21 == $t21;

    // $t23 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:62+13
    assume {:print "$at(11,48525,48538)"} true;
    $t23 := 173345816;
    assume $IsValid'address'($t23);

    // $t24 := borrow_global<Diem::CurrencyInfo<#0>>($t23) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t23)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t23), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t23));
    }
    if ($abort_flag) {
        assume {:print "$at(11,48483,48500)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[info]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1004:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t24);
    assume {:print "$track_local(18,10,6):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t25 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:16+18
    assume {:print "$at(11,48556,48574)"} true;
    $t25 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t26 := >=($t25, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:35+2
    call $t26 := $Ge($t25, $t2);

    // $t27 := 2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:69+8
    $t27 := 2;
    assume $IsValid'u64'($t27);

    // $t28 := opaque begin: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32

    // assume WellFormed($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32
    assume $IsValid'u64'($t28);

    // assume Eq<u64>($t28, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32
    assume $IsEqual'u64'($t28, 8);

    // $t28 := opaque end: Errors::limit_exceeded($t27) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:46+32

    // trace_local[tmp#$4]($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$track_local(18,10,4):", $t28} $t28 == $t28;

    // trace_local[tmp#$3]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$track_local(18,10,3):", $t26} $t26 == $t26;

    // if ($t26) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    if ($t26) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
L1:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70

    // trace_abort($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    assume {:print "$at(11,48549,48619)"} true;
    assume {:print "$track_abort(18,10):", $t28} $t28 == $t28;

    // $t17 := move($t28) at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    $t17 := $t28;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1005:9+70
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:30+4
    assume {:print "$at(11,48650,48654)"} true;
L0:

    // $t29 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:30+18
    $t29 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t30 := -($t29, $t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:49+1
    call $t30 := $Sub($t29, $t2);
    if ($abort_flag) {
        assume {:print "$at(11,48669,48670)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t31 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+18
    $t31 := $ChildMutation($t24, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // write_ref($t31, $t30) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+48
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t24).preburn_value]($t31) at /home/ying/diem/language/diem-framework/modules/Diem.move:1006:9+48
    $t24 := $UpdateMutation($t24, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t24), $Dereference($t31)));

    // $t32 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:14+17
    assume {:print "$at(11,48843,48860)"} true;
    $t32 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t24));

    // $t33 := !($t32) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:13+1
    call $t33 := $Not($t32);

    // if ($t33) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    if ($t33) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1011:22+4
    assume {:print "$at(11,48916,48920)"} true;
L2:

    // $t34 := borrow_field<Diem::CurrencyInfo<#0>>.cancel_burn_events($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1011:17+28
    $t34 := $ChildMutation($t24, 11, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t24)));

    // $t35 := pack Diem::CancelBurnEvent($t2, $t21, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1012:17+135
    assume {:print "$at(11,48957,49092)"} true;
    $t35 := $1_Diem_CancelBurnEvent($t2, $t21, $t0);

    // Event::emit_event<Diem::CancelBurnEvent>($t34, $t35) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230
    assume {:print "$at(11,48876,49106)"} true;
    call $t34 := $1_Event_emit_event'$1_Diem_CancelBurnEvent'($t34, $t35);
    if ($abort_flag) {
        assume {:print "$at(11,48876,49106)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(18,10):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1010:13+230
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1017:14+1
    assume {:print "$at(11,49106,49107)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    assume {:print "$at(11,48838,49117)"} true;
L4:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279

    // write_back[Diem::CurrencyInfo<#0>@]($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/Diem.move:1009:9+279

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1020:9+7
    assume {:print "$at(11,49128,49135)"} true;
L5:

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:1020:9+7
    assume {:print "$track_return(18,10,0):", $t20} $t20 == $t20;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    assume {:print "$at(11,49140,49141)"} true;
L6:

    // return $t20 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    $ret0 := $t20;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/Diem.move:1021:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun Diem::preburn_with_resource<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1213
procedure {:inline 1} $1_Diem_preburn_with_resource'$1_XUS_XUS'(_$t0: $1_Diem_Diem'$1_XUS_XUS', _$t1: $Mutation ($1_Diem_Preburn'$1_XUS_XUS'), _$t2: int) returns ($ret0: $Mutation ($1_Diem_Preburn'$1_XUS_XUS'))
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t10: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t11: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t14: $1_Diem_PreburnEvent;
    var $t15: int;
    var $t16: int;
    var $t17: $1_Diem_Diem'$1_XUS_XUS';
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($1_Diem_Diem'$1_XUS_XUS');
    var $t24: $1_Diem_Diem'$1_XUS_XUS';
    var $t25: bool;
    var $t26: Vec (int);
    var $t27: bool;
    var $t28: int;
    var $t29: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: $Mutation (int);
    var $t39: bool;
    var $t40: bool;
    var $t41: $Mutation ($1_Event_EventHandle'$1_Diem_PreburnEvent');
    var $t42: $1_Diem_PreburnEvent;
    var $t0: $1_Diem_Diem'$1_XUS_XUS';
    var $t1: $Mutation ($1_Diem_Preburn'$1_XUS_XUS');
    var $t2: int;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'': $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t23));
    assume IsEmptyVec(p#$Mutation($t29));
    assume IsEmptyVec(p#$Mutation($t38));
    assume IsEmptyVec(p#$Mutation($t41));

    // bytecode translation starts here
    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.preburn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t13 == $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t11));

    // assume Identical($t14, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t12, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t14 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XUS_XUS'($t0), $t12, $t2));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$at(11,22873,22874)"} true;
    assume {:print "$track_local(18,26,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'$1_XUS_XUS''} $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' == $temp_0'$1_Diem_Preburn'$1_XUS_XUS'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$track_local(18,26,2):", $t2} $t2 == $t2;

    // $t15 := Diem::value<#0>($t0) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:26+12
    assume {:print "$at(11,23070,23082)"} true;
    call $t15 := $1_Diem_value'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,23070,23082)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[coin_value]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:13+10
    assume {:print "$track_local(18,26,7):", $t15} $t15 == $t15;

    // $t17 := get_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:22+16
    assume {:print "$at(11,23142,23158)"} true;
    $t17 := $to_burn#$1_Diem_Preburn'$1_XUS_XUS'($Dereference($t1));

    // $t18 := Diem::value<#0>($t17) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:16+23
    call $t18 := $1_Diem_value'$1_XUS_XUS'($t17);
    if ($abort_flag) {
        assume {:print "$at(11,23136,23159)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:43+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := ==($t18, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:40+2
    $t20 := $IsEqual'u64'($t18, $t19);

    // $t21 := 3 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:68+17
    $t21 := 3;
    assume $IsValid'u64'($t21);

    // $t22 := opaque begin: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsEqual'u64'($t22, 1);

    // $t22 := opaque end: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // trace_local[tmp#$4]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(18,26,4):", $t22} $t22 == $t22;

    // trace_local[tmp#$3]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(18,26,3):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$at(11,23129,23207)"} true;
    assume {:print "$track_abort(18,26):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    $t16 := $t22;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    goto L10;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:22+7
    assume {:print "$at(11,23230,23237)"} true;
L0:

    // $t23 := borrow_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:17+20
    $t23 := $ChildMutation($t1, 0, $to_burn#$1_Diem_Preburn'$1_XUS_XUS'($Dereference($t1)));

    // opaque begin: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // $t24 := read_ref($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t24 := $Dereference($t23);

    // assume Identical($t25, Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ($t25 == (($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t23)) + $value#$1_Diem_Diem'$1_XUS_XUS'($t0)) > 18446744073709551615));

    // if ($t25) goto L15 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    if ($t25) { goto L15; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L12:

    // assume And(Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ((($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t23)) + $value#$1_Diem_Diem'$1_XUS_XUS'($t0)) > 18446744073709551615) && $IsEqual'num'(8, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume {:print "$at(11,23217,23252)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    goto L10;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L11:

    // havoc[mut]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    havoc $temp_0'$1_Diem_Diem'$1_XUS_XUS'';
    $t23 := $UpdateMutation($t23, $temp_0'$1_Diem_Diem'$1_XUS_XUS'');
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t23));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t23));

    // assume Eq<u64>(select Diem::Diem.value($t23), Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t23)), ($value#$1_Diem_Diem'$1_XUS_XUS'($t24) + $value#$1_Diem_Diem'$1_XUS_XUS'($t0)));

    // opaque end: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // write_back[Reference($t1).to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t1 := $UpdateMutation($t1, $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn($Dereference($t1), $Dereference($t23)));

    // $t26 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(11,23282,23307)"} true;

    // assume Identical($t27, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume ($t27 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t27) goto L16 else goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    if ($t27) { goto L16; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L14:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(11,23282,23307)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    goto L10;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L13:

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsValid'vec'u8''($t26);

    // assume Eq<vector<u8>>($t26, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsEqual'vec'u8''($t26, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // $t26 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25

    // trace_local[currency_code]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:13+13
    assume {:print "$track_local(18,26,8):", $t26} $t26 == $t26;

    // $t28 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:62+13
    assume {:print "$at(11,23370,23383)"} true;
    $t28 := 173345816;
    assume $IsValid'address'($t28);

    // $t29 := borrow_global<Diem::CurrencyInfo<#0>>($t28) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t28)) {
        call $ExecFailureAbort();
    } else {
        $t29 := $Mutation($Global($t28), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t28));
    }
    if ($abort_flag) {
        assume {:print "$at(11,23328,23345)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[info]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:13+4
    $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' := $Dereference($t29);
    assume {:print "$track_local(18,26,9):", $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS''} $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' == $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'';

    // $t30 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:16+7
    assume {:print "$at(11,23401,23408)"} true;
    $t30 := 18446744073709551615;
    assume $IsValid'u64'($t30);

    // $t31 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:26+18
    $t31 := $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t29));

    // $t32 := -($t30, $t31) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:24+1
    call $t32 := $Sub($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(11,23409,23410)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t33 := >=($t32, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:45+2
    call $t33 := $Ge($t32, $t15);

    // $t34 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:83+5
    $t34 := 7;
    assume $IsValid'u64'($t34);

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // trace_local[tmp#$6]($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(18,26,6):", $t35} $t35 == $t35;

    // trace_local[tmp#$5]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(18,26,5):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    if ($t33) { goto L2; } else { goto L8; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
L3:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$at(11,23394,23475)"} true;
    assume {:print "$track_abort(18,26):", $t35} $t35 == $t35;

    // $t16 := move($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    $t16 := $t35;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+4
    assume {:print "$at(11,23506,23510)"} true;
L2:

    // $t36 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+18
    $t36 := $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t29));

    // $t37 := +($t36, $t15) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:49+1
    call $t37 := $AddU64($t36, $t15);
    if ($abort_flag) {
        assume {:print "$at(11,23525,23526)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t38 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+18
    $t38 := $ChildMutation($t29, 1, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t29)));

    // write_ref($t38, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t38 := $UpdateMutation($t38, $t37);

    // write_back[Reference($t29).preburn_value]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t29 := $UpdateMutation($t29, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value($Dereference($t29), $Dereference($t38)));

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:14+17
    assume {:print "$at(11,23801,23818)"} true;
    $t39 := $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t29));

    // $t40 := !($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:13+1
    call $t40 := $Not($t39);

    // if ($t40) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    if ($t40) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:495:22+4
    assume {:print "$at(11,23874,23878)"} true;
L4:

    // $t41 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_events($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:495:17+24
    $t41 := $ChildMutation($t29, 10, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t29)));

    // $t42 := pack Diem::PreburnEvent($t15, $t26, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:496:17+143
    assume {:print "$at(11,23911,24054)"} true;
    $t42 := $1_Diem_PreburnEvent($t15, $t26, $t2);

    // Event::emit_event<Diem::PreburnEvent>($t41, $t42) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    assume {:print "$at(11,23834,24068)"} true;
    call $t41 := $1_Event_emit_event'$1_Diem_PreburnEvent'($t41, $t42);
    if ($abort_flag) {
        assume {:print "$at(11,23834,24068)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:14+1
    assume {:print "$at(11,24068,24069)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    assume {:print "$at(11,23796,24079)"} true;
L6:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    assume {:print "$at(11,24079,24080)"} true;
L7:

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'$1_XUS_XUS''} $temp_0'$1_Diem_Preburn'$1_XUS_XUS'' == $temp_0'$1_Diem_Preburn'$1_XUS_XUS'';

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    goto L9;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t1) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    assume {:print "$at(11,24085,24086)"} true;
L9:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $ret0 := $t1;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
L10:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t1) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L16 at <internal>:1:1+10
L16:

    // destroy($t1) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

}

// fun Diem::preburn_with_resource<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1213
procedure {:inline 1} $1_Diem_preburn_with_resource'$1_XDX_XDX'(_$t0: $1_Diem_Diem'$1_XDX_XDX', _$t1: $Mutation ($1_Diem_Preburn'$1_XDX_XDX'), _$t2: int) returns ($ret0: $Mutation ($1_Diem_Preburn'$1_XDX_XDX'))
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t10: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t11: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t14: $1_Diem_PreburnEvent;
    var $t15: int;
    var $t16: int;
    var $t17: $1_Diem_Diem'$1_XDX_XDX';
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($1_Diem_Diem'$1_XDX_XDX');
    var $t24: $1_Diem_Diem'$1_XDX_XDX';
    var $t25: bool;
    var $t26: Vec (int);
    var $t27: bool;
    var $t28: int;
    var $t29: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: $Mutation (int);
    var $t39: bool;
    var $t40: bool;
    var $t41: $Mutation ($1_Event_EventHandle'$1_Diem_PreburnEvent');
    var $t42: $1_Diem_PreburnEvent;
    var $t0: $1_Diem_Diem'$1_XDX_XDX';
    var $t1: $Mutation ($1_Diem_Preburn'$1_XDX_XDX');
    var $t2: int;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t23));
    assume IsEmptyVec(p#$Mutation($t29));
    assume IsEmptyVec(p#$Mutation($t38));
    assume IsEmptyVec(p#$Mutation($t41));

    // bytecode translation starts here
    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.preburn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t13 == $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t11));

    // assume Identical($t14, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t12, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t14 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XDX_XDX'($t0), $t12, $t2));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$at(11,22873,22874)"} true;
    assume {:print "$track_local(18,26,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'$1_XDX_XDX''} $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' == $temp_0'$1_Diem_Preburn'$1_XDX_XDX'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$track_local(18,26,2):", $t2} $t2 == $t2;

    // $t15 := Diem::value<#0>($t0) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:26+12
    assume {:print "$at(11,23070,23082)"} true;
    call $t15 := $1_Diem_value'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,23070,23082)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[coin_value]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:13+10
    assume {:print "$track_local(18,26,7):", $t15} $t15 == $t15;

    // $t17 := get_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:22+16
    assume {:print "$at(11,23142,23158)"} true;
    $t17 := $to_burn#$1_Diem_Preburn'$1_XDX_XDX'($Dereference($t1));

    // $t18 := Diem::value<#0>($t17) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:16+23
    call $t18 := $1_Diem_value'$1_XDX_XDX'($t17);
    if ($abort_flag) {
        assume {:print "$at(11,23136,23159)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:43+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := ==($t18, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:40+2
    $t20 := $IsEqual'u64'($t18, $t19);

    // $t21 := 3 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:68+17
    $t21 := 3;
    assume $IsValid'u64'($t21);

    // $t22 := opaque begin: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsEqual'u64'($t22, 1);

    // $t22 := opaque end: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // trace_local[tmp#$4]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(18,26,4):", $t22} $t22 == $t22;

    // trace_local[tmp#$3]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(18,26,3):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$at(11,23129,23207)"} true;
    assume {:print "$track_abort(18,26):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    $t16 := $t22;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    goto L10;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:22+7
    assume {:print "$at(11,23230,23237)"} true;
L0:

    // $t23 := borrow_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:17+20
    $t23 := $ChildMutation($t1, 0, $to_burn#$1_Diem_Preburn'$1_XDX_XDX'($Dereference($t1)));

    // opaque begin: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // $t24 := read_ref($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t24 := $Dereference($t23);

    // assume Identical($t25, Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ($t25 == (($value#$1_Diem_Diem'$1_XDX_XDX'($Dereference($t23)) + $value#$1_Diem_Diem'$1_XDX_XDX'($t0)) > 18446744073709551615));

    // if ($t25) goto L15 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    if ($t25) { goto L15; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L12:

    // assume And(Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ((($value#$1_Diem_Diem'$1_XDX_XDX'($Dereference($t23)) + $value#$1_Diem_Diem'$1_XDX_XDX'($t0)) > 18446744073709551615) && $IsEqual'num'(8, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume {:print "$at(11,23217,23252)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    goto L10;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L11:

    // havoc[mut]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    havoc $temp_0'$1_Diem_Diem'$1_XDX_XDX'';
    $t23 := $UpdateMutation($t23, $temp_0'$1_Diem_Diem'$1_XDX_XDX'');
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($Dereference($t23));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($Dereference($t23));

    // assume Eq<u64>(select Diem::Diem.value($t23), Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($Dereference($t23)), ($value#$1_Diem_Diem'$1_XDX_XDX'($t24) + $value#$1_Diem_Diem'$1_XDX_XDX'($t0)));

    // opaque end: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // write_back[Reference($t1).to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t1 := $UpdateMutation($t1, $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn($Dereference($t1), $Dereference($t23)));

    // $t26 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(11,23282,23307)"} true;

    // assume Identical($t27, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume ($t27 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t27) goto L16 else goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    if ($t27) { goto L16; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L14:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(11,23282,23307)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    goto L10;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L13:

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsValid'vec'u8''($t26);

    // assume Eq<vector<u8>>($t26, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsEqual'vec'u8''($t26, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // $t26 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25

    // trace_local[currency_code]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:13+13
    assume {:print "$track_local(18,26,8):", $t26} $t26 == $t26;

    // $t28 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:62+13
    assume {:print "$at(11,23370,23383)"} true;
    $t28 := 173345816;
    assume $IsValid'address'($t28);

    // $t29 := borrow_global<Diem::CurrencyInfo<#0>>($t28) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t28)) {
        call $ExecFailureAbort();
    } else {
        $t29 := $Mutation($Global($t28), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t28));
    }
    if ($abort_flag) {
        assume {:print "$at(11,23328,23345)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[info]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:13+4
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t29);
    assume {:print "$track_local(18,26,9):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t30 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:16+7
    assume {:print "$at(11,23401,23408)"} true;
    $t30 := 18446744073709551615;
    assume $IsValid'u64'($t30);

    // $t31 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:26+18
    $t31 := $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t29));

    // $t32 := -($t30, $t31) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:24+1
    call $t32 := $Sub($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(11,23409,23410)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t33 := >=($t32, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:45+2
    call $t33 := $Ge($t32, $t15);

    // $t34 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:83+5
    $t34 := 7;
    assume $IsValid'u64'($t34);

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // trace_local[tmp#$6]($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(18,26,6):", $t35} $t35 == $t35;

    // trace_local[tmp#$5]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(18,26,5):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    if ($t33) { goto L2; } else { goto L8; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
L3:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$at(11,23394,23475)"} true;
    assume {:print "$track_abort(18,26):", $t35} $t35 == $t35;

    // $t16 := move($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    $t16 := $t35;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+4
    assume {:print "$at(11,23506,23510)"} true;
L2:

    // $t36 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+18
    $t36 := $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t29));

    // $t37 := +($t36, $t15) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:49+1
    call $t37 := $AddU64($t36, $t15);
    if ($abort_flag) {
        assume {:print "$at(11,23525,23526)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t38 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+18
    $t38 := $ChildMutation($t29, 1, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t29)));

    // write_ref($t38, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t38 := $UpdateMutation($t38, $t37);

    // write_back[Reference($t29).preburn_value]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t29 := $UpdateMutation($t29, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value($Dereference($t29), $Dereference($t38)));

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:14+17
    assume {:print "$at(11,23801,23818)"} true;
    $t39 := $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t29));

    // $t40 := !($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:13+1
    call $t40 := $Not($t39);

    // if ($t40) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    if ($t40) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:495:22+4
    assume {:print "$at(11,23874,23878)"} true;
L4:

    // $t41 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_events($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:495:17+24
    $t41 := $ChildMutation($t29, 10, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t29)));

    // $t42 := pack Diem::PreburnEvent($t15, $t26, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:496:17+143
    assume {:print "$at(11,23911,24054)"} true;
    $t42 := $1_Diem_PreburnEvent($t15, $t26, $t2);

    // Event::emit_event<Diem::PreburnEvent>($t41, $t42) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    assume {:print "$at(11,23834,24068)"} true;
    call $t41 := $1_Event_emit_event'$1_Diem_PreburnEvent'($t41, $t42);
    if ($abort_flag) {
        assume {:print "$at(11,23834,24068)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:14+1
    assume {:print "$at(11,24068,24069)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    assume {:print "$at(11,23796,24079)"} true;
L6:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    assume {:print "$at(11,24079,24080)"} true;
L7:

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'$1_XDX_XDX''} $temp_0'$1_Diem_Preburn'$1_XDX_XDX'' == $temp_0'$1_Diem_Preburn'$1_XDX_XDX'';

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    goto L9;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t1) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    assume {:print "$at(11,24085,24086)"} true;
L9:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $ret0 := $t1;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
L10:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t1) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L16 at <internal>:1:1+10
L16:

    // destroy($t1) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

}

// fun Diem::preburn_with_resource<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1213
procedure {:inline 1} $1_Diem_preburn_with_resource'#0'(_$t0: $1_Diem_Diem'#0', _$t1: $Mutation ($1_Diem_Preburn'#0'), _$t2: int) returns ($ret0: $Mutation ($1_Diem_Preburn'#0'))
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: Vec (int);
    var $t9: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t10: $1_Diem_CurrencyInfo'#0';
    var $t11: $1_Diem_CurrencyInfo'#0';
    var $t12: Vec (int);
    var $t13: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t14: $1_Diem_PreburnEvent;
    var $t15: int;
    var $t16: int;
    var $t17: $1_Diem_Diem'#0';
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: $Mutation ($1_Diem_Diem'#0');
    var $t24: $1_Diem_Diem'#0';
    var $t25: bool;
    var $t26: Vec (int);
    var $t27: bool;
    var $t28: int;
    var $t29: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: $Mutation (int);
    var $t39: bool;
    var $t40: bool;
    var $t41: $Mutation ($1_Event_EventHandle'$1_Diem_PreburnEvent');
    var $t42: $1_Diem_PreburnEvent;
    var $t0: $1_Diem_Diem'#0';
    var $t1: $Mutation ($1_Diem_Preburn'#0');
    var $t2: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t23));
    assume IsEmptyVec(p#$Mutation($t29));
    assume IsEmptyVec(p#$Mutation($t38));
    assume IsEmptyVec(p#$Mutation($t41));

    // bytecode translation starts here
    // assume Identical($t10, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t10 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t11 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t12, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t12 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t13, select Diem::CurrencyInfo.preburn_events($t11)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t13 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t11));

    // assume Identical($t14, pack Diem::PreburnEvent(select Diem::Diem.value($t0), $t12, $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t14 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t0), $t12, $t2));

    // trace_local[coin]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$at(11,22873,22874)"} true;
    assume {:print "$track_local(18,26,0):", $t0} $t0 == $t0;

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:476:5+1
    assume {:print "$track_local(18,26,2):", $t2} $t2 == $t2;

    // $t15 := Diem::value<#0>($t0) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:481:26+12
    assume {:print "$at(11,23070,23082)"} true;
    call $t15 := $1_Diem_value'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(11,23070,23082)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[coin_value]($t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:481:13+10
    assume {:print "$track_local(18,26,7):", $t15} $t15 == $t15;

    // $t17 := get_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:22+16
    assume {:print "$at(11,23142,23158)"} true;
    $t17 := $to_burn#$1_Diem_Preburn'#0'($Dereference($t1));

    // $t18 := Diem::value<#0>($t17) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:16+23
    call $t18 := $1_Diem_value'#0'($t17);
    if ($abort_flag) {
        assume {:print "$at(11,23136,23159)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:43+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := ==($t18, $t19) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:40+2
    $t20 := $IsEqual'u64'($t18, $t19);

    // $t21 := 3 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:68+17
    $t21 := 3;
    assume $IsValid'u64'($t21);

    // $t22 := opaque begin: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsValid'u64'($t22);

    // assume Eq<u64>($t22, 1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40
    assume $IsEqual'u64'($t22, 1);

    // $t22 := opaque end: Errors::invalid_state($t21) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:46+40

    // trace_local[tmp#$4]($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(18,26,4):", $t22} $t22 == $t22;

    // trace_local[tmp#$3]($t20) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$track_local(18,26,3):", $t20} $t20 == $t20;

    // if ($t20) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    if ($t20) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78

    // trace_abort($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    assume {:print "$at(11,23129,23207)"} true;
    assume {:print "$track_abort(18,26):", $t22} $t22 == $t22;

    // $t16 := move($t22) at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    $t16 := $t22;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:483:9+78
    goto L10;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:22+7
    assume {:print "$at(11,23230,23237)"} true;
L0:

    // $t23 := borrow_field<Diem::Preburn<#0>>.to_burn($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:17+20
    $t23 := $ChildMutation($t1, 0, $to_burn#$1_Diem_Preburn'#0'($Dereference($t1)));

    // opaque begin: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // $t24 := read_ref($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t24 := $Dereference($t23);

    // assume Identical($t25, Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ($t25 == (($value#$1_Diem_Diem'#0'($Dereference($t23)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615));

    // if ($t25) goto L15 else goto L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    if ($t25) { goto L15; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L12:

    // assume And(Gt(Add(select Diem::Diem.value($t23), select Diem::Diem.value($t0)), 18446744073709551615), Eq(8, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume ((($value#$1_Diem_Diem'#0'($Dereference($t23)) + $value#$1_Diem_Diem'#0'($t0)) > 18446744073709551615) && $IsEqual'num'(8, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume {:print "$at(11,23217,23252)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    goto L10;

    // label L11 at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
L11:

    // havoc[mut]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t23 := $UpdateMutation($t23, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t23));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t23));

    // assume Eq<u64>(select Diem::Diem.value($t23), Add(select Diem::Diem.value($t24), select Diem::Diem.value($t0))) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t23)), ($value#$1_Diem_Diem'#0'($t24) + $value#$1_Diem_Diem'#0'($t0)));

    // opaque end: Diem::deposit<#0>($t23, $t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35

    // write_back[Reference($t1).to_burn]($t23) at /home/ying/diem/language/diem-framework/modules/Diem.move:484:9+35
    $t1 := $UpdateMutation($t1, $Update'$1_Diem_Preburn'#0''_to_burn($Dereference($t1), $Dereference($t23)));

    // $t26 := opaque begin: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(11,23282,23307)"} true;

    // assume Identical($t27, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume ($t27 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t27) goto L16 else goto L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    if ($t27) { goto L16; } else { goto L13; }

    // label L14 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L14:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t16));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume {:print "$at(11,23282,23307)"} true;
    assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    goto L10;

    // label L13 at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
L13:

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsValid'vec'u8''($t26);

    // assume Eq<vector<u8>>($t26, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25
    assume $IsEqual'vec'u8''($t26, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // $t26 := opaque end: Diem::currency_code<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:485:29+25

    // trace_local[currency_code]($t26) at /home/ying/diem/language/diem-framework/modules/Diem.move:485:13+13
    assume {:print "$track_local(18,26,8):", $t26} $t26 == $t26;

    // $t28 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:62+13
    assume {:print "$at(11,23370,23383)"} true;
    $t28 := 173345816;
    assume $IsValid'address'($t28);

    // $t29 := borrow_global<Diem::CurrencyInfo<#0>>($t28) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:486:20+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t28)) {
        call $ExecFailureAbort();
    } else {
        $t29 := $Mutation($Global($t28), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t28));
    }
    if ($abort_flag) {
        assume {:print "$at(11,23328,23345)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // trace_local[info]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:486:13+4
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t29);
    assume {:print "$track_local(18,26,9):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t30 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:16+7
    assume {:print "$at(11,23401,23408)"} true;
    $t30 := 18446744073709551615;
    assume $IsValid'u64'($t30);

    // $t31 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:26+18
    $t31 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t32 := -($t30, $t31) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:24+1
    call $t32 := $Sub($t30, $t31);
    if ($abort_flag) {
        assume {:print "$at(11,23409,23410)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t33 := >=($t32, $t15) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:45+2
    call $t33 := $Ge($t32, $t15);

    // $t34 := 7 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:83+5
    $t34 := 7;
    assume $IsValid'u64'($t34);

    // $t35 := opaque begin: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // assume WellFormed($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsValid'u64'($t35);

    // assume Eq<u64>($t35, 8) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29
    assume $IsEqual'u64'($t35, 8);

    // $t35 := opaque end: Errors::limit_exceeded($t34) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:60+29

    // trace_local[tmp#$6]($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(18,26,6):", $t35} $t35 == $t35;

    // trace_local[tmp#$5]($t33) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$track_local(18,26,5):", $t33} $t33 == $t33;

    // if ($t33) goto L2 else goto L8 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    if ($t33) { goto L2; } else { goto L8; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
L3:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81

    // trace_abort($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    assume {:print "$at(11,23394,23475)"} true;
    assume {:print "$track_abort(18,26):", $t35} $t35 == $t35;

    // $t16 := move($t35) at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    $t16 := $t35;

    // goto L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:487:9+81
    goto L10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+4
    assume {:print "$at(11,23506,23510)"} true;
L2:

    // $t36 := get_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:30+18
    $t36 := $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t37 := +($t36, $t15) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:488:49+1
    call $t37 := $AddU64($t36, $t15);
    if ($abort_flag) {
        assume {:print "$at(11,23525,23526)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // $t38 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_value($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+18
    $t38 := $ChildMutation($t29, 1, $preburn_value#$1_Diem_CurrencyInfo'#0'($Dereference($t29)));

    // write_ref($t38, $t37) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t38 := $UpdateMutation($t38, $t37);

    // write_back[Reference($t29).preburn_value]($t38) at /home/ying/diem/language/diem-framework/modules/Diem.move:488:9+52
    $t29 := $UpdateMutation($t29, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($Dereference($t29), $Dereference($t38)));

    // $t39 := get_field<Diem::CurrencyInfo<#0>>.is_synthetic($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:14+17
    assume {:print "$at(11,23801,23818)"} true;
    $t39 := $is_synthetic#$1_Diem_CurrencyInfo'#0'($Dereference($t29));

    // $t40 := !($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:13+1
    call $t40 := $Not($t39);

    // if ($t40) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    if ($t40) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:495:22+4
    assume {:print "$at(11,23874,23878)"} true;
L4:

    // $t41 := borrow_field<Diem::CurrencyInfo<#0>>.preburn_events($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:495:17+24
    $t41 := $ChildMutation($t29, 10, $preburn_events#$1_Diem_CurrencyInfo'#0'($Dereference($t29)));

    // $t42 := pack Diem::PreburnEvent($t15, $t26, $t2) at /home/ying/diem/language/diem-framework/modules/Diem.move:496:17+143
    assume {:print "$at(11,23911,24054)"} true;
    $t42 := $1_Diem_PreburnEvent($t15, $t26, $t2);

    // Event::emit_event<Diem::PreburnEvent>($t41, $t42) on_abort goto L10 with $t16 at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    assume {:print "$at(11,23834,24068)"} true;
    call $t41 := $1_Event_emit_event'$1_Diem_PreburnEvent'($t41, $t42);
    if ($abort_flag) {
        assume {:print "$at(11,23834,24068)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(18,26):", $t16} $t16 == $t16;
        goto L10;
    }

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:494:13+234
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // goto L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:501:14+1
    assume {:print "$at(11,24068,24069)"} true;
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    assume {:print "$at(11,23796,24079)"} true;
L6:

    // pack_ref_deep($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // write_back[Diem::CurrencyInfo<#0>@]($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t29),
        $Dereference($t29));

    // destroy($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:493:9+283

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    assume {:print "$at(11,24079,24080)"} true;
L7:

    // trace_local[preburn]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    $temp_0'$1_Diem_Preburn'#0'' := $Dereference($t1);
    assume {:print "$track_local(18,26,1):", $temp_0'$1_Diem_Preburn'#0''} $temp_0'$1_Diem_Preburn'#0'' == $temp_0'$1_Diem_Preburn'#0'';

    // goto L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:502:10+1
    goto L9;

    // label L8 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L8:

    // destroy($t1) at <internal>:1:1+10

    // goto L3 at <internal>:1:1+10
    goto L3;

    // label L9 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    assume {:print "$at(11,24085,24086)"} true;
L9:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $ret0 := $t1;
    return;

    // label L10 at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
L10:

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:503:5+1
    $abort_code := $t16;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // destroy($t1) at <internal>:1:1+10

    // goto L12 at <internal>:1:1+10
    goto L12;

    // label L16 at <internal>:1:1+10
L16:

    // destroy($t1) at <internal>:1:1+10

    // goto L14 at <internal>:1:1+10
    goto L14;

}

// fun Diem::publish_burn_capability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+417
procedure {:inline 1} $1_Diem_publish_burn_capability'$1_XUS_XUS'(_$t0: $signer, _$t1: $1_Diem_BurnCapability'$1_XUS_XUS') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: $signer;
    var $t1: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$at(11,13418,13419)"} true;
    assume {:print "$track_local(18,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(18,27,1):", $t1} $t1 == $t1;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(11,13548,13593)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'num'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(11,13548,13593)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(11,13603,13633)"} true;

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(11,13603,13633)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume {:print "$at(11,13697,13727)"} true;

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:39+16
    assume {:print "$at(11,13768,13784)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(11,13643,13795)"} true;
    assume {:print "$track_local(18,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$track_local(18,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(11,13643,13795)"} true;
    assume {:print "$track_abort(18,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:17+10
    assume {:print "$at(11,13813,13823)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:9+7
    if ($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t0), $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(11,13805,13812)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(11,13834,13835)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_burn_capability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+417
procedure {:inline 1} $1_Diem_publish_burn_capability'$1_XDX_XDX'(_$t0: $signer, _$t1: $1_Diem_BurnCapability'$1_XDX_XDX') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: $signer;
    var $t1: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$at(11,13418,13419)"} true;
    assume {:print "$track_local(18,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(18,27,1):", $t1} $t1 == $t1;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(11,13548,13593)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'num'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(11,13548,13593)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(11,13603,13633)"} true;

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(11,13603,13633)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume {:print "$at(11,13697,13727)"} true;

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:39+16
    assume {:print "$at(11,13768,13784)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(11,13643,13795)"} true;
    assume {:print "$track_local(18,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$track_local(18,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(11,13643,13795)"} true;
    assume {:print "$track_abort(18,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:17+10
    assume {:print "$at(11,13813,13823)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:9+7
    if ($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t0), $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(11,13805,13812)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(11,13834,13835)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::publish_burn_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+417
procedure {:inline 1} $1_Diem_publish_burn_capability'#0'(_$t0: $signer, _$t1: $1_Diem_BurnCapability'#0') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: bool;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t0: $signer;
    var $t1: $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$at(11,13418,13419)"} true;
    assume {:print "$track_local(18,27,0):", $t0} $t0 == $t0;

    // trace_local[cap]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:265:5+1
    assume {:print "$track_local(18,27,1):", $t1} $t1 == $t1;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(11,13548,13593)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'num'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    assume {:print "$at(11,13548,13593)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:269:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(11,13603,13633)"} true;

    // assume Identical($t8, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume ($t8 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t8) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    if ($t8) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L7:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t7)) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t7));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    assume {:print "$at(11,13603,13633)"} true;
    assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30
L6:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:270:9+30

    // $t9 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume {:print "$at(11,13697,13727)"} true;

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsValid'address'($t9);

    // assume Eq<address>($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30
    assume $IsEqual'address'($t9, $1_Signer_spec_address_of($t0));

    // $t9 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:47+30

    // $t10 := exists<Diem::BurnCapability<#0>>($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:14+6
    $t10 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t9);

    // $t11 := !($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:272:13+1
    call $t11 := $Not($t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:273:39+16
    assume {:print "$at(11,13768,13784)"} true;
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := opaque begin: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 6) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43
    assume $IsEqual'u64'($t13, 6);

    // $t13 := opaque end: Errors::already_published($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:273:13+43

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(11,13643,13795)"} true;
    assume {:print "$track_local(18,27,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$track_local(18,27,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    assume {:print "$at(11,13643,13795)"} true;
    assume {:print "$track_abort(18,27):", $t13} $t13 == $t13;

    // $t7 := move($t13) at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    $t7 := $t13;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:271:9+152
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:17+10
    assume {:print "$at(11,13813,13823)"} true;
L0:

    // move_to<Diem::BurnCapability<#0>>($t1, $t0) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/Diem.move:275:9+7
    if ($ResourceExists($1_Diem_BurnCapability'#0'_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Diem_BurnCapability'#0'_$memory := $ResourceUpdate($1_Diem_BurnCapability'#0'_$memory, $1_Signer_spec_address_of($t0), $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(11,13805,13812)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(18,27):", $t7} $t7 == $t7;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    assume {:print "$at(11,13834,13835)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:276:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun Diem::remove_burn_capability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1096:5+324
procedure {:inline 1} $1_Diem_remove_burn_capability'$1_XUS_XUS'(_$t0: $signer) returns ($ret0: $1_Diem_BurnCapability'$1_XUS_XUS')
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t0: $signer;
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1096:5+1
    assume {:print "$at(11,52653,52654)"} true;
    assume {:print "$track_local(18,33,0):", $t0} $t0 == $t0;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume {:print "$at(11,52790,52817)"} true;

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27

    // trace_local[addr]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:13+4
    assume {:print "$track_local(18,33,3):", $t4} $t4 == $t4;

    // $t5 := exists<Diem::BurnCapability<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:16+6
    assume {:print "$at(11,52834,52840)"} true;
    $t5 := $ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t4);

    // $t6 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:84+16
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45
    assume $IsEqual'u64'($t7, 4);

    // $t7 := opaque end: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$track_local(18,33,2):", $t7} $t7 == $t7;

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$track_local(18,33,1):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$at(11,52827,52920)"} true;
    assume {:print "$track_abort(18,33):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:45+4
    assume {:print "$at(11,52966,52970)"} true;
L0:

    // $t9 := move_from<Diem::BurnCapability<#0>>($t4) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:9+9
    if (!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t4);
        $1_Diem_BurnCapability'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(11,52930,52939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,33):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:9+41
    assume {:print "$track_return(18,33,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    assume {:print "$at(11,52976,52977)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
L3:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::remove_burn_capability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1096:5+324
procedure {:inline 1} $1_Diem_remove_burn_capability'$1_XDX_XDX'(_$t0: $signer) returns ($ret0: $1_Diem_BurnCapability'$1_XDX_XDX')
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t0: $signer;
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1096:5+1
    assume {:print "$at(11,52653,52654)"} true;
    assume {:print "$track_local(18,33,0):", $t0} $t0 == $t0;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume {:print "$at(11,52790,52817)"} true;

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27

    // trace_local[addr]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:13+4
    assume {:print "$track_local(18,33,3):", $t4} $t4 == $t4;

    // $t5 := exists<Diem::BurnCapability<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:16+6
    assume {:print "$at(11,52834,52840)"} true;
    $t5 := $ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t4);

    // $t6 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:84+16
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45
    assume $IsEqual'u64'($t7, 4);

    // $t7 := opaque end: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$track_local(18,33,2):", $t7} $t7 == $t7;

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$track_local(18,33,1):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$at(11,52827,52920)"} true;
    assume {:print "$track_abort(18,33):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:45+4
    assume {:print "$at(11,52966,52970)"} true;
L0:

    // $t9 := move_from<Diem::BurnCapability<#0>>($t4) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:9+9
    if (!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t4);
        $1_Diem_BurnCapability'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(11,52930,52939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,33):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:9+41
    assume {:print "$track_return(18,33,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    assume {:print "$at(11,52976,52977)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
L3:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::remove_burn_capability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1096:5+324
procedure {:inline 1} $1_Diem_remove_burn_capability'#0'(_$t0: $signer) returns ($ret0: $1_Diem_BurnCapability'#0')
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Diem_BurnCapability'#0';
    var $t0: $signer;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1096:5+1
    assume {:print "$at(11,52653,52654)"} true;
    assume {:print "$track_local(18,33,0):", $t0} $t0 == $t0;

    // $t4 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume {:print "$at(11,52790,52817)"} true;

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume $IsValid'address'($t4);

    // assume Eq<address>($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27
    assume $IsEqual'address'($t4, $1_Signer_spec_address_of($t0));

    // $t4 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:20+27

    // trace_local[addr]($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1098:13+4
    assume {:print "$track_local(18,33,3):", $t4} $t4 == $t4;

    // $t5 := exists<Diem::BurnCapability<#0>>($t4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:16+6
    assume {:print "$at(11,52834,52840)"} true;
    $t5 := $ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t4);

    // $t6 := 0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:84+16
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 4) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45
    assume $IsEqual'u64'($t7, 4);

    // $t7 := opaque end: Errors::requires_capability($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:56+45

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$track_local(18,33,2):", $t7} $t7 == $t7;

    // trace_local[tmp#$1]($t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$track_local(18,33,1):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    assume {:print "$at(11,52827,52920)"} true;
    assume {:print "$track_abort(18,33):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1099:9+93
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:45+4
    assume {:print "$at(11,52966,52970)"} true;
L0:

    // $t9 := move_from<Diem::BurnCapability<#0>>($t4) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:9+9
    if (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $t4);
        $1_Diem_BurnCapability'#0'_$memory := $ResourceRemove($1_Diem_BurnCapability'#0'_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(11,52930,52939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,33):", $t8} $t8 == $t8;
        goto L3;
    }

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1100:9+41
    assume {:print "$track_return(18,33,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    assume {:print "$at(11,52976,52977)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
L3:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1101:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+365
procedure {:inline 1} $1_Diem_update_minting_ability'$1_XUS_XUS'(_$t0: $signer, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t10: $Mutation (bool);
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'': $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+1
    assume {:print "$at(11,71147,71148)"} true;
    assume {:print "$track_local(18,37,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+1
    assume {:print "$track_local(18,37,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume {:print "$at(11,71291,71336)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'num'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume {:print "$at(11,71291,71336)"} true;
    assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume {:print "$at(11,71346,71376)"} true;

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume {:print "$at(11,71346,71376)"} true;
    assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30

    // $t8 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:71+13
    assume {:print "$at(11,71448,71461)"} true;
    $t8 := 173345816;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,71406,71423)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:13+13
    $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' := $Dereference($t9);
    assume {:print "$track_local(18,37,2):", $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS''} $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' == $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+22
    assume {:print "$at(11,71472,71494)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint($Dereference($t9), $Dereference($t10)));

    // pack_ref_deep($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    assume {:print "$at(11,71511,71512)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+365
procedure {:inline 1} $1_Diem_update_minting_ability'$1_XDX_XDX'(_$t0: $signer, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t10: $Mutation (bool);
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+1
    assume {:print "$at(11,71147,71148)"} true;
    assume {:print "$track_local(18,37,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+1
    assume {:print "$track_local(18,37,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume {:print "$at(11,71291,71336)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'num'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume {:print "$at(11,71291,71336)"} true;
    assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume {:print "$at(11,71346,71376)"} true;

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume {:print "$at(11,71346,71376)"} true;
    assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30

    // $t8 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:71+13
    assume {:print "$at(11,71448,71461)"} true;
    $t8 := 173345816;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,71406,71423)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:13+13
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t9);
    assume {:print "$track_local(18,37,2):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+22
    assume {:print "$at(11,71472,71494)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint($Dereference($t9), $Dereference($t10)));

    // pack_ref_deep($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    assume {:print "$at(11,71511,71512)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::update_minting_ability<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+365
procedure {:inline 1} $1_Diem_update_minting_ability'#0'(_$t0: $signer, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t10: $Mutation (bool);
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t10));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+1
    assume {:print "$at(11,71147,71148)"} true;
    assume {:print "$track_local(18,37,0):", $t0} $t0 == $t0;

    // trace_local[can_mint]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1524:5+1
    assume {:print "$track_local(18,37,1):", $t1} $t1 == $t1;

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume {:print "$at(11,71291,71336)"} true;

    // assume Identical($t5, Or(Or(Not(exists<Roles::RoleId>($t4)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume ($t5 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t4) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t5) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t6)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 1), Eq(3, $t6))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t6))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t6)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 1) && $IsEqual'num'(3, $t6))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t6)));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    assume {:print "$at(11,71291,71336)"} true;
    assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1529:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume {:print "$at(11,71346,71376)"} true;

    // assume Identical($t7, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume ($t7 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t7) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    if ($t7) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t6));

    // trace_abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    assume {:print "$at(11,71346,71376)"} true;
    assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1530:9+30

    // $t8 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:71+13
    assume {:print "$at(11,71448,71461)"} true;
    $t8 := 173345816;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<Diem::CurrencyInfo<#0>>($t8) on_abort goto L2 with $t6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(11,71406,71423)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(18,37):", $t6} $t6 == $t6;
        goto L2;
    }

    // trace_local[currency_info]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1531:13+13
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t9);
    assume {:print "$track_local(18,37,2):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t10 := borrow_field<Diem::CurrencyInfo<#0>>.can_mint($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+22
    assume {:print "$at(11,71472,71494)"} true;
    $t10 := $ChildMutation($t9, 7, $can_mint#$1_Diem_CurrencyInfo'#0'($Dereference($t9)));

    // write_ref($t10, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $t10 := $UpdateMutation($t10, $t1);

    // write_back[Reference($t9).can_mint]($t10) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $t9 := $UpdateMutation($t9, $Update'$1_Diem_CurrencyInfo'#0''_can_mint($Dereference($t9), $Dereference($t10)));

    // pack_ref_deep($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33

    // write_back[Diem::CurrencyInfo<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/Diem.move:1532:9+33
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    assume {:print "$at(11,71511,71512)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
L2:

    // abort($t6) at /home/ying/diem/language/diem-framework/modules/Diem.move:1533:5+1
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun Diem::update_xdx_exchange_rate<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+734
procedure {:inline 1} $1_Diem_update_xdx_exchange_rate'$1_XUS_XUS'(_$t0: $signer, _$t1: $1_FixedPoint32_FixedPoint32) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t3: int;
    var $t4: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t5: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_Diem_CurrencyInfo'$1_XUS_XUS');
    var $t12: $Mutation ($1_FixedPoint32_FixedPoint32);
    var $t13: $Mutation ($1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent');
    var $t14: Vec (int);
    var $t15: $1_FixedPoint32_FixedPoint32;
    var $t16: int;
    var $t17: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: $signer;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'': $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t12));
    assume IsEmptyVec(p#$Mutation($t13));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t4 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)));

    // assume Identical($t5, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<#0>>(a550c18)), FixedPoint32::$get_raw_value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t5 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t1)));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+1
    assume {:print "$at(11,68135,68136)"} true;
    assume {:print "$track_local(18,38,0):", $t0} $t0 == $t0;

    // trace_local[xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+1
    assume {:print "$track_local(18,38,1):", $t1} $t1 == $t1;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume {:print "$at(11,68293,68338)"} true;

    // assume Identical($t7, Or(Or(Not(exists<Roles::RoleId>($t6)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume ($t7 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t6) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume {:print "$at(11,68293,68338)"} true;
    assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume {:print "$at(11,68348,68382)"} true;

    // assume Identical($t9, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume ($t9 == !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume {:print "$at(11,68348,68382)"} true;
    assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34

    // $t10 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:75+13
    assume {:print "$at(11,68458,68471)"} true;
    $t10 := 173345816;
    assume $IsValid'address'($t10);

    // $t11 := borrow_global<Diem::CurrencyInfo<#0>>($t10) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $t10));
    }
    if ($abort_flag) {
        assume {:print "$at(11,68412,68429)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[currency_info]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:13+13
    $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' := $Dereference($t11);
    assume {:print "$track_local(18,38,2):", $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS''} $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'' == $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'';

    // $t12 := borrow_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+34
    assume {:print "$at(11,68482,68516)"} true;
    $t12 := $ChildMutation($t11, 2, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t11)));

    // write_ref($t12, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+54
    $t12 := $UpdateMutation($t12, $t1);

    // write_back[Reference($t11).to_xdx_exchange_rate]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+54
    $t11 := $UpdateMutation($t11, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate($Dereference($t11), $Dereference($t12)));

    // $t13 := borrow_field<Diem::CurrencyInfo<#0>>.exchange_rate_update_events($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1469:13+46
    assume {:print "$at(11,68577,68623)"} true;
    $t13 := $ChildMutation($t11, 12, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t11)));

    // $t14 := get_field<Diem::CurrencyInfo<#0>>.currency_code($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1471:33+28
    assume {:print "$at(11,68700,68728)"} true;
    $t14 := $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t11));

    // $t15 := get_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1472:72+35
    assume {:print "$at(11,68801,68836)"} true;
    $t15 := $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'($Dereference($t11));

    // $t16 := FixedPoint32::get_raw_value($t15) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1472:43+65
    call $t16 := $1_FixedPoint32_get_raw_value($t15);
    if ($abort_flag) {
        assume {:print "$at(11,68772,68837)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t17 := pack Diem::ToXDXExchangeRateUpdateEvent($t14, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1470:13+215
    assume {:print "$at(11,68637,68852)"} true;
    $t17 := $1_Diem_ToXDXExchangeRateUpdateEvent($t14, $t16);

    // Event::emit_event<Diem::ToXDXExchangeRateUpdateEvent>($t13, $t17) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316
    assume {:print "$at(11,68546,68862)"} true;
    call $t13 := $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'($t13, $t17);
    if ($abort_flag) {
        assume {:print "$at(11,68546,68862)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // pack_ref_deep($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316

    // write_back[Diem::CurrencyInfo<#0>@]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    assume {:print "$at(11,68868,68869)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::update_xdx_exchange_rate<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+734
procedure {:inline 1} $1_Diem_update_xdx_exchange_rate'$1_XDX_XDX'(_$t0: $signer, _$t1: $1_FixedPoint32_FixedPoint32) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t3: int;
    var $t4: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t5: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_Diem_CurrencyInfo'$1_XDX_XDX');
    var $t12: $Mutation ($1_FixedPoint32_FixedPoint32);
    var $t13: $Mutation ($1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent');
    var $t14: Vec (int);
    var $t15: $1_FixedPoint32_FixedPoint32;
    var $t16: int;
    var $t17: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: $signer;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t12));
    assume IsEmptyVec(p#$Mutation($t13));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t4 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)));

    // assume Identical($t5, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<#0>>(a550c18)), FixedPoint32::$get_raw_value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t5 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t1)));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+1
    assume {:print "$at(11,68135,68136)"} true;
    assume {:print "$track_local(18,38,0):", $t0} $t0 == $t0;

    // trace_local[xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+1
    assume {:print "$track_local(18,38,1):", $t1} $t1 == $t1;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume {:print "$at(11,68293,68338)"} true;

    // assume Identical($t7, Or(Or(Not(exists<Roles::RoleId>($t6)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume ($t7 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t6) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume {:print "$at(11,68293,68338)"} true;
    assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume {:print "$at(11,68348,68382)"} true;

    // assume Identical($t9, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume ($t9 == !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume {:print "$at(11,68348,68382)"} true;
    assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34

    // $t10 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:75+13
    assume {:print "$at(11,68458,68471)"} true;
    $t10 := 173345816;
    assume $IsValid'address'($t10);

    // $t11 := borrow_global<Diem::CurrencyInfo<#0>>($t10) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $t10));
    }
    if ($abort_flag) {
        assume {:print "$at(11,68412,68429)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[currency_info]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:13+13
    $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' := $Dereference($t11);
    assume {:print "$track_local(18,38,2):", $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX''} $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'' == $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';

    // $t12 := borrow_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+34
    assume {:print "$at(11,68482,68516)"} true;
    $t12 := $ChildMutation($t11, 2, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t11)));

    // write_ref($t12, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+54
    $t12 := $UpdateMutation($t12, $t1);

    // write_back[Reference($t11).to_xdx_exchange_rate]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+54
    $t11 := $UpdateMutation($t11, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate($Dereference($t11), $Dereference($t12)));

    // $t13 := borrow_field<Diem::CurrencyInfo<#0>>.exchange_rate_update_events($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1469:13+46
    assume {:print "$at(11,68577,68623)"} true;
    $t13 := $ChildMutation($t11, 12, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t11)));

    // $t14 := get_field<Diem::CurrencyInfo<#0>>.currency_code($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1471:33+28
    assume {:print "$at(11,68700,68728)"} true;
    $t14 := $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t11));

    // $t15 := get_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1472:72+35
    assume {:print "$at(11,68801,68836)"} true;
    $t15 := $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'($Dereference($t11));

    // $t16 := FixedPoint32::get_raw_value($t15) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1472:43+65
    call $t16 := $1_FixedPoint32_get_raw_value($t15);
    if ($abort_flag) {
        assume {:print "$at(11,68772,68837)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t17 := pack Diem::ToXDXExchangeRateUpdateEvent($t14, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1470:13+215
    assume {:print "$at(11,68637,68852)"} true;
    $t17 := $1_Diem_ToXDXExchangeRateUpdateEvent($t14, $t16);

    // Event::emit_event<Diem::ToXDXExchangeRateUpdateEvent>($t13, $t17) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316
    assume {:print "$at(11,68546,68862)"} true;
    call $t13 := $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'($t13, $t17);
    if ($abort_flag) {
        assume {:print "$at(11,68546,68862)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // pack_ref_deep($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316

    // write_back[Diem::CurrencyInfo<#0>@]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    assume {:print "$at(11,68868,68869)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun Diem::update_xdx_exchange_rate<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+734
procedure {:inline 1} $1_Diem_update_xdx_exchange_rate'#0'(_$t0: $signer, _$t1: $1_FixedPoint32_FixedPoint32) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t3: int;
    var $t4: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t5: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_Diem_CurrencyInfo'#0');
    var $t12: $Mutation ($1_FixedPoint32_FixedPoint32);
    var $t13: $Mutation ($1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent');
    var $t14: Vec (int);
    var $t15: $1_FixedPoint32_FixedPoint32;
    var $t16: int;
    var $t17: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: $signer;
    var $t1: $1_FixedPoint32_FixedPoint32;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t2));
    assume IsEmptyVec(p#$Mutation($t11));
    assume IsEmptyVec(p#$Mutation($t12));
    assume IsEmptyVec(p#$Mutation($t13));

    // bytecode translation starts here
    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t4 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)));

    // assume Identical($t5, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<#0>>(a550c18)), FixedPoint32::$get_raw_value($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t5 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t1)));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+1
    assume {:print "$at(11,68135,68136)"} true;
    assume {:print "$track_local(18,38,0):", $t0} $t0 == $t0;

    // trace_local[xdx_exchange_rate]($t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1460:5+1
    assume {:print "$track_local(18,38,1):", $t1} $t1 == $t1;

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume {:print "$at(11,68293,68338)"} true;

    // assume Identical($t7, Or(Or(Not(exists<Roles::RoleId>($t6)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume ($t7 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t6) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t7) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    if ($t7) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
L4:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t6)), Eq(5, $t8)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t6)), 1), Eq(3, $t8))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t8))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t6) && $IsEqual'num'(5, $t8)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t6)), 1) && $IsEqual'num'(3, $t8))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    assume {:print "$at(11,68293,68338)"} true;
    assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45
L3:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/Diem.move:1464:9+45

    // opaque begin: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume {:print "$at(11,68348,68382)"} true;

    // assume Identical($t9, Not(Diem::spec_is_currency<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume ($t9 == !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // if ($t9) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    if ($t9) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
L6:

    // assume And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    assume {:print "$at(11,68348,68382)"} true;
    assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34
L5:

    // opaque end: Diem::assert_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/Diem.move:1465:9+34

    // $t10 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:75+13
    assume {:print "$at(11,68458,68471)"} true;
    $t10 := 173345816;
    assume $IsValid'address'($t10);

    // $t11 := borrow_global<Diem::CurrencyInfo<#0>>($t10) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:29+17
    if (!$ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $t10));
    }
    if ($abort_flag) {
        assume {:print "$at(11,68412,68429)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[currency_info]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1466:13+13
    $temp_0'$1_Diem_CurrencyInfo'#0'' := $Dereference($t11);
    assume {:print "$track_local(18,38,2):", $temp_0'$1_Diem_CurrencyInfo'#0''} $temp_0'$1_Diem_CurrencyInfo'#0'' == $temp_0'$1_Diem_CurrencyInfo'#0'';

    // $t12 := borrow_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+34
    assume {:print "$at(11,68482,68516)"} true;
    $t12 := $ChildMutation($t11, 2, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($Dereference($t11)));

    // write_ref($t12, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+54
    $t12 := $UpdateMutation($t12, $t1);

    // write_back[Reference($t11).to_xdx_exchange_rate]($t12) at /home/ying/diem/language/diem-framework/modules/Diem.move:1467:9+54
    $t11 := $UpdateMutation($t11, $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate($Dereference($t11), $Dereference($t12)));

    // $t13 := borrow_field<Diem::CurrencyInfo<#0>>.exchange_rate_update_events($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1469:13+46
    assume {:print "$at(11,68577,68623)"} true;
    $t13 := $ChildMutation($t11, 12, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($Dereference($t11)));

    // $t14 := get_field<Diem::CurrencyInfo<#0>>.currency_code($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1471:33+28
    assume {:print "$at(11,68700,68728)"} true;
    $t14 := $currency_code#$1_Diem_CurrencyInfo'#0'($Dereference($t11));

    // $t15 := get_field<Diem::CurrencyInfo<#0>>.to_xdx_exchange_rate($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1472:72+35
    assume {:print "$at(11,68801,68836)"} true;
    $t15 := $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($Dereference($t11));

    // $t16 := FixedPoint32::get_raw_value($t15) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1472:43+65
    call $t16 := $1_FixedPoint32_get_raw_value($t15);
    if ($abort_flag) {
        assume {:print "$at(11,68772,68837)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t17 := pack Diem::ToXDXExchangeRateUpdateEvent($t14, $t16) at /home/ying/diem/language/diem-framework/modules/Diem.move:1470:13+215
    assume {:print "$at(11,68637,68852)"} true;
    $t17 := $1_Diem_ToXDXExchangeRateUpdateEvent($t14, $t16);

    // Event::emit_event<Diem::ToXDXExchangeRateUpdateEvent>($t13, $t17) on_abort goto L2 with $t8 at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316
    assume {:print "$at(11,68546,68862)"} true;
    call $t13 := $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'($t13, $t17);
    if ($abort_flag) {
        assume {:print "$at(11,68546,68862)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(18,38):", $t8} $t8 == $t8;
        goto L2;
    }

    // pack_ref_deep($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316

    // write_back[Diem::CurrencyInfo<#0>@]($t11) at /home/ying/diem/language/diem-framework/modules/Diem.move:1468:9+316
    $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // label L1 at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    assume {:print "$at(11,68868,68869)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
L2:

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/Diem.move:1475:5+1
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'#0'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'#0'(window) + $time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    if ($1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XUS_XUS'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(window), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    if ($1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XDX_XDX'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(window), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): $1_AccountLimits_Window'#0' {
    if ($1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'#0'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'#0'(window), $limit_address#$1_AccountLimits_Window'#0'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_LimitsDefinition'#0' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): bool {
    $1_AccountLimits_spec_is_unrestricted'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', receiving: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', receiving: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', receiving: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', sending: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', sending: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', sending: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'#0'(limits_def: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_def), 86400000000))
}

// struct AccountLimits::AccountLimitMutationCapability at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:11:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// struct AccountLimits::LimitsDefinition<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'#0';
function {:constructor} $1_AccountLimits_LimitsDefinition'#0'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'#0';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'#0''(s: $1_AccountLimits_LimitsDefinition'#0'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'#0''(s1: $1_AccountLimits_LimitsDefinition'#0', s2: $1_AccountLimits_LimitsDefinition'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0';

// struct AccountLimits::Window<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_Window'$1_XUS_XUS'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_start(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'(x, $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_limit_address(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''(s: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''(s1: $1_AccountLimits_Window'$1_XUS_XUS', s2: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS';

// struct AccountLimits::Window<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_Window'$1_XDX_XDX'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_start(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'(x, $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_limit_address(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''(s: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''(s1: $1_AccountLimits_Window'$1_XDX_XDX', s2: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX';

// struct AccountLimits::Window<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'#0';
function {:constructor} $1_AccountLimits_Window'#0'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'#0';
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_start(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'(x, $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_inflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), x, $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_outflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), x, $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_tracked_balance(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), x, $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_limit_address(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), x)
}
function $IsValid'$1_AccountLimits_Window'#0''(s: $1_AccountLimits_Window'#0'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'#0'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'#0''(s1: $1_AccountLimits_Window'#0', s2: $1_AccountLimits_Window'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0';

// struct XUS::XUS at /home/ying/diem/language/diem-framework/modules/XUS.move:10:5+14
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:105:10+206
function {:inline} $1_XDX_spec_is_xdx'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    (($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:105:10+206
function {:inline} $1_XDX_spec_is_xdx'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', __unused_$1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    (($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'vec'u8''($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:105:10+206
function {:inline} $1_XDX_spec_is_xdx'#0'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', $1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    (($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'vec'u8''($1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:133:9+80
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, 173345816)
}

// struct XDX::XDX at /home/ying/diem/language/diem-framework/modules/XDX.move:15:5+14
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at /home/ying/diem/language/diem-framework/modules/XDX.move:24:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// spec fun at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:298:5+106
function {:inline} $1_VASPDomain_$tc_domain_manager_exists($1_VASPDomain_VASPDomainManager_$memory: $Memory $1_VASPDomain_VASPDomainManager): bool {
    $ResourceExists($1_VASPDomain_VASPDomainManager_$memory, 186537453)
}

// struct VASPDomain::VASPDomain at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:25:5+110
type {:datatype} $1_VASPDomain_VASPDomain;
function {:constructor} $1_VASPDomain_VASPDomain($domain: Vec (int)): $1_VASPDomain_VASPDomain;
function {:inline} $Update'$1_VASPDomain_VASPDomain'_domain(s: $1_VASPDomain_VASPDomain, x: Vec (int)): $1_VASPDomain_VASPDomain {
    $1_VASPDomain_VASPDomain(x)
}
function $IsValid'$1_VASPDomain_VASPDomain'(s: $1_VASPDomain_VASPDomain): bool {
    $IsValid'vec'u8''($domain#$1_VASPDomain_VASPDomain(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomain'(s1: $1_VASPDomain_VASPDomain, s2: $1_VASPDomain_VASPDomain): bool {
    $IsEqual'vec'u8''($domain#$1_VASPDomain_VASPDomain(s1), $domain#$1_VASPDomain_VASPDomain(s2))}

// struct VASPDomain::VASPDomainEvent at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:39:5+256
type {:datatype} $1_VASPDomain_VASPDomainEvent;
function {:constructor} $1_VASPDomain_VASPDomainEvent($removed: bool, $domain: $1_VASPDomain_VASPDomain, $address: int): $1_VASPDomain_VASPDomainEvent;
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_removed(s: $1_VASPDomain_VASPDomainEvent, x: bool): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent(x, $domain#$1_VASPDomain_VASPDomainEvent(s), $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_domain(s: $1_VASPDomain_VASPDomainEvent, x: $1_VASPDomain_VASPDomain): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), x, $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_address(s: $1_VASPDomain_VASPDomainEvent, x: int): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), $domain#$1_VASPDomain_VASPDomainEvent(s), x)
}
function $IsValid'$1_VASPDomain_VASPDomainEvent'(s: $1_VASPDomain_VASPDomainEvent): bool {
    $IsValid'bool'($removed#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'$1_VASPDomain_VASPDomain'($domain#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'address'($address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainEvent'(s1: $1_VASPDomain_VASPDomainEvent, s2: $1_VASPDomain_VASPDomainEvent): bool {
    $IsEqual'bool'($removed#$1_VASPDomain_VASPDomainEvent(s1), $removed#$1_VASPDomain_VASPDomainEvent(s2))
    && $IsEqual'$1_VASPDomain_VASPDomain'($domain#$1_VASPDomain_VASPDomainEvent(s1), $domain#$1_VASPDomain_VASPDomainEvent(s2))
    && $IsEqual'address'($address#$1_VASPDomain_VASPDomainEvent(s1), $address#$1_VASPDomain_VASPDomainEvent(s2))}

// struct VASPDomain::VASPDomainManager at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:33:5+235
type {:datatype} $1_VASPDomain_VASPDomainManager;
function {:constructor} $1_VASPDomain_VASPDomainManager($vasp_domain_events: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager;
function {:inline} $Update'$1_VASPDomain_VASPDomainManager'_vasp_domain_events(s: $1_VASPDomain_VASPDomainManager, x: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager {
    $1_VASPDomain_VASPDomainManager(x)
}
function $IsValid'$1_VASPDomain_VASPDomainManager'(s: $1_VASPDomain_VASPDomainManager): bool {
    $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''($vasp_domain_events#$1_VASPDomain_VASPDomainManager(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainManager'(s1: $1_VASPDomain_VASPDomainManager, s2: $1_VASPDomain_VASPDomainManager): bool {
    $IsEqual'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''($vasp_domain_events#$1_VASPDomain_VASPDomainManager(s1), $vasp_domain_events#$1_VASPDomain_VASPDomainManager(s2))}
var $1_VASPDomain_VASPDomainManager_$memory: $Memory $1_VASPDomain_VASPDomainManager;

// struct VASPDomain::VASPDomains at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:12:5+142
type {:datatype} $1_VASPDomain_VASPDomains;
function {:constructor} $1_VASPDomain_VASPDomains($domains: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains;
function {:inline} $Update'$1_VASPDomain_VASPDomains'_domains(s: $1_VASPDomain_VASPDomains, x: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains {
    $1_VASPDomain_VASPDomains(x)
}
function $IsValid'$1_VASPDomain_VASPDomains'(s: $1_VASPDomain_VASPDomains): bool {
    $IsValid'vec'$1_VASPDomain_VASPDomain''($domains#$1_VASPDomain_VASPDomains(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomains'(s1: $1_VASPDomain_VASPDomains, s2: $1_VASPDomain_VASPDomains): bool {
    $IsEqual'vec'$1_VASPDomain_VASPDomain''($domains#$1_VASPDomain_VASPDomains(s1), $domains#$1_VASPDomain_VASPDomains(s2))}
var $1_VASPDomain_VASPDomains_$memory: $Memory $1_VASPDomain_VASPDomains;

// fun VASPDomain::add_vasp_domain [baseline] at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:145:5+1080
procedure {:inline 1} $1_VASPDomain_add_vasp_domain(_$t0: $signer, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: $Mutation ($1_VASPDomain_VASPDomains);
    var $t10: $1_VASPDomain_VASPDomain;
    var $t11: Vec ($1_VASPDomain_VASPDomain);
    var $t12: int;
    var $t13: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    var $t14: $1_VASPDomain_VASPDomainEvent;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_VASPDomain_VASPDomains);
    var $t25: $1_VASPDomain_VASPDomain;
    var $t26: Vec ($1_VASPDomain_VASPDomain);
    var $t27: bool;
    var $t28: bool;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (Vec ($1_VASPDomain_VASPDomain));
    var $t32: int;
    var $t33: $Mutation ($1_VASPDomain_VASPDomainManager);
    var $t34: $Mutation ($1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent');
    var $t35: bool;
    var $t36: $1_VASPDomain_VASPDomainEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'$1_VASPDomain_VASPDomain': $1_VASPDomain_VASPDomain;
    var $temp_0'$1_VASPDomain_VASPDomains': $1_VASPDomain_VASPDomains;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t33));
    assume IsEmptyVec(p#$Mutation($t34));

    // bytecode translation starts here
    // assume Identical($t11, select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:185:9+51
    assume {:print "$at(36,7070,7121)"} true;
    assume ($t11 == $domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1)));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, select VASPDomain::VASPDomainManager.vasp_domain_events(global<VASPDomain::VASPDomainManager>(b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:201:9+79
    assume {:print "$at(36,7806,7885)"} true;
    assume ($t13 == $vasp_domain_events#$1_VASPDomain_VASPDomainManager($ResourceValue($1_VASPDomain_VASPDomainManager_$memory, 186537453)));

    // assume Identical($t14, pack VASPDomain::VASPDomainEvent(false, pack VASPDomain::VASPDomain($t2), $t1)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:202:9+130
    assume {:print "$at(36,7894,8024)"} true;
    assume ($t14 == $1_VASPDomain_VASPDomainEvent(false, $1_VASPDomain_VASPDomain($t2), $t1));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:145:5+1
    assume {:print "$at(36,5713,5714)"} true;
    assume {:print "$track_local(22,0,0):", $t0} $t0 == $t0;

    // trace_local[address]($t1) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:145:5+1
    assume {:print "$track_local(22,0,1):", $t1} $t1 == $t1;

    // trace_local[domain]($t2) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:145:5+1
    assume {:print "$track_local(22,0,2):", $t2} $t2 == $t2;

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
    assume {:print "$at(36,5880,5925)"} true;

    // assume Identical($t16, Or(Or(Not(exists<Roles::RoleId>($t15)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
    assume ($t16 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t15) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
L9:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t15)), Eq(5, $t17)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1), Eq(3, $t17))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t17))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t15) && $IsEqual'num'(5, $t17)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1) && $IsEqual'num'(3, $t17))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
    assume {:print "$at(36,5880,5925)"} true;
    assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45
L8:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:150:9+45

    // $t18 := VASPDomain::tc_domain_manager_exists() on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:16+26
    assume {:print "$at(36,5942,5968)"} true;
    call $t18 := $1_VASPDomain_tc_domain_manager_exists();
    if ($abort_flag) {
        assume {:print "$at(36,5942,5968)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t19 := 1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:66+20
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := opaque begin: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:44+43

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:44+43
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 5) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:44+43
    assume $IsEqual'u64'($t20, 5);

    // $t20 := opaque end: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:44+43

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:9+79
    assume {:print "$track_local(22,0,4):", $t20} $t20 == $t20;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:9+79
    assume {:print "$track_local(22,0,3):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:9+79
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:9+79
L1:

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:9+79
    assume {:print "$at(36,5935,6014)"} true;
    assume {:print "$track_abort(22,0):", $t20} $t20 == $t20;

    // $t17 := move($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:9+79
    $t17 := $t20;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:151:9+79
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:153:33+7
    assume {:print "$at(36,6064,6071)"} true;
L0:

    // $t21 := exists<VASPDomain::VASPDomains>($t1) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:153:13+6
    $t21 := $ResourceExists($1_VASPDomain_VASPDomains_$memory, $t1);

    // $t22 := 4 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:154:35+27
    assume {:print "$at(36,6108,6135)"} true;
    $t22 := 4;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:154:13+50

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:154:13+50
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 5) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:154:13+50
    assume $IsEqual'u64'($t23, 5);

    // $t23 := opaque end: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:154:13+50

    // trace_local[tmp#$6]($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:152:9+122
    assume {:print "$at(36,6024,6146)"} true;
    assume {:print "$track_local(22,0,6):", $t23} $t23 == $t23;

    // trace_local[tmp#$5]($t21) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:152:9+122
    assume {:print "$track_local(22,0,5):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:152:9+122
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:152:9+122
L3:

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:152:9+122
    assume {:print "$at(36,6024,6146)"} true;
    assume {:print "$track_abort(22,0):", $t23} $t23 == $t23;

    // $t17 := move($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:152:9+122
    $t17 := $t23;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:152:9+122
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:157:62+7
    assume {:print "$at(36,6210,6217)"} true;
L2:

    // $t24 := borrow_global<VASPDomain::VASPDomains>($t1) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:157:31+17
    if (!$ResourceExists($1_VASPDomain_VASPDomains_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(36,6179,6196)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[account_domains]($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:157:13+15
    $temp_0'$1_VASPDomain_VASPDomains' := $Dereference($t24);
    assume {:print "$track_local(22,0,9):", $temp_0'$1_VASPDomain_VASPDomains'} $temp_0'$1_VASPDomain_VASPDomains' == $temp_0'$1_VASPDomain_VASPDomains';

    // $t25 := VASPDomain::create_vasp_domain($t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:158:27+26
    assume {:print "$at(36,6246,6272)"} true;
    call $t25 := $1_VASPDomain_create_vasp_domain($t2);
    if ($abort_flag) {
        assume {:print "$at(36,6246,6272)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[vasp_domain]($t25) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:158:13+11
    assume {:print "$track_local(22,0,10):", $t25} $t25 == $t25;

    // $t26 := get_field<VASPDomain::VASPDomains>.domains($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:161:31+24
    assume {:print "$at(36,6321,6345)"} true;
    $t26 := $domains#$1_VASPDomain_VASPDomains($Dereference($t24));

    // $t27 := Vector::contains<VASPDomain::VASPDomain>($t26, $t25) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:161:14+56
    call $t27 := $1_Vector_contains'$1_VASPDomain_VASPDomain'($t26, $t25);
    if ($abort_flag) {
        assume {:print "$at(36,6304,6360)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t28 := !($t27) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:161:13+1
    call $t28 := $Not($t27);

    // $t29 := 3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:162:38+27
    assume {:print "$at(36,6399,6426)"} true;
    $t29 := 3;
    assume $IsValid'u64'($t29);

    // $t30 := opaque begin: Errors::invalid_argument($t29) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:162:13+53

    // assume WellFormed($t30) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:162:13+53
    assume $IsValid'u64'($t30);

    // assume Eq<u64>($t30, 7) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:162:13+53
    assume $IsEqual'u64'($t30, 7);

    // $t30 := opaque end: Errors::invalid_argument($t29) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:162:13+53

    // trace_local[tmp#$8]($t30) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154
    assume {:print "$at(36,6283,6437)"} true;
    assume {:print "$track_local(22,0,8):", $t30} $t30 == $t30;

    // trace_local[tmp#$7]($t28) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154
    assume {:print "$track_local(22,0,7):", $t28} $t28 == $t28;

    // if ($t28) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154
    if ($t28) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154
L5:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154

    // trace_abort($t30) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154
    assume {:print "$at(36,6283,6437)"} true;
    assume {:print "$track_abort(22,0):", $t30} $t30 == $t30;

    // $t17 := move($t30) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154
    $t17 := $t30;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:160:9+154
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:165:32+15
    assume {:print "$at(36,6471,6486)"} true;
L4:

    // $t31 := borrow_field<VASPDomain::VASPDomains>.domains($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:165:27+28
    $t31 := $ChildMutation($t24, 0, $domains#$1_VASPDomain_VASPDomains($Dereference($t24)));

    // Vector::push_back<VASPDomain::VASPDomain>($t31, $t25) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:165:9+65
    call $t31 := $1_Vector_push_back'$1_VASPDomain_VASPDomain'($t31, $t25);
    if ($abort_flag) {
        assume {:print "$at(36,6448,6513)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // write_back[Reference($t24).domains]($t31) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:165:9+65
    $t24 := $UpdateMutation($t24, $Update'$1_VASPDomain_VASPDomains'_domains($Dereference($t24), $Dereference($t31)));

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:165:9+65

    // write_back[VASPDomain::VASPDomains@]($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:165:9+65
    $1_VASPDomain_VASPDomains_$memory := $ResourceUpdate($1_VASPDomain_VASPDomains_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // $t32 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:168:55+19
    assume {:print "$at(36,6597,6616)"} true;
    $t32 := 186537453;
    assume $IsValid'address'($t32);

    // $t33 := borrow_global<VASPDomain::VASPDomainManager>($t32) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:168:18+17
    if (!$ResourceExists($1_VASPDomain_VASPDomainManager_$memory, $t32)) {
        call $ExecFailureAbort();
    } else {
        $t33 := $Mutation($Global($t32), EmptyVec(), $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $t32));
    }
    if ($abort_flag) {
        assume {:print "$at(36,6560,6577)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t34 := borrow_field<VASPDomain::VASPDomainManager>.vasp_domain_events($t33) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:168:13+81
    $t34 := $ChildMutation($t33, 0, $vasp_domain_events#$1_VASPDomain_VASPDomainManager($Dereference($t33)));

    // $t35 := false at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:170:26+5
    assume {:print "$at(36,6693,6698)"} true;
    $t35 := false;
    assume $IsValid'bool'($t35);

    // $t36 := pack VASPDomain::VASPDomainEvent($t35, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:169:13+125
    assume {:print "$at(36,6650,6775)"} true;
    $t36 := $1_VASPDomain_VASPDomainEvent($t35, $t25, $t1);

    // Event::emit_event<VASPDomain::VASPDomainEvent>($t34, $t36) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:167:9+262
    assume {:print "$at(36,6524,6786)"} true;
    call $t34 := $1_Event_emit_event'$1_VASPDomain_VASPDomainEvent'($t34, $t36);
    if ($abort_flag) {
        assume {:print "$at(36,6524,6786)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,0):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t33) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:167:9+262

    // label L6 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:175:5+1
    assume {:print "$at(36,6792,6793)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:175:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:175:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:175:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun VASPDomain::create_vasp_domain [baseline] at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:64:5+197
procedure {:inline 1} $1_VASPDomain_create_vasp_domain(_$t0: Vec (int)) returns ($ret0: $1_VASPDomain_VASPDomain)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_VASPDomain_VASPDomain;
    var $t0: Vec (int);
    var $temp_0'$1_VASPDomain_VASPDomain': $1_VASPDomain_VASPDomain;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[domain]($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:64:5+1
    assume {:print "$at(36,2295,2296)"} true;
    assume {:print "$track_local(22,1,0):", $t0} $t0 == $t0;

    // $t3 := Vector::length<u8>($t0) on_abort goto L3 with $t4 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:16+23
    assume {:print "$at(36,2367,2390)"} true;
    call $t3 := $1_Vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(36,2367,2390)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(22,1):", $t4} $t4 == $t4;
        goto L3;
    }

    // $t5 := 63 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:43+13
    $t5 := 63;
    assume $IsValid'u64'($t5);

    // $t6 := <=($t3, $t5) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:40+2
    call $t6 := $Le($t3, $t5);

    // $t7 := 5 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:83+20
    $t7 := 5;
    assume $IsValid'u64'($t7);

    // $t8 := opaque begin: Errors::invalid_argument($t7) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:58+46

    // assume WellFormed($t8) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:58+46
    assume $IsValid'u64'($t8);

    // assume Eq<u64>($t8, 7) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:58+46
    assume $IsEqual'u64'($t8, 7);

    // $t8 := opaque end: Errors::invalid_argument($t7) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:58+46

    // trace_local[tmp#$2]($t8) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:9+96
    assume {:print "$track_local(22,1,2):", $t8} $t8 == $t8;

    // trace_local[tmp#$1]($t6) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:9+96
    assume {:print "$track_local(22,1,1):", $t6} $t6 == $t6;

    // if ($t6) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:9+96
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:9+96
L1:

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:9+96
    assume {:print "$at(36,2360,2456)"} true;
    assume {:print "$track_abort(22,1):", $t8} $t8 == $t8;

    // $t4 := move($t8) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:9+96
    $t4 := $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:65:9+96
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:66:21+6
    assume {:print "$at(36,2478,2484)"} true;
L0:

    // $t9 := pack VASPDomain::VASPDomain($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:66:9+20
    $t9 := $1_VASPDomain_VASPDomain($t0);

    // trace_return[0]($t9) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:66:9+20
    assume {:print "$track_return(22,1,0):", $t9} $t9 == $t9;

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:67:5+1
    assume {:print "$at(36,2491,2492)"} true;
L2:

    // return $t9 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:67:5+1
    $ret0 := $t9;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:67:5+1
L3:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:67:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun VASPDomain::remove_vasp_domain [baseline] at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:211:5+1115
procedure {:inline 1} $1_VASPDomain_remove_vasp_domain(_$t0: $signer, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: $Mutation ($1_VASPDomain_VASPDomains);
    var $t8: bool;
    var $t9: int;
    var $t10: $1_VASPDomain_VASPDomain;
    var $t11: Vec ($1_VASPDomain_VASPDomain);
    var $t12: int;
    var $t13: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    var $t14: $1_VASPDomain_VASPDomainEvent;
    var $t15: int;
    var $t16: bool;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation ($1_VASPDomain_VASPDomains);
    var $t25: $1_VASPDomain_VASPDomain;
    var $t26: Vec ($1_VASPDomain_VASPDomain);
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (Vec ($1_VASPDomain_VASPDomain));
    var $t32: $1_VASPDomain_VASPDomain;
    var $t33: int;
    var $t34: $Mutation ($1_VASPDomain_VASPDomainManager);
    var $t35: $Mutation ($1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent');
    var $t36: bool;
    var $t37: $1_VASPDomain_VASPDomainEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'$1_VASPDomain_VASPDomain': $1_VASPDomain_VASPDomain;
    var $temp_0'$1_VASPDomain_VASPDomains': $1_VASPDomain_VASPDomains;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t7));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t31));
    assume IsEmptyVec(p#$Mutation($t34));
    assume IsEmptyVec(p#$Mutation($t35));

    // bytecode translation starts here
    // assume Identical($t11, select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:251:9+51
    assume {:print "$at(36,9543,9594)"} true;
    assume ($t11 == $domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1)));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, select VASPDomain::VASPDomainManager.vasp_domain_events(global<VASPDomain::VASPDomainManager>(b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:268:9+79
    assume {:print "$at(36,10315,10394)"} true;
    assume ($t13 == $vasp_domain_events#$1_VASPDomain_VASPDomainManager($ResourceValue($1_VASPDomain_VASPDomainManager_$memory, 186537453)));

    // assume Identical($t14, pack VASPDomain::VASPDomainEvent(true, pack VASPDomain::VASPDomain($t2), $t1)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:269:9+129
    assume {:print "$at(36,10403,10532)"} true;
    assume ($t14 == $1_VASPDomain_VASPDomainEvent(true, $1_VASPDomain_VASPDomain($t2), $t1));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:211:5+1
    assume {:print "$at(36,8136,8137)"} true;
    assume {:print "$track_local(22,6,0):", $t0} $t0 == $t0;

    // trace_local[address]($t1) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:211:5+1
    assume {:print "$track_local(22,6,1):", $t1} $t1 == $t1;

    // trace_local[domain]($t2) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:211:5+1
    assume {:print "$track_local(22,6,2):", $t2} $t2 == $t2;

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
    assume {:print "$at(36,8306,8351)"} true;

    // assume Identical($t16, Or(Or(Not(exists<Roles::RoleId>($t15)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
    assume ($t16 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t15) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t16) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
L9:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t15)), Eq(5, $t17)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t15)), 1), Eq(3, $t17))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t17))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t15) && $IsEqual'num'(5, $t17)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t15)), 1) && $IsEqual'num'(3, $t17))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
    assume {:print "$at(36,8306,8351)"} true;
    assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45
L8:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:216:9+45

    // $t18 := VASPDomain::tc_domain_manager_exists() on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:16+26
    assume {:print "$at(36,8368,8394)"} true;
    call $t18 := $1_VASPDomain_tc_domain_manager_exists();
    if ($abort_flag) {
        assume {:print "$at(36,8368,8394)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t19 := 1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:66+20
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := opaque begin: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:44+43

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:44+43
    assume $IsValid'u64'($t20);

    // assume Eq<u64>($t20, 5) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:44+43
    assume $IsEqual'u64'($t20, 5);

    // $t20 := opaque end: Errors::not_published($t19) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:44+43

    // trace_local[tmp#$4]($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:9+79
    assume {:print "$track_local(22,6,4):", $t20} $t20 == $t20;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:9+79
    assume {:print "$track_local(22,6,3):", $t18} $t18 == $t18;

    // if ($t18) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:9+79
    if ($t18) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:9+79
L1:

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:9+79
    assume {:print "$at(36,8361,8440)"} true;
    assume {:print "$track_abort(22,6):", $t20} $t20 == $t20;

    // $t17 := move($t20) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:9+79
    $t17 := $t20;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:217:9+79
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:219:33+7
    assume {:print "$at(36,8490,8497)"} true;
L0:

    // $t21 := exists<VASPDomain::VASPDomains>($t1) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:219:13+6
    $t21 := $ResourceExists($1_VASPDomain_VASPDomains_$memory, $t1);

    // $t22 := 4 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:220:35+27
    assume {:print "$at(36,8534,8561)"} true;
    $t22 := 4;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:220:13+50

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:220:13+50
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 5) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:220:13+50
    assume $IsEqual'u64'($t23, 5);

    // $t23 := opaque end: Errors::not_published($t22) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:220:13+50

    // trace_local[tmp#$6]($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:218:9+122
    assume {:print "$at(36,8450,8572)"} true;
    assume {:print "$track_local(22,6,6):", $t23} $t23 == $t23;

    // trace_local[tmp#$5]($t21) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:218:9+122
    assume {:print "$track_local(22,6,5):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:218:9+122
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:218:9+122
L3:

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:218:9+122
    assume {:print "$at(36,8450,8572)"} true;
    assume {:print "$track_abort(22,6):", $t23} $t23 == $t23;

    // $t17 := move($t23) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:218:9+122
    $t17 := $t23;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:218:9+122
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:223:62+7
    assume {:print "$at(36,8636,8643)"} true;
L2:

    // $t24 := borrow_global<VASPDomain::VASPDomains>($t1) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:223:31+17
    if (!$ResourceExists($1_VASPDomain_VASPDomains_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t24 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(36,8605,8622)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[account_domains]($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:223:13+15
    $temp_0'$1_VASPDomain_VASPDomains' := $Dereference($t24);
    assume {:print "$track_local(22,6,7):", $temp_0'$1_VASPDomain_VASPDomains'} $temp_0'$1_VASPDomain_VASPDomains' == $temp_0'$1_VASPDomain_VASPDomains';

    // $t25 := VASPDomain::create_vasp_domain($t2) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:224:27+26
    assume {:print "$at(36,8672,8698)"} true;
    call $t25 := $1_VASPDomain_create_vasp_domain($t2);
    if ($abort_flag) {
        assume {:print "$at(36,8672,8698)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[vasp_domain]($t25) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:224:13+11
    assume {:print "$track_local(22,6,10):", $t25} $t25 == $t25;

    // $t26 := get_field<VASPDomain::VASPDomains>.domains($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:226:45+24
    assume {:print "$at(36,8745,8769)"} true;
    $t26 := $domains#$1_VASPDomain_VASPDomains($Dereference($t24));

    // ($t27, $t28) := Vector::index_of<VASPDomain::VASPDomain>($t26, $t25) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:226:28+56
    call $t27,$t28 := $1_Vector_index_of'$1_VASPDomain_VASPDomain'($t26, $t25);
    if ($abort_flag) {
        assume {:print "$at(36,8728,8784)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;
        goto L7;
    }

    // trace_local[index]($t28) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:226:19+5
    assume {:print "$track_local(22,6,9):", $t28} $t28 == $t28;

    // trace_local[has]($t27) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:226:14+3
    assume {:print "$track_local(22,6,8):", $t27} $t27 == $t27;

    // if ($t27) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:227:9+169
    assume {:print "$at(36,8794,8963)"} true;
    if ($t27) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:13+54
    assume {:print "$at(36,8899,8953)"} true;
L5:

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:13+54

    // destroy($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:13+54

    // $t29 := 2 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:44+22
    $t29 := 2;
    assume $IsValid'u64'($t29);

    // $t30 := opaque begin: Errors::invalid_argument($t29) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:19+48

    // assume WellFormed($t30) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:19+48
    assume $IsValid'u64'($t30);

    // assume Eq<u64>($t30, 7) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:19+48
    assume $IsEqual'u64'($t30, 7);

    // $t30 := opaque end: Errors::invalid_argument($t29) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:19+48

    // trace_abort($t30) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:13+54
    assume {:print "$at(36,8899,8953)"} true;
    assume {:print "$track_abort(22,6):", $t30} $t30 == $t30;

    // $t17 := move($t30) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:13+54
    $t17 := $t30;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:230:13+54
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:228:33+15
    assume {:print "$at(36,8837,8852)"} true;
L4:

    // $t31 := borrow_field<VASPDomain::VASPDomains>.domains($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:228:28+28
    $t31 := $ChildMutation($t24, 0, $domains#$1_VASPDomain_VASPDomains($Dereference($t24)));

    // $t32 := Vector::remove<VASPDomain::VASPDomain>($t31, $t28) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:228:13+51
    call $t32,$t31 := $1_Vector_remove'$1_VASPDomain_VASPDomain'($t31, $t28);
    if ($abort_flag) {
        assume {:print "$at(36,8817,8868)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;
        goto L7;
    }

    // write_back[Reference($t24).domains]($t31) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:228:13+51
    $t24 := $UpdateMutation($t24, $Update'$1_VASPDomain_VASPDomains'_domains($Dereference($t24), $Dereference($t31)));

    // pack_ref_deep($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:228:13+51

    // write_back[VASPDomain::VASPDomains@]($t24) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:228:13+51
    $1_VASPDomain_VASPDomains_$memory := $ResourceUpdate($1_VASPDomain_VASPDomains_$memory, $GlobalLocationAddress($t24),
        $Dereference($t24));

    // destroy($t32) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:228:13+51

    // $t33 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:234:55+19
    assume {:print "$at(36,9047,9066)"} true;
    $t33 := 186537453;
    assume $IsValid'address'($t33);

    // $t34 := borrow_global<VASPDomain::VASPDomainManager>($t33) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:234:18+17
    if (!$ResourceExists($1_VASPDomain_VASPDomainManager_$memory, $t33)) {
        call $ExecFailureAbort();
    } else {
        $t34 := $Mutation($Global($t33), EmptyVec(), $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $t33));
    }
    if ($abort_flag) {
        assume {:print "$at(36,9010,9027)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;
        goto L7;
    }

    // $t35 := borrow_field<VASPDomain::VASPDomainManager>.vasp_domain_events($t34) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:234:13+81
    $t35 := $ChildMutation($t34, 0, $vasp_domain_events#$1_VASPDomain_VASPDomainManager($Dereference($t34)));

    // $t36 := true at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:236:26+4
    assume {:print "$at(36,9143,9147)"} true;
    $t36 := true;
    assume $IsValid'bool'($t36);

    // $t37 := pack VASPDomain::VASPDomainEvent($t36, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:235:13+133
    assume {:print "$at(36,9100,9233)"} true;
    $t37 := $1_VASPDomain_VASPDomainEvent($t36, $t25, $t1);

    // Event::emit_event<VASPDomain::VASPDomainEvent>($t35, $t37) on_abort goto L7 with $t17 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:233:9+270
    assume {:print "$at(36,8974,9244)"} true;
    call $t35 := $1_Event_emit_event'$1_VASPDomain_VASPDomainEvent'($t35, $t37);
    if ($abort_flag) {
        assume {:print "$at(36,8974,9244)"} true;
        $t17 := $abort_code;
        assume {:print "$track_abort(22,6):", $t17} $t17 == $t17;
        goto L7;
    }

    // pack_ref_deep($t34) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:233:9+270

    // label L6 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:241:5+1
    assume {:print "$at(36,9250,9251)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:241:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:241:5+1
L7:

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:241:5+1
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun VASPDomain::tc_domain_manager_exists [baseline] at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:298:5+106
procedure {:inline 1} $1_VASPDomain_tc_domain_manager_exists() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:299:35+19
    assume {:print "$at(36,11480,11499)"} true;
    $t0 := 186537453;
    assume $IsValid'address'($t0);

    // $t1 := exists<VASPDomain::VASPDomainManager>($t0) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:299:9+6
    $t1 := $ResourceExists($1_VASPDomain_VASPDomainManager_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:299:9+46
    assume {:print "$track_return(22,7,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:300:5+1
    assume {:print "$at(36,11505,11506)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:300:5+1
    $ret0 := $t1;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:164:5+80
function {:inline} $1_VASP_$is_child($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, addr: int): bool {
    $ResourceExists($1_VASP_ChildVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:154:5+82
function {:inline} $1_VASP_$is_parent($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $ResourceExists($1_VASP_ParentVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:174:5+89
function {:inline} $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) || $1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:141:9+207
function {:inline} $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr)) then (addr) else ($parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:197:10+168
function {:inline} $1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr1: int, addr2: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)) && $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)))
}

// struct VASP::ChildVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:21:5+54
type {:datatype} $1_VASP_ChildVASP;
function {:constructor} $1_VASP_ChildVASP($parent_vasp_addr: int): $1_VASP_ChildVASP;
function {:inline} $Update'$1_VASP_ChildVASP'_parent_vasp_addr(s: $1_VASP_ChildVASP, x: int): $1_VASP_ChildVASP {
    $1_VASP_ChildVASP(x)
}
function $IsValid'$1_VASP_ChildVASP'(s: $1_VASP_ChildVASP): bool {
    $IsValid'address'($parent_vasp_addr#$1_VASP_ChildVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ChildVASP'(s1: $1_VASP_ChildVASP, s2: $1_VASP_ChildVASP): bool {
    s1 == s2
}
var $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP;

// struct VASP::ParentVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:15:5+121
type {:datatype} $1_VASP_ParentVASP;
function {:constructor} $1_VASP_ParentVASP($num_children: int): $1_VASP_ParentVASP;
function {:inline} $Update'$1_VASP_ParentVASP'_num_children(s: $1_VASP_ParentVASP, x: int): $1_VASP_ParentVASP {
    $1_VASP_ParentVASP(x)
}
function $IsValid'$1_VASP_ParentVASP'(s: $1_VASP_ParentVASP): bool {
    $IsValid'u64'($num_children#$1_VASP_ParentVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ParentVASP'(s1: $1_VASP_ParentVASP, s2: $1_VASP_ParentVASP): bool {
    s1 == s2
}
var $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP;

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+118
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, 186537453)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:163:10+139
function {:inline} $1_TransactionFee_spec_transaction_fee'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, 186537453)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:163:10+139
function {:inline} $1_TransactionFee_spec_transaction_fee'$1_XDX_XDX'($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XDX_XDX'): $1_TransactionFee_TransactionFee'$1_XDX_XDX' {
    $ResourceValue($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory, 186537453)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:163:10+139
function {:inline} $1_TransactionFee_spec_transaction_fee'#0'($1_TransactionFee_TransactionFee'#0'_$memory: $Memory $1_TransactionFee_TransactionFee'#0'): $1_TransactionFee_TransactionFee'#0' {
    $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, 186537453)
}

// struct TransactionFee::TransactionFee<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:13:5+124
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// struct TransactionFee::TransactionFee<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:13:5+124
type {:datatype} $1_TransactionFee_TransactionFee'$1_XDX_XDX';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XDX_XDX'($balance: $1_Diem_Diem'$1_XDX_XDX', $preburn: $1_Diem_Preburn'$1_XDX_XDX'): $1_TransactionFee_TransactionFee'$1_XDX_XDX';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XDX_XDX''_balance(s: $1_TransactionFee_TransactionFee'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_TransactionFee_TransactionFee'$1_XDX_XDX' {
    $1_TransactionFee_TransactionFee'$1_XDX_XDX'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XDX_XDX''_preburn(s: $1_TransactionFee_TransactionFee'$1_XDX_XDX', x: $1_Diem_Preburn'$1_XDX_XDX'): $1_TransactionFee_TransactionFee'$1_XDX_XDX' {
    $1_TransactionFee_TransactionFee'$1_XDX_XDX'($balance#$1_TransactionFee_TransactionFee'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XDX_XDX''(s: $1_TransactionFee_TransactionFee'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($balance#$1_TransactionFee_TransactionFee'$1_XDX_XDX'(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn#$1_TransactionFee_TransactionFee'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XDX_XDX''(s1: $1_TransactionFee_TransactionFee'$1_XDX_XDX', s2: $1_TransactionFee_TransactionFee'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XDX_XDX';

// struct TransactionFee::TransactionFee<#0> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:13:5+124
type {:datatype} $1_TransactionFee_TransactionFee'#0';
function {:constructor} $1_TransactionFee_TransactionFee'#0'($balance: $1_Diem_Diem'#0', $preburn: $1_Diem_Preburn'#0'): $1_TransactionFee_TransactionFee'#0';
function {:inline} $Update'$1_TransactionFee_TransactionFee'#0''_balance(s: $1_TransactionFee_TransactionFee'#0', x: $1_Diem_Diem'#0'): $1_TransactionFee_TransactionFee'#0' {
    $1_TransactionFee_TransactionFee'#0'(x, $preburn#$1_TransactionFee_TransactionFee'#0'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'#0''_preburn(s: $1_TransactionFee_TransactionFee'#0', x: $1_Diem_Preburn'#0'): $1_TransactionFee_TransactionFee'#0' {
    $1_TransactionFee_TransactionFee'#0'($balance#$1_TransactionFee_TransactionFee'#0'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'#0''(s: $1_TransactionFee_TransactionFee'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($balance#$1_TransactionFee_TransactionFee'#0'(s))
      && $IsValid'$1_Diem_Preburn'#0''($preburn#$1_TransactionFee_TransactionFee'#0'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'#0''(s1: $1_TransactionFee_TransactionFee'#0', s2: $1_TransactionFee_TransactionFee'#0'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'#0'_$memory: $Memory $1_TransactionFee_TransactionFee'#0';

// fun TransactionFee::burn_fees<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:91:5+1061
procedure {:inline 1} $1_TransactionFee_burn_fees'$1_XUS_XUS'(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t4: $1_Diem_Diem'$1_XUS_XUS';
    var $t5: $Mutation ($1_TransactionFee_TransactionFee'$1_XUS_XUS');
    var $t6: int;
    var $t7: $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $t8: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation ($1_TransactionFee_TransactionFee'$1_XUS_XUS');
    var $t22: $Mutation ($1_Diem_Diem'$1_XUS_XUS');
    var $t23: $1_Diem_Diem'$1_XUS_XUS';
    var $t24: $1_Diem_Diem'$1_XUS_XUS';
    var $t25: $1_Diem_BurnCapability'$1_XUS_XUS';
    var $t26: $Mutation ($1_Diem_Preburn'$1_XUS_XUS');
    var $t27: int;
    var $t28: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t29: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t30: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t31: Vec (int);
    var $t32: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t33: $1_Diem_PreburnEvent;
    var $t34: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t35: Vec (int);
    var $t36: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t37: int;
    var $t0: $signer;
    var $temp_0'$1_Diem_BurnCapability'$1_XUS_XUS'': $1_Diem_BurnCapability'$1_XUS_XUS';
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'': $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t26));

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, TransactionFee::spec_transaction_fee<#0>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:144:9+44
    assume {:print "$at(33,6048,6092)"} true;
    assume ($t7 == $1_TransactionFee_spec_transaction_fee'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:91:5+1
    assume {:print "$at(33,3601,3602)"} true;
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume {:print "$at(33,3702,3735)"} true;

    // assume Identical($t9, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume ($t9 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    if ($t9) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
L8:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume {:print "$at(33,3702,3735)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    goto L6;

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
L7:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume {:print "$at(33,3745,3790)"} true;

    // assume Identical($t12, Or(Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume ($t12 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t12) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    if ($t12) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
L10:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'num'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1) && $IsEqual'num'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume {:print "$at(33,3745,3790)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    goto L6;

    // label L9 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
L9:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45

    // $t13 := TransactionFee::is_coin_initialized<#0>() on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:16+31
    assume {:print "$at(33,3807,3838)"} true;
    call $t13 := $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'();
    if ($abort_flag) {
        assume {:print "$at(33,3807,3838)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:71+16
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39

    // trace_local[tmp#$2]($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$track_local(24,1,2):", $t15} $t15 == $t15;

    // trace_local[tmp#$1]($t13) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$track_local(24,1,1):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$at(33,3800,3880)"} true;
    assume {:print "$track_abort(24,1):", $t15} $t15 == $t15;

    // $t10 := move($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    $t10 := $t15;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    goto L6;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume {:print "$at(33,3894,3917)"} true;
L0:

    // $t16 := opaque begin: XDX::is_xdx<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23

    // assume Identical($t17, And(Diem::spec_is_currency<#0>(), Not(Diem::spec_is_currency<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume ($t17 == ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // if ($t17) goto L12 else goto L11 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    if ($t17) { goto L12; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
L12:

    // assume And(And(Diem::spec_is_currency<#0>(), Not(Diem::spec_is_currency<XDX::XDX>())), Eq(5, $t10)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume (($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(5, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume {:print "$at(33,3894,3917)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    goto L6;

    // label L11 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
L11:

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume $IsValid'bool'($t16);

    // assume Eq<bool>($t16, XDX::spec_is_xdx<#0>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume $IsEqual'bool'($t16, $1_XDX_spec_is_xdx'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // $t16 := opaque end: XDX::is_xdx<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    assume {:print "$at(33,4078,4123)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:41+16
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::invalid_state($t18) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39
    assume $IsEqual'u64'($t19, 1);

    // $t19 := opaque end: Errors::invalid_state($t18) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    assume {:print "$at(33,4078,4123)"} true;
    assume {:print "$track_abort(24,1):", $t19} $t19 == $t19;

    // $t10 := move($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    $t10 := $t19;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:68+19
    assume {:print "$at(33,4236,4255)"} true;
L4:

    // $t20 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:68+19
    $t20 := 186537453;
    assume $IsValid'address'($t20);

    // $t21 := borrow_global<TransactionFee::TransactionFee<#0>>($t20) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:24+17
    if (!$ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t20)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t20), EmptyVec(), $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t20));
    }
    if ($abort_flag) {
        assume {:print "$at(33,4192,4209)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[fees]($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:17+4
    $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'' := $Dereference($t21);
    assume {:print "$track_local(24,1,5):", $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS''} $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'' == $temp_0'$1_TransactionFee_TransactionFee'$1_XUS_XUS'';

    // $t22 := borrow_field<TransactionFee::TransactionFee<#0>>.balance($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:43+17
    assume {:print "$at(33,4300,4317)"} true;
    $t22 := $ChildMutation($t21, 0, $balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'($Dereference($t21)));

    // $t23 := opaque begin: Diem::withdraw_all<#0>($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37

    // $t24 := read_ref($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    $t24 := $Dereference($t22);

    // havoc[mut]($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    havoc $temp_0'$1_Diem_Diem'$1_XUS_XUS'';
    $t22 := $UpdateMutation($t22, $temp_0'$1_Diem_Diem'$1_XUS_XUS'');
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t22));

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($Dereference($t22));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsValid'$1_Diem_Diem'$1_XUS_XUS''($t23);

    // assume Eq<u64>(select Diem::Diem.value($t23), select Diem::Diem.value($t24)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($t23), $value#$1_Diem_Diem'$1_XUS_XUS'($t24));

    // assume Eq<u64>(select Diem::Diem.value($t22), 0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($Dereference($t22)), 0);

    // $t23 := opaque end: Diem::withdraw_all<#0>($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37

    // write_back[Reference($t21).balance]($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    $t21 := $UpdateMutation($t21, $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance($Dereference($t21), $Dereference($t22)));

    // trace_local[coin]($t23) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:17+4
    assume {:print "$track_local(24,1,4):", $t23} $t23 == $t23;

    // $t25 := Diem::remove_burn_capability<#0>($t0) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:105:28+50
    assume {:print "$at(33,4347,4397)"} true;
    call $t25 := $1_Diem_remove_burn_capability'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(33,4347,4397)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[burn_cap]($t25) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:105:17+8
    assume {:print "$track_local(24,1,3):", $t25} $t25 == $t25;

    // $t26 := borrow_field<TransactionFee::TransactionFee<#0>>.preburn($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:109:17+17
    assume {:print "$at(33,4485,4502)"} true;
    $t26 := $ChildMutation($t21, 1, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'($Dereference($t21)));

    // $t27 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:110:17+19
    assume {:print "$at(33,4520,4539)"} true;
    $t27 := 186537453;
    assume $IsValid'address'($t27);

    // assume Identical($t28, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1076:9+42
    assume {:print "$at(11,51502,51544)"} true;
    assume ($t28 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t30, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t30 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t31, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t31 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t32, select Diem::CurrencyInfo.preburn_events($t30)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t32 == $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t30));

    // assume Identical($t33, pack Diem::PreburnEvent(select Diem::Diem.value($t23), $t31, $t27)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t33 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XUS_XUS'($t23), $t31, $t27));

    // assume Identical($t34, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t34 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t35, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t35 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t36, select Diem::CurrencyInfo.burn_events($t34)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t36 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t34));

    // Diem::burn_now<#0>($t23, $t26, $t27, $t25) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    assume {:print "$at(33,4431,4580)"} true;
    call $t26 := $1_Diem_burn_now'$1_XUS_XUS'($t23, $t26, $t27, $t25);
    if ($abort_flag) {
        assume {:print "$at(33,4431,4580)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // write_back[Reference($t21).preburn]($t26) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    $t21 := $UpdateMutation($t21, $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn($Dereference($t21), $Dereference($t26)));

    // write_back[TransactionFee::TransactionFee<#0>@]($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // Diem::publish_burn_capability<#0>($t0, $t25) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:113:13+51
    assume {:print "$at(33,4594,4645)"} true;
    call $1_Diem_publish_burn_capability'$1_XUS_XUS'($t0, $t25);
    if ($abort_flag) {
        assume {:print "$at(33,4594,4645)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    assume {:print "$at(33,4661,4662)"} true;
L5:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    return;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
L6:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun TransactionFee::burn_fees<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:91:5+1061
procedure {:inline 1} $1_TransactionFee_burn_fees'$1_XDX_XDX'(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t4: $1_Diem_Diem'$1_XDX_XDX';
    var $t5: $Mutation ($1_TransactionFee_TransactionFee'$1_XDX_XDX');
    var $t6: int;
    var $t7: $1_TransactionFee_TransactionFee'$1_XDX_XDX';
    var $t8: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation ($1_TransactionFee_TransactionFee'$1_XDX_XDX');
    var $t22: $Mutation ($1_Diem_Diem'$1_XDX_XDX');
    var $t23: $1_Diem_Diem'$1_XDX_XDX';
    var $t24: $1_Diem_Diem'$1_XDX_XDX';
    var $t25: $1_Diem_BurnCapability'$1_XDX_XDX';
    var $t26: $Mutation ($1_Diem_Preburn'$1_XDX_XDX');
    var $t27: int;
    var $t28: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t29: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t30: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t31: Vec (int);
    var $t32: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t33: $1_Diem_PreburnEvent;
    var $t34: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t35: Vec (int);
    var $t36: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t37: int;
    var $t0: $signer;
    var $temp_0'$1_Diem_BurnCapability'$1_XDX_XDX'': $1_Diem_BurnCapability'$1_XDX_XDX';
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'$1_TransactionFee_TransactionFee'$1_XDX_XDX'': $1_TransactionFee_TransactionFee'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t26));

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, TransactionFee::spec_transaction_fee<#0>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:144:9+44
    assume {:print "$at(33,6048,6092)"} true;
    assume ($t7 == $1_TransactionFee_spec_transaction_fee'$1_XDX_XDX'($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:91:5+1
    assume {:print "$at(33,3601,3602)"} true;
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume {:print "$at(33,3702,3735)"} true;

    // assume Identical($t9, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume ($t9 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    if ($t9) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
L8:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume {:print "$at(33,3702,3735)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    goto L6;

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
L7:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume {:print "$at(33,3745,3790)"} true;

    // assume Identical($t12, Or(Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume ($t12 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t12) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    if ($t12) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
L10:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'num'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1) && $IsEqual'num'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume {:print "$at(33,3745,3790)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    goto L6;

    // label L9 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
L9:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45

    // $t13 := TransactionFee::is_coin_initialized<#0>() on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:16+31
    assume {:print "$at(33,3807,3838)"} true;
    call $t13 := $1_TransactionFee_is_coin_initialized'$1_XDX_XDX'();
    if ($abort_flag) {
        assume {:print "$at(33,3807,3838)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:71+16
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39

    // trace_local[tmp#$2]($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$track_local(24,1,2):", $t15} $t15 == $t15;

    // trace_local[tmp#$1]($t13) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$track_local(24,1,1):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$at(33,3800,3880)"} true;
    assume {:print "$track_abort(24,1):", $t15} $t15 == $t15;

    // $t10 := move($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    $t10 := $t15;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    goto L6;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume {:print "$at(33,3894,3917)"} true;
L0:

    // $t16 := opaque begin: XDX::is_xdx<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23

    // assume Identical($t17, And(Diem::spec_is_currency<#0>(), Not(Diem::spec_is_currency<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume ($t17 == ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // if ($t17) goto L12 else goto L11 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    if ($t17) { goto L12; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
L12:

    // assume And(And(Diem::spec_is_currency<#0>(), Not(Diem::spec_is_currency<XDX::XDX>())), Eq(5, $t10)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume (($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(5, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume {:print "$at(33,3894,3917)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    goto L6;

    // label L11 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
L11:

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume $IsValid'bool'($t16);

    // assume Eq<bool>($t16, XDX::spec_is_xdx<#0>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume $IsEqual'bool'($t16, $1_XDX_spec_is_xdx'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // $t16 := opaque end: XDX::is_xdx<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    assume {:print "$at(33,4078,4123)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:41+16
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::invalid_state($t18) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39
    assume $IsEqual'u64'($t19, 1);

    // $t19 := opaque end: Errors::invalid_state($t18) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    assume {:print "$at(33,4078,4123)"} true;
    assume {:print "$track_abort(24,1):", $t19} $t19 == $t19;

    // $t10 := move($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    $t10 := $t19;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:68+19
    assume {:print "$at(33,4236,4255)"} true;
L4:

    // $t20 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:68+19
    $t20 := 186537453;
    assume $IsValid'address'($t20);

    // $t21 := borrow_global<TransactionFee::TransactionFee<#0>>($t20) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:24+17
    if (!$ResourceExists($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory, $t20)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t20), EmptyVec(), $ResourceValue($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory, $t20));
    }
    if ($abort_flag) {
        assume {:print "$at(33,4192,4209)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[fees]($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:17+4
    $temp_0'$1_TransactionFee_TransactionFee'$1_XDX_XDX'' := $Dereference($t21);
    assume {:print "$track_local(24,1,5):", $temp_0'$1_TransactionFee_TransactionFee'$1_XDX_XDX''} $temp_0'$1_TransactionFee_TransactionFee'$1_XDX_XDX'' == $temp_0'$1_TransactionFee_TransactionFee'$1_XDX_XDX'';

    // $t22 := borrow_field<TransactionFee::TransactionFee<#0>>.balance($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:43+17
    assume {:print "$at(33,4300,4317)"} true;
    $t22 := $ChildMutation($t21, 0, $balance#$1_TransactionFee_TransactionFee'$1_XDX_XDX'($Dereference($t21)));

    // $t23 := opaque begin: Diem::withdraw_all<#0>($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37

    // $t24 := read_ref($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    $t24 := $Dereference($t22);

    // havoc[mut]($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    havoc $temp_0'$1_Diem_Diem'$1_XDX_XDX'';
    $t22 := $UpdateMutation($t22, $temp_0'$1_Diem_Diem'$1_XDX_XDX'');
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($Dereference($t22));

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($Dereference($t22));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsValid'$1_Diem_Diem'$1_XDX_XDX''($t23);

    // assume Eq<u64>(select Diem::Diem.value($t23), select Diem::Diem.value($t24)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($t23), $value#$1_Diem_Diem'$1_XDX_XDX'($t24));

    // assume Eq<u64>(select Diem::Diem.value($t22), 0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($Dereference($t22)), 0);

    // $t23 := opaque end: Diem::withdraw_all<#0>($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37

    // write_back[Reference($t21).balance]($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    $t21 := $UpdateMutation($t21, $Update'$1_TransactionFee_TransactionFee'$1_XDX_XDX''_balance($Dereference($t21), $Dereference($t22)));

    // trace_local[coin]($t23) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:17+4
    assume {:print "$track_local(24,1,4):", $t23} $t23 == $t23;

    // $t25 := Diem::remove_burn_capability<#0>($t0) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:105:28+50
    assume {:print "$at(33,4347,4397)"} true;
    call $t25 := $1_Diem_remove_burn_capability'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(33,4347,4397)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[burn_cap]($t25) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:105:17+8
    assume {:print "$track_local(24,1,3):", $t25} $t25 == $t25;

    // $t26 := borrow_field<TransactionFee::TransactionFee<#0>>.preburn($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:109:17+17
    assume {:print "$at(33,4485,4502)"} true;
    $t26 := $ChildMutation($t21, 1, $preburn#$1_TransactionFee_TransactionFee'$1_XDX_XDX'($Dereference($t21)));

    // $t27 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:110:17+19
    assume {:print "$at(33,4520,4539)"} true;
    $t27 := 186537453;
    assume $IsValid'address'($t27);

    // assume Identical($t28, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1076:9+42
    assume {:print "$at(11,51502,51544)"} true;
    assume ($t28 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t30, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t30 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t31, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t31 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t32, select Diem::CurrencyInfo.preburn_events($t30)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t32 == $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t30));

    // assume Identical($t33, pack Diem::PreburnEvent(select Diem::Diem.value($t23), $t31, $t27)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t33 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'$1_XDX_XDX'($t23), $t31, $t27));

    // assume Identical($t34, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t34 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t35, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t35 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t36, select Diem::CurrencyInfo.burn_events($t34)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t36 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t34));

    // Diem::burn_now<#0>($t23, $t26, $t27, $t25) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    assume {:print "$at(33,4431,4580)"} true;
    call $t26 := $1_Diem_burn_now'$1_XDX_XDX'($t23, $t26, $t27, $t25);
    if ($abort_flag) {
        assume {:print "$at(33,4431,4580)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // write_back[Reference($t21).preburn]($t26) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    $t21 := $UpdateMutation($t21, $Update'$1_TransactionFee_TransactionFee'$1_XDX_XDX''_preburn($Dereference($t21), $Dereference($t26)));

    // write_back[TransactionFee::TransactionFee<#0>@]($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    $1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // Diem::publish_burn_capability<#0>($t0, $t25) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:113:13+51
    assume {:print "$at(33,4594,4645)"} true;
    call $1_Diem_publish_burn_capability'$1_XDX_XDX'($t0, $t25);
    if ($abort_flag) {
        assume {:print "$at(33,4594,4645)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    assume {:print "$at(33,4661,4662)"} true;
L5:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    return;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
L6:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun TransactionFee::burn_fees<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:91:5+1061
procedure {:inline 1} $1_TransactionFee_burn_fees'#0'(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: $1_Diem_BurnCapability'#0';
    var $t4: $1_Diem_Diem'#0';
    var $t5: $Mutation ($1_TransactionFee_TransactionFee'#0');
    var $t6: int;
    var $t7: $1_TransactionFee_TransactionFee'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation ($1_TransactionFee_TransactionFee'#0');
    var $t22: $Mutation ($1_Diem_Diem'#0');
    var $t23: $1_Diem_Diem'#0';
    var $t24: $1_Diem_Diem'#0';
    var $t25: $1_Diem_BurnCapability'#0';
    var $t26: $Mutation ($1_Diem_Preburn'#0');
    var $t27: int;
    var $t28: $1_Diem_CurrencyInfo'#0';
    var $t29: $1_Diem_CurrencyInfo'#0';
    var $t30: $1_Diem_CurrencyInfo'#0';
    var $t31: Vec (int);
    var $t32: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t33: $1_Diem_PreburnEvent;
    var $t34: $1_Diem_CurrencyInfo'#0';
    var $t35: Vec (int);
    var $t36: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t37: int;
    var $t0: $signer;
    var $temp_0'$1_Diem_BurnCapability'#0'': $1_Diem_BurnCapability'#0';
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'$1_TransactionFee_TransactionFee'#0'': $1_TransactionFee_TransactionFee'#0';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    assume IsEmptyVec(p#$Mutation($t5));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t26));

    // bytecode translation starts here
    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, TransactionFee::spec_transaction_fee<#0>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:144:9+44
    assume {:print "$at(33,6048,6092)"} true;
    assume ($t7 == $1_TransactionFee_spec_transaction_fee'#0'($1_TransactionFee_TransactionFee'#0'_$memory));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:91:5+1
    assume {:print "$at(33,3601,3602)"} true;
    assume {:print "$track_local(24,1,0):", $t0} $t0 == $t0;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume {:print "$at(33,3702,3735)"} true;

    // assume Identical($t9, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume ($t9 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t9) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    if ($t9) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
L8:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t10)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    assume {:print "$at(33,3702,3735)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
    goto L6;

    // label L7 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33
L7:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:94:9+33

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume {:print "$at(33,3745,3790)"} true;

    // assume Identical($t12, Or(Or(Not(exists<Roles::RoleId>($t11)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume ($t12 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t11) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t12) goto L10 else goto L9 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    if ($t12) { goto L10; } else { goto L9; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
L10:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t11)), Eq(5, $t10)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t11)), 1), Eq(3, $t10))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t10))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t11) && $IsEqual'num'(5, $t10)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t11)), 1) && $IsEqual'num'(3, $t10))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t10)));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    assume {:print "$at(33,3745,3790)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
    goto L6;

    // label L9 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45
L9:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:95:9+45

    // $t13 := TransactionFee::is_coin_initialized<#0>() on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:16+31
    assume {:print "$at(33,3807,3838)"} true;
    call $t13 := $1_TransactionFee_is_coin_initialized'#0'();
    if ($abort_flag) {
        assume {:print "$at(33,3807,3838)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:71+16
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:49+39

    // trace_local[tmp#$2]($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$track_local(24,1,2):", $t15} $t15 == $t15;

    // trace_local[tmp#$1]($t13) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$track_local(24,1,1):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    assume {:print "$at(33,3800,3880)"} true;
    assume {:print "$track_abort(24,1):", $t15} $t15 == $t15;

    // $t10 := move($t15) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    $t10 := $t15;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:96:9+80
    goto L6;

    // label L0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume {:print "$at(33,3894,3917)"} true;
L0:

    // $t16 := opaque begin: XDX::is_xdx<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23

    // assume Identical($t17, And(Diem::spec_is_currency<#0>(), Not(Diem::spec_is_currency<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume ($t17 == ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // if ($t17) goto L12 else goto L11 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    if ($t17) { goto L12; } else { goto L11; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
L12:

    // assume And(And(Diem::spec_is_currency<#0>(), Not(Diem::spec_is_currency<XDX::XDX>())), Eq(5, $t10)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume (($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(5, $t10));

    // trace_abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume {:print "$at(33,3894,3917)"} true;
    assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    goto L6;

    // label L11 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
L11:

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume $IsValid'bool'($t16);

    // assume Eq<bool>($t16, XDX::spec_is_xdx<#0>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23
    assume $IsEqual'bool'($t16, $1_XDX_spec_is_xdx'#0'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_Diem_CurrencyInfo'#0'_$memory));

    // $t16 := opaque end: XDX::is_xdx<#0>() at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:13+23

    // if ($t16) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
    if ($t16) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:97:9+766
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    assume {:print "$at(33,4078,4123)"} true;
L2:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45

    // $t18 := 0 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:41+16
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::invalid_state($t18) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39
    assume $IsEqual'u64'($t19, 1);

    // $t19 := opaque end: Errors::invalid_state($t18) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:19+39

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    assume {:print "$at(33,4078,4123)"} true;
    assume {:print "$track_abort(24,1):", $t19} $t19 == $t19;

    // $t10 := move($t19) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    $t10 := $t19;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:100:13+45
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:68+19
    assume {:print "$at(33,4236,4255)"} true;
L4:

    // $t20 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:68+19
    $t20 := 186537453;
    assume $IsValid'address'($t20);

    // $t21 := borrow_global<TransactionFee::TransactionFee<#0>>($t20) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:24+17
    if (!$ResourceExists($1_TransactionFee_TransactionFee'#0'_$memory, $t20)) {
        call $ExecFailureAbort();
    } else {
        $t21 := $Mutation($Global($t20), EmptyVec(), $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $t20));
    }
    if ($abort_flag) {
        assume {:print "$at(33,4192,4209)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[fees]($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:103:17+4
    $temp_0'$1_TransactionFee_TransactionFee'#0'' := $Dereference($t21);
    assume {:print "$track_local(24,1,5):", $temp_0'$1_TransactionFee_TransactionFee'#0''} $temp_0'$1_TransactionFee_TransactionFee'#0'' == $temp_0'$1_TransactionFee_TransactionFee'#0'';

    // $t22 := borrow_field<TransactionFee::TransactionFee<#0>>.balance($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:43+17
    assume {:print "$at(33,4300,4317)"} true;
    $t22 := $ChildMutation($t21, 0, $balance#$1_TransactionFee_TransactionFee'#0'($Dereference($t21)));

    // $t23 := opaque begin: Diem::withdraw_all<#0>($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37

    // $t24 := read_ref($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    $t24 := $Dereference($t22);

    // havoc[mut]($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    havoc $temp_0'$1_Diem_Diem'#0'';
    $t22 := $UpdateMutation($t22, $temp_0'$1_Diem_Diem'#0'');
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t22));

    // assume WellFormed($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsValid'$1_Diem_Diem'#0''($Dereference($t22));

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsValid'$1_Diem_Diem'#0''($t23);

    // assume Eq<u64>(select Diem::Diem.value($t23), select Diem::Diem.value($t24)) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($t23), $value#$1_Diem_Diem'#0'($t24));

    // assume Eq<u64>(select Diem::Diem.value($t22), 0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    assume $IsEqual'u64'($value#$1_Diem_Diem'#0'($Dereference($t22)), 0);

    // $t23 := opaque end: Diem::withdraw_all<#0>($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37

    // write_back[Reference($t21).balance]($t22) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:24+37
    $t21 := $UpdateMutation($t21, $Update'$1_TransactionFee_TransactionFee'#0''_balance($Dereference($t21), $Dereference($t22)));

    // trace_local[coin]($t23) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:104:17+4
    assume {:print "$track_local(24,1,4):", $t23} $t23 == $t23;

    // $t25 := Diem::remove_burn_capability<#0>($t0) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:105:28+50
    assume {:print "$at(33,4347,4397)"} true;
    call $t25 := $1_Diem_remove_burn_capability'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(33,4347,4397)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // trace_local[burn_cap]($t25) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:105:17+8
    assume {:print "$track_local(24,1,3):", $t25} $t25 == $t25;

    // $t26 := borrow_field<TransactionFee::TransactionFee<#0>>.preburn($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:109:17+17
    assume {:print "$at(33,4485,4502)"} true;
    $t26 := $ChildMutation($t21, 1, $preburn#$1_TransactionFee_TransactionFee'#0'($Dereference($t21)));

    // $t27 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:110:17+19
    assume {:print "$at(33,4520,4539)"} true;
    $t27 := 186537453;
    assume $IsValid'address'($t27);

    // assume Identical($t28, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1076:9+42
    assume {:print "$at(11,51502,51544)"} true;
    assume ($t28 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t29, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t29 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t30, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t30 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t31, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t31 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t32, select Diem::CurrencyInfo.preburn_events($t30)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t32 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t30));

    // assume Identical($t33, pack Diem::PreburnEvent(select Diem::Diem.value($t23), $t31, $t27)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t33 == $1_Diem_PreburnEvent($value#$1_Diem_Diem'#0'($t23), $t31, $t27));

    // assume Identical($t34, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t34 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t35, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t35 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t36, select Diem::CurrencyInfo.burn_events($t34)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t36 == $burn_events#$1_Diem_CurrencyInfo'#0'($t34));

    // Diem::burn_now<#0>($t23, $t26, $t27, $t25) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    assume {:print "$at(33,4431,4580)"} true;
    call $t26 := $1_Diem_burn_now'#0'($t23, $t26, $t27, $t25);
    if ($abort_flag) {
        assume {:print "$at(33,4431,4580)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // write_back[Reference($t21).preburn]($t26) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    $t21 := $UpdateMutation($t21, $Update'$1_TransactionFee_TransactionFee'#0''_preburn($Dereference($t21), $Dereference($t26)));

    // write_back[TransactionFee::TransactionFee<#0>@]($t21) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:107:13+149
    $1_TransactionFee_TransactionFee'#0'_$memory := $ResourceUpdate($1_TransactionFee_TransactionFee'#0'_$memory, $GlobalLocationAddress($t21),
        $Dereference($t21));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // Diem::publish_burn_capability<#0>($t0, $t25) on_abort goto L6 with $t10 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:113:13+51
    assume {:print "$at(33,4594,4645)"} true;
    call $1_Diem_publish_burn_capability'#0'($t0, $t25);
    if ($abort_flag) {
        assume {:print "$at(33,4594,4645)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,1):", $t10} $t10 == $t10;
        goto L6;
    }

    // label L5 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    assume {:print "$at(33,4661,4662)"} true;
L5:

    // return () at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    return;

    // label L6 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
L6:

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:115:5+1
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun TransactionFee::is_coin_initialized<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+118
procedure {:inline 1} $1_TransactionFee_is_coin_initialized'$1_XUS_XUS'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:42+19
    assume {:print "$at(33,1752,1771)"} true;
    $t0 := 186537453;
    assume $IsValid'address'($t0);

    // $t1 := exists<TransactionFee::TransactionFee<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+6
    $t1 := $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+53
    assume {:print "$track_return(24,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    assume {:print "$at(33,1777,1778)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    $ret0 := $t1;
    return;

}

// fun TransactionFee::is_coin_initialized<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+118
procedure {:inline 1} $1_TransactionFee_is_coin_initialized'$1_XDX_XDX'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:42+19
    assume {:print "$at(33,1752,1771)"} true;
    $t0 := 186537453;
    assume $IsValid'address'($t0);

    // $t1 := exists<TransactionFee::TransactionFee<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+6
    $t1 := $ResourceExists($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+53
    assume {:print "$track_return(24,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    assume {:print "$at(33,1777,1778)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    $ret0 := $t1;
    return;

}

// fun TransactionFee::is_coin_initialized<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+118
procedure {:inline 1} $1_TransactionFee_is_coin_initialized'#0'() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:42+19
    assume {:print "$at(33,1752,1771)"} true;
    $t0 := 186537453;
    assume $IsValid'address'($t0);

    // $t1 := exists<TransactionFee::TransactionFee<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+6
    $t1 := $ResourceExists($1_TransactionFee_TransactionFee'#0'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:45:9+53
    assume {:print "$track_return(24,3,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    assume {:print "$at(33,1777,1778)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:46:5+1
    $ret0 := $t1;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:121:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:254:10+94
function {:inline} $1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:270:10+120
function {:inline} $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:299:10+183
function {:inline} $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr)) then ($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else (addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:337:10+205
function {:inline} $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:373:10+104
function {:inline} $1_DualAttestation_spec_dual_attestation_message(payer: int, metadata: Vec (int), deposit_value: int): Vec (int);
axiom (forall payer: int, metadata: Vec (int), deposit_value: int ::
(var $$res := $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value);
$IsValid'vec'u8''($$res)));

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:425:10+589
function {:inline} $1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, payer: int, payee: int, metadata_signature: Vec (int), metadata: Vec (int), deposit_value: int): bool {
    (var payee_compliance_key := $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)); (($IsEqual'num'(LenVec(metadata_signature), 64) && !$1_Vector_$is_empty'u8'(payee_compliance_key)) && $1_Signature_$ed25519_verify(metadata_signature, payee_compliance_key, $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:545:9+78
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:550:9+104
function {:inline} $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): int {
    $micro_xdx_limit#$1_DualAttestation_Limit($ResourceValue($1_DualAttestation_Limit_$memory, 173345816))
}

// struct DualAttestation::BaseUrlRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:57:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsEqual'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s1), $new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s2))
    && $IsEqual'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s1), $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s2))}

// struct DualAttestation::ComplianceKeyRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:49:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsEqual'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s1), $new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s2))
    && $IsEqual'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s1), $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s2))}

// struct DualAttestation::Credential at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:19:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    $IsEqual'vec'u8''($human_name#$1_DualAttestation_Credential(s1), $human_name#$1_DualAttestation_Credential(s2))
    && $IsEqual'vec'u8''($base_url#$1_DualAttestation_Credential(s1), $base_url#$1_DualAttestation_Credential(s2))
    && $IsEqual'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s1), $compliance_public_key#$1_DualAttestation_Credential(s2))
    && $IsEqual'u64'($expiration_date#$1_DualAttestation_Credential(s1), $expiration_date#$1_DualAttestation_Credential(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s1), $compliance_key_rotation_events#$1_DualAttestation_Credential(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s1), $base_url_rotation_events#$1_DualAttestation_Credential(s2))}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:44:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// fun DualAttestation::set_microdiem_limit [baseline] at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:518:5+303
procedure {:inline 1} $1_DualAttestation_set_microdiem_limit(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation ($1_DualAttestation_Limit);
    var $t14: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t14));

    // bytecode translation starts here
    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:518:5+1
    assume {:print "$at(22,23097,23098)"} true;
    assume {:print "$track_local(25,14,0):", $t0} $t0 == $t0;

    // trace_local[micro_xdx_limit]($t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:518:5+1
    assume {:print "$track_local(25,14,1):", $t1} $t1 == $t1;

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
    assume {:print "$at(22,23196,23241)"} true;

    // assume Identical($t6, Or(Or(Not(exists<Roles::RoleId>($t5)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
    assume ($t6 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t5) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t6) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
    if ($t6) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
L5:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t5)), Eq(5, $t7)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t5)), 1), Eq(3, $t7))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t7))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t5) && $IsEqual'num'(5, $t7)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t5)), 1) && $IsEqual'num'(3, $t7))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t7)));

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
    assume {:print "$at(22,23196,23241)"} true;
    assume {:print "$track_abort(25,14):", $t7} $t7 == $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45
L4:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:519:9+45

    // $t8 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:30+9
    assume {:print "$at(22,23272,23281)"} true;
    $t8 := 173345816;
    assume $IsValid'address'($t8);

    // $t9 := exists<DualAttestation::Limit>($t8) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:16+6
    $t9 := $ResourceExists($1_DualAttestation_Limit_$memory, $t8);

    // $t10 := 1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:64+6
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // $t11 := opaque begin: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:42+29

    // assume WellFormed($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:42+29
    assume $IsValid'u64'($t11);

    // assume Eq<u64>($t11, 5) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:42+29
    assume $IsEqual'u64'($t11, 5);

    // $t11 := opaque end: Errors::not_published($t10) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:42+29

    // trace_local[tmp#$3]($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:9+63
    assume {:print "$track_local(25,14,3):", $t11} $t11 == $t11;

    // trace_local[tmp#$2]($t9) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:9+63
    assume {:print "$track_local(25,14,2):", $t9} $t9 == $t9;

    // if ($t9) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:9+63
    if ($t9) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:9+63
L1:

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:9+63
    assume {:print "$at(22,23251,23314)"} true;
    assume {:print "$track_abort(25,14):", $t11} $t11 == $t11;

    // $t7 := move($t11) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:9+63
    $t7 := $t11;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:520:9+63
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:521:63+15
    assume {:print "$at(22,23378,23393)"} true;
L0:

    // $t12 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:521:34+9
    $t12 := 173345816;
    assume $IsValid'address'($t12);

    // $t13 := borrow_global<DualAttestation::Limit>($t12) on_abort goto L3 with $t7 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:521:9+17
    if (!$ResourceExists($1_DualAttestation_Limit_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_DualAttestation_Limit_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(22,23324,23341)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,14):", $t7} $t7 == $t7;
        goto L3;
    }

    // $t14 := borrow_field<DualAttestation::Limit>.micro_xdx_limit($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:521:9+51
    $t14 := $ChildMutation($t13, 0, $micro_xdx_limit#$1_DualAttestation_Limit($Dereference($t13)));

    // write_ref($t14, $t1) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:521:9+69
    $t14 := $UpdateMutation($t14, $t1);

    // write_back[Reference($t13).micro_xdx_limit]($t14) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:521:9+69
    $t13 := $UpdateMutation($t13, $Update'$1_DualAttestation_Limit'_micro_xdx_limit($Dereference($t13), $Dereference($t14)));

    // write_back[DualAttestation::Limit@]($t13) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:521:9+69
    $1_DualAttestation_Limit_$memory := $ResourceUpdate($1_DualAttestation_Limit_$memory, $GlobalLocationAddress($t13),
        $Dereference($t13));

    // label L2 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:522:5+1
    assume {:print "$at(22,23399,23400)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:522:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:522:5+1
L3:

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:522:5+1
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:24:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsEqual'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s1), $script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s2))
    && $IsEqual'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s1), $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s2))}

// struct DesignatedDealer::Dealer at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:14:5+130
type {:datatype} $1_DesignatedDealer_Dealer;
function {:constructor} $1_DesignatedDealer_Dealer($mint_event_handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer;
function {:inline} $Update'$1_DesignatedDealer_Dealer'_mint_event_handle(s: $1_DesignatedDealer_Dealer, x: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer {
    $1_DesignatedDealer_Dealer(x)
}
function $IsValid'$1_DesignatedDealer_Dealer'(s: $1_DesignatedDealer_Dealer): bool {
    $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_Dealer'(s1: $1_DesignatedDealer_Dealer, s2: $1_DesignatedDealer_Dealer): bool {
    $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s1), $mint_event_handle#$1_DesignatedDealer_Dealer(s2))}
var $1_DesignatedDealer_Dealer_$memory: $Memory $1_DesignatedDealer_Dealer;

// struct DesignatedDealer::ReceivedMintEvent at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:38:5+286
type {:datatype} $1_DesignatedDealer_ReceivedMintEvent;
function {:constructor} $1_DesignatedDealer_ReceivedMintEvent($currency_code: Vec (int), $destination_address: int, $amount: int): $1_DesignatedDealer_ReceivedMintEvent;
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_currency_code(s: $1_DesignatedDealer_ReceivedMintEvent, x: Vec (int)): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent(x, $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_destination_address(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), x, $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_amount(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), x)
}
function $IsValid'$1_DesignatedDealer_ReceivedMintEvent'(s: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(s1: $1_DesignatedDealer_ReceivedMintEvent, s2: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsEqual'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s1), $currency_code#$1_DesignatedDealer_ReceivedMintEvent(s2))
    && $IsEqual'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s1), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s2))
    && $IsEqual'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s1), $amount#$1_DesignatedDealer_ReceivedMintEvent(s2))}

// struct DesignatedDealer::TierInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:28:5+280
type {:datatype} $1_DesignatedDealer_TierInfo'$1_XUS_XUS';
function {:constructor} $1_DesignatedDealer_TierInfo'$1_XUS_XUS'($window_start: int, $window_inflow: int, $tiers: Vec (int)): $1_DesignatedDealer_TierInfo'$1_XUS_XUS';
function {:inline} $Update'$1_DesignatedDealer_TierInfo'$1_XUS_XUS''_window_start(s: $1_DesignatedDealer_TierInfo'$1_XUS_XUS', x: int): $1_DesignatedDealer_TierInfo'$1_XUS_XUS' {
    $1_DesignatedDealer_TierInfo'$1_XUS_XUS'(x, $window_inflow#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s), $tiers#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'$1_XUS_XUS''_window_inflow(s: $1_DesignatedDealer_TierInfo'$1_XUS_XUS', x: int): $1_DesignatedDealer_TierInfo'$1_XUS_XUS' {
    $1_DesignatedDealer_TierInfo'$1_XUS_XUS'($window_start#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s), x, $tiers#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'$1_XUS_XUS''_tiers(s: $1_DesignatedDealer_TierInfo'$1_XUS_XUS', x: Vec (int)): $1_DesignatedDealer_TierInfo'$1_XUS_XUS' {
    $1_DesignatedDealer_TierInfo'$1_XUS_XUS'($window_start#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s), $window_inflow#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_DesignatedDealer_TierInfo'$1_XUS_XUS''(s: $1_DesignatedDealer_TierInfo'$1_XUS_XUS'): bool {
    $IsValid'u64'($window_start#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_inflow#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u64''($tiers#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_TierInfo'$1_XUS_XUS''(s1: $1_DesignatedDealer_TierInfo'$1_XUS_XUS', s2: $1_DesignatedDealer_TierInfo'$1_XUS_XUS'): bool {
    $IsEqual'u64'($window_start#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s1), $window_start#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s2))
    && $IsEqual'u64'($window_inflow#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s1), $window_inflow#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s2))
    && $IsEqual'vec'u64''($tiers#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s1), $tiers#$1_DesignatedDealer_TierInfo'$1_XUS_XUS'(s2))}
var $1_DesignatedDealer_TierInfo'$1_XUS_XUS'_$memory: $Memory $1_DesignatedDealer_TierInfo'$1_XUS_XUS';

// struct DesignatedDealer::TierInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:28:5+280
type {:datatype} $1_DesignatedDealer_TierInfo'$1_XDX_XDX';
function {:constructor} $1_DesignatedDealer_TierInfo'$1_XDX_XDX'($window_start: int, $window_inflow: int, $tiers: Vec (int)): $1_DesignatedDealer_TierInfo'$1_XDX_XDX';
function {:inline} $Update'$1_DesignatedDealer_TierInfo'$1_XDX_XDX''_window_start(s: $1_DesignatedDealer_TierInfo'$1_XDX_XDX', x: int): $1_DesignatedDealer_TierInfo'$1_XDX_XDX' {
    $1_DesignatedDealer_TierInfo'$1_XDX_XDX'(x, $window_inflow#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s), $tiers#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'$1_XDX_XDX''_window_inflow(s: $1_DesignatedDealer_TierInfo'$1_XDX_XDX', x: int): $1_DesignatedDealer_TierInfo'$1_XDX_XDX' {
    $1_DesignatedDealer_TierInfo'$1_XDX_XDX'($window_start#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s), x, $tiers#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'$1_XDX_XDX''_tiers(s: $1_DesignatedDealer_TierInfo'$1_XDX_XDX', x: Vec (int)): $1_DesignatedDealer_TierInfo'$1_XDX_XDX' {
    $1_DesignatedDealer_TierInfo'$1_XDX_XDX'($window_start#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s), $window_inflow#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_DesignatedDealer_TierInfo'$1_XDX_XDX''(s: $1_DesignatedDealer_TierInfo'$1_XDX_XDX'): bool {
    $IsValid'u64'($window_start#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_inflow#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u64''($tiers#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_TierInfo'$1_XDX_XDX''(s1: $1_DesignatedDealer_TierInfo'$1_XDX_XDX', s2: $1_DesignatedDealer_TierInfo'$1_XDX_XDX'): bool {
    $IsEqual'u64'($window_start#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s1), $window_start#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s2))
    && $IsEqual'u64'($window_inflow#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s1), $window_inflow#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s2))
    && $IsEqual'vec'u64''($tiers#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s1), $tiers#$1_DesignatedDealer_TierInfo'$1_XDX_XDX'(s2))}
var $1_DesignatedDealer_TierInfo'$1_XDX_XDX'_$memory: $Memory $1_DesignatedDealer_TierInfo'$1_XDX_XDX';

// struct DesignatedDealer::TierInfo<#0> at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:28:5+280
type {:datatype} $1_DesignatedDealer_TierInfo'#0';
function {:constructor} $1_DesignatedDealer_TierInfo'#0'($window_start: int, $window_inflow: int, $tiers: Vec (int)): $1_DesignatedDealer_TierInfo'#0';
function {:inline} $Update'$1_DesignatedDealer_TierInfo'#0''_window_start(s: $1_DesignatedDealer_TierInfo'#0', x: int): $1_DesignatedDealer_TierInfo'#0' {
    $1_DesignatedDealer_TierInfo'#0'(x, $window_inflow#$1_DesignatedDealer_TierInfo'#0'(s), $tiers#$1_DesignatedDealer_TierInfo'#0'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'#0''_window_inflow(s: $1_DesignatedDealer_TierInfo'#0', x: int): $1_DesignatedDealer_TierInfo'#0' {
    $1_DesignatedDealer_TierInfo'#0'($window_start#$1_DesignatedDealer_TierInfo'#0'(s), x, $tiers#$1_DesignatedDealer_TierInfo'#0'(s))
}
function {:inline} $Update'$1_DesignatedDealer_TierInfo'#0''_tiers(s: $1_DesignatedDealer_TierInfo'#0', x: Vec (int)): $1_DesignatedDealer_TierInfo'#0' {
    $1_DesignatedDealer_TierInfo'#0'($window_start#$1_DesignatedDealer_TierInfo'#0'(s), $window_inflow#$1_DesignatedDealer_TierInfo'#0'(s), x)
}
function $IsValid'$1_DesignatedDealer_TierInfo'#0''(s: $1_DesignatedDealer_TierInfo'#0'): bool {
    $IsValid'u64'($window_start#$1_DesignatedDealer_TierInfo'#0'(s))
      && $IsValid'u64'($window_inflow#$1_DesignatedDealer_TierInfo'#0'(s))
      && $IsValid'vec'u64''($tiers#$1_DesignatedDealer_TierInfo'#0'(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_TierInfo'#0''(s1: $1_DesignatedDealer_TierInfo'#0', s2: $1_DesignatedDealer_TierInfo'#0'): bool {
    $IsEqual'u64'($window_start#$1_DesignatedDealer_TierInfo'#0'(s1), $window_start#$1_DesignatedDealer_TierInfo'#0'(s2))
    && $IsEqual'u64'($window_inflow#$1_DesignatedDealer_TierInfo'#0'(s1), $window_inflow#$1_DesignatedDealer_TierInfo'#0'(s2))
    && $IsEqual'vec'u64''($tiers#$1_DesignatedDealer_TierInfo'#0'(s1), $tiers#$1_DesignatedDealer_TierInfo'#0'(s2))}
var $1_DesignatedDealer_TierInfo'#0'_$memory: $Memory $1_DesignatedDealer_TierInfo'#0';

// struct ChainId::ChainId at /home/ying/diem/language/diem-framework/modules/ChainId.move:10:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:160:5+163
function {:inline} $1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:227:9+136
function {:inline} $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:231:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:22:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:16:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s1), $freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s2))
    && $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s1), $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s2))}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:11:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:30:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// fun AccountFreezing::freeze_account [baseline] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:81:5+977
procedure {:inline 1} $1_AccountFreezing_freeze_account(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    var $t11: $1_AccountFreezing_FreezeAccountEvent;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: $Mutation ($1_AccountFreezing_FreezingBit);
    var $t29: $Mutation (bool);
    var $t30: int;
    var $t31: int;
    var $t32: $Mutation ($1_AccountFreezing_FreezeEventsHolder);
    var $t33: $Mutation ($1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent');
    var $t34: $1_AccountFreezing_FreezeAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t28));
    assume IsEmptyVec(p#$Mutation($t29));
    assume IsEmptyVec(p#$Mutation($t32));
    assume IsEmptyVec(p#$Mutation($t33));

    // bytecode translation starts here
    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, select AccountFreezing::FreezeEventsHolder.freeze_event_handle(global<AccountFreezing::FreezeEventsHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:114:9+71
    assume {:print "$at(4,4640,4711)"} true;
    assume ($t10 == $freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816)));

    // assume Identical($t11, pack AccountFreezing::FreezeAccountEvent(Signer::spec_address_of($t0), $t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:115:9+133
    assume {:print "$at(4,4720,4853)"} true;
    assume ($t11 == $1_AccountFreezing_FreezeAccountEvent($1_Signer_spec_address_of($t0), $t1));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:81:5+1
    assume {:print "$at(4,3080,3081)"} true;
    assume {:print "$track_local(31,3,0):", $t0} $t0 == $t0;

    // trace_local[frozen_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:81:5+1
    assume {:print "$track_local(31,3,1):", $t1} $t1 == $t1;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
    assume {:print "$at(4,3227,3260)"} true;

    // assume Identical($t12, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
    assume ($t12 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t12) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
    if ($t12) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
L9:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t13)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t13));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
    assume {:print "$at(4,3227,3260)"} true;
    assume {:print "$track_abort(31,3):", $t13} $t13 == $t13;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33
L8:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:86:9+33

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
    assume {:print "$at(4,3270,3312)"} true;

    // assume Identical($t15, Or(Or(Not(exists<Roles::RoleId>($t14)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
    assume ($t15 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t14) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t15) goto L11 else goto L10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
    if ($t15) { goto L11; } else { goto L10; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
L11:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t14)), Eq(5, $t13)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t14)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t13))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t14) && $IsEqual'num'(5, $t13)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t14)), 1) && $IsEqual'num'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
    assume {:print "$at(4,3270,3312)"} true;
    assume {:print "$track_abort(31,3):", $t13} $t13 == $t13;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
    goto L7;

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42
L10:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:87:9+42

    // $t16 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:34+9
    assume {:print "$at(4,3404,3413)"} true;
    $t16 := 173345816;
    assume $IsValid'address'($t16);

    // $t17 := !=($t1, $t16) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:31+2
    $t17 := !$IsEqual'address'($t1, $t16);

    // $t18 := 3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:70+24
    $t18 := 3;
    assume $IsValid'u64'($t18);

    // $t19 := opaque begin: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:45+50

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:45+50
    assume $IsValid'u64'($t19);

    // assume Eq<u64>($t19, 7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:45+50
    assume $IsEqual'u64'($t19, 7);

    // $t19 := opaque end: Errors::invalid_argument($t18) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:45+50

    // trace_local[tmp#$3]($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87
    assume {:print "$track_local(31,3,3):", $t19} $t19 == $t19;

    // trace_local[tmp#$2]($t17) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87
    assume {:print "$track_local(31,3,2):", $t17} $t17 == $t17;

    // if ($t17) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87
    if ($t17) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87
    assume {:print "$at(4,3379,3466)"} true;
    assume {:print "$track_abort(31,3):", $t19} $t19 == $t19;

    // $t13 := move($t19) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87
    $t13 := $t19;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:89:9+87
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:16+14
    assume {:print "$at(4,3483,3497)"} true;
L0:

    // $t20 := 0xb1e55ed at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:34+19
    $t20 := 186537453;
    assume $IsValid'address'($t20);

    // $t21 := !=($t1, $t20) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:31+2
    $t21 := !$IsEqual'address'($t1, $t20);

    // $t22 := 4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:80+17
    $t22 := 4;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::invalid_argument($t22) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:55+43

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:55+43
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 7) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:55+43
    assume $IsEqual'u64'($t23, 7);

    // $t23 := opaque end: Errors::invalid_argument($t22) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:55+43

    // trace_local[tmp#$5]($t23) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90
    assume {:print "$track_local(31,3,5):", $t23} $t23 == $t23;

    // trace_local[tmp#$4]($t21) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90
    assume {:print "$track_local(31,3,4):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90
L3:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90
    assume {:print "$at(4,3476,3566)"} true;
    assume {:print "$track_abort(31,3):", $t23} $t23 == $t23;

    // $t13 := move($t23) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90
    $t13 := $t23;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:90:9+90
    goto L7;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:36+14
    assume {:print "$at(4,3603,3617)"} true;
L2:

    // $t24 := exists<AccountFreezing::FreezingBit>($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:16+6
    $t24 := $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1);

    // $t25 := 2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:75+13
    $t25 := 2;
    assume $IsValid'u64'($t25);

    // $t26 := opaque begin: Errors::not_published($t25) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:53+36

    // assume WellFormed($t26) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:53+36
    assume $IsValid'u64'($t26);

    // assume Eq<u64>($t26, 5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:53+36
    assume $IsEqual'u64'($t26, 5);

    // $t26 := opaque end: Errors::not_published($t25) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:53+36

    // trace_local[tmp#$7]($t26) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81
    assume {:print "$track_local(31,3,7):", $t26} $t26 == $t26;

    // trace_local[tmp#$6]($t24) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81
    assume {:print "$track_local(31,3,6):", $t24} $t24 == $t24;

    // if ($t24) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81
    if ($t24) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81
L5:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81

    // trace_abort($t26) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81
    assume {:print "$at(4,3576,3657)"} true;
    assume {:print "$track_abort(31,3):", $t26} $t26 == $t26;

    // $t13 := move($t26) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81
    $t13 := $t26;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:91:9+81
    goto L7;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:68+4
    assume {:print "$at(4,3726,3730)"} true;
L4:

    // $t27 := true at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:68+4
    $t27 := true;
    assume $IsValid'bool'($t27);

    // $t28 := borrow_global<AccountFreezing::FreezingBit>($t1) on_abort goto L7 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+17
    if (!$ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t28 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(4,3667,3684)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(31,3):", $t13} $t13 == $t13;
        goto L7;
    }

    // $t29 := borrow_field<AccountFreezing::FreezingBit>.is_frozen($t28) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+56
    $t29 := $ChildMutation($t28, 0, $is_frozen#$1_AccountFreezing_FreezingBit($Dereference($t28)));

    // write_ref($t29, $t27) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+63
    $t29 := $UpdateMutation($t29, $t27);

    // write_back[Reference($t28).is_frozen]($t29) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+63
    $t28 := $UpdateMutation($t28, $Update'$1_AccountFreezing_FreezingBit'_is_frozen($Dereference($t28), $Dereference($t29)));

    // write_back[AccountFreezing::FreezingBit@]($t28) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:92:9+63
    $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $GlobalLocationAddress($t28),
        $Dereference($t28));

    // $t30 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:33+27
    assume {:print "$at(4,3764,3791)"} true;

    // assume WellFormed($t30) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:33+27
    assume $IsValid'address'($t30);

    // assume Eq<address>($t30, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:33+27
    assume $IsEqual'address'($t30, $1_Signer_spec_address_of($t0));

    // $t30 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:33+27

    // trace_local[initiator_address]($t30) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:93:13+17
    assume {:print "$track_local(31,3,8):", $t30} $t30 == $t30;

    // $t31 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:95:56+9
    assume {:print "$at(4,3895,3904)"} true;
    $t31 := 173345816;
    assume $IsValid'address'($t31);

    // $t32 := borrow_global<AccountFreezing::FreezeEventsHolder>($t31) on_abort goto L7 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:95:18+17
    if (!$ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t31)) {
        call $ExecFailureAbort();
    } else {
        $t32 := $Mutation($Global($t31), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $t31));
    }
    if ($abort_flag) {
        assume {:print "$at(4,3857,3874)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(31,3):", $t13} $t13 == $t13;
        goto L7;
    }

    // $t33 := borrow_field<AccountFreezing::FreezeEventsHolder>.freeze_event_handle($t32) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:95:13+73
    $t33 := $ChildMutation($t32, 0, $freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($Dereference($t32)));

    // $t34 := pack AccountFreezing::FreezeAccountEvent($t30, $t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:96:13+100
    assume {:print "$at(4,3939,4039)"} true;
    $t34 := $1_AccountFreezing_FreezeAccountEvent($t30, $t1);

    // Event::emit_event<AccountFreezing::FreezeAccountEvent>($t33, $t34) on_abort goto L7 with $t13 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:94:9+249
    assume {:print "$at(4,3801,4050)"} true;
    call $t33 := $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'($t33, $t34);
    if ($abort_flag) {
        assume {:print "$at(4,3801,4050)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(31,3):", $t13} $t13 == $t13;
        goto L7;
    }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:101:5+1
    assume {:print "$at(4,4056,4057)"} true;
L6:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:101:5+1
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:101:5+1
L7:

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:101:5+1
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun AccountFreezing::unfreeze_account [baseline] at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:123:5+740
procedure {:inline 1} $1_AccountFreezing_unfreeze_account(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    var $t7: $1_AccountFreezing_UnfreezeAccountEvent;
    var $t8: bool;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: $Mutation ($1_AccountFreezing_FreezingBit);
    var $t17: $Mutation (bool);
    var $t18: int;
    var $t19: int;
    var $t20: $Mutation ($1_AccountFreezing_FreezeEventsHolder);
    var $t21: $Mutation ($1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent');
    var $t22: $1_AccountFreezing_UnfreezeAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t16));
    assume IsEmptyVec(p#$Mutation($t17));
    assume IsEmptyVec(p#$Mutation($t20));
    assume IsEmptyVec(p#$Mutation($t21));

    // bytecode translation starts here
    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select AccountFreezing::FreezeEventsHolder.unfreeze_event_handle(global<AccountFreezing::FreezeEventsHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:151:9+73
    assume {:print "$at(4,6106,6179)"} true;
    assume ($t6 == $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816)));

    // assume Identical($t7, pack AccountFreezing::UnfreezeAccountEvent(Signer::spec_address_of($t0), $t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:152:9+137
    assume {:print "$at(4,6188,6325)"} true;
    assume ($t7 == $1_AccountFreezing_UnfreezeAccountEvent($1_Signer_spec_address_of($t0), $t1));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:123:5+1
    assume {:print "$at(4,4934,4935)"} true;
    assume {:print "$track_local(31,5,0):", $t0} $t0 == $t0;

    // trace_local[unfrozen_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:123:5+1
    assume {:print "$track_local(31,5,1):", $t1} $t1 == $t1;

    // opaque begin: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
    assume {:print "$at(4,5085,5118)"} true;

    // assume Identical($t8, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
    assume ($t8 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t8) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
    if ($t8) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
L5:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t9)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t9));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
    assume {:print "$at(4,5085,5118)"} true;
    assume {:print "$track_abort(31,5):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33
L4:

    // opaque end: DiemTimestamp::assert_operating() at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:128:9+33

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
    assume {:print "$at(4,5128,5170)"} true;

    // assume Identical($t11, Or(Or(Not(exists<Roles::RoleId>($t10)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
    assume ($t11 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t10) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t11) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
    if ($t11) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
L7:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
    assume {:print "$at(4,5128,5170)"} true;
    assume {:print "$track_abort(31,5):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
    goto L3;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42
L6:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:129:9+42

    // $t12 := exists<AccountFreezing::FreezingBit>($t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:16+6
    assume {:print "$at(4,5187,5193)"} true;
    $t12 := $ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1);

    // $t13 := 2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:77+13
    $t13 := 2;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:55+36

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:55+36
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:55+36
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:55+36

    // trace_local[tmp#$3]($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83
    assume {:print "$track_local(31,5,3):", $t14} $t14 == $t14;

    // trace_local[tmp#$2]($t12) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83
    assume {:print "$track_local(31,5,2):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83
    assume {:print "$at(4,5180,5263)"} true;
    assume {:print "$track_abort(31,5):", $t14} $t14 == $t14;

    // $t9 := move($t14) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83
    $t9 := $t14;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:130:9+83
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:70+5
    assume {:print "$at(4,5334,5339)"} true;
L0:

    // $t15 := false at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:70+5
    $t15 := false;
    assume $IsValid'bool'($t15);

    // $t16 := borrow_global<AccountFreezing::FreezingBit>($t1) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+17
    if (!$ResourceExists($1_AccountFreezing_FreezingBit_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(4,5273,5290)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(31,5):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t17 := borrow_field<AccountFreezing::FreezingBit>.is_frozen($t16) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+58
    $t17 := $ChildMutation($t16, 0, $is_frozen#$1_AccountFreezing_FreezingBit($Dereference($t16)));

    // write_ref($t17, $t15) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+66
    $t17 := $UpdateMutation($t17, $t15);

    // write_back[Reference($t16).is_frozen]($t17) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+66
    $t16 := $UpdateMutation($t16, $Update'$1_AccountFreezing_FreezingBit'_is_frozen($Dereference($t16), $Dereference($t17)));

    // write_back[AccountFreezing::FreezingBit@]($t16) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:131:9+66
    $1_AccountFreezing_FreezingBit_$memory := $ResourceUpdate($1_AccountFreezing_FreezingBit_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // $t18 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:33+27
    assume {:print "$at(4,5373,5400)"} true;

    // assume WellFormed($t18) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:33+27
    assume $IsValid'address'($t18);

    // assume Eq<address>($t18, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:33+27
    assume $IsEqual'address'($t18, $1_Signer_spec_address_of($t0));

    // $t18 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:33+27

    // trace_local[initiator_address]($t18) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:132:13+17
    assume {:print "$track_local(31,5,4):", $t18} $t18 == $t18;

    // $t19 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:134:56+9
    assume {:print "$at(4,5506,5515)"} true;
    $t19 := 173345816;
    assume $IsValid'address'($t19);

    // $t20 := borrow_global<AccountFreezing::FreezeEventsHolder>($t19) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:134:18+17
    if (!$ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, $t19)) {
        call $ExecFailureAbort();
    } else {
        $t20 := $Mutation($Global($t19), EmptyVec(), $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $t19));
    }
    if ($abort_flag) {
        assume {:print "$at(4,5468,5485)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(31,5):", $t9} $t9 == $t9;
        goto L3;
    }

    // $t21 := borrow_field<AccountFreezing::FreezeEventsHolder>.unfreeze_event_handle($t20) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:134:13+75
    $t21 := $ChildMutation($t20, 1, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($Dereference($t20)));

    // $t22 := pack AccountFreezing::UnfreezeAccountEvent($t18, $t1) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:135:13+104
    assume {:print "$at(4,5552,5656)"} true;
    $t22 := $1_AccountFreezing_UnfreezeAccountEvent($t18, $t1);

    // Event::emit_event<AccountFreezing::UnfreezeAccountEvent>($t21, $t22) on_abort goto L3 with $t9 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:133:9+257
    assume {:print "$at(4,5410,5667)"} true;
    call $t21 := $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(4,5410,5667)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(31,5):", $t9} $t9 == $t9;
        goto L3;
    }

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:140:5+1
    assume {:print "$at(4,5673,5674)"} true;
L2:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:140:5+1
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:140:5+1
L3:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:140:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS', addr: int): int {
    $1_DiemAccount_$balance_for'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX', addr: int): int {
    $1_DiemAccount_$balance_for'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0', addr: int): int {
    $1_DiemAccount_$balance_for'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'$1_XUS_XUS'(balance: $1_DiemAccount_Balance'$1_XUS_XUS'): int {
    $1_Diem_$value'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'$1_XDX_XDX'(balance: $1_DiemAccount_Balance'$1_XDX_XDX'): int {
    $1_Diem_$value'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'#0'(balance: $1_DiemAccount_Balance'#0'): int {
    $1_Diem_$value'#0'($coin#$1_DiemAccount_Balance'#0'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1617:5+247
function {:inline} $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1624:5+239
function {:inline} $1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1641:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2470:9+155
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2475:9+145
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_KeyRotationCapability {
    $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2480:9+129
function {:inline} $1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2486:9+183
function {:inline} $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_KeyRotationCapability($1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2492:9+114
function {:inline} $1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability): bool {
    $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2497:9+144
function {:inline} $1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2502:9+134
function {:inline} $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_WithdrawCapability {
    $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2507:9+121
function {:inline} $1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2512:9+171
function {:inline} $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_WithdrawCapability($1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2518:9+171
function {:inline} $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) && $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2526:10+208
function {:inline} $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, sender: $signer): bool {
    (var addr := $1_Signer_spec_address_of(sender); (($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)) && !$1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct DiemAccount::DiemAccount at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:37:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s1), $authentication_key#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s1), $withdraw_capability#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s1), $key_rotation_capability#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s1), $received_events#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s1), $sent_events#$1_DiemAccount_DiemAccount(s2))
    && $IsEqual'u64'($sequence_number#$1_DiemAccount_DiemAccount(s1), $sequence_number#$1_DiemAccount_DiemAccount(s2))}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:94:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s1), $limits_cap#$1_DiemAccount_AccountOperationsCapability(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s1), $creation_events#$1_DiemAccount_AccountOperationsCapability(s2))}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:130:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::Balance<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XUS_XUS';
function {:constructor} $1_DiemAccount_Balance'$1_XUS_XUS'($coin: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XUS_XUS''_coin(s: $1_DiemAccount_Balance'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS' {
    $1_DiemAccount_Balance'$1_XUS_XUS'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''(s: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''(s1: $1_DiemAccount_Balance'$1_XUS_XUS', s2: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';

// struct DiemAccount::Balance<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XDX_XDX';
function {:constructor} $1_DiemAccount_Balance'$1_XDX_XDX'($coin: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XDX_XDX''_coin(s: $1_DiemAccount_Balance'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX' {
    $1_DiemAccount_Balance'$1_XDX_XDX'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''(s: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''(s1: $1_DiemAccount_Balance'$1_XDX_XDX', s2: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';

// struct DiemAccount::Balance<#0> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'#0';
function {:constructor} $1_DiemAccount_Balance'#0'($coin: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0';
function {:inline} $Update'$1_DiemAccount_Balance'#0''_coin(s: $1_DiemAccount_Balance'#0', x: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0' {
    $1_DiemAccount_Balance'#0'(x)
}
function $IsValid'$1_DiemAccount_Balance'#0''(s: $1_DiemAccount_Balance'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($coin#$1_DiemAccount_Balance'#0'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'#0''(s1: $1_DiemAccount_Balance'#0', s2: $1_DiemAccount_Balance'#0'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0';

// struct DiemAccount::CreateAccountEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:136:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:100:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s1), $upgrade_events#$1_DiemAccount_DiemWriteSetManager(s2))}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:86:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:118:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsEqual'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s1), $amount#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s1), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s1), $payer#$1_DiemAccount_ReceivedPaymentEvent(s2))
    && $IsEqual'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s1), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s2))}

// struct DiemAccount::SentPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:106:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    $IsEqual'u64'($amount#$1_DiemAccount_SentPaymentEvent(s1), $amount#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s1), $currency_code#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'address'($payee#$1_DiemAccount_SentPaymentEvent(s1), $payee#$1_DiemAccount_SentPaymentEvent(s2))
    && $IsEqual'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s1), $metadata#$1_DiemAccount_SentPaymentEvent(s2))}

// struct DiemAccount::WithdrawCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:77:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// fun DiemAccount::cancel_burn<XUS::XUS> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+493
procedure {:inline 1} $1_DiemAccount_cancel_burn'$1_XUS_XUS'(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Diem'$1_XUS_XUS';
    var $t4: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t5: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t6: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t7: Vec (int);
    var $t8: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t9: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t10: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t11: $1_DiemAccount_ReceivedPaymentEvent;
    var $t12: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t13: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t15: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t16: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t17: Vec (int);
    var $t18: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t19: $1_Diem_Diem'$1_XUS_XUS';
    var $t20: int;
    var $t21: Vec (int);
    var $t22: Vec (int);
    var $t23: bool;
    var $t24: int;
    var $t25: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t26: $1_DiemAccount_ReceivedPaymentEvent;
    var $t27: $1_FixedPoint32_FixedPoint32;
    var $t28: bool;
    var $t29: $1_DiemAccount_ReceivedPaymentEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_Diem'$1_XUS_XUS'': $1_Diem_Diem'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#237: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#238: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t4, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t4 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t5, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t5 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t7, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t7 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t8, select Diem::CurrencyInfo.cancel_burn_events($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t8 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t6));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t10, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t10 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t11, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t11 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t1, $EmptyVec'u8'()));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$at(12,21878,21879)"} true;
    assume {:print "$track_local(32,7,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$track_local(32,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$track_local(32,7,2):", $t2} $t2 == $t2;

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+66
    assume {:print "$at(11,18397,18463)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t15, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t15 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t16, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t17, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t17 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t18, select Diem::CurrencyInfo.cancel_burn_events($t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t18 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t16));

    // $t19 := Diem::cancel_burn<#0>($t0, $t1, $t2) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:496:20+58
    assume {:print "$at(12,22076,22134)"} true;
    call $t19 := $1_Diem_cancel_burn'$1_XUS_XUS'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(12,22076,22134)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(32,7):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[coin]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:496:13+4
    assume {:print "$track_local(32,7,3):", $t19} $t19 == $t19;

    // $t21 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:57+3
    assume {:print "$at(12,22349,22352)"} true;
    $t21 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t21);

    // $t22 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:62+3
    $t22 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t22);

    // $t23 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:67+5
    $t23 := false;
    assume $IsValid'bool'($t23);

    // assume Identical($t24, select Diem::Diem.value($t19)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:349:9+30
    assume {:print "$at(12,15296,15326)"} true;
    assume ($t24 == $value#$1_Diem_Diem'$1_XUS_XUS'($t19));

    // assume Identical($t25, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t25 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t26, pack DiemAccount::ReceivedPaymentEvent($t24, Diem::spec_currency_code<#0>(), $t1, $t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t26 == $1_DiemAccount_ReceivedPaymentEvent($t24, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t1, $t21));

    // assume Identical($t27, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t27 == $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // opaque begin: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume {:print "$at(12,22301,22365)"} true;

    // assume Identical($t28, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t24, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64())), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615)))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t28 == ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t24, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) + $t24) > $MAX_U64)) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))));

    // if ($t28) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    if ($t28) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t20)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t20))), And(Eq<u64>($t24, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1)))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t20))), And(Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64()), Eq(8, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615))), Eq(8, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24)))), Eq(7, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) && $IsEqual'num'(7, $t20)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t20))) || ($IsEqual'u64'($t24, 0) && $IsEqual'num'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t20))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t20))) || ((($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) + $t24) > $MAX_U64) && $IsEqual'num'(8, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) && $IsEqual'num'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) && $IsEqual'num'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615))) && $IsEqual'num'(8, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24))) && $IsEqual'num'(7, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(5, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume {:print "$at(12,22301,22365)"} true;
    assume {:print "$track_abort(32,7):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
L3:

    // @238 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $1_DiemAccount_DiemAccount_$memory#238 := $1_DiemAccount_DiemAccount_$memory;

    // @237 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#237 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1);

    // assume Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@237]<#0>($t1), $t24)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#237, $t1) + $t24));

    // assume exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Identical($t29, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t29 == $t26);

    // assume Identical($t30, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t30 == $t25);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    assume {:print "$at(12,22370,22371)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
L2:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun DiemAccount::cancel_burn<XDX::XDX> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+493
procedure {:inline 1} $1_DiemAccount_cancel_burn'$1_XDX_XDX'(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Diem'$1_XDX_XDX';
    var $t4: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t5: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t6: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t7: Vec (int);
    var $t8: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t9: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t10: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t11: $1_DiemAccount_ReceivedPaymentEvent;
    var $t12: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t13: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t15: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t16: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t17: Vec (int);
    var $t18: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t19: $1_Diem_Diem'$1_XDX_XDX';
    var $t20: int;
    var $t21: Vec (int);
    var $t22: Vec (int);
    var $t23: bool;
    var $t24: int;
    var $t25: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t26: $1_DiemAccount_ReceivedPaymentEvent;
    var $t27: $1_FixedPoint32_FixedPoint32;
    var $t28: bool;
    var $t29: $1_DiemAccount_ReceivedPaymentEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'': $1_DiemAccount_Balance'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_Diem'$1_XDX_XDX'': $1_Diem_Diem'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#237: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#238: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t4, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t4 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t5, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t5 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t7, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t7 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t8, select Diem::CurrencyInfo.cancel_burn_events($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t8 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t6));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t10, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t10 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t11, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t11 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t1, $EmptyVec'u8'()));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$at(12,21878,21879)"} true;
    assume {:print "$track_local(32,7,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$track_local(32,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$track_local(32,7,2):", $t2} $t2 == $t2;

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+66
    assume {:print "$at(11,18397,18463)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t15, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t15 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t16, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t17, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t17 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t18, select Diem::CurrencyInfo.cancel_burn_events($t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t18 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t16));

    // $t19 := Diem::cancel_burn<#0>($t0, $t1, $t2) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:496:20+58
    assume {:print "$at(12,22076,22134)"} true;
    call $t19 := $1_Diem_cancel_burn'$1_XDX_XDX'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(12,22076,22134)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(32,7):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[coin]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:496:13+4
    assume {:print "$track_local(32,7,3):", $t19} $t19 == $t19;

    // $t21 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:57+3
    assume {:print "$at(12,22349,22352)"} true;
    $t21 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t21);

    // $t22 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:62+3
    $t22 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t22);

    // $t23 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:67+5
    $t23 := false;
    assume $IsValid'bool'($t23);

    // assume Identical($t24, select Diem::Diem.value($t19)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:349:9+30
    assume {:print "$at(12,15296,15326)"} true;
    assume ($t24 == $value#$1_Diem_Diem'$1_XDX_XDX'($t19));

    // assume Identical($t25, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t25 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t26, pack DiemAccount::ReceivedPaymentEvent($t24, Diem::spec_currency_code<#0>(), $t1, $t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t26 == $1_DiemAccount_ReceivedPaymentEvent($t24, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t1, $t21));

    // assume Identical($t27, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t27 == $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // opaque begin: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume {:print "$at(12,22301,22365)"} true;

    // assume Identical($t28, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t24, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64())), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615)))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t28 == ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t24, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) + $t24) > $MAX_U64)) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))));

    // if ($t28) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    if ($t28) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t20)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t20))), And(Eq<u64>($t24, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1)))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t20))), And(Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64()), Eq(8, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615))), Eq(8, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24)))), Eq(7, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) && $IsEqual'num'(7, $t20)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t20))) || ($IsEqual'u64'($t24, 0) && $IsEqual'num'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t20))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t20))) || ((($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) + $t24) > $MAX_U64) && $IsEqual'num'(8, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) && $IsEqual'num'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))) && $IsEqual'num'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615))) && $IsEqual'num'(8, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24))) && $IsEqual'num'(7, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(5, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume {:print "$at(12,22301,22365)"} true;
    assume {:print "$track_abort(32,7):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
L3:

    // @238 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $1_DiemAccount_DiemAccount_$memory#238 := $1_DiemAccount_DiemAccount_$memory;

    // @237 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#237 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1);

    // assume Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@237]<#0>($t1), $t24)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#237, $t1) + $t24));

    // assume exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Identical($t29, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t29 == $t26);

    // assume Identical($t30, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t30 == $t25);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    assume {:print "$at(12,22370,22371)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
L2:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// fun DiemAccount::cancel_burn<#0> [baseline] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+493
procedure {:inline 1} $1_DiemAccount_cancel_burn'#0'(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: $1_Diem_Diem'#0';
    var $t4: $1_Diem_CurrencyInfo'#0';
    var $t5: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t6: $1_Diem_CurrencyInfo'#0';
    var $t7: Vec (int);
    var $t8: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t11: $1_DiemAccount_ReceivedPaymentEvent;
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: $1_Diem_CurrencyInfo'#0';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: $1_Diem_CurrencyInfo'#0';
    var $t17: Vec (int);
    var $t18: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t19: $1_Diem_Diem'#0';
    var $t20: int;
    var $t21: Vec (int);
    var $t22: Vec (int);
    var $t23: bool;
    var $t24: int;
    var $t25: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t26: $1_DiemAccount_ReceivedPaymentEvent;
    var $t27: $1_FixedPoint32_FixedPoint32;
    var $t28: bool;
    var $t29: $1_DiemAccount_ReceivedPaymentEvent;
    var $t30: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_Diem'#0'': $1_Diem_Diem'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_DiemAccount_Balance'#0'_$memory#237: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#238: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t4, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t4 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t5, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t5 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t6, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t6 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t7, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t7 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t8, select Diem::CurrencyInfo.cancel_burn_events($t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t8 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t6));

    // assume Identical($t9, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t9 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t10, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t10 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t11, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t11 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $EmptyVec'u8'()));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$at(12,21878,21879)"} true;
    assume {:print "$track_local(32,7,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$track_local(32,7,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:491:5+1
    assume {:print "$track_local(32,7,2):", $t2} $t2 == $t2;

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:378:9+66
    assume {:print "$at(11,18397,18463)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t15, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t15 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t16, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t17 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t18, select Diem::CurrencyInfo.cancel_burn_events($t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t18 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t16));

    // $t19 := Diem::cancel_burn<#0>($t0, $t1, $t2) on_abort goto L2 with $t20 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:496:20+58
    assume {:print "$at(12,22076,22134)"} true;
    call $t19 := $1_Diem_cancel_burn'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(12,22076,22134)"} true;
        $t20 := $abort_code;
        assume {:print "$track_abort(32,7):", $t20} $t20 == $t20;
        goto L2;
    }

    // trace_local[coin]($t19) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:496:13+4
    assume {:print "$track_local(32,7,3):", $t19} $t19 == $t19;

    // $t21 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:57+3
    assume {:print "$at(12,22349,22352)"} true;
    $t21 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t21);

    // $t22 := [] at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:62+3
    $t22 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t22);

    // $t23 := false at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:67+5
    $t23 := false;
    assume $IsValid'bool'($t23);

    // assume Identical($t24, select Diem::Diem.value($t19)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:349:9+30
    assume {:print "$at(12,15296,15326)"} true;
    assume ($t24 == $value#$1_Diem_Diem'#0'($t19));

    // assume Identical($t25, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t25 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t26, pack DiemAccount::ReceivedPaymentEvent($t24, Diem::spec_currency_code<#0>(), $t1, $t21)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t26 == $1_DiemAccount_ReceivedPaymentEvent($t24, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t21));

    // assume Identical($t27, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t27 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // opaque begin: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume {:print "$at(12,22301,22365)"} true;

    // assume Identical($t28, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t24, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64())), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>())))), And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615)))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24))))), And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t28 == ((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t24, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t24) > $MAX_U64)) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)))) || ($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24)))) || ($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))));

    // if ($t28) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    if ($t28) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t20)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t20))), And(Eq<u64>($t24, 0), Eq(7, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t24, VASP::spec_parent_address($t1)))), Eq(8, $t20))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t24), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t20))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t20))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t20))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t20))), And(Gt(Add(DiemAccount::$balance<#0>($t1), $t24), MaxU64()), Eq(8, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(DualAttestation::spec_is_published()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Not(Diem::spec_is_currency<#0>()))), Eq(5, $t20))), And(And($t23, And(Eq<num>(Len<u8>($t22), 0), Gt(FixedPoint32::spec_multiply_u64($t24, $t27), 18446744073709551615))), Eq(8, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), Eq(1, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_signature_is_valid($t1, $t1, $t22, $t21, $t24)))), Eq(7, $t20))), And(And($t23, And(Or(Neq<num>(Len<u8>($t22), 0), DualAttestation::spec_dual_attestation_required<#0>($t1, $t1, $t24)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1))))), Eq(5, $t20))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume (((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) && $IsEqual'num'(7, $t20)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t20))) || ($IsEqual'u64'($t24, 0) && $IsEqual'num'(7, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t24, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t20))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t24) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t20))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t20))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t20))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t20))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t24) > $MAX_U64) && $IsEqual'num'(8, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) && $IsEqual'num'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) && $IsEqual'num'(5, $t20))) || (($t23 && ($IsEqual'num'(LenVec($t22), 0) && ($1_FixedPoint32_spec_multiply_u64($t24, $t27) > 18446744073709551615))) && $IsEqual'num'(8, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(1, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t1, $t1, $t22, $t21, $t24))) && $IsEqual'num'(7, $t20))) || (($t23 && ((!$IsEqual'num'(LenVec($t22), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t1, $t1, $t24)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(5, $t20)));

    // trace_abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume {:print "$at(12,22301,22365)"} true;
    assume {:print "$track_abort(32,7):", $t20} $t20 == $t20;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
L3:

    // @238 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $1_DiemAccount_DiemAccount_$memory#238 := $1_DiemAccount_DiemAccount_$memory;

    // @237 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $1_DiemAccount_Balance'#0'_$memory#237 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t1);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assume Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@237]<#0>($t1), $t24)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#237, $t1) + $t24));

    // assume exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@238]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#238, $t1)));

    // assume Identical($t29, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t29 == $t26);

    // assume Identical($t30, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    assume ($t30 == $t25);

    // emit_event($t29, $t30) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t30, $t29);

    // opaque end: DiemAccount::deposit<#0>($t1, $t1, $t19, $t21, $t22, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:499:9+64

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    assume {:print "$at(12,22370,22371)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
L2:

    // abort($t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:500:5+1
    $abort_code := $t20;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:244:9+111
function {:inline} $1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory: $Memory $1_RecoveryAddress_RecoveryAddress, addr: int): bool {
    $ResourceExists($1_RecoveryAddress_RecoveryAddress_$memory, addr)
}

// struct RecoveryAddress::RecoveryAddress at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:17:5+91
type {:datatype} $1_RecoveryAddress_RecoveryAddress;
function {:constructor} $1_RecoveryAddress_RecoveryAddress($rotation_caps: Vec ($1_DiemAccount_KeyRotationCapability)): $1_RecoveryAddress_RecoveryAddress;
function {:inline} $Update'$1_RecoveryAddress_RecoveryAddress'_rotation_caps(s: $1_RecoveryAddress_RecoveryAddress, x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_RecoveryAddress_RecoveryAddress {
    $1_RecoveryAddress_RecoveryAddress(x)
}
function $IsValid'$1_RecoveryAddress_RecoveryAddress'(s: $1_RecoveryAddress_RecoveryAddress): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($rotation_caps#$1_RecoveryAddress_RecoveryAddress(s))
}
function {:inline} $IsEqual'$1_RecoveryAddress_RecoveryAddress'(s1: $1_RecoveryAddress_RecoveryAddress, s2: $1_RecoveryAddress_RecoveryAddress): bool {
    $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''($rotation_caps#$1_RecoveryAddress_RecoveryAddress(s1), $rotation_caps#$1_RecoveryAddress_RecoveryAddress(s2))}
var $1_RecoveryAddress_RecoveryAddress_$memory: $Memory $1_RecoveryAddress_RecoveryAddress;

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:55:5+75
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, 173345816)
}

// struct DiemBlock::BlockMetadata at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:9:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    $IsEqual'u64'($height#$1_DiemBlock_BlockMetadata(s1), $height#$1_DiemBlock_BlockMetadata(s2))
    && $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s1), $new_block_events#$1_DiemBlock_BlockMetadata(s2))}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:16:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    $IsEqual'u64'($round#$1_DiemBlock_NewBlockEvent(s1), $round#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'address'($proposer#$1_DiemBlock_NewBlockEvent(s1), $proposer#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s1), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s2))
    && $IsEqual'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s1), $time_microseconds#$1_DiemBlock_NewBlockEvent(s2))}

// struct DiemVMConfig::DiemVMConfig at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:13:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsEqual'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s1), $gas_schedule#$1_DiemVMConfig_DiemVMConfig(s2))}

// struct DiemVMConfig::GasConstants at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:35:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:29:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    $IsEqual'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s1), $instruction_schedule#$1_DiemVMConfig_GasSchedule(s2))
    && $IsEqual'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s1), $native_schedule#$1_DiemVMConfig_GasSchedule(s2))
    && $IsEqual'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s1), $gas_constants#$1_DiemVMConfig_GasSchedule(s2))}

// struct DiemVersion::DiemVersion at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:9:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}

// fun TreasuryComplianceScripts::preburn [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_preburn$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $1_DiemAccount_WithdrawCapability;
    var $t3: int;
    var $t4: $1_DiemAccount_WithdrawCapability;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: int;
    var $t17: $1_Diem_CurrencyInfo'#0';
    var $t18: Vec (int);
    var $t19: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t20: $1_Diem_PreburnEvent;
    var $t21: int;
    var $t22: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t23: $1_DiemAccount_SentPaymentEvent;
    var $t24: int;
    var $t25: $1_DiemAccount_WithdrawCapability;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: $1_Diem_CurrencyInfo'#0';
    var $t41: int;
    var $t42: $1_Diem_CurrencyInfo'#0';
    var $t43: Vec (int);
    var $t44: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t45: $1_Diem_PreburnEvent;
    var $t46: int;
    var $t47: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t48: $1_DiemAccount_SentPaymentEvent;
    var $t49: bool;
    var $t50: int;
    var $t51: $1_Diem_CurrencyInfo'#0';
    var $t52: $1_Diem_PreburnEvent;
    var $t53: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t54: bool;
    var $t55: $1_DiemAccount_SentPaymentEvent;
    var $t56: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t57: int;
    var $t58: bool;
    var $t59: int;
    var $t60: $1_Diem_CurrencyInfo'#0';
    var $t0: $signer;
    var $t1: int;
    var $1_Diem_CurrencyInfo'#0'_$modifies: [int]bool;
    var $1_Diem_Preburn'#0'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'#0'_$modifies: [int]bool;
    var $1_DiemAccount_Balance'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'$1_Diem_Preburn'#0'': $1_Diem_Preburn'#0';
    var $temp_0'$1_Diem_PreburnQueue'#0'': $1_Diem_PreburnQueue'#0';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#266: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_Balance'#0'_$memory#268: $Memory $1_DiemAccount_Balance'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#269: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountLimits_Window'#0'_$memory#270: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#271: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#272: $Memory $1_VASP_ParentVASP;
    var $1_DiemAccount_AccountOperationsCapability_$memory#273: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#274: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#275: $Memory $1_AccountFreezing_FreezingBit;
    var $1_Diem_Preburn'#0'_$memory#276: $Memory $1_Diem_Preburn'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#277: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Roles_RoleId_$memory#278: $Memory $1_Roles_RoleId;
    var $1_DiemAccount_DiemAccount_$memory#279: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#280: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#281: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,18254,18538)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<#0>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<#0>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($ResourceValue($1_Diem_Preburn'#0'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<#0>>(dd_addr): Not(exists<Diem::Preburn<#0>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:253:9+52
    assume {:print "$at(34,18755,18807)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, DiemAccount::spec_get_withdraw_cap($t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:254:9+59
    assume {:print "$at(34,18816,18875)"} true;
    assume ($t4 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t3));

    // assume Identical($t5, select DiemAccount::WithdrawCapability.account_address($t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t5 == $account_address#$1_DiemAccount_WithdrawCapability($t4));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(11,37634,37686)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+52
    assume {:print "$at(11,32730,32782)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, And(exists<Diem::Preburn<#0>>($t8), Not(exists<Diem::PreburnQueue<#0>>($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:698:9+103
    assume {:print "$at(11,32791,32894)"} true;
    assume ($t9 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t8) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t8)));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:746:9+52
    assume {:print "$at(11,35540,35592)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t3)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:712:9+61
    assume {:print "$at(12,31724,31785)"} true;
    assume ($t13 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t3))));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:801:9+52
    assume {:print "$at(11,38333,38385)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:9+42
    assume {:print "$at(12,32247,32289)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t17 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t18, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t18 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t19, select Diem::CurrencyInfo.preburn_events($t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t19 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t17));

    // assume Identical($t20, pack Diem::PreburnEvent($t1, $t18, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t20 == $1_Diem_PreburnEvent($t1, $t18, $t16));

    // assume Identical($t21, select DiemAccount::WithdrawCapability.account_address($t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t21 == $account_address#$1_DiemAccount_WithdrawCapability($t4));

    // assume Identical($t22, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t21))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t22 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t21)));

    // assume Identical($t23, pack DiemAccount::SentPaymentEvent($t1, Diem::spec_currency_code<#0>(), $t16, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t23 == $1_DiemAccount_SentPaymentEvent($t1, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t16, $EmptyVec'u8'()));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assume CanModify<DiemAccount::Balance<#0>>($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:711:9+39
    assume {:print "$at(12,31676,31715)"} true;
    assume $1_DiemAccount_Balance'#0'_$modifies[$t3];

    // assume CanModify<Diem::Preburn<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:803:9+49
    assume {:print "$at(11,38448,38497)"} true;
    assume $1_Diem_Preburn'#0'_$modifies[$t14];

    // assume CanModify<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+54
    assume {:print "$at(11,38580,38634)"} true;
    assume $1_Diem_PreburnQueue'#0'_$modifies[$t14];

    // assume CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    assume {:print "$at(11,38772,38827)"} true;
    assume $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // @267 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @278 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Roles_RoleId_$memory#278 := $1_Roles_RoleId_$memory;

    // @269 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_CurrencyInfo'#0'_$memory#269 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @276 := save_mem(Diem::Preburn<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_Preburn'#0'_$memory#276 := $1_Diem_Preburn'#0'_$memory;

    // @277 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_PreburnQueue'#0'_$memory#277 := $1_Diem_PreburnQueue'#0'_$memory;

    // @274 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountLimits_LimitsDefinition'#0'_$memory#274 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @270 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountLimits_Window'#0'_$memory#270 := $1_AccountLimits_Window'#0'_$memory;

    // @271 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_VASP_ChildVASP_$memory#271 := $1_VASP_ChildVASP_$memory;

    // @272 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_VASP_ParentVASP_$memory#272 := $1_VASP_ParentVASP_$memory;

    // @275 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountFreezing_FreezingBit_$memory#275 := $1_AccountFreezing_FreezingBit_$memory;

    // @266 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_DiemAccount_$memory#266 := $1_DiemAccount_DiemAccount_$memory;

    // @273 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_AccountOperationsCapability_$memory#273 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @268 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_Balance'#0'_$memory#268 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+1
    assume {:print "$at(34,18254,18255)"} true;
    assume {:print "$track_local(42,5,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+1
    assume {:print "$track_local(42,5,1):", $t1} $t1 == $t1;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // $t25 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume {:print "$at(34,18347,18397)"} true;

    // assume Identical($t26, Or(Not(DiemAccount::$exists_at($t24)), DiemAccount::spec_holds_delegated_withdraw_capability($t24))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume ($t26 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t24) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t24)));

    // if ($t26) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    if ($t26) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t24)), Eq(5, $t27)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t24), Eq(1, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t24) && $IsEqual'num'(5, $t27)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t24) && $IsEqual'num'(1, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume {:print "$at(34,18347,18397)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
L3:

    // @279 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    $1_DiemAccount_DiemAccount_$memory#279 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t24, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t24);
    }

    // assume WellFormed($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t25);

    // assume exists<DiemAccount::DiemAccount>($t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t24);

    // assume Eq<DiemAccount::WithdrawCapability>($t25, DiemAccount::spec_get_withdraw_cap[@279]($t24)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t25, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#279, $t24));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t24), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@279]<DiemAccount::DiemAccount>($t24), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t24), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#279, $t24), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t25), $t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t25), $t24);

    // $t25 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50

    // trace_local[withdraw_cap]($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:13+12
    assume {:print "$track_local(42,5,2):", $t25} $t25 == $t25;

    // assume Identical($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:680:9+42
    assume {:print "$at(12,30059,30101)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t0));

    // assume Identical($t29, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:681:9+32
    assume {:print "$at(12,30110,30142)"} true;
    assume ($t29 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t31, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(11,37634,37686)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t0));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+52
    assume {:print "$at(11,32730,32782)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t0));

    // assume Identical($t34, And(exists<Diem::Preburn<#0>>($t33), Not(exists<Diem::PreburnQueue<#0>>($t33)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:698:9+103
    assume {:print "$at(11,32791,32894)"} true;
    assume ($t34 == ($ResourceExists($1_Diem_Preburn'#0'_$memory, $t33) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t33)));

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume ($t36 == $1_Signer_spec_address_of($t0));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:746:9+52
    assume {:print "$at(11,35540,35592)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assume Identical($t38, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t29)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:712:9+61
    assume {:print "$at(12,31724,31785)"} true;
    assume ($t38 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t29))));

    // assume Identical($t39, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:801:9+52
    assume {:print "$at(11,38333,38385)"} true;
    assume ($t39 == $1_Signer_spec_address_of($t0));

    // assume Identical($t40, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t40 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t41, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:9+42
    assume {:print "$at(12,32247,32289)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t0));

    // assume Identical($t42, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t42 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t43, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t43 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t44, select Diem::CurrencyInfo.preburn_events($t42)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t44 == $preburn_events#$1_Diem_CurrencyInfo'#0'($t42));

    // assume Identical($t45, pack Diem::PreburnEvent($t1, $t43, $t41)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t45 == $1_Diem_PreburnEvent($t1, $t43, $t41));

    // assume Identical($t46, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t46 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t47, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t46))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t47 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t46)));

    // assume Identical($t48, pack DiemAccount::SentPaymentEvent($t1, Diem::spec_currency_code<#0>(), $t41, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t48 == $1_DiemAccount_SentPaymentEvent($t1, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t41, $EmptyVec'u8'()));

    // assert CanModify<DiemAccount::Balance<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'#0'_$modifies[$t29];

    // assert CanModify<Diem::Preburn<#0>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'#0'_$modifies[$t39];

    // assert CanModify<Diem::PreburnQueue<#0>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'#0'_$modifies[$t39];

    // assert CanModify<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'#0'_$modifies[173345816];

    // opaque begin: DiemAccount::preburn<#0>($t0, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60

    // assume Identical($t49, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_operating()), Not(DiemAccount::$exists_at($t30))), Not(exists<DiemAccount::Balance<#0>>($t30))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<#0>())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t1, VASP::spec_parent_address($t30)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t30))), $t1)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t30)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), $t1), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), Not(DiemTimestamp::$is_operating())))), Not(Or(exists<Diem::Preburn<#0>>($t31), exists<Diem::PreburnQueue<#0>>($t31)))), Not(exists<Roles::RoleId>($t32))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t32)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), $t1), 18446744073709551615)), Not(Diem::spec_is_currency<#0>())), And($t34, Not(exists<Roles::RoleId>($t35)))), And($t34, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t35)), 2))), And($t34, Not(Diem::spec_is_currency<#0>()))), Not(exists<Roles::RoleId>($t36))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t36)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn<#0>($t1), [])))), 0)), And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume ($t49 == (((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t30)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t30))) < $t1)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t30)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) + $t1) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory, $t31) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t31))) || !$ResourceExists($1_Roles_RoleId_$memory, $t32)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t32)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || ($t34 && !$ResourceExists($1_Roles_RoleId_$memory, $t35))) || ($t34 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t35)), 2))) || ($t34 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || !$ResourceExists($1_Roles_RoleId_$memory, $t36)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t36)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t1), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256))));

    // if ($t49) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    if ($t49) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27)), And(Not(DiemAccount::$exists_at($t30)), Eq(5, $t27))), And(Not(exists<DiemAccount::Balance<#0>>($t30)), Eq(5, $t27))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t1, VASP::spec_parent_address($t30))))), Eq(8, $t27))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t30))), $t1), Eq(8, $t27))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27))), And(AccountFreezing::spec_account_is_frozen($t30), Eq(1, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), $t1), 18446744073709551615))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30))))), MaxU64()))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t30)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t27))), Not(Or(exists<Diem::Preburn<#0>>($t31), exists<Diem::PreburnQueue<#0>>($t31)))), And(Not(exists<Roles::RoleId>($t32)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t32)), 2), Eq(3, $t27))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), $t1), 18446744073709551615), Eq(8, $t27))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t27))), And(And($t34, Not(exists<Roles::RoleId>($t35))), Eq(5, $t27))), And(And($t34, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t35)), 2)), Eq(3, $t27))), And(And($t34, Not(Diem::spec_is_currency<#0>())), Eq(5, $t27))), And(Not(exists<Roles::RoleId>($t36)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t36)), 2), Eq(3, $t27))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn<#0>($t1), [])))), 0), Eq(7, $t27))), And(And(exists<Diem::PreburnQueue<#0>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t37))), 256)), Eq(8, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume ((((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t30) && $IsEqual'num'(5, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) && $IsEqual'num'(8, $t27))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t30))) < $t1) && $IsEqual'num'(8, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t30) && $IsEqual'num'(1, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) + $t1) > 18446744073709551615))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) > $MAX_U64))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t27))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory, $t31) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t31))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t32) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t32)), 2) && $IsEqual'num'(3, $t27))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t1) > 18446744073709551615) && $IsEqual'num'(8, $t27))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t27))) || (($t34 && !$ResourceExists($1_Roles_RoleId_$memory, $t35)) && $IsEqual'num'(5, $t27))) || (($t34 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t35)), 2)) && $IsEqual'num'(3, $t27))) || (($t34 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t36) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t36)), 2) && $IsEqual'num'(3, $t27))) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t1), $EmptyVec'u8'())))), 0) && $IsEqual'num'(7, $t27))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t37))) >= 256)) && $IsEqual'num'(8, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
L5:

    // @280 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    $1_DiemAccount_DiemAccount_$memory#280 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t29)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t29), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t29));
    }

    // modifies global<DiemAccount::DiemAccount>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t29, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t29);
    }

    // modifies global<DiemAccount::Balance<#0>>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t29, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t29);
    }

    // modifies global<Diem::Preburn<#0>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_Preburn'#0'';
        $1_Diem_Preburn'#0'_$memory := $ResourceUpdate($1_Diem_Preburn'#0'_$memory, $t39, $temp_0'$1_Diem_Preburn'#0'');
    } else {
        $1_Diem_Preburn'#0'_$memory := $ResourceRemove($1_Diem_Preburn'#0'_$memory, $t39);
    }

    // modifies global<Diem::PreburnQueue<#0>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'#0'';
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'#0'_$memory, $t39, $temp_0'$1_Diem_PreburnQueue'#0'');
    } else {
        $1_Diem_PreburnQueue'#0'_$memory := $ResourceRemove($1_Diem_PreburnQueue'#0'_$memory, $t39);
    }

    // modifies global<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'#0'';
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, 173345816, $temp_0'$1_Diem_CurrencyInfo'#0'');
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'#0'_$memory, 173345816);
    }

    // assume Identical($t50, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t29)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:713:9+71
    assume {:print "$at(12,31794,31865)"} true;
    assume ($t50 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t29))));

    // assume Identical($t51, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t51 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume exists<DiemAccount::DiemAccount>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t29);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.withdraw_capability(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.sent_events(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.received_events(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t28)), select DiemAccount::DiemAccount.sent_events(global[@280]<DiemAccount::DiemAccount>($t28))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t28)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t28)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t28)), select DiemAccount::DiemAccount.received_events(global[@280]<DiemAccount::DiemAccount>($t28))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t28)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t28)));

    // assume Eq<u64>($t50, Sub($t38, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'u64'($t50, ($t38 - $t1));

    // assume exists<Diem::PreburnQueue<#0>>($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t39);

    // assume Eq<Diem::CurrencyInfo<#0>>($t51, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t40, Add(select Diem::CurrencyInfo.preburn_value($t40), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'$1_Diem_CurrencyInfo'#0''($t51, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t40, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t40) + $t1)));

    // assume Identical($t52, $t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t52 == $t45);

    // assume Identical($t53, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t53 == $t44);

    // assume Identical($t54, Not(select Diem::CurrencyInfo.is_synthetic($t42))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t54 == !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t42));

    // emit_event($t52, $t53, $t54) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    $es := $CondExtendEventStore'$1_Diem_PreburnEvent'($es, $t53, $t52, $t54);

    // assume Identical($t55, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t55 == $t48);

    // assume Identical($t56, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t56 == $t47);

    // emit_event($t55, $t56) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t56, $t55);

    // opaque end: DiemAccount::preburn<#0>($t0, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;

    // assume Identical($t57, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t57 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // opaque begin: DiemAccount::restore_withdraw_capability($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume {:print "$at(34,18477,18531)"} true;

    // assume Identical($t58, Or(Not(DiemAccount::$exists_at($t57)), Not(DiemAccount::$delegated_withdraw_capability($t57)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume ($t58 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t57) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t57)));

    // if ($t58) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    if ($t58) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t57)), Eq(5, $t27)), And(Not(DiemAccount::$delegated_withdraw_capability($t57)), Eq(1, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t57) && $IsEqual'num'(5, $t27)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t57) && $IsEqual'num'(1, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume {:print "$at(34,18477,18531)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
L7:

    // @281 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    $1_DiemAccount_DiemAccount_$memory#281 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t57) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t57, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t57);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t57), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@281]<DiemAccount::DiemAccount>($t57), Option::spec_some<DiemAccount::WithdrawCapability>($t25))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t57), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t57), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t25)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t57) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t57);

    // opaque end: DiemAccount::restore_withdraw_capability($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:245:5+1
    assume {:print "$at(34,18537,18538)"} true;
L1:

    // assume Identical($t59, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t3)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:713:9+71
    assume {:print "$at(12,31794,31865)"} true;
    assume ($t59 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t3))));

    // assume Identical($t60, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t60 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assert Not(Not(DiemAccount::$exists_at[@266]($t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(Not(DiemAccount::$exists_at[@266]($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5);

    // assert Not(Not(exists[@268]<DiemAccount::Balance<#0>>($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#268, $t5);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(Not(Diem::spec_is_currency[@269]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<#0>($t1, VASP::spec_parent_address[@271, @272]($t5)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'#0'_$memory#274, $1_AccountLimits_Window'#0'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<#0>>($t5))), $t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#268, $t5))) < $t1);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(AccountFreezing::spec_account_is_frozen[@275]($t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)));

    // assert Not(Not(Or(exists[@276]<Diem::Preburn<#0>>($t6), exists[@277]<Diem::PreburnQueue<#0>>($t6)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:792:9+101
    assume {:print "$at(11,37844,37945)"} true;
    assert {:msg "assert_failed(11,37844,37945): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'#0'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t6));

    // assert Not(Not(exists[@278]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#278, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<#0>()), $t1), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:520:9+102
    assume {:print "$at(11,24815,24917)"} true;
    assert {:msg "assert_failed(11,24815,24917): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#269)) + $t1) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@269]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269);

    // assert Not(And($t9, Not(exists[@278]<Roles::RoleId>($t10)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10));

    // assert Not(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2));

    // assert Not(And($t9, Not(Diem::spec_is_currency[@269]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($t9 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269));

    // assert Not(Not(exists[@278]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#278, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>($t1), [])))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:9+75
    assume {:print "$at(11,35601,35676)"} true;
    assert {:msg "assert_failed(11,35601,35676): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t1), $EmptyVec'u8'())))), 0);

    // assert Not(And(exists[@277]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<#0>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:748:9+208
    assume {:print "$at(11,35685,35893)"} true;
    assert {:msg "assert_failed(11,35685,35893): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#277, $t12))) >= 256));

    // assert Not(Not(Or(exists[@276]<Diem::Preburn<#0>>($t3), exists[@277]<Diem::PreburnQueue<#0>>($t3)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:269:9+107
    assume {:print "$at(34,19517,19624)"} true;
    assert {:msg "assert_failed(34,19517,19624): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'#0'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t3));

    // assert Eq<u64>($t59, Sub($t13, $t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:715:9+53
    assume {:print "$at(12,31930,31983)"} true;
    assert {:msg "assert_failed(12,31930,31983): post-condition does not hold"}
      $IsEqual'u64'($t59, ($t13 - $t1));

    // assert exists<Diem::PreburnQueue<#0>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:806:9+53
    assume {:print "$at(11,38643,38696)"} true;
    assert {:msg "assert_failed(11,38643,38696): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t14);

    // assert Eq<Diem::CurrencyInfo<#0>>($t60, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t15, Add(select Diem::CurrencyInfo.preburn_value($t15), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:527:9+84
    assume {:print "$at(11,25144,25228)"} true;
    assert {:msg "assert_failed(11,25144,25228): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t60, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t15, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t15) + $t1)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:540:9+42
    assume {:print "$at(11,25624,25666)"} true;
    assert {:msg "assert_failed(11,25624,25666): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t17)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t17)), $t22, $t23); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assume {:print "$at(34,18544,19630)"} true;
    assert {:msg "assert_failed(34,18544,19630): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t17)), $t22, $t23); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:245:5+1
    assume {:print "$at(34,18537,18538)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemAccount::$exists_at[@266]($t3)), DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3)), Not(DiemTimestamp::$is_operating[@267]())), Not(DiemAccount::$exists_at[@266]($t5))), Not(exists[@268]<DiemAccount::Balance<#0>>($t5))), Not(DiemTimestamp::$is_operating[@267]())), Not(Diem::spec_is_currency[@269]<#0>())), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<#0>($t1, VASP::spec_parent_address[@271, @272]($t5)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<#0>>($t5))), $t1)), Not(DiemTimestamp::$is_operating[@267]())), AccountFreezing::spec_account_is_frozen[@275]($t5)), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))))))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]())))), Not(Or(exists[@276]<Diem::Preburn<#0>>($t6), exists[@277]<Diem::PreburnQueue<#0>>($t6)))), Not(exists[@278]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<#0>()), $t1), 18446744073709551615)), Not(Diem::spec_is_currency[@269]<#0>())), And($t9, Not(exists[@278]<Roles::RoleId>($t10)))), And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2))), And($t9, Not(Diem::spec_is_currency[@269]<#0>()))), Not(exists[@278]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>($t1), [])))), 0)), And(exists[@277]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<#0>>($t12))), 256))), Not(Or(exists[@276]<Diem::Preburn<#0>>($t3), exists[@277]<Diem::PreburnQueue<#0>>($t3)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assume {:print "$at(34,18544,19630)"} true;
    assert {:msg "assert_failed(34,18544,19630): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#268, $t5)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'#0'_$memory#274, $1_AccountLimits_Window'#0'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#268, $t5))) < $t1)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t6))) || !$ResourceExists($1_Roles_RoleId_$memory#278, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#269)) + $t1) > 18446744073709551615)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269)) || ($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10))) || ($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2))) || ($t9 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269))) || !$ResourceExists($1_Roles_RoleId_$memory#278, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t1), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#277, $t12))) >= 256))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t3)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemAccount::$exists_at[@266]($t3)), Eq(5, $t27)), And(DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3), Eq(1, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(Not(DiemAccount::$exists_at[@266]($t5)), Eq(5, $t27))), And(Not(exists[@268]<DiemAccount::Balance<#0>>($t5)), Eq(5, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(Not(Diem::spec_is_currency[@269]<#0>()), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<#0>($t1, VASP::spec_parent_address[@271, @272]($t5))))), Eq(8, $t27))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<#0>>($t5))), $t1), Eq(8, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(AccountFreezing::spec_account_is_frozen[@275]($t5), Eq(1, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64()))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<#0>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<#0>(global[@270]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]()))), Eq(1, $t27))), Not(Or(exists[@276]<Diem::Preburn<#0>>($t6), exists[@277]<Diem::PreburnQueue<#0>>($t6)))), And(Not(exists[@278]<Roles::RoleId>($t7)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2), Eq(3, $t27))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<#0>()), $t1), 18446744073709551615), Eq(8, $t27))), And(Not(Diem::spec_is_currency[@269]<#0>()), Eq(5, $t27))), And(And($t9, Not(exists[@278]<Roles::RoleId>($t10))), Eq(5, $t27))), And(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2)), Eq(3, $t27))), And(And($t9, Not(Diem::spec_is_currency[@269]<#0>())), Eq(5, $t27))), And(Not(exists[@278]<Roles::RoleId>($t11)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2), Eq(3, $t27))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<#0>(Diem::spec_make_preburn[]<#0>($t1), [])))), 0), Eq(7, $t27))), And(And(exists[@277]<Diem::PreburnQueue<#0>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<#0>>($t12))), 256)), Eq(8, $t27))), Not(Or(exists[@276]<Diem::Preburn<#0>>($t3), exists[@277]<Diem::PreburnQueue<#0>>($t3)))), Eq(5, $t27)), Eq(1, $t27)), Eq(3, $t27)), Eq(8, $t27)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assert {:msg "assert_failed(34,18544,19630): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3) && $IsEqual'num'(5, $t27)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3) && $IsEqual'num'(1, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#268, $t5) && $IsEqual'num'(5, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'#0'_$memory#274, $1_AccountLimits_Window'#0'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) && $IsEqual'num'(8, $t27))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#268, $t5))) < $t1) && $IsEqual'num'(8, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5) && $IsEqual'num'(1, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#274, $ResourceValue($1_AccountLimits_Window'#0'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267))) && $IsEqual'num'(1, $t27))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t6))) || (!$ResourceExists($1_Roles_RoleId_$memory#278, $t7) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2) && $IsEqual'num'(3, $t27))) || ((($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#269)) + $t1) > 18446744073709551615) && $IsEqual'num'(8, $t27))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269) && $IsEqual'num'(5, $t27))) || (($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10)) && $IsEqual'num'(5, $t27))) || (($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2)) && $IsEqual'num'(3, $t27))) || (($t9 && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#269)) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_Roles_RoleId_$memory#278, $t11) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2) && $IsEqual'num'(3, $t27))) || ($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'($1_Diem_PreburnWithMetadata'#0'($1_Diem_spec_make_preburn'#0'($t1), $EmptyVec'u8'())))), 0) && $IsEqual'num'(7, $t27))) || (($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'#0''($preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory#277, $t12))) >= 256)) && $IsEqual'num'(8, $t27))) || !($ResourceExists($1_Diem_Preburn'#0'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'#0'_$memory#277, $t3))) || $IsEqual'num'(5, $t27)) || $IsEqual'num'(1, $t27)) || $IsEqual'num'(3, $t27)) || $IsEqual'num'(8, $t27));

    // abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    $abort_code := $t27;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::preburn [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_preburn$verify_instantiated_0(_$t0: $signer, _$t1: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t2: $1_DiemAccount_WithdrawCapability;
    var $t3: int;
    var $t4: $1_DiemAccount_WithdrawCapability;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t16: int;
    var $t17: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t18: Vec (int);
    var $t19: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t20: $1_Diem_PreburnEvent;
    var $t21: int;
    var $t22: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t23: $1_DiemAccount_SentPaymentEvent;
    var $t24: int;
    var $t25: $1_DiemAccount_WithdrawCapability;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t41: int;
    var $t42: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t43: Vec (int);
    var $t44: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t45: $1_Diem_PreburnEvent;
    var $t46: int;
    var $t47: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t48: $1_DiemAccount_SentPaymentEvent;
    var $t49: bool;
    var $t50: int;
    var $t51: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t52: $1_Diem_PreburnEvent;
    var $t53: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t54: bool;
    var $t55: $1_DiemAccount_SentPaymentEvent;
    var $t56: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t57: int;
    var $t58: bool;
    var $t59: int;
    var $t60: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: int;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$modifies: [int]bool;
    var $1_Diem_Preburn'$1_XUS_XUS'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies: [int]bool;
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'': $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $temp_0'$1_Diem_Preburn'$1_XUS_XUS'': $1_Diem_Preburn'$1_XUS_XUS';
    var $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'': $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#266: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#270: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_VASP_ChildVASP_$memory#271: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#272: $Memory $1_VASP_ParentVASP;
    var $1_DiemAccount_AccountOperationsCapability_$memory#273: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountFreezing_FreezingBit_$memory#275: $Memory $1_AccountFreezing_FreezingBit;
    var $1_Diem_Preburn'$1_XUS_XUS'_$memory#276: $Memory $1_Diem_Preburn'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Roles_RoleId_$memory#278: $Memory $1_Roles_RoleId;
    var $1_DiemAccount_DiemAccount_$memory#279: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#280: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#281: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,18254,18538)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XUS::XUS>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr): Not(exists<Diem::Preburn<XUS::XUS>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:253:9+52
    assume {:print "$at(34,18755,18807)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, DiemAccount::spec_get_withdraw_cap($t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:254:9+59
    assume {:print "$at(34,18816,18875)"} true;
    assume ($t4 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t3));

    // assume Identical($t5, select DiemAccount::WithdrawCapability.account_address($t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t5 == $account_address#$1_DiemAccount_WithdrawCapability($t4));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(11,37634,37686)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+52
    assume {:print "$at(11,32730,32782)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, And(exists<Diem::Preburn<XUS::XUS>>($t8), Not(exists<Diem::PreburnQueue<XUS::XUS>>($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:698:9+103
    assume {:print "$at(11,32791,32894)"} true;
    assume ($t9 == ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t8) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t8)));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:746:9+52
    assume {:print "$at(11,35540,35592)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t3)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:712:9+61
    assume {:print "$at(12,31724,31785)"} true;
    assume ($t13 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t3))));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:801:9+52
    assume {:print "$at(11,38333,38385)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:9+42
    assume {:print "$at(12,32247,32289)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t17 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t18, Diem::spec_currency_code<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t18 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t19, select Diem::CurrencyInfo.preburn_events($t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t19 == $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t17));

    // assume Identical($t20, pack Diem::PreburnEvent($t1, $t18, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t20 == $1_Diem_PreburnEvent($t1, $t18, $t16));

    // assume Identical($t21, select DiemAccount::WithdrawCapability.account_address($t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t21 == $account_address#$1_DiemAccount_WithdrawCapability($t4));

    // assume Identical($t22, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t21))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t22 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t21)));

    // assume Identical($t23, pack DiemAccount::SentPaymentEvent($t1, Diem::spec_currency_code<XUS::XUS>(), $t16, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t23 == $1_DiemAccount_SentPaymentEvent($t1, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t16, $EmptyVec'u8'()));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assume CanModify<DiemAccount::Balance<XUS::XUS>>($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:711:9+39
    assume {:print "$at(12,31676,31715)"} true;
    assume $1_DiemAccount_Balance'$1_XUS_XUS'_$modifies[$t3];

    // assume CanModify<Diem::Preburn<XUS::XUS>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:803:9+49
    assume {:print "$at(11,38448,38497)"} true;
    assume $1_Diem_Preburn'$1_XUS_XUS'_$modifies[$t14];

    // assume CanModify<Diem::PreburnQueue<XUS::XUS>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+54
    assume {:print "$at(11,38580,38634)"} true;
    assume $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies[$t14];

    // assume CanModify<Diem::CurrencyInfo<XUS::XUS>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    assume {:print "$at(11,38772,38827)"} true;
    assume $1_Diem_CurrencyInfo'$1_XUS_XUS'_$modifies[173345816];

    // @267 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @278 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Roles_RoleId_$memory#278 := $1_Roles_RoleId_$memory;

    // @269 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @276 := save_mem(Diem::Preburn<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_Preburn'$1_XUS_XUS'_$memory#276 := $1_Diem_Preburn'$1_XUS_XUS'_$memory;

    // @277 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @274 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @270 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#270 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // @271 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_VASP_ChildVASP_$memory#271 := $1_VASP_ChildVASP_$memory;

    // @272 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_VASP_ParentVASP_$memory#272 := $1_VASP_ParentVASP_$memory;

    // @275 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountFreezing_FreezingBit_$memory#275 := $1_AccountFreezing_FreezingBit_$memory;

    // @266 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_DiemAccount_$memory#266 := $1_DiemAccount_DiemAccount_$memory;

    // @273 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_AccountOperationsCapability_$memory#273 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @268 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+1
    assume {:print "$at(34,18254,18255)"} true;
    assume {:print "$track_local(42,5,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+1
    assume {:print "$track_local(42,5,1):", $t1} $t1 == $t1;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // $t25 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume {:print "$at(34,18347,18397)"} true;

    // assume Identical($t26, Or(Not(DiemAccount::$exists_at($t24)), DiemAccount::spec_holds_delegated_withdraw_capability($t24))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume ($t26 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t24) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t24)));

    // if ($t26) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    if ($t26) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t24)), Eq(5, $t27)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t24), Eq(1, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t24) && $IsEqual'num'(5, $t27)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t24) && $IsEqual'num'(1, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume {:print "$at(34,18347,18397)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
L3:

    // @279 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    $1_DiemAccount_DiemAccount_$memory#279 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t24, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t24);
    }

    // assume WellFormed($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t25);

    // assume exists<DiemAccount::DiemAccount>($t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t24);

    // assume Eq<DiemAccount::WithdrawCapability>($t25, DiemAccount::spec_get_withdraw_cap[@279]($t24)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t25, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#279, $t24));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t24), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@279]<DiemAccount::DiemAccount>($t24), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t24), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#279, $t24), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t25), $t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t25), $t24);

    // $t25 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50

    // trace_local[withdraw_cap]($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:13+12
    assume {:print "$track_local(42,5,2):", $t25} $t25 == $t25;

    // assume Identical($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:680:9+42
    assume {:print "$at(12,30059,30101)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t0));

    // assume Identical($t29, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:681:9+32
    assume {:print "$at(12,30110,30142)"} true;
    assume ($t29 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t31, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(11,37634,37686)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t0));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+52
    assume {:print "$at(11,32730,32782)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t0));

    // assume Identical($t34, And(exists<Diem::Preburn<XUS::XUS>>($t33), Not(exists<Diem::PreburnQueue<XUS::XUS>>($t33)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:698:9+103
    assume {:print "$at(11,32791,32894)"} true;
    assume ($t34 == ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t33) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t33)));

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume ($t36 == $1_Signer_spec_address_of($t0));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:746:9+52
    assume {:print "$at(11,35540,35592)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assume Identical($t38, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t29)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:712:9+61
    assume {:print "$at(12,31724,31785)"} true;
    assume ($t38 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t29))));

    // assume Identical($t39, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:801:9+52
    assume {:print "$at(11,38333,38385)"} true;
    assume ($t39 == $1_Signer_spec_address_of($t0));

    // assume Identical($t40, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t40 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t41, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:9+42
    assume {:print "$at(12,32247,32289)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t0));

    // assume Identical($t42, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t42 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t43, Diem::spec_currency_code<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t43 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t44, select Diem::CurrencyInfo.preburn_events($t42)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t44 == $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t42));

    // assume Identical($t45, pack Diem::PreburnEvent($t1, $t43, $t41)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t45 == $1_Diem_PreburnEvent($t1, $t43, $t41));

    // assume Identical($t46, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t46 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t47, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t46))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t47 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t46)));

    // assume Identical($t48, pack DiemAccount::SentPaymentEvent($t1, Diem::spec_currency_code<XUS::XUS>(), $t41, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t48 == $1_DiemAccount_SentPaymentEvent($t1, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t41, $EmptyVec'u8'()));

    // assert CanModify<DiemAccount::Balance<XUS::XUS>>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'$1_XUS_XUS'_$modifies[$t29];

    // assert CanModify<Diem::Preburn<XUS::XUS>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'$1_XUS_XUS'_$modifies[$t39];

    // assert CanModify<Diem::PreburnQueue<XUS::XUS>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'$1_XUS_XUS'_$modifies[$t39];

    // assert CanModify<Diem::CurrencyInfo<XUS::XUS>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'$1_XUS_XUS'_$modifies[173345816];

    // opaque begin: DiemAccount::preburn<XUS::XUS>($t0, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60

    // assume Identical($t49, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_operating()), Not(DiemAccount::$exists_at($t30))), Not(exists<DiemAccount::Balance<XUS::XUS>>($t30))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XUS::XUS>())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t1, VASP::spec_parent_address($t30)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t30))), $t1)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t30)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), $t1), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), Not(DiemTimestamp::$is_operating())))), Not(Or(exists<Diem::Preburn<XUS::XUS>>($t31), exists<Diem::PreburnQueue<XUS::XUS>>($t31)))), Not(exists<Roles::RoleId>($t32))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t32)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<XUS::XUS>()), $t1), 18446744073709551615)), Not(Diem::spec_is_currency<XUS::XUS>())), And($t34, Not(exists<Roles::RoleId>($t35)))), And($t34, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t35)), 2))), And($t34, Not(Diem::spec_is_currency<XUS::XUS>()))), Not(exists<Roles::RoleId>($t36))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t36)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XUS::XUS>(Diem::spec_make_preburn<XUS::XUS>($t1), [])))), 0)), And(exists<Diem::PreburnQueue<XUS::XUS>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XUS::XUS>>($t37))), 256)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume ($t49 == (((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t30)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) || ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t30))) < $t1)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t30)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) + $t1) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t31) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t31))) || !$ResourceExists($1_Roles_RoleId_$memory, $t32)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t32)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) + $t1) > 18446744073709551615)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || ($t34 && !$ResourceExists($1_Roles_RoleId_$memory, $t35))) || ($t34 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t35)), 2))) || ($t34 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || !$ResourceExists($1_Roles_RoleId_$memory, $t36)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t36)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_spec_make_preburn'$1_XUS_XUS'($t1), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t37))) >= 256))));

    // if ($t49) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    if ($t49) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27)), And(Not(DiemAccount::$exists_at($t30)), Eq(5, $t27))), And(Not(exists<DiemAccount::Balance<XUS::XUS>>($t30)), Eq(5, $t27))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t1, VASP::spec_parent_address($t30))))), Eq(8, $t27))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t30))), $t1), Eq(8, $t27))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27))), And(AccountFreezing::spec_account_is_frozen($t30), Eq(1, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), $t1), 18446744073709551615))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30))))), MaxU64()))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t30)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t27))), Not(Or(exists<Diem::Preburn<XUS::XUS>>($t31), exists<Diem::PreburnQueue<XUS::XUS>>($t31)))), And(Not(exists<Roles::RoleId>($t32)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t32)), 2), Eq(3, $t27))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<XUS::XUS>()), $t1), 18446744073709551615), Eq(8, $t27))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t27))), And(And($t34, Not(exists<Roles::RoleId>($t35))), Eq(5, $t27))), And(And($t34, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t35)), 2)), Eq(3, $t27))), And(And($t34, Not(Diem::spec_is_currency<XUS::XUS>())), Eq(5, $t27))), And(Not(exists<Roles::RoleId>($t36)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t36)), 2), Eq(3, $t27))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XUS::XUS>(Diem::spec_make_preburn<XUS::XUS>($t1), [])))), 0), Eq(7, $t27))), And(And(exists<Diem::PreburnQueue<XUS::XUS>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XUS::XUS>>($t37))), 256)), Eq(8, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume ((((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t30) && $IsEqual'num'(5, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) && $IsEqual'num'(8, $t27))) || (($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t30))) < $t1) && $IsEqual'num'(8, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t30) && $IsEqual'num'(1, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) + $t1) > 18446744073709551615))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) > $MAX_U64))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t27))) || !($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t31) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t31))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t32) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t32)), 2) && $IsEqual'num'(3, $t27))) || ((($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) + $t1) > 18446744073709551615) && $IsEqual'num'(8, $t27))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t27))) || (($t34 && !$ResourceExists($1_Roles_RoleId_$memory, $t35)) && $IsEqual'num'(5, $t27))) || (($t34 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t35)), 2)) && $IsEqual'num'(3, $t27))) || (($t34 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t36) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t36)), 2) && $IsEqual'num'(3, $t27))) || ($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_spec_make_preburn'$1_XUS_XUS'($t1), $EmptyVec'u8'())))), 0) && $IsEqual'num'(7, $t27))) || (($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t37))) >= 256)) && $IsEqual'num'(8, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
L5:

    // @280 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    $1_DiemAccount_DiemAccount_$memory#280 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t29)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t29), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t29));
    }

    // modifies global<DiemAccount::DiemAccount>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t29, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t29);
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t29, $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t29);
    }

    // modifies global<Diem::Preburn<XUS::XUS>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_Preburn'$1_XUS_XUS'';
        $1_Diem_Preburn'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t39, $temp_0'$1_Diem_Preburn'$1_XUS_XUS'');
    } else {
        $1_Diem_Preburn'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_Preburn'$1_XUS_XUS'_$memory, $t39);
    }

    // modifies global<Diem::PreburnQueue<XUS::XUS>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'';
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t39, $temp_0'$1_Diem_PreburnQueue'$1_XUS_XUS'');
    } else {
        $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t39);
    }

    // modifies global<Diem::CurrencyInfo<XUS::XUS>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'';
        $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816, $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'');
    } else {
        $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816);
    }

    // assume Identical($t50, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t29)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:713:9+71
    assume {:print "$at(12,31794,31865)"} true;
    assume ($t50 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t29))));

    // assume Identical($t51, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t51 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume exists<DiemAccount::DiemAccount>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t29);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.withdraw_capability(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.sent_events(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.received_events(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t28)), select DiemAccount::DiemAccount.sent_events(global[@280]<DiemAccount::DiemAccount>($t28))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t28)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t28)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t28)), select DiemAccount::DiemAccount.received_events(global[@280]<DiemAccount::DiemAccount>($t28))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t28)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t28)));

    // assume Eq<u64>($t50, Sub($t38, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'u64'($t50, ($t38 - $t1));

    // assume exists<Diem::PreburnQueue<XUS::XUS>>($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t39);

    // assume Eq<Diem::CurrencyInfo<XUS::XUS>>($t51, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<XUS::XUS>>($t40, Add(select Diem::CurrencyInfo.preburn_value($t40), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''($t51, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value($t40, ($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t40) + $t1)));

    // assume Identical($t52, $t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t52 == $t45);

    // assume Identical($t53, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t53 == $t44);

    // assume Identical($t54, Not(select Diem::CurrencyInfo.is_synthetic($t42))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t54 == !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t42));

    // emit_event($t52, $t53, $t54) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    $es := $CondExtendEventStore'$1_Diem_PreburnEvent'($es, $t53, $t52, $t54);

    // assume Identical($t55, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t55 == $t48);

    // assume Identical($t56, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t56 == $t47);

    // emit_event($t55, $t56) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t56, $t55);

    // opaque end: DiemAccount::preburn<XUS::XUS>($t0, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;

    // assume Identical($t57, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t57 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // opaque begin: DiemAccount::restore_withdraw_capability($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume {:print "$at(34,18477,18531)"} true;

    // assume Identical($t58, Or(Not(DiemAccount::$exists_at($t57)), Not(DiemAccount::$delegated_withdraw_capability($t57)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume ($t58 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t57) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t57)));

    // if ($t58) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    if ($t58) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t57)), Eq(5, $t27)), And(Not(DiemAccount::$delegated_withdraw_capability($t57)), Eq(1, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t57) && $IsEqual'num'(5, $t27)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t57) && $IsEqual'num'(1, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume {:print "$at(34,18477,18531)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
L7:

    // @281 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    $1_DiemAccount_DiemAccount_$memory#281 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t57) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t57, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t57);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t57), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@281]<DiemAccount::DiemAccount>($t57), Option::spec_some<DiemAccount::WithdrawCapability>($t25))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t57), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t57), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t25)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t57) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t57);

    // opaque end: DiemAccount::restore_withdraw_capability($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:245:5+1
    assume {:print "$at(34,18537,18538)"} true;
L1:

    // assume Identical($t59, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t3)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:713:9+71
    assume {:print "$at(12,31794,31865)"} true;
    assume ($t59 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t3))));

    // assume Identical($t60, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t60 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assert Not(Not(DiemAccount::$exists_at[@266]($t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(Not(DiemAccount::$exists_at[@266]($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5);

    // assert Not(Not(exists[@268]<DiemAccount::Balance<XUS::XUS>>($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268, $t5);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(Not(Diem::spec_is_currency[@269]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<XUS::XUS>($t1, VASP::spec_parent_address[@271, @272]($t5)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<XUS::XUS>>($t5))), $t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268, $t5))) < $t1);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(AccountFreezing::spec_account_is_frozen[@275]($t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)));

    // assert Not(Not(Or(exists[@276]<Diem::Preburn<XUS::XUS>>($t6), exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t6)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:792:9+101
    assume {:print "$at(11,37844,37945)"} true;
    assert {:msg "assert_failed(11,37844,37945): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t6));

    // assert Not(Not(exists[@278]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#278, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<XUS::XUS>()), $t1), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:520:9+102
    assume {:print "$at(11,24815,24917)"} true;
    assert {:msg "assert_failed(11,24815,24917): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269)) + $t1) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@269]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269);

    // assert Not(And($t9, Not(exists[@278]<Roles::RoleId>($t10)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10));

    // assert Not(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2));

    // assert Not(And($t9, Not(Diem::spec_is_currency[@269]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($t9 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269));

    // assert Not(Not(exists[@278]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#278, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XUS::XUS>(Diem::spec_make_preburn[]<XUS::XUS>($t1), [])))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:9+75
    assume {:print "$at(11,35601,35676)"} true;
    assert {:msg "assert_failed(11,35601,35676): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_spec_make_preburn'$1_XUS_XUS'($t1), $EmptyVec'u8'())))), 0);

    // assert Not(And(exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<XUS::XUS>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:748:9+208
    assume {:print "$at(11,35685,35893)"} true;
    assert {:msg "assert_failed(11,35685,35893): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t12))) >= 256));

    // assert Not(Not(Or(exists[@276]<Diem::Preburn<XUS::XUS>>($t3), exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t3)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:269:9+107
    assume {:print "$at(34,19517,19624)"} true;
    assert {:msg "assert_failed(34,19517,19624): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t3));

    // assert Eq<u64>($t59, Sub($t13, $t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:715:9+53
    assume {:print "$at(12,31930,31983)"} true;
    assert {:msg "assert_failed(12,31930,31983): post-condition does not hold"}
      $IsEqual'u64'($t59, ($t13 - $t1));

    // assert exists<Diem::PreburnQueue<XUS::XUS>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:806:9+53
    assume {:print "$at(11,38643,38696)"} true;
    assert {:msg "assert_failed(11,38643,38696): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t14);

    // assert Eq<Diem::CurrencyInfo<XUS::XUS>>($t60, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<XUS::XUS>>($t15, Add(select Diem::CurrencyInfo.preburn_value($t15), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:527:9+84
    assume {:print "$at(11,25144,25228)"} true;
    assert {:msg "assert_failed(11,25144,25228): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''($t60, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value($t15, ($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t15) + $t1)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:540:9+42
    assume {:print "$at(11,25624,25666)"} true;
    assert {:msg "assert_failed(11,25624,25666): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t17)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t17)), $t22, $t23); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assume {:print "$at(34,18544,19630)"} true;
    assert {:msg "assert_failed(34,18544,19630): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t17)), $t22, $t23); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:245:5+1
    assume {:print "$at(34,18537,18538)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemAccount::$exists_at[@266]($t3)), DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3)), Not(DiemTimestamp::$is_operating[@267]())), Not(DiemAccount::$exists_at[@266]($t5))), Not(exists[@268]<DiemAccount::Balance<XUS::XUS>>($t5))), Not(DiemTimestamp::$is_operating[@267]())), Not(Diem::spec_is_currency[@269]<XUS::XUS>())), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<XUS::XUS>($t1, VASP::spec_parent_address[@271, @272]($t5)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<XUS::XUS>>($t5))), $t1)), Not(DiemTimestamp::$is_operating[@267]())), AccountFreezing::spec_account_is_frozen[@275]($t5)), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))))))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]())))), Not(Or(exists[@276]<Diem::Preburn<XUS::XUS>>($t6), exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t6)))), Not(exists[@278]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<XUS::XUS>()), $t1), 18446744073709551615)), Not(Diem::spec_is_currency[@269]<XUS::XUS>())), And($t9, Not(exists[@278]<Roles::RoleId>($t10)))), And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2))), And($t9, Not(Diem::spec_is_currency[@269]<XUS::XUS>()))), Not(exists[@278]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XUS::XUS>(Diem::spec_make_preburn[]<XUS::XUS>($t1), [])))), 0)), And(exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<XUS::XUS>>($t12))), 256))), Not(Or(exists[@276]<Diem::Preburn<XUS::XUS>>($t3), exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t3)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assume {:print "$at(34,18544,19630)"} true;
    assert {:msg "assert_failed(34,18544,19630): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268, $t5)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) || ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268, $t5))) < $t1)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)))) || !($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t6))) || !$ResourceExists($1_Roles_RoleId_$memory#278, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269)) + $t1) > 18446744073709551615)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269)) || ($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10))) || ($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2))) || ($t9 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269))) || !$ResourceExists($1_Roles_RoleId_$memory#278, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_spec_make_preburn'$1_XUS_XUS'($t1), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t12))) >= 256))) || !($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t3)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemAccount::$exists_at[@266]($t3)), Eq(5, $t27)), And(DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3), Eq(1, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(Not(DiemAccount::$exists_at[@266]($t5)), Eq(5, $t27))), And(Not(exists[@268]<DiemAccount::Balance<XUS::XUS>>($t5)), Eq(5, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(Not(Diem::spec_is_currency[@269]<XUS::XUS>()), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<XUS::XUS>($t1, VASP::spec_parent_address[@271, @272]($t5))))), Eq(8, $t27))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<XUS::XUS>>($t5))), $t1), Eq(8, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(AccountFreezing::spec_account_is_frozen[@275]($t5), Eq(1, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64()))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XUS::XUS>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XUS::XUS>(global[@270]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]()))), Eq(1, $t27))), Not(Or(exists[@276]<Diem::Preburn<XUS::XUS>>($t6), exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t6)))), And(Not(exists[@278]<Roles::RoleId>($t7)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2), Eq(3, $t27))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<XUS::XUS>()), $t1), 18446744073709551615), Eq(8, $t27))), And(Not(Diem::spec_is_currency[@269]<XUS::XUS>()), Eq(5, $t27))), And(And($t9, Not(exists[@278]<Roles::RoleId>($t10))), Eq(5, $t27))), And(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2)), Eq(3, $t27))), And(And($t9, Not(Diem::spec_is_currency[@269]<XUS::XUS>())), Eq(5, $t27))), And(Not(exists[@278]<Roles::RoleId>($t11)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2), Eq(3, $t27))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XUS::XUS>(Diem::spec_make_preburn[]<XUS::XUS>($t1), [])))), 0), Eq(7, $t27))), And(And(exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<XUS::XUS>>($t12))), 256)), Eq(8, $t27))), Not(Or(exists[@276]<Diem::Preburn<XUS::XUS>>($t3), exists[@277]<Diem::PreburnQueue<XUS::XUS>>($t3)))), Eq(5, $t27)), Eq(1, $t27)), Eq(3, $t27)), Eq(8, $t27)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assert {:msg "assert_failed(34,18544,19630): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3) && $IsEqual'num'(5, $t27)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3) && $IsEqual'num'(1, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268, $t5) && $IsEqual'num'(5, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) && $IsEqual'num'(8, $t27))) || (($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#268, $t5))) < $t1) && $IsEqual'num'(8, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5) && $IsEqual'num'(1, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267))) && $IsEqual'num'(1, $t27))) || !($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t6))) || (!$ResourceExists($1_Roles_RoleId_$memory#278, $t7) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2) && $IsEqual'num'(3, $t27))) || ((($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269)) + $t1) > 18446744073709551615) && $IsEqual'num'(8, $t27))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269) && $IsEqual'num'(5, $t27))) || (($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10)) && $IsEqual'num'(5, $t27))) || (($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2)) && $IsEqual'num'(3, $t27))) || (($t9 && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#269)) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_Roles_RoleId_$memory#278, $t11) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2) && $IsEqual'num'(3, $t27))) || ($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_PreburnWithMetadata'$1_XUS_XUS'($1_Diem_spec_make_preburn'$1_XUS_XUS'($t1), $EmptyVec'u8'())))), 0) && $IsEqual'num'(7, $t27))) || (($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XUS_XUS''($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t12))) >= 256)) && $IsEqual'num'(8, $t27))) || !($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#277, $t3))) || $IsEqual'num'(5, $t27)) || $IsEqual'num'(1, $t27)) || $IsEqual'num'(3, $t27)) || $IsEqual'num'(8, $t27));

    // abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    $abort_code := $t27;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::preburn [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_preburn$verify_instantiated_1(_$t0: $signer, _$t1: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t2: $1_DiemAccount_WithdrawCapability;
    var $t3: int;
    var $t4: $1_DiemAccount_WithdrawCapability;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t16: int;
    var $t17: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t18: Vec (int);
    var $t19: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t20: $1_Diem_PreburnEvent;
    var $t21: int;
    var $t22: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t23: $1_DiemAccount_SentPaymentEvent;
    var $t24: int;
    var $t25: $1_DiemAccount_WithdrawCapability;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t41: int;
    var $t42: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t43: Vec (int);
    var $t44: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t45: $1_Diem_PreburnEvent;
    var $t46: int;
    var $t47: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t48: $1_DiemAccount_SentPaymentEvent;
    var $t49: bool;
    var $t50: int;
    var $t51: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t52: $1_Diem_PreburnEvent;
    var $t53: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    var $t54: bool;
    var $t55: $1_DiemAccount_SentPaymentEvent;
    var $t56: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t57: int;
    var $t58: bool;
    var $t59: int;
    var $t60: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: int;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$modifies: [int]bool;
    var $1_Diem_Preburn'$1_XDX_XDX'_$modifies: [int]bool;
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$modifies: [int]bool;
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'': $1_DiemAccount_Balance'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'$1_Diem_Preburn'$1_XDX_XDX'': $1_Diem_Preburn'$1_XDX_XDX';
    var $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'': $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_DiemAccount_DiemAccount_$memory#266: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#270: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_VASP_ChildVASP_$memory#271: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#272: $Memory $1_VASP_ParentVASP;
    var $1_DiemAccount_AccountOperationsCapability_$memory#273: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#275: $Memory $1_AccountFreezing_FreezingBit;
    var $1_Diem_Preburn'$1_XDX_XDX'_$memory#276: $Memory $1_Diem_Preburn'$1_XDX_XDX';
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $1_Roles_RoleId_$memory#278: $Memory $1_Roles_RoleId;
    var $1_DiemAccount_DiemAccount_$memory#279: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#280: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#281: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,18254,18538)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XDX::XDX>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr): Not(exists<Diem::Preburn<XDX::XDX>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::Preburn<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_Diem_Preburn'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XDX::XDX>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+284
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t3, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:253:9+52
    assume {:print "$at(34,18755,18807)"} true;
    assume ($t3 == $1_Signer_spec_address_of($t0));

    // assume Identical($t4, DiemAccount::spec_get_withdraw_cap($t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:254:9+59
    assume {:print "$at(34,18816,18875)"} true;
    assume ($t4 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t3));

    // assume Identical($t5, select DiemAccount::WithdrawCapability.account_address($t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t5 == $account_address#$1_DiemAccount_WithdrawCapability($t4));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(11,37634,37686)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+52
    assume {:print "$at(11,32730,32782)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, And(exists<Diem::Preburn<XDX::XDX>>($t8), Not(exists<Diem::PreburnQueue<XDX::XDX>>($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:698:9+103
    assume {:print "$at(11,32791,32894)"} true;
    assume ($t9 == ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t8) && !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t8)));

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // assume Identical($t11, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume ($t11 == $1_Signer_spec_address_of($t0));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:746:9+52
    assume {:print "$at(11,35540,35592)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume Identical($t13, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t3)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:712:9+61
    assume {:print "$at(12,31724,31785)"} true;
    assume ($t13 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t3))));

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:801:9+52
    assume {:print "$at(11,38333,38385)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // assume Identical($t15, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:9+42
    assume {:print "$at(12,32247,32289)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // assume Identical($t17, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t17 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t18, Diem::spec_currency_code<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t18 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t19, select Diem::CurrencyInfo.preburn_events($t17)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t19 == $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t17));

    // assume Identical($t20, pack Diem::PreburnEvent($t1, $t18, $t16)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t20 == $1_Diem_PreburnEvent($t1, $t18, $t16));

    // assume Identical($t21, select DiemAccount::WithdrawCapability.account_address($t4)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t21 == $account_address#$1_DiemAccount_WithdrawCapability($t4));

    // assume Identical($t22, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t21))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t22 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t21)));

    // assume Identical($t23, pack DiemAccount::SentPaymentEvent($t1, Diem::spec_currency_code<XDX::XDX>(), $t16, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t23 == $1_DiemAccount_SentPaymentEvent($t1, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t16, $EmptyVec'u8'()));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // assume CanModify<DiemAccount::Balance<XDX::XDX>>($t3) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:711:9+39
    assume {:print "$at(12,31676,31715)"} true;
    assume $1_DiemAccount_Balance'$1_XDX_XDX'_$modifies[$t3];

    // assume CanModify<Diem::Preburn<XDX::XDX>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:803:9+49
    assume {:print "$at(11,38448,38497)"} true;
    assume $1_Diem_Preburn'$1_XDX_XDX'_$modifies[$t14];

    // assume CanModify<Diem::PreburnQueue<XDX::XDX>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:805:9+54
    assume {:print "$at(11,38580,38634)"} true;
    assume $1_Diem_PreburnQueue'$1_XDX_XDX'_$modifies[$t14];

    // assume CanModify<Diem::CurrencyInfo<XDX::XDX>>(a550c18) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    assume {:print "$at(11,38772,38827)"} true;
    assume $1_Diem_CurrencyInfo'$1_XDX_XDX'_$modifies[173345816];

    // @267 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @278 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Roles_RoleId_$memory#278 := $1_Roles_RoleId_$memory;

    // @269 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @276 := save_mem(Diem::Preburn<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_Preburn'$1_XDX_XDX'_$memory#276 := $1_Diem_Preburn'$1_XDX_XDX'_$memory;

    // @277 := save_mem(Diem::PreburnQueue<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277 := $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory;

    // @274 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @270 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#270 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // @271 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_VASP_ChildVASP_$memory#271 := $1_VASP_ChildVASP_$memory;

    // @272 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_VASP_ParentVASP_$memory#272 := $1_VASP_ParentVASP_$memory;

    // @275 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_AccountFreezing_FreezingBit_$memory#275 := $1_AccountFreezing_FreezingBit_$memory;

    // @266 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_DiemAccount_$memory#266 := $1_DiemAccount_DiemAccount_$memory;

    // @273 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_AccountOperationsCapability_$memory#273 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @268 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/Diem.move:808:9+55
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+1
    assume {:print "$at(34,18254,18255)"} true;
    assume {:print "$track_local(42,5,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:241:5+1
    assume {:print "$track_local(42,5,1):", $t1} $t1 == $t1;

    // assume Identical($t24, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t24 == $1_Signer_spec_address_of($t0));

    // $t25 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume {:print "$at(34,18347,18397)"} true;

    // assume Identical($t26, Or(Not(DiemAccount::$exists_at($t24)), DiemAccount::spec_holds_delegated_withdraw_capability($t24))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume ($t26 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t24) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t24)));

    // if ($t26) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    if ($t26) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t24)), Eq(5, $t27)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t24), Eq(1, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t24) && $IsEqual'num'(5, $t27)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t24) && $IsEqual'num'(1, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume {:print "$at(34,18347,18397)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
L3:

    // @279 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    $1_DiemAccount_DiemAccount_$memory#279 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t24, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t24);
    }

    // assume WellFormed($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t25);

    // assume exists<DiemAccount::DiemAccount>($t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t24);

    // assume Eq<DiemAccount::WithdrawCapability>($t25, DiemAccount::spec_get_withdraw_cap[@279]($t24)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t25, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#279, $t24));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t24), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@279]<DiemAccount::DiemAccount>($t24), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t24), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#279, $t24), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t25), $t24) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t25), $t24);

    // $t25 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:28+50

    // trace_local[withdraw_cap]($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:242:13+12
    assume {:print "$track_local(42,5,2):", $t25} $t25 == $t25;

    // assume Identical($t28, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:680:9+42
    assume {:print "$at(12,30059,30101)"} true;
    assume ($t28 == $1_Signer_spec_address_of($t0));

    // assume Identical($t29, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:681:9+32
    assume {:print "$at(12,30110,30142)"} true;
    assume ($t29 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t31, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:789:9+52
    assume {:print "$at(11,37634,37686)"} true;
    assume ($t31 == $1_Signer_spec_address_of($t0));

    // assume Identical($t32, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t32 == $1_Signer_spec_address_of($t0));

    // assume Identical($t33, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:697:9+52
    assume {:print "$at(11,32730,32782)"} true;
    assume ($t33 == $1_Signer_spec_address_of($t0));

    // assume Identical($t34, And(exists<Diem::Preburn<XDX::XDX>>($t33), Not(exists<Diem::PreburnQueue<XDX::XDX>>($t33)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:698:9+103
    assume {:print "$at(11,32791,32894)"} true;
    assume ($t34 == ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t33) && !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t33)));

    // assume Identical($t35, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume {:print "$at(28,25113,25157)"} true;
    assume ($t35 == $1_Signer_spec_address_of($t0));

    // assume Identical($t36, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:565:9+44
    assume ($t36 == $1_Signer_spec_address_of($t0));

    // assume Identical($t37, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:746:9+52
    assume {:print "$at(11,35540,35592)"} true;
    assume ($t37 == $1_Signer_spec_address_of($t0));

    // assume Identical($t38, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t29)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:712:9+61
    assume {:print "$at(12,31724,31785)"} true;
    assume ($t38 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t29))));

    // assume Identical($t39, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:801:9+52
    assume {:print "$at(11,38333,38385)"} true;
    assume ($t39 == $1_Signer_spec_address_of($t0));

    // assume Identical($t40, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:525:9+42
    assume {:print "$at(11,25032,25074)"} true;
    assume ($t40 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t41, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:723:9+42
    assume {:print "$at(12,32247,32289)"} true;
    assume ($t41 == $1_Signer_spec_address_of($t0));

    // assume Identical($t42, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:532:9+42
    assume {:print "$at(11,25351,25393)"} true;
    assume ($t42 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t43, Diem::spec_currency_code<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:533:9+51
    assume {:print "$at(11,25402,25453)"} true;
    assume ($t43 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t44, select Diem::CurrencyInfo.preburn_events($t42)) at /home/ying/diem/language/diem-framework/modules/Diem.move:534:9+33
    assume {:print "$at(11,25462,25495)"} true;
    assume ($t44 == $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t42));

    // assume Identical($t45, pack Diem::PreburnEvent($t1, $t43, $t41)) at /home/ying/diem/language/diem-framework/modules/Diem.move:535:9+111
    assume {:print "$at(11,25504,25615)"} true;
    assume ($t45 == $1_Diem_PreburnEvent($t1, $t43, $t41));

    // assume Identical($t46, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t46 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // assume Identical($t47, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t46))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t47 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t46)));

    // assume Identical($t48, pack DiemAccount::SentPaymentEvent($t1, Diem::spec_currency_code<XDX::XDX>(), $t41, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t48 == $1_DiemAccount_SentPaymentEvent($t1, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t41, $EmptyVec'u8'()));

    // assert CanModify<DiemAccount::Balance<XDX::XDX>>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `DiemAccount::Balance<#0>` at given address"}
      $1_DiemAccount_Balance'$1_XDX_XDX'_$modifies[$t29];

    // assert CanModify<Diem::Preburn<XDX::XDX>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::Preburn<#0>` at given address"}
      $1_Diem_Preburn'$1_XDX_XDX'_$modifies[$t39];

    // assert CanModify<Diem::PreburnQueue<XDX::XDX>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::PreburnQueue<#0>` at given address"}
      $1_Diem_PreburnQueue'$1_XDX_XDX'_$modifies[$t39];

    // assert CanModify<Diem::CurrencyInfo<XDX::XDX>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assert {:msg "assert_failed(34,18407,18467): caller does not have permission to modify `Diem::CurrencyInfo<#0>` at given address"}
      $1_Diem_CurrencyInfo'$1_XDX_XDX'_$modifies[173345816];

    // opaque begin: DiemAccount::preburn<XDX::XDX>($t0, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60

    // assume Identical($t49, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemTimestamp::$is_operating()), Not(DiemAccount::$exists_at($t30))), Not(exists<DiemAccount::Balance<XDX::XDX>>($t30))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XDX::XDX>())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t1, VASP::spec_parent_address($t30)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t30))), $t1)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t30)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), $t1), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), Not(DiemTimestamp::$is_operating())))), Not(Or(exists<Diem::Preburn<XDX::XDX>>($t31), exists<Diem::PreburnQueue<XDX::XDX>>($t31)))), Not(exists<Roles::RoleId>($t32))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t32)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<XDX::XDX>()), $t1), 18446744073709551615)), Not(Diem::spec_is_currency<XDX::XDX>())), And($t34, Not(exists<Roles::RoleId>($t35)))), And($t34, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t35)), 2))), And($t34, Not(Diem::spec_is_currency<XDX::XDX>()))), Not(exists<Roles::RoleId>($t36))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t36)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XDX::XDX>(Diem::spec_make_preburn<XDX::XDX>($t1), [])))), 0)), And(exists<Diem::PreburnQueue<XDX::XDX>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XDX::XDX>>($t37))), 256)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume ($t49 == (((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t30)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) || ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t30))) < $t1)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t30)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) + $t1) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t31) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t31))) || !$ResourceExists($1_Roles_RoleId_$memory, $t32)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t32)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) + $t1) > 18446744073709551615)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || ($t34 && !$ResourceExists($1_Roles_RoleId_$memory, $t35))) || ($t34 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t35)), 2))) || ($t34 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))) || !$ResourceExists($1_Roles_RoleId_$memory, $t36)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t36)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_spec_make_preburn'$1_XDX_XDX'($t1), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t37))) >= 256))));

    // if ($t49) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    if ($t49) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27)), And(Not(DiemAccount::$exists_at($t30)), Eq(5, $t27))), And(Not(exists<DiemAccount::Balance<XDX::XDX>>($t30)), Eq(5, $t27))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t1, VASP::spec_parent_address($t30))))), Eq(8, $t27))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t30))), $t1), Eq(8, $t27))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t27))), And(AccountFreezing::spec_account_is_frozen($t30), Eq(1, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), $t1), 18446744073709551615))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30))))), MaxU64()))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t30, Signer::spec_address_of($t0), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t30)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t27))), Not(Or(exists<Diem::Preburn<XDX::XDX>>($t31), exists<Diem::PreburnQueue<XDX::XDX>>($t31)))), And(Not(exists<Roles::RoleId>($t32)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t32)), 2), Eq(3, $t27))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<XDX::XDX>()), $t1), 18446744073709551615), Eq(8, $t27))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t27))), And(And($t34, Not(exists<Roles::RoleId>($t35))), Eq(5, $t27))), And(And($t34, Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t35)), 2)), Eq(3, $t27))), And(And($t34, Not(Diem::spec_is_currency<XDX::XDX>())), Eq(5, $t27))), And(Not(exists<Roles::RoleId>($t36)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t36)), 2), Eq(3, $t27))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XDX::XDX>(Diem::spec_make_preburn<XDX::XDX>($t1), [])))), 0), Eq(7, $t27))), And(And(exists<Diem::PreburnQueue<XDX::XDX>>($t37), Ge(Vector::$length<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XDX::XDX>>($t37))), 256)), Eq(8, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume ((((((((((((((((((((((((((!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t30) && $IsEqual'num'(5, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) && $IsEqual'num'(8, $t27))) || (($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t30))) < $t1) && $IsEqual'num'(8, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t27))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t30) && $IsEqual'num'(1, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30)))) + $t1) > 18446744073709551615))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))))) > $MAX_U64))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t30))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t27))) || !($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t31) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t31))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t32) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t32)), 2) && $IsEqual'num'(3, $t27))) || ((($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) + $t1) > 18446744073709551615) && $IsEqual'num'(8, $t27))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t27))) || (($t34 && !$ResourceExists($1_Roles_RoleId_$memory, $t35)) && $IsEqual'num'(5, $t27))) || (($t34 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t35)), 2)) && $IsEqual'num'(3, $t27))) || (($t34 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t36) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t36)), 2) && $IsEqual'num'(3, $t27))) || ($IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_spec_make_preburn'$1_XDX_XDX'($t1), $EmptyVec'u8'())))), 0) && $IsEqual'num'(7, $t27))) || (($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t37) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t37))) >= 256)) && $IsEqual'num'(8, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
L5:

    // @280 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    $1_DiemAccount_DiemAccount_$memory#280 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t29)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t29), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t29));
    }

    // modifies global<DiemAccount::DiemAccount>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t29, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t29);
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>($t29) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t29, $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t29);
    }

    // modifies global<Diem::Preburn<XDX::XDX>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_Preburn'$1_XDX_XDX'';
        $1_Diem_Preburn'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t39, $temp_0'$1_Diem_Preburn'$1_XDX_XDX'');
    } else {
        $1_Diem_Preburn'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_Preburn'$1_XDX_XDX'_$memory, $t39);
    }

    // modifies global<Diem::PreburnQueue<XDX::XDX>>($t39) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'';
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t39, $temp_0'$1_Diem_PreburnQueue'$1_XDX_XDX'');
    } else {
        $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t39);
    }

    // modifies global<Diem::CurrencyInfo<XDX::XDX>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';
        $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816, $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'');
    } else {
        $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816);
    }

    // assume Identical($t50, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t29)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:713:9+71
    assume {:print "$at(12,31794,31865)"} true;
    assume ($t50 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t29))));

    // assume Identical($t51, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t51 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume exists<DiemAccount::DiemAccount>($t29) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t29);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.withdraw_capability(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.sent_events(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t29)), select DiemAccount::DiemAccount.received_events(global[@280]<DiemAccount::DiemAccount>($t29))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t29)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t29)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t28)), select DiemAccount::DiemAccount.sent_events(global[@280]<DiemAccount::DiemAccount>($t28))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t28)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t28)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t28)), select DiemAccount::DiemAccount.received_events(global[@280]<DiemAccount::DiemAccount>($t28))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t28)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#280, $t28)));

    // assume Eq<u64>($t50, Sub($t38, $t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'u64'($t50, ($t38 - $t1));

    // assume exists<Diem::PreburnQueue<XDX::XDX>>($t39) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t39);

    // assume Eq<Diem::CurrencyInfo<XDX::XDX>>($t51, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<XDX::XDX>>($t40, Add(select Diem::CurrencyInfo.preburn_value($t40), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''($t51, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value($t40, ($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t40) + $t1)));

    // assume Identical($t52, $t45) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t52 == $t45);

    // assume Identical($t53, $t44) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t53 == $t44);

    // assume Identical($t54, Not(select Diem::CurrencyInfo.is_synthetic($t42))) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t54 == !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t42));

    // emit_event($t52, $t53, $t54) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    $es := $CondExtendEventStore'$1_Diem_PreburnEvent'($es, $t53, $t52, $t54);

    // assume Identical($t55, $t48) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t55 == $t48);

    // assume Identical($t56, $t47) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume ($t56 == $t47);

    // emit_event($t55, $t56) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:243:9+60
    assume {:print "$at(34,18407,18467)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t56, $t55);

    // opaque end: DiemAccount::preburn<XDX::XDX>($t0, $t25, $t1) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;

    // assume Identical($t57, select DiemAccount::WithdrawCapability.account_address($t25)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t57 == $account_address#$1_DiemAccount_WithdrawCapability($t25));

    // opaque begin: DiemAccount::restore_withdraw_capability($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume {:print "$at(34,18477,18531)"} true;

    // assume Identical($t58, Or(Not(DiemAccount::$exists_at($t57)), Not(DiemAccount::$delegated_withdraw_capability($t57)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume ($t58 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t57) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t57)));

    // if ($t58) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    if ($t58) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t57)), Eq(5, $t27)), And(Not(DiemAccount::$delegated_withdraw_capability($t57)), Eq(1, $t27))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t57) && $IsEqual'num'(5, $t27)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t57) && $IsEqual'num'(1, $t27)));

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume {:print "$at(34,18477,18531)"} true;
    assume {:print "$track_abort(42,5):", $t27} $t27 == $t27;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
L7:

    // @281 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    $1_DiemAccount_DiemAccount_$memory#281 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t57) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t57, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t57);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t57), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@281]<DiemAccount::DiemAccount>($t57), Option::spec_some<DiemAccount::WithdrawCapability>($t25))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t57), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#281, $t57), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t25)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t57) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t57);

    // opaque end: DiemAccount::restore_withdraw_capability($t25) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:244:9+54

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:245:5+1
    assume {:print "$at(34,18537,18538)"} true;
L1:

    // assume Identical($t59, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t3)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:713:9+71
    assume {:print "$at(12,31794,31865)"} true;
    assume ($t59 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t3))));

    // assume Identical($t60, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:526:9+52
    assume {:print "$at(11,25083,25135)"} true;
    assume ($t60 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assert Not(Not(DiemAccount::$exists_at[@266]($t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(Not(DiemAccount::$exists_at[@266]($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5);

    // assert Not(Not(exists[@268]<DiemAccount::Balance<XDX::XDX>>($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268, $t5);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(Not(Diem::spec_is_currency[@269]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<XDX::XDX>($t1, VASP::spec_parent_address[@271, @272]($t5)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<XDX::XDX>>($t5))), $t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268, $t5))) < $t1);

    // assert Not(Not(DiemTimestamp::$is_operating[@267]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267);

    // assert Not(AccountFreezing::spec_account_is_frozen[@275]($t5)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)));

    // assert Not(Not(Or(exists[@276]<Diem::Preburn<XDX::XDX>>($t6), exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t6)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:792:9+101
    assume {:print "$at(11,37844,37945)"} true;
    assert {:msg "assert_failed(11,37844,37945): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t6));

    // assert Not(Not(exists[@278]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#278, $t7);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2);

    // assert Not(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<XDX::XDX>()), $t1), 18446744073709551615)) at /home/ying/diem/language/diem-framework/modules/Diem.move:520:9+102
    assume {:print "$at(11,24815,24917)"} true;
    assert {:msg "assert_failed(11,24815,24917): function does not abort under this condition"}
      !(($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269)) + $t1) > 18446744073709551615);

    // assert Not(Not(Diem::spec_is_currency[@269]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269);

    // assert Not(And($t9, Not(exists[@278]<Roles::RoleId>($t10)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10));

    // assert Not(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2))) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2));

    // assert Not(And($t9, Not(Diem::spec_is_currency[@269]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($t9 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269));

    // assert Not(Not(exists[@278]<Roles::RoleId>($t11))) at /home/ying/diem/language/diem-framework/modules/Roles.move:566:9+59
    assume {:print "$at(28,25166,25225)"} true;
    assert {:msg "assert_failed(28,25166,25225): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#278, $t11);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2)) at /home/ying/diem/language/diem-framework/modules/Roles.move:567:9+95
    assume {:print "$at(28,25234,25329)"} true;
    assert {:msg "assert_failed(28,25234,25329): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2);

    // assert Not(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XDX::XDX>(Diem::spec_make_preburn[]<XDX::XDX>($t1), [])))), 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:747:9+75
    assume {:print "$at(11,35601,35676)"} true;
    assert {:msg "assert_failed(11,35601,35676): function does not abort under this condition"}
      !$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_spec_make_preburn'$1_XDX_XDX'($t1), $EmptyVec'u8'())))), 0);

    // assert Not(And(exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<XDX::XDX>>($t12))), 256))) at /home/ying/diem/language/diem-framework/modules/Diem.move:748:9+208
    assume {:print "$at(11,35685,35893)"} true;
    assert {:msg "assert_failed(11,35685,35893): function does not abort under this condition"}
      !($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t12))) >= 256));

    // assert Not(Not(Or(exists[@276]<Diem::Preburn<XDX::XDX>>($t3), exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t3)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:269:9+107
    assume {:print "$at(34,19517,19624)"} true;
    assert {:msg "assert_failed(34,19517,19624): function does not abort under this condition"}
      !!($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t3));

    // assert Eq<u64>($t59, Sub($t13, $t1)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:715:9+53
    assume {:print "$at(12,31930,31983)"} true;
    assert {:msg "assert_failed(12,31930,31983): post-condition does not hold"}
      $IsEqual'u64'($t59, ($t13 - $t1));

    // assert exists<Diem::PreburnQueue<XDX::XDX>>($t14) at /home/ying/diem/language/diem-framework/modules/Diem.move:806:9+53
    assume {:print "$at(11,38643,38696)"} true;
    assert {:msg "assert_failed(11,38643,38696): post-condition does not hold"}
      $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t14);

    // assert Eq<Diem::CurrencyInfo<XDX::XDX>>($t60, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<XDX::XDX>>($t15, Add(select Diem::CurrencyInfo.preburn_value($t15), $t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:527:9+84
    assume {:print "$at(11,25144,25228)"} true;
    assert {:msg "assert_failed(11,25144,25228): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''($t60, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value($t15, ($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t15) + $t1)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:540:9+42
    assume {:print "$at(11,25624,25666)"} true;
    assert {:msg "assert_failed(11,25624,25666): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t17)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t17)), $t22, $t23); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t20, $t19, Not(select Diem::CurrencyInfo.is_synthetic($t17))), $t23, $t22)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assume {:print "$at(34,18544,19630)"} true;
    assert {:msg "assert_failed(34,18544,19630): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($CondExtendEventStore'$1_Diem_PreburnEvent'($EmptyEventStore, $t19, $t20, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t17)), $t22, $t23); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:245:5+1
    assume {:print "$at(34,18537,18538)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(DiemAccount::$exists_at[@266]($t3)), DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3)), Not(DiemTimestamp::$is_operating[@267]())), Not(DiemAccount::$exists_at[@266]($t5))), Not(exists[@268]<DiemAccount::Balance<XDX::XDX>>($t5))), Not(DiemTimestamp::$is_operating[@267]())), Not(Diem::spec_is_currency[@269]<XDX::XDX>())), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<XDX::XDX>($t1, VASP::spec_parent_address[@271, @272]($t5)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<XDX::XDX>>($t5))), $t1)), Not(DiemTimestamp::$is_operating[@267]())), AccountFreezing::spec_account_is_frozen[@275]($t5)), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))))))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]())))), Not(Or(exists[@276]<Diem::Preburn<XDX::XDX>>($t6), exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t6)))), Not(exists[@278]<Roles::RoleId>($t7))), Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2)), Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<XDX::XDX>()), $t1), 18446744073709551615)), Not(Diem::spec_is_currency[@269]<XDX::XDX>())), And($t9, Not(exists[@278]<Roles::RoleId>($t10)))), And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2))), And($t9, Not(Diem::spec_is_currency[@269]<XDX::XDX>()))), Not(exists[@278]<Roles::RoleId>($t11))), Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2)), Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XDX::XDX>(Diem::spec_make_preburn[]<XDX::XDX>($t1), [])))), 0)), And(exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<XDX::XDX>>($t12))), 256))), Not(Or(exists[@276]<Diem::Preburn<XDX::XDX>>($t3), exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t3)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assume {:print "$at(34,18544,19630)"} true;
    assert {:msg "assert_failed(34,18544,19630): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268, $t5)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) || ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268, $t5))) < $t1)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267)))) || !($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t6))) || !$ResourceExists($1_Roles_RoleId_$memory#278, $t7)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2)) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269)) + $t1) > 18446744073709551615)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269)) || ($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10))) || ($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2))) || ($t9 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269))) || !$ResourceExists($1_Roles_RoleId_$memory#278, $t11)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2)) || $IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_spec_make_preburn'$1_XDX_XDX'($t1), $EmptyVec'u8'())))), 0)) || ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t12))) >= 256))) || !($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t3)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(DiemAccount::$exists_at[@266]($t3)), Eq(5, $t27)), And(DiemAccount::spec_holds_delegated_withdraw_capability[@266]($t3), Eq(1, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(Not(DiemAccount::$exists_at[@266]($t5)), Eq(5, $t27))), And(Not(exists[@268]<DiemAccount::Balance<XDX::XDX>>($t5)), Eq(5, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(Not(Diem::spec_is_currency[@269]<XDX::XDX>()), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@273]()), Not(AccountLimits::spec_update_withdrawal_limits[@267, @274, @270]<XDX::XDX>($t1, VASP::spec_parent_address[@271, @272]($t5))))), Eq(8, $t27))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@268]<DiemAccount::Balance<XDX::XDX>>($t5))), $t1), Eq(8, $t27))), And(Not(DiemTimestamp::$is_operating[@267]()), Eq(1, $t27))), And(AccountFreezing::spec_account_is_frozen[@275]($t5), Eq(1, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), Not(exists[@274]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))))), Eq(5, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@267, @274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), $t1), 18446744073709551615))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Gt(Add(select AccountLimits::Window.window_start(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5))))), MaxU64()))), Eq(8, $t27))), And(And(DiemAccount::spec_should_track_limits_for_account[@270, @271, @272]<XDX::XDX>($t5, Signer::spec_address_of[]($t0), true), And(Not(AccountLimits::spec_window_unrestricted[@274]<XDX::XDX>(global[@270]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@271, @272]($t5)))), Not(DiemTimestamp::$is_operating[@267]()))), Eq(1, $t27))), Not(Or(exists[@276]<Diem::Preburn<XDX::XDX>>($t6), exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t6)))), And(Not(exists[@278]<Roles::RoleId>($t7)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t7)), 2), Eq(3, $t27))), And(Gt(Add(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@269]<XDX::XDX>()), $t1), 18446744073709551615), Eq(8, $t27))), And(Not(Diem::spec_is_currency[@269]<XDX::XDX>()), Eq(5, $t27))), And(And($t9, Not(exists[@278]<Roles::RoleId>($t10))), Eq(5, $t27))), And(And($t9, Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t10)), 2)), Eq(3, $t27))), And(And($t9, Not(Diem::spec_is_currency[@269]<XDX::XDX>())), Eq(5, $t27))), And(Not(exists[@278]<Roles::RoleId>($t11)), Eq(5, $t27))), And(Neq<u64>(select Roles::RoleId.role_id(global[@278]<Roles::RoleId>($t11)), 2), Eq(3, $t27))), And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(pack Diem::PreburnWithMetadata<XDX::XDX>(Diem::spec_make_preburn[]<XDX::XDX>($t1), [])))), 0), Eq(7, $t27))), And(And(exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t12), Ge(Vector::$length[]<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns(global[@277]<Diem::PreburnQueue<XDX::XDX>>($t12))), 256)), Eq(8, $t27))), Not(Or(exists[@276]<Diem::Preburn<XDX::XDX>>($t3), exists[@277]<Diem::PreburnQueue<XDX::XDX>>($t3)))), Eq(5, $t27)), Eq(1, $t27)), Eq(3, $t27)), Eq(8, $t27)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    assert {:msg "assert_failed(34,18544,19630): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t3) && $IsEqual'num'(5, $t27)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#266, $t3) && $IsEqual'num'(1, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#266, $t5) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268, $t5) && $IsEqual'num'(5, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#273) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $t1, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) && $IsEqual'num'(8, $t27))) || (($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#268, $t5))) < $t1) && $IsEqual'num'(8, $t27))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267) && $IsEqual'num'(1, $t27))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#275, $t5) && $IsEqual'num'(1, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) && $IsEqual'num'(5, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5)))) + $t1) > 18446744073709551615))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))))) > $MAX_U64))) && $IsEqual'num'(8, $t27))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5, $1_Signer_spec_address_of($t0), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#274, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#270, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#271, $1_VASP_ParentVASP_$memory#272, $t5))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#267))) && $IsEqual'num'(1, $t27))) || !($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#276, $t6) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t6))) || (!$ResourceExists($1_Roles_RoleId_$memory#278, $t7) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t7)), 2) && $IsEqual'num'(3, $t27))) || ((($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269)) + $t1) > 18446744073709551615) && $IsEqual'num'(8, $t27))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269) && $IsEqual'num'(5, $t27))) || (($t9 && !$ResourceExists($1_Roles_RoleId_$memory#278, $t10)) && $IsEqual'num'(5, $t27))) || (($t9 && !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t10)), 2)) && $IsEqual'num'(3, $t27))) || (($t9 && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#269)) && $IsEqual'num'(5, $t27))) || (!$ResourceExists($1_Roles_RoleId_$memory#278, $t11) && $IsEqual'num'(5, $t27))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#278, $t11)), 2) && $IsEqual'num'(3, $t27))) || ($IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_PreburnWithMetadata'$1_XDX_XDX'($1_Diem_spec_make_preburn'$1_XDX_XDX'($t1), $EmptyVec'u8'())))), 0) && $IsEqual'num'(7, $t27))) || (($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t12) && ($1_Vector_$length'$1_Diem_PreburnWithMetadata'$1_XDX_XDX''($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t12))) >= 256)) && $IsEqual'num'(8, $t27))) || !($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory#276, $t3) || $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#277, $t3))) || $IsEqual'num'(5, $t27)) || $IsEqual'num'(1, $t27)) || $IsEqual'num'(3, $t27)) || $IsEqual'num'(8, $t27));

    // abort($t27) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:247:5+1086
    $abort_code := $t27;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::update_minting_ability [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_update_minting_ability$verify(_$t0: $signer, _$t1: bool) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,48470,48668)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume $IsValid'bool'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+1
    assume {:print "$track_local(42,11,0):", $t0} $t0 == $t0;

    // trace_local[allow_minting]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+1
    assume {:print "$track_local(42,11,1):", $t1} $t1 == $t1;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // Diem::update_minting_ability<#0>($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:641:9+66
    assume {:print "$at(34,48595,48661)"} true;
    call $1_Diem_update_minting_ability'#0'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,48595,48661)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,11):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    assume {:print "$at(34,48667,48668)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::update_minting_ability [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_update_minting_ability$verify_instantiated_0(_$t0: $signer, _$t1: bool) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,48470,48668)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume $IsValid'bool'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+1
    assume {:print "$track_local(42,11,0):", $t0} $t0 == $t0;

    // trace_local[allow_minting]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+1
    assume {:print "$track_local(42,11,1):", $t1} $t1 == $t1;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // Diem::update_minting_ability<XUS::XUS>($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:641:9+66
    assume {:print "$at(34,48595,48661)"} true;
    call $1_Diem_update_minting_ability'$1_XUS_XUS'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,48595,48661)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,11):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    assume {:print "$at(34,48667,48668)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::update_minting_ability [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_update_minting_ability$verify_instantiated_1(_$t0: $signer, _$t1: bool) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t0: $signer;
    var $t1: bool;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,48470,48668)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume $IsValid'bool'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+198
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+1
    assume {:print "$track_local(42,11,0):", $t0} $t0 == $t0;

    // trace_local[allow_minting]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:637:5+1
    assume {:print "$track_local(42,11,1):", $t1} $t1 == $t1;

    // assume Identical($t2, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t2 == $1_Signer_spec_address_of($t0));

    // Diem::update_minting_ability<XDX::XDX>($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:641:9+66
    assume {:print "$at(34,48595,48661)"} true;
    call $1_Diem_update_minting_ability'$1_XDX_XDX'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,48595,48661)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,11):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    assume {:print "$at(34,48667,48668)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:642:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::add_vasp_domain [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_add_vasp_domain$verify(_$t0: $signer, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: Vec ($1_VASPDomain_VASPDomain);
    var $t4: int;
    var $t5: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    var $t6: $1_VASPDomain_VASPDomainEvent;
    var $t7: Vec ($1_VASPDomain_VASPDomain);
    var $t8: int;
    var $t9: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    var $t10: $1_VASPDomain_VASPDomainEvent;
    var $t11: int;
    var $t12: Vec ($1_VASPDomain_VASPDomain);
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    var $1_VASPDomain_VASPDomains_$memory#179: $Memory $1_VASPDomain_VASPDomains;
    var $1_VASPDomain_VASPDomainManager_$memory#180: $Memory $1_VASPDomain_VASPDomainManager;
    var $1_Roles_RoleId_$memory#181: $Memory $1_Roles_RoleId;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,51546,51745)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    assume $IsValid'vec'u8''($t2);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 63), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 63))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+199
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 63))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 63))))))))));

    // assume Identical($t3, select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:185:9+51
    assume {:print "$at(36,7070,7121)"} true;
    assume ($t3 == $domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1)));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, select VASPDomain::VASPDomainManager.vasp_domain_events(global<VASPDomain::VASPDomainManager>(b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:201:9+79
    assume {:print "$at(36,7806,7885)"} true;
    assume ($t5 == $vasp_domain_events#$1_VASPDomain_VASPDomainManager($ResourceValue($1_VASPDomain_VASPDomainManager_$memory, 186537453)));

    // assume Identical($t6, pack VASPDomain::VASPDomainEvent(false, pack VASPDomain::VASPDomain($t2), $t1)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:202:9+130
    assume {:print "$at(36,7894,8024)"} true;
    assume ($t6 == $1_VASPDomain_VASPDomainEvent(false, $1_VASPDomain_VASPDomain($t2), $t1));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @181 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#181 := $1_Roles_RoleId_$memory;

    // @180 := save_mem(VASPDomain::VASPDomainManager) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASPDomain_VASPDomainManager_$memory#180 := $1_VASPDomain_VASPDomainManager_$memory;

    // @179 := save_mem(VASPDomain::VASPDomains) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASPDomain_VASPDomains_$memory#179 := $1_VASPDomain_VASPDomains_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+1
    assume {:print "$at(34,51546,51547)"} true;
    assume {:print "$track_local(42,0,0):", $t0} $t0 == $t0;

    // trace_local[address]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+1
    assume {:print "$track_local(42,0,1):", $t1} $t1 == $t1;

    // trace_local[domain]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:668:5+1
    assume {:print "$track_local(42,0,2):", $t2} $t2 == $t2;

    // assume Identical($t7, select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:185:9+51
    assume {:print "$at(36,7070,7121)"} true;
    assume ($t7 == $domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1)));

    // assume Identical($t8, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t8 == $1_Signer_spec_address_of($t0));

    // assume Identical($t9, select VASPDomain::VASPDomainManager.vasp_domain_events(global<VASPDomain::VASPDomainManager>(b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:201:9+79
    assume {:print "$at(36,7806,7885)"} true;
    assume ($t9 == $vasp_domain_events#$1_VASPDomain_VASPDomainManager($ResourceValue($1_VASPDomain_VASPDomainManager_$memory, 186537453)));

    // assume Identical($t10, pack VASPDomain::VASPDomainEvent(false, pack VASPDomain::VASPDomain($t2), $t1)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:202:9+130
    assume {:print "$at(36,7894,8024)"} true;
    assume ($t10 == $1_VASPDomain_VASPDomainEvent(false, $1_VASPDomain_VASPDomain($t2), $t1));

    // VASPDomain::add_vasp_domain($t0, $t1, $t2) on_abort goto L2 with $t11 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:673:9+57
    assume {:print "$at(34,51681,51738)"} true;
    call $1_VASPDomain_add_vasp_domain($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,51681,51738)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(42,0):", $t11} $t11 == $t11;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:674:5+1
    assume {:print "$at(34,51744,51745)"} true;
L1:

    // assume Identical($t12, select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:195:9+56
    assume {:print "$at(36,7586,7642)"} true;
    assume ($t12 == $domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1)));

    // assert Not(Not(exists[@179]<VASPDomain::VASPDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:188:9+67
    assume {:print "$at(36,7247,7314)"} true;
    assert {:msg "assert_failed(36,7247,7314): function does not abort under this condition"}
      !!$ResourceExists($1_VASPDomain_VASPDomains_$memory#179, $t1);

    // assert Not(Not(VASPDomain::$tc_domain_manager_exists[@180]())) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:189:9+65
    assume {:print "$at(36,7323,7388)"} true;
    assert {:msg "assert_failed(36,7323,7388): function does not abort under this condition"}
      !!$1_VASPDomain_$tc_domain_manager_exists($1_VASPDomain_VASPDomainManager_$memory#180);

    // assert Not(ContainsVec<VASPDomain::VASPDomain>($t3, pack VASPDomain::VASPDomain($t2))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:190:9+81
    assume {:print "$at(36,7397,7478)"} true;
    assert {:msg "assert_failed(36,7397,7478): function does not abort under this condition"}
      !$ContainsVec'$1_VASPDomain_VASPDomain'($t3, $1_VASPDomain_VASPDomain($t2));

    // assert Not(Not(exists[@181]<Roles::RoleId>($t4))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#181, $t4);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@181]<Roles::RoleId>($t4)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#181, $t4)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Gt(Vector::$length[]<u8>($t2), 63)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:74:9+79
    assume {:print "$at(36,2699,2778)"} true;
    assert {:msg "assert_failed(36,2699,2778): function does not abort under this condition"}
      !($1_Vector_$length'u8'($t2) > 63);

    // assert ContainsVec<VASPDomain::VASPDomain>($t12, pack VASPDomain::VASPDomain($t2)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:196:9+49
    assume {:print "$at(36,7651,7700)"} true;
    assert {:msg "assert_failed(36,7651,7700): post-condition does not hold"}
      $ContainsVec'$1_VASPDomain_VASPDomain'($t12, $1_VASPDomain_VASPDomain($t2));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t6, $t5)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:207:9+20
    assume {:print "$at(36,8033,8053)"} true;
    assert {:msg "assert_failed(36,8033,8053): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'($EmptyEventStore, $t5, $t6); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t6, $t5)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:675:5+483
    assume {:print "$at(34,51750,52233)"} true;
    assert {:msg "assert_failed(34,51750,52233): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'($EmptyEventStore, $t5, $t6); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:675:5+483
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:674:5+1
    assume {:print "$at(34,51744,51745)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@179]<VASPDomain::VASPDomains>($t1)), Not(VASPDomain::$tc_domain_manager_exists[@180]())), ContainsVec<VASPDomain::VASPDomain>($t3, pack VASPDomain::VASPDomain($t2))), Not(exists[@181]<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global[@181]<Roles::RoleId>($t4)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Gt(Vector::$length[]<u8>($t2), 63)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:675:5+483
    assume {:print "$at(34,51750,52233)"} true;
    assert {:msg "assert_failed(34,51750,52233): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_VASPDomain_VASPDomains_$memory#179, $t1) || !$1_VASPDomain_$tc_domain_manager_exists($1_VASPDomain_VASPDomainManager_$memory#180)) || $ContainsVec'$1_VASPDomain_VASPDomain'($t3, $1_VASPDomain_VASPDomain($t2))) || !$ResourceExists($1_Roles_RoleId_$memory#181, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#181, $t4)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || ($1_Vector_$length'u8'($t2) > 63));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@179]<VASPDomain::VASPDomains>($t1)), Eq(5, $t11)), And(Not(VASPDomain::$tc_domain_manager_exists[@180]()), Eq(5, $t11))), And(ContainsVec<VASPDomain::VASPDomain>($t3, pack VASPDomain::VASPDomain($t2)), Eq(7, $t11))), And(Not(exists[@181]<Roles::RoleId>($t4)), Eq(5, $t11))), And(Neq<u64>(select Roles::RoleId.role_id(global[@181]<Roles::RoleId>($t4)), 1), Eq(3, $t11))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t11))), And(Gt(Vector::$length[]<u8>($t2), 63), Eq(7, $t11))), Eq(3, $t11)), Eq(2, $t11)), Eq(5, $t11)), Eq(7, $t11)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:675:5+483
    assert {:msg "assert_failed(34,51750,52233): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((!$ResourceExists($1_VASPDomain_VASPDomains_$memory#179, $t1) && $IsEqual'num'(5, $t11)) || (!$1_VASPDomain_$tc_domain_manager_exists($1_VASPDomain_VASPDomainManager_$memory#180) && $IsEqual'num'(5, $t11))) || ($ContainsVec'$1_VASPDomain_VASPDomain'($t3, $1_VASPDomain_VASPDomain($t2)) && $IsEqual'num'(7, $t11))) || (!$ResourceExists($1_Roles_RoleId_$memory#181, $t4) && $IsEqual'num'(5, $t11))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#181, $t4)), 1) && $IsEqual'num'(3, $t11))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t11))) || (($1_Vector_$length'u8'($t2) > 63) && $IsEqual'num'(7, $t11))) || $IsEqual'num'(3, $t11)) || $IsEqual'num'(2, $t11)) || $IsEqual'num'(5, $t11)) || $IsEqual'num'(7, $t11));

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:675:5+483
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::remove_vasp_domain [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_remove_vasp_domain$verify(_$t0: $signer, _$t1: int, _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: Vec ($1_VASPDomain_VASPDomain);
    var $t4: int;
    var $t5: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    var $t6: $1_VASPDomain_VASPDomainEvent;
    var $t7: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: Vec (int);
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,55124,55329)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    assume $IsValid'vec'u8''($t2);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomainManager>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomainManager_$memory, $a_0);
    ($IsValid'$1_VASPDomain_VASPDomainManager'($rsc))));

    // assume forall $rsc: ResourceDomain<VASPDomain::VASPDomains>(): And(WellFormed($rsc), And(And(forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Le(Len<u8>(select VASPDomain::VASPDomain.domain(Index(select VASPDomain::VASPDomains.domains($rsc), i))), 63), forall i: Range(0, Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): forall j: Range(Add(i, 1), Len<VASPDomain::VASPDomain>(select VASPDomain::VASPDomains.domains($rsc))): Neq<VASPDomain::VASPDomain>(Index(select VASPDomain::VASPDomains.domains($rsc), i), Index(select VASPDomain::VASPDomains.domains($rsc), j))), forall $elem: select VASPDomain::VASPDomains.domains($rsc): Le(Len<u8>(select VASPDomain::VASPDomain.domain($elem)), 63))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+205
    assume (forall $a_0: int :: {$ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASPDomain_VASPDomains_$memory, $a_0);
    (($IsValid'$1_VASPDomain_VASPDomains'($rsc) && (((var $range_1 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    ((LenVec($domain#$1_VASPDomain_VASPDomain(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i))) <= 63))))) && (var $range_3 := $Range(0, LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_4: int :: $InRange($range_3, $i_4) ==> (var i := $i_4;
    ((var $range_5 := $Range((i + 1), LenVec($domains#$1_VASPDomain_VASPDomains($rsc))); (forall $i_6: int :: $InRange($range_5, $i_6) ==> (var j := $i_6;
    (!$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), i), ReadVec($domains#$1_VASPDomain_VASPDomains($rsc), j))))))))))) && (var $range_7 := $domains#$1_VASPDomain_VASPDomains($rsc); (forall $i_8: int :: InRangeVec($range_7, $i_8) ==> (var $elem := ReadVec($range_7, $i_8);
    ((LenVec($domain#$1_VASPDomain_VASPDomain($elem)) <= 63))))))))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+1
    assume {:print "$track_local(42,6,0):", $t0} $t0 == $t0;

    // trace_local[address]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+1
    assume {:print "$track_local(42,6,1):", $t1} $t1 == $t1;

    // trace_local[domain]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:712:5+1
    assume {:print "$track_local(42,6,2):", $t2} $t2 == $t2;

    // assume Identical($t3, select VASPDomain::VASPDomains.domains(global<VASPDomain::VASPDomains>($t1))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:251:9+51
    assume {:print "$at(36,9543,9594)"} true;
    assume ($t3 == $domains#$1_VASPDomain_VASPDomains($ResourceValue($1_VASPDomain_VASPDomains_$memory, $t1)));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, select VASPDomain::VASPDomainManager.vasp_domain_events(global<VASPDomain::VASPDomainManager>(b1e55ed))) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:268:9+79
    assume {:print "$at(36,10315,10394)"} true;
    assume ($t5 == $vasp_domain_events#$1_VASPDomain_VASPDomainManager($ResourceValue($1_VASPDomain_VASPDomainManager_$memory, 186537453)));

    // assume Identical($t6, pack VASPDomain::VASPDomainEvent(true, pack VASPDomain::VASPDomain($t2), $t1)) at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:269:9+129
    assume {:print "$at(36,10403,10532)"} true;
    assume ($t6 == $1_VASPDomain_VASPDomainEvent(true, $1_VASPDomain_VASPDomain($t2), $t1));

    // VASPDomain::remove_vasp_domain($t0, $t1, $t2) on_abort goto L2 with $t7 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:717:9+60
    assume {:print "$at(34,55262,55322)"} true;
    call $1_VASPDomain_remove_vasp_domain($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,55262,55322)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(42,6):", $t7} $t7 == $t7;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:718:5+1
    assume {:print "$at(34,55328,55329)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:718:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:718:5+1
L2:

    // assert Or(Or(Or(Eq(3, $t7), Eq(2, $t7)), Eq(5, $t7)), Eq(7, $t7)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:719:5+230
    assume {:print "$at(34,55334,55564)"} true;
    assert {:msg "assert_failed(34,55334,55564): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((($IsEqual'num'(3, $t7) || $IsEqual'num'(2, $t7)) || $IsEqual'num'(5, $t7)) || $IsEqual'num'(7, $t7));

    // abort($t7) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:719:5+230
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::tiered_mint [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_tiered_mint$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int) returns ()
{
    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t9: $1_DiemAccount_ReceivedPaymentEvent;
    var $t10: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t11: $1_DesignatedDealer_ReceivedMintEvent;
    var $t12: $1_Diem_CurrencyInfo'#0';
    var $t13: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t14: $1_Diem_MintEvent;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_CurrencyInfo'#0';
    var $t20: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t21: $1_DiemAccount_ReceivedPaymentEvent;
    var $t22: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t23: $1_DesignatedDealer_ReceivedMintEvent;
    var $t24: $1_Diem_CurrencyInfo'#0';
    var $t25: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t26: $1_Diem_MintEvent;
    var $t27: bool;
    var $t28: int;
    var $t29: $1_Diem_CurrencyInfo'#0';
    var $t30: $1_DiemAccount_ReceivedPaymentEvent;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t32: $1_DesignatedDealer_ReceivedMintEvent;
    var $t33: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t34: $1_Diem_MintEvent;
    var $t35: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t36: bool;
    var $t37: int;
    var $t38: $1_Diem_CurrencyInfo'#0';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DesignatedDealer_TierInfo'#0'': $1_DesignatedDealer_TierInfo'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_CurrencyInfo'#0'': $1_Diem_CurrencyInfo'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#253: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Diem_MintCapability'#0'_$memory#254: $Memory $1_Diem_MintCapability'#0';
    var $1_Roles_RoleId_$memory#255: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#256: $Memory $1_DesignatedDealer_Dealer;
    var $1_Diem_CurrencyInfo'#0'_$memory#257: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_DiemAccount_Balance'#0'_$memory#258: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#259: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#260: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#261: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#262: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#264: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#265: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,28405,28814)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<#0>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1596:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::TierInfo<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_TierInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_TierInfo'#0'_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_TierInfo'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:466:9+82
    assume {:print "$at(12,20581,20663)"} true;
    assume ($t6 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t2))));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:468:9+69
    assume {:print "$at(12,20773,20842)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t8, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t8 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t2)));

    // assume Identical($t9, pack DiemAccount::ReceivedPaymentEvent($t3, Diem::spec_currency_code<#0>(), 0, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t9 == $1_DiemAccount_ReceivedPaymentEvent($t3, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), 0, $EmptyVec'u8'()));

    // assume Identical($t10, select DesignatedDealer::Dealer.mint_event_handle(global<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:192:9+55
    assume {:print "$at(10,8319,8374)"} true;
    assume ($t10 == $mint_event_handle#$1_DesignatedDealer_Dealer($ResourceValue($1_DesignatedDealer_Dealer_$memory, $t2)));

    // assume Identical($t11, pack DesignatedDealer::ReceivedMintEvent(Diem::spec_currency_code<#0>(), $t2, $t3)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:193:9+167
    assume {:print "$at(10,8383,8550)"} true;
    assume ($t11 == $1_DesignatedDealer_ReceivedMintEvent($1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t2, $t3));

    // assume Identical($t12, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+66
    assume {:print "$at(11,22075,22141)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t13, select Diem::CurrencyInfo.mint_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(11,22150,22189)"} true;
    assume ($t13 == $mint_events#$1_Diem_CurrencyInfo'#0'($t12));

    // assume Identical($t14, pack Diem::MintEvent($t3, select Diem::CurrencyInfo.currency_code($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(11,22198,22312)"} true;
    assume ($t14 == $1_Diem_MintEvent($t3, $currency_code#$1_Diem_CurrencyInfo'#0'($t12)));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @263 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @255 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#255 := $1_Roles_RoleId_$memory;

    // @253 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#253 := $1_SlidingNonce_SlidingNonce_$memory;

    // @257 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#257 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @254 := save_mem(Diem::MintCapability<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_MintCapability'#0'_$memory#254 := $1_Diem_MintCapability'#0'_$memory;

    // @264 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'#0'_$memory#264 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @260 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'#0'_$memory#260 := $1_AccountLimits_Window'#0'_$memory;

    // @261 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#261 := $1_VASP_ChildVASP_$memory;

    // @262 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#262 := $1_VASP_ParentVASP_$memory;

    // @256 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DesignatedDealer_Dealer_$memory#256 := $1_DesignatedDealer_Dealer_$memory;

    // @265 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#265 := $1_AccountFreezing_FreezingBit_$memory;

    // @259 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#259 := $1_DiemAccount_DiemAccount_$memory;

    // @258 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'#0'_$memory#258 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$at(34,28405,28406)"} true;
    assume {:print "$track_local(42,7,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,1):", $t1} $t1 == $t1;

    // trace_local[designated_dealer_address]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,2):", $t2} $t2 == $t2;

    // trace_local[mint_amount]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,3):", $t3} $t3 == $t3;

    // trace_local[tier_index]($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,4):", $t4} $t4 == $t4;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:372:9+63
    assume {:print "$at(34,28613,28676)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,28613,28676)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(42,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // assume Identical($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t0));

    // assume Identical($t18, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:466:9+82
    assume {:print "$at(12,20581,20663)"} true;
    assume ($t18 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t2))));

    // assume Identical($t19, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:468:9+69
    assume {:print "$at(12,20773,20842)"} true;
    assume ($t19 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t20, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t20 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t2)));

    // assume Identical($t21, pack DiemAccount::ReceivedPaymentEvent($t3, Diem::spec_currency_code<#0>(), 0, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t21 == $1_DiemAccount_ReceivedPaymentEvent($t3, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), 0, $EmptyVec'u8'()));

    // assume Identical($t22, select DesignatedDealer::Dealer.mint_event_handle(global<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:192:9+55
    assume {:print "$at(10,8319,8374)"} true;
    assume ($t22 == $mint_event_handle#$1_DesignatedDealer_Dealer($ResourceValue($1_DesignatedDealer_Dealer_$memory, $t2)));

    // assume Identical($t23, pack DesignatedDealer::ReceivedMintEvent(Diem::spec_currency_code<#0>(), $t2, $t3)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:193:9+167
    assume {:print "$at(10,8383,8550)"} true;
    assume ($t23 == $1_DesignatedDealer_ReceivedMintEvent($1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t2, $t3));

    // assume Identical($t24, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+66
    assume {:print "$at(11,22075,22141)"} true;
    assume ($t24 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t25, select Diem::CurrencyInfo.mint_events($t24)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(11,22150,22189)"} true;
    assume ($t25 == $mint_events#$1_Diem_CurrencyInfo'#0'($t24));

    // assume Identical($t26, pack Diem::MintEvent($t3, select Diem::CurrencyInfo.currency_code($t24))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(11,22198,22312)"} true;
    assume ($t26 == $1_Diem_MintEvent($t3, $currency_code#$1_Diem_CurrencyInfo'#0'($t24)));

    // opaque begin: DiemAccount::tiered_mint<#0>($t0, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;

    // assume Identical($t27, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t3, 0), Not(exists<Diem::MintCapability<#0>>(Signer::spec_address_of($t0)))), Not(exists<Roles::RoleId>($t17))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed)), Not(exists<DesignatedDealer::Dealer>($t2))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t3), MaxU128())), Not(Diem::spec_is_currency<#0>())), Not(exists<DiemAccount::Balance<#0>>($t2))), Not(DiemAccount::$exists_at($t2))), Eq<u64>($t3, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t3, VASP::spec_parent_address($t2))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t2)), Gt(Add(DiemAccount::$balance<#0>($t2), $t3), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume ($t27 == (((((((((((((((((((((($IsEqual'u64'($t3, 0) || !$ResourceExists($1_Diem_MintCapability'#0'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t17)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2)) || !$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t3) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t2)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2)) || $IsEqual'u64'($t3, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t2)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t2) + $t3) > $MAX_U64)));

    // if ($t27) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    if ($t27) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Eq<u64>($t3, 0), Eq(7, $t16)), And(Not(exists<Diem::MintCapability<#0>>(Signer::spec_address_of($t0))), Eq(4, $t16))), And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t16))), And(Not(exists<DesignatedDealer::Dealer>($t2)), Eq(5, $t16))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<#0>())), Eq(1, $t16))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), $t3), MaxU128()), Eq(8, $t16))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16))), And(Not(exists<DiemAccount::Balance<#0>>($t2)), Eq(7, $t16))), And(Not(DiemAccount::$exists_at($t2)), Eq(5, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t3, VASP::spec_parent_address($t2)))), Eq(8, $t16))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2))))), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t16))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t16))), And(AccountFreezing::spec_account_is_frozen($t2), Eq(1, $t16))), And(Gt(Add(DiemAccount::$balance<#0>($t2), $t3), MaxU64()), Eq(8, $t16))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume ((((((((((((((((((((((($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16)) || (!$ResourceExists($1_Diem_MintCapability'#0'_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2) && $IsEqual'num'(5, $t16))) || (!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'num'(1, $t16))) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)) + $t3) > $MAX_U128) && $IsEqual'num'(8, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t16))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t2) && $IsEqual'num'(7, $t16))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2) && $IsEqual'num'(5, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && $IsEqual'num'(8, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t16))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t2) && $IsEqual'num'(1, $t16))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t2) + $t3) > $MAX_U64) && $IsEqual'num'(8, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    assume {:print "$track_abort(42,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
L3:

    // modifies global<DiemAccount::DiemAccount>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t2, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t2);
    }

    // modifies global<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t2, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t2);
    }

    // modifies global<DesignatedDealer::TierInfo<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_TierInfo'#0'';
        $1_DesignatedDealer_TierInfo'#0'_$memory := $ResourceUpdate($1_DesignatedDealer_TierInfo'#0'_$memory, $t2, $temp_0'$1_DesignatedDealer_TierInfo'#0'');
    } else {
        $1_DesignatedDealer_TierInfo'#0'_$memory := $ResourceRemove($1_DesignatedDealer_TierInfo'#0'_$memory, $t2);
    }

    // modifies global<DiemAccount::Balance<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t2, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t2);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2));
    }

    // modifies global<Diem::CurrencyInfo<#0>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'#0'';
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'#0'_$memory, 173345816, $temp_0'$1_Diem_CurrencyInfo'#0'');
    } else {
        $1_Diem_CurrencyInfo'#0'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'#0'_$memory, 173345816);
    }

    // assume Identical($t28, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:467:9+92
    assume {:print "$at(12,20672,20764)"} true;
    assume ($t28 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t2))));

    // assume Identical($t29, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t29 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Eq<Diem::CurrencyInfo<#0>>($t29, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t19, Add(select Diem::CurrencyInfo.total_value($t19), $t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume $IsEqual'$1_Diem_CurrencyInfo'#0''($t29, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t19, ($total_value#$1_Diem_CurrencyInfo'#0'($t19) + $t3)));

    // assume Eq<u64>($t28, Add($t18, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume $IsEqual'u64'($t28, ($t18 + $t3));

    // assume Identical($t30, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t30 == $t21);

    // assume Identical($t31, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t31 == $t20);

    // emit_event($t30, $t31) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t31, $t30);

    // assume Identical($t32, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t32 == $t23);

    // assume Identical($t33, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t33 == $t22);

    // emit_event($t32, $t33) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, $t33, $t32);

    // assume Identical($t34, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t34 == $t26);

    // assume Identical($t35, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t35 == $t25);

    // assume Identical($t36, Not(select Diem::CurrencyInfo.is_synthetic($t24))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t36 == !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t24));

    // emit_event($t34, $t35, $t36) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $CondExtendEventStore'$1_Diem_MintEvent'($es, $t35, $t34, $t36);

    // opaque end: DiemAccount::tiered_mint<#0>($t0, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:376:5+1
    assume {:print "$at(34,28813,28814)"} true;
L1:

    // assume Identical($t37, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:467:9+92
    assume {:print "$at(12,20672,20764)"} true;
    assume ($t37 == $value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t2))));

    // assume Identical($t38, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t38 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assert Not(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Eq<u64>($t3, 0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:184:9+52
    assume {:print "$at(10,7937,7989)"} true;
    assert {:msg "assert_failed(10,7937,7989): function does not abort under this condition"}
      !$IsEqual'u64'($t3, 0);

    // assert Not(Not(exists[@254]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:186:9+120
    assume {:print "$at(10,8032,8152)"} true;
    assert {:msg "assert_failed(10,8032,8152): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_MintCapability'#0'_$memory#254, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@255]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#255, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(exists[@256]<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:21:9+62
    assume {:print "$at(10,712,774)"} true;
    assert {:msg "assert_failed(10,712,774): function does not abort under this condition"}
      !!$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2);

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:446:9+78
    assume {:print "$at(11,21338,21416)"} true;
    assert {:msg "assert_failed(11,21338,21416): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#257));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<#0>()), $t3), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:447:9+102
    assume {:print "$at(11,21425,21527)"} true;
    assert {:msg "assert_failed(11,21425,21527): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#257)) + $t3) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@257]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#257);

    // assert Not(Not(exists[@258]<DiemAccount::Balance<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#258, $t2);

    // assert Not(Not(DiemAccount::$exists_at[@259]($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2);

    // assert Not(Eq<u64>($t3, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t3, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<#0>($t3, VASP::spec_parent_address[@261, @262]($t2))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $1_AccountLimits_Window'#0'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)));

    // assert Not(Not(DiemTimestamp::$is_operating[@263]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)));

    // assert Not(Not(Diem::spec_is_currency[@257]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#257);

    // assert Not(AccountFreezing::spec_account_is_frozen[@265]($t2)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2);

    // assert Not(Gt(Add(DiemAccount::$balance[@258]<#0>($t2), $t3), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#258, $t2) + $t3) > $MAX_U64);

    // assert Not(Not(exists[@255]<Roles::RoleId>($t15))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#255, $t15);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<Diem::CurrencyInfo<#0>>($t38, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<#0>>($t7, Add(select Diem::CurrencyInfo.total_value($t7), $t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:471:9+112
    assume {:print "$at(12,21002,21114)"} true;
    assert {:msg "assert_failed(12,21002,21114): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t38, $Update'$1_Diem_CurrencyInfo'#0''_total_value($t7, ($total_value#$1_Diem_CurrencyInfo'#0'($t7) + $t3)));

    // assert Eq<u64>($t37, Add($t6, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:473:9+60
    assume {:print "$at(12,21191,21251)"} true;
    assert {:msg "assert_failed(12,21191,21251): post-condition does not hold"}
      $IsEqual'u64'($t37, ($t6 + $t3));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t9, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:198:9+20
    assume {:print "$at(10,8559,8579)"} true;
    assert {:msg "assert_failed(10,8559,8579): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:466:9+51
    assume {:print "$at(11,22321,22372)"} true;
    assert {:msg "assert_failed(11,22321,22372): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11), $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t12)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assume {:print "$at(34,28820,29756)"} true;
    assert {:msg "assert_failed(34,28820,29756): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11), $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t12)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:376:5+1
    assume {:print "$at(34,28813,28814)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Eq<u64>($t3, 0)), Not(exists[@254]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0)))), Not(exists[@255]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(exists[@256]<DesignatedDealer::Dealer>($t2))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<#0>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<#0>()), $t3), MaxU128())), Not(Diem::spec_is_currency[@257]<#0>())), Not(exists[@258]<DiemAccount::Balance<#0>>($t2))), Not(DiemAccount::$exists_at[@259]($t2))), Eq<u64>($t3, 0)), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<#0>($t3, VASP::spec_parent_address[@261, @262]($t2))))), Not(DiemTimestamp::$is_operating[@263]())), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))))))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]())))), Not(Diem::spec_is_currency[@257]<#0>())), AccountFreezing::spec_account_is_frozen[@265]($t2)), Gt(Add(DiemAccount::$balance[@258]<#0>($t2), $t3), MaxU64())), Not(exists[@255]<Roles::RoleId>($t15))), Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assume {:print "$at(34,28820,29756)"} true;
    assert {:msg "assert_failed(34,28820,29756): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $IsEqual'u64'($t3, 0)) || !$ResourceExists($1_Diem_MintCapability'#0'_$memory#254, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#255, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2)) || !$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#257))) || (($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#257)) + $t3) > $MAX_U128)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#257)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#258, $t2)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2)) || $IsEqual'u64'($t3, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $1_AccountLimits_Window'#0'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#257)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#258, $t2) + $t3) > $MAX_U64)) || !$ResourceExists($1_Roles_RoleId_$memory#255, $t15)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t16)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(Not(exists[@254]<Diem::MintCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t16))), And(Not(exists[@255]<Roles::RoleId>($t5)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t16))), And(Not(exists[@256]<DesignatedDealer::Dealer>($t2)), Eq(5, $t16))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<#0>())), Eq(1, $t16))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<#0>()), $t3), MaxU128()), Eq(8, $t16))), And(Not(Diem::spec_is_currency[@257]<#0>()), Eq(5, $t16))), And(Not(exists[@258]<DiemAccount::Balance<#0>>($t2)), Eq(7, $t16))), And(Not(DiemAccount::$exists_at[@259]($t2)), Eq(5, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<#0>($t3, VASP::spec_parent_address[@261, @262]($t2)))), Eq(8, $t16))), And(Not(DiemTimestamp::$is_operating[@263]()), Eq(1, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<#0>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<#0>(global[@260]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]()))), Eq(1, $t16))), And(Not(Diem::spec_is_currency[@257]<#0>()), Eq(5, $t16))), And(AccountFreezing::spec_account_is_frozen[@265]($t2), Eq(1, $t16))), And(Gt(Add(DiemAccount::$balance[@258]<#0>($t2), $t3), MaxU64()), Eq(8, $t16))), And(Not(exists[@255]<Roles::RoleId>($t15)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t16))), Eq(7, $t16)), Eq(2, $t16)), Eq(5, $t16)), Eq(4, $t16)), Eq(1, $t16)), Eq(8, $t16)), Eq(3, $t16)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assert {:msg "assert_failed(34,28820,29756): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t16)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (!$ResourceExists($1_Diem_MintCapability'#0'_$memory#254, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#255, $t5) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2) && $IsEqual'num'(5, $t16))) || (!$can_mint#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#257)) && $IsEqual'num'(1, $t16))) || ((($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#257)) + $t3) > $MAX_U128) && $IsEqual'num'(8, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#257) && $IsEqual'num'(5, $t16))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#258, $t2) && $IsEqual'num'(7, $t16))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2) && $IsEqual'num'(5, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $1_AccountLimits_Window'#0'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && $IsEqual'num'(8, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && $IsEqual'num'(1, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#264, $ResourceValue($1_AccountLimits_Window'#0'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) && $IsEqual'num'(1, $t16))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#257) && $IsEqual'num'(5, $t16))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2) && $IsEqual'num'(1, $t16))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#258, $t2) + $t3) > $MAX_U64) && $IsEqual'num'(8, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#255, $t15) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || $IsEqual'num'(7, $t16)) || $IsEqual'num'(2, $t16)) || $IsEqual'num'(5, $t16)) || $IsEqual'num'(4, $t16)) || $IsEqual'num'(1, $t16)) || $IsEqual'num'(8, $t16)) || $IsEqual'num'(3, $t16));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::tiered_mint [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_tiered_mint$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t8: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t9: $1_DiemAccount_ReceivedPaymentEvent;
    var $t10: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t11: $1_DesignatedDealer_ReceivedMintEvent;
    var $t12: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t13: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t14: $1_Diem_MintEvent;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t20: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t21: $1_DiemAccount_ReceivedPaymentEvent;
    var $t22: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t23: $1_DesignatedDealer_ReceivedMintEvent;
    var $t24: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t25: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t26: $1_Diem_MintEvent;
    var $t27: bool;
    var $t28: int;
    var $t29: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t30: $1_DiemAccount_ReceivedPaymentEvent;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t32: $1_DesignatedDealer_ReceivedMintEvent;
    var $t33: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t34: $1_Diem_MintEvent;
    var $t35: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t36: bool;
    var $t37: int;
    var $t38: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DesignatedDealer_TierInfo'$1_XUS_XUS'': $1_DesignatedDealer_TierInfo'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'': $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#253: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Diem_MintCapability'$1_XUS_XUS'_$memory#254: $Memory $1_Diem_MintCapability'$1_XUS_XUS';
    var $1_Roles_RoleId_$memory#255: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#256: $Memory $1_DesignatedDealer_Dealer;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#259: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#260: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_VASP_ChildVASP_$memory#261: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#262: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountFreezing_FreezingBit_$memory#265: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,28405,28814)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1596:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::TierInfo<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_TierInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_TierInfo'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_TierInfo'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:466:9+82
    assume {:print "$at(12,20581,20663)"} true;
    assume ($t6 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2))));

    // assume Identical($t7, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:468:9+69
    assume {:print "$at(12,20773,20842)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t8, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t8 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t2)));

    // assume Identical($t9, pack DiemAccount::ReceivedPaymentEvent($t3, Diem::spec_currency_code<XUS::XUS>(), 0, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t9 == $1_DiemAccount_ReceivedPaymentEvent($t3, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), 0, $EmptyVec'u8'()));

    // assume Identical($t10, select DesignatedDealer::Dealer.mint_event_handle(global<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:192:9+55
    assume {:print "$at(10,8319,8374)"} true;
    assume ($t10 == $mint_event_handle#$1_DesignatedDealer_Dealer($ResourceValue($1_DesignatedDealer_Dealer_$memory, $t2)));

    // assume Identical($t11, pack DesignatedDealer::ReceivedMintEvent(Diem::spec_currency_code<XUS::XUS>(), $t2, $t3)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:193:9+167
    assume {:print "$at(10,8383,8550)"} true;
    assume ($t11 == $1_DesignatedDealer_ReceivedMintEvent($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t2, $t3));

    // assume Identical($t12, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+66
    assume {:print "$at(11,22075,22141)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t13, select Diem::CurrencyInfo.mint_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(11,22150,22189)"} true;
    assume ($t13 == $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t12));

    // assume Identical($t14, pack Diem::MintEvent($t3, select Diem::CurrencyInfo.currency_code($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(11,22198,22312)"} true;
    assume ($t14 == $1_Diem_MintEvent($t3, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t12)));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @263 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @255 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#255 := $1_Roles_RoleId_$memory;

    // @253 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#253 := $1_SlidingNonce_SlidingNonce_$memory;

    // @257 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @254 := save_mem(Diem::MintCapability<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_MintCapability'$1_XUS_XUS'_$memory#254 := $1_Diem_MintCapability'$1_XUS_XUS'_$memory;

    // @264 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @260 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#260 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // @261 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#261 := $1_VASP_ChildVASP_$memory;

    // @262 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#262 := $1_VASP_ParentVASP_$memory;

    // @256 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DesignatedDealer_Dealer_$memory#256 := $1_DesignatedDealer_Dealer_$memory;

    // @265 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#265 := $1_AccountFreezing_FreezingBit_$memory;

    // @259 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#259 := $1_DiemAccount_DiemAccount_$memory;

    // @258 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$at(34,28405,28406)"} true;
    assume {:print "$track_local(42,7,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,1):", $t1} $t1 == $t1;

    // trace_local[designated_dealer_address]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,2):", $t2} $t2 == $t2;

    // trace_local[mint_amount]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,3):", $t3} $t3 == $t3;

    // trace_local[tier_index]($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,4):", $t4} $t4 == $t4;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:372:9+63
    assume {:print "$at(34,28613,28676)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,28613,28676)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(42,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // assume Identical($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t0));

    // assume Identical($t18, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:466:9+82
    assume {:print "$at(12,20581,20663)"} true;
    assume ($t18 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2))));

    // assume Identical($t19, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:468:9+69
    assume {:print "$at(12,20773,20842)"} true;
    assume ($t19 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t20, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t20 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t2)));

    // assume Identical($t21, pack DiemAccount::ReceivedPaymentEvent($t3, Diem::spec_currency_code<XUS::XUS>(), 0, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t21 == $1_DiemAccount_ReceivedPaymentEvent($t3, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), 0, $EmptyVec'u8'()));

    // assume Identical($t22, select DesignatedDealer::Dealer.mint_event_handle(global<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:192:9+55
    assume {:print "$at(10,8319,8374)"} true;
    assume ($t22 == $mint_event_handle#$1_DesignatedDealer_Dealer($ResourceValue($1_DesignatedDealer_Dealer_$memory, $t2)));

    // assume Identical($t23, pack DesignatedDealer::ReceivedMintEvent(Diem::spec_currency_code<XUS::XUS>(), $t2, $t3)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:193:9+167
    assume {:print "$at(10,8383,8550)"} true;
    assume ($t23 == $1_DesignatedDealer_ReceivedMintEvent($1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t2, $t3));

    // assume Identical($t24, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+66
    assume {:print "$at(11,22075,22141)"} true;
    assume ($t24 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t25, select Diem::CurrencyInfo.mint_events($t24)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(11,22150,22189)"} true;
    assume ($t25 == $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t24));

    // assume Identical($t26, pack Diem::MintEvent($t3, select Diem::CurrencyInfo.currency_code($t24))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(11,22198,22312)"} true;
    assume ($t26 == $1_Diem_MintEvent($t3, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t24)));

    // opaque begin: DiemAccount::tiered_mint<XUS::XUS>($t0, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;

    // assume Identical($t27, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t3, 0), Not(exists<Diem::MintCapability<XUS::XUS>>(Signer::spec_address_of($t0)))), Not(exists<Roles::RoleId>($t17))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed)), Not(exists<DesignatedDealer::Dealer>($t2))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<XUS::XUS>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<XUS::XUS>()), $t3), MaxU128())), Not(Diem::spec_is_currency<XUS::XUS>())), Not(exists<DiemAccount::Balance<XUS::XUS>>($t2))), Not(DiemAccount::$exists_at($t2))), Eq<u64>($t3, 0)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t3, VASP::spec_parent_address($t2))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XUS::XUS>())), AccountFreezing::spec_account_is_frozen($t2)), Gt(Add(DiemAccount::$balance<XUS::XUS>($t2), $t3), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume ($t27 == (((((((((((((((((((((($IsEqual'u64'($t3, 0) || !$ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t17)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2)) || !$can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || (($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) + $t3) > $MAX_U128)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2)) || $IsEqual'u64'($t3, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t2)) || (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2) + $t3) > $MAX_U64)));

    // if ($t27) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    if ($t27) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Eq<u64>($t3, 0), Eq(7, $t16)), And(Not(exists<Diem::MintCapability<XUS::XUS>>(Signer::spec_address_of($t0))), Eq(4, $t16))), And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t16))), And(Not(exists<DesignatedDealer::Dealer>($t2)), Eq(5, $t16))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<XUS::XUS>())), Eq(1, $t16))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<XUS::XUS>()), $t3), MaxU128()), Eq(8, $t16))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t16))), And(Not(exists<DiemAccount::Balance<XUS::XUS>>($t2)), Eq(7, $t16))), And(Not(DiemAccount::$exists_at($t2)), Eq(5, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t3, VASP::spec_parent_address($t2)))), Eq(8, $t16))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2))))), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t16))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t16))), And(AccountFreezing::spec_account_is_frozen($t2), Eq(1, $t16))), And(Gt(Add(DiemAccount::$balance<XUS::XUS>($t2), $t3), MaxU64()), Eq(8, $t16))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume ((((((((((((((((((((((($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16)) || (!$ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2) && $IsEqual'num'(5, $t16))) || (!$can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(1, $t16))) || ((($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) + $t3) > $MAX_U128) && $IsEqual'num'(8, $t16))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t16))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2) && $IsEqual'num'(7, $t16))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2) && $IsEqual'num'(5, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && $IsEqual'num'(8, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t16))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t16))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t2) && $IsEqual'num'(1, $t16))) || ((($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2) + $t3) > $MAX_U64) && $IsEqual'num'(8, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    assume {:print "$track_abort(42,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
L3:

    // modifies global<DiemAccount::DiemAccount>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t2, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t2);
    }

    // modifies global<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t2, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t2);
    }

    // modifies global<DesignatedDealer::TierInfo<XUS::XUS>>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_TierInfo'$1_XUS_XUS'';
        $1_DesignatedDealer_TierInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DesignatedDealer_TierInfo'$1_XUS_XUS'_$memory, $t2, $temp_0'$1_DesignatedDealer_TierInfo'$1_XUS_XUS'');
    } else {
        $1_DesignatedDealer_TierInfo'$1_XUS_XUS'_$memory := $ResourceRemove($1_DesignatedDealer_TierInfo'$1_XUS_XUS'_$memory, $t2);
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2, $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2);
    }

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2));
    }

    // modifies global<Diem::CurrencyInfo<XUS::XUS>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'';
        $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816, $temp_0'$1_Diem_CurrencyInfo'$1_XUS_XUS'');
    } else {
        $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816);
    }

    // assume Identical($t28, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:467:9+92
    assume {:print "$at(12,20672,20764)"} true;
    assume ($t28 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2))));

    // assume Identical($t29, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t29 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Eq<Diem::CurrencyInfo<XUS::XUS>>($t29, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<XUS::XUS>>($t19, Add(select Diem::CurrencyInfo.total_value($t19), $t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''($t29, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value($t19, ($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t19) + $t3)));

    // assume Eq<u64>($t28, Add($t18, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume $IsEqual'u64'($t28, ($t18 + $t3));

    // assume Identical($t30, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t30 == $t21);

    // assume Identical($t31, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t31 == $t20);

    // emit_event($t30, $t31) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t31, $t30);

    // assume Identical($t32, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t32 == $t23);

    // assume Identical($t33, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t33 == $t22);

    // emit_event($t32, $t33) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, $t33, $t32);

    // assume Identical($t34, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t34 == $t26);

    // assume Identical($t35, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t35 == $t25);

    // assume Identical($t36, Not(select Diem::CurrencyInfo.is_synthetic($t24))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t36 == !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t24));

    // emit_event($t34, $t35, $t36) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $CondExtendEventStore'$1_Diem_MintEvent'($es, $t35, $t34, $t36);

    // opaque end: DiemAccount::tiered_mint<XUS::XUS>($t0, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:376:5+1
    assume {:print "$at(34,28813,28814)"} true;
L1:

    // assume Identical($t37, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:467:9+92
    assume {:print "$at(12,20672,20764)"} true;
    assume ($t37 == $value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t2))));

    // assume Identical($t38, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t38 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assert Not(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Eq<u64>($t3, 0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:184:9+52
    assume {:print "$at(10,7937,7989)"} true;
    assert {:msg "assert_failed(10,7937,7989): function does not abort under this condition"}
      !$IsEqual'u64'($t3, 0);

    // assert Not(Not(exists[@254]<Diem::MintCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:186:9+120
    assume {:print "$at(10,8032,8152)"} true;
    assert {:msg "assert_failed(10,8032,8152): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory#254, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@255]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#255, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(exists[@256]<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:21:9+62
    assume {:print "$at(10,712,774)"} true;
    assert {:msg "assert_failed(10,712,774): function does not abort under this condition"}
      !!$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2);

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:446:9+78
    assume {:print "$at(11,21338,21416)"} true;
    assert {:msg "assert_failed(11,21338,21416): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<XUS::XUS>()), $t3), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:447:9+102
    assume {:print "$at(11,21425,21527)"} true;
    assert {:msg "assert_failed(11,21425,21527): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257)) + $t3) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@257]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257);

    // assert Not(Not(exists[@258]<DiemAccount::Balance<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258, $t2);

    // assert Not(Not(DiemAccount::$exists_at[@259]($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2);

    // assert Not(Eq<u64>($t3, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t3, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<XUS::XUS>($t3, VASP::spec_parent_address[@261, @262]($t2))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)));

    // assert Not(Not(DiemTimestamp::$is_operating[@263]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)));

    // assert Not(Not(Diem::spec_is_currency[@257]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257);

    // assert Not(AccountFreezing::spec_account_is_frozen[@265]($t2)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2);

    // assert Not(Gt(Add(DiemAccount::$balance[@258]<XUS::XUS>($t2), $t3), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258, $t2) + $t3) > $MAX_U64);

    // assert Not(Not(exists[@255]<Roles::RoleId>($t15))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#255, $t15);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<Diem::CurrencyInfo<XUS::XUS>>($t38, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<XUS::XUS>>($t7, Add(select Diem::CurrencyInfo.total_value($t7), $t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:471:9+112
    assume {:print "$at(12,21002,21114)"} true;
    assert {:msg "assert_failed(12,21002,21114): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''($t38, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value($t7, ($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) + $t3)));

    // assert Eq<u64>($t37, Add($t6, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:473:9+60
    assume {:print "$at(12,21191,21251)"} true;
    assert {:msg "assert_failed(12,21191,21251): post-condition does not hold"}
      $IsEqual'u64'($t37, ($t6 + $t3));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t9, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:198:9+20
    assume {:print "$at(10,8559,8579)"} true;
    assert {:msg "assert_failed(10,8559,8579): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:466:9+51
    assume {:print "$at(11,22321,22372)"} true;
    assert {:msg "assert_failed(11,22321,22372): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11), $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t12)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assume {:print "$at(34,28820,29756)"} true;
    assert {:msg "assert_failed(34,28820,29756): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11), $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t12)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:376:5+1
    assume {:print "$at(34,28813,28814)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Eq<u64>($t3, 0)), Not(exists[@254]<Diem::MintCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))), Not(exists[@255]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(exists[@256]<DesignatedDealer::Dealer>($t2))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<XUS::XUS>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<XUS::XUS>()), $t3), MaxU128())), Not(Diem::spec_is_currency[@257]<XUS::XUS>())), Not(exists[@258]<DiemAccount::Balance<XUS::XUS>>($t2))), Not(DiemAccount::$exists_at[@259]($t2))), Eq<u64>($t3, 0)), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<XUS::XUS>($t3, VASP::spec_parent_address[@261, @262]($t2))))), Not(DiemTimestamp::$is_operating[@263]())), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))))))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]())))), Not(Diem::spec_is_currency[@257]<XUS::XUS>())), AccountFreezing::spec_account_is_frozen[@265]($t2)), Gt(Add(DiemAccount::$balance[@258]<XUS::XUS>($t2), $t3), MaxU64())), Not(exists[@255]<Roles::RoleId>($t15))), Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assume {:print "$at(34,28820,29756)"} true;
    assert {:msg "assert_failed(34,28820,29756): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $IsEqual'u64'($t3, 0)) || !$ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory#254, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#255, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2)) || !$can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257))) || (($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257)) + $t3) > $MAX_U128)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258, $t2)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2)) || $IsEqual'u64'($t3, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2)) || (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258, $t2) + $t3) > $MAX_U64)) || !$ResourceExists($1_Roles_RoleId_$memory#255, $t15)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t16)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(Not(exists[@254]<Diem::MintCapability<XUS::XUS>>(Signer::spec_address_of[]($t0))), Eq(4, $t16))), And(Not(exists[@255]<Roles::RoleId>($t5)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t16))), And(Not(exists[@256]<DesignatedDealer::Dealer>($t2)), Eq(5, $t16))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<XUS::XUS>())), Eq(1, $t16))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<XUS::XUS>()), $t3), MaxU128()), Eq(8, $t16))), And(Not(Diem::spec_is_currency[@257]<XUS::XUS>()), Eq(5, $t16))), And(Not(exists[@258]<DiemAccount::Balance<XUS::XUS>>($t2)), Eq(7, $t16))), And(Not(DiemAccount::$exists_at[@259]($t2)), Eq(5, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<XUS::XUS>($t3, VASP::spec_parent_address[@261, @262]($t2)))), Eq(8, $t16))), And(Not(DiemTimestamp::$is_operating[@263]()), Eq(1, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XUS::XUS>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XUS::XUS>(global[@260]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]()))), Eq(1, $t16))), And(Not(Diem::spec_is_currency[@257]<XUS::XUS>()), Eq(5, $t16))), And(AccountFreezing::spec_account_is_frozen[@265]($t2), Eq(1, $t16))), And(Gt(Add(DiemAccount::$balance[@258]<XUS::XUS>($t2), $t3), MaxU64()), Eq(8, $t16))), And(Not(exists[@255]<Roles::RoleId>($t15)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t16))), Eq(7, $t16)), Eq(2, $t16)), Eq(5, $t16)), Eq(4, $t16)), Eq(1, $t16)), Eq(8, $t16)), Eq(3, $t16)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assert {:msg "assert_failed(34,28820,29756): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t16)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (!$ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory#254, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#255, $t5) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2) && $IsEqual'num'(5, $t16))) || (!$can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257)) && $IsEqual'num'(1, $t16))) || ((($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257)) + $t3) > $MAX_U128) && $IsEqual'num'(8, $t16))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257) && $IsEqual'num'(5, $t16))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258, $t2) && $IsEqual'num'(7, $t16))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2) && $IsEqual'num'(5, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && $IsEqual'num'(8, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && $IsEqual'num'(1, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) && $IsEqual'num'(1, $t16))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#257) && $IsEqual'num'(5, $t16))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2) && $IsEqual'num'(1, $t16))) || ((($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#258, $t2) + $t3) > $MAX_U64) && $IsEqual'num'(8, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#255, $t15) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || $IsEqual'num'(7, $t16)) || $IsEqual'num'(2, $t16)) || $IsEqual'num'(5, $t16)) || $IsEqual'num'(4, $t16)) || $IsEqual'num'(1, $t16)) || $IsEqual'num'(8, $t16)) || $IsEqual'num'(3, $t16));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::tiered_mint [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_tiered_mint$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t5: int;
    var $t6: int;
    var $t7: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t8: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t9: $1_DiemAccount_ReceivedPaymentEvent;
    var $t10: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t11: $1_DesignatedDealer_ReceivedMintEvent;
    var $t12: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t13: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t14: $1_Diem_MintEvent;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t20: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t21: $1_DiemAccount_ReceivedPaymentEvent;
    var $t22: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t23: $1_DesignatedDealer_ReceivedMintEvent;
    var $t24: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t25: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t26: $1_Diem_MintEvent;
    var $t27: bool;
    var $t28: int;
    var $t29: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t30: $1_DiemAccount_ReceivedPaymentEvent;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t32: $1_DesignatedDealer_ReceivedMintEvent;
    var $t33: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    var $t34: $1_Diem_MintEvent;
    var $t35: $1_Event_EventHandle'$1_Diem_MintEvent';
    var $t36: bool;
    var $t37: int;
    var $t38: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'$1_DesignatedDealer_Dealer': $1_DesignatedDealer_Dealer;
    var $temp_0'$1_DesignatedDealer_TierInfo'$1_XDX_XDX'': $1_DesignatedDealer_TierInfo'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'': $1_DiemAccount_Balance'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'': $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#253: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Diem_MintCapability'$1_XDX_XDX'_$memory#254: $Memory $1_Diem_MintCapability'$1_XDX_XDX';
    var $1_Roles_RoleId_$memory#255: $Memory $1_Roles_RoleId;
    var $1_DesignatedDealer_Dealer_$memory#256: $Memory $1_DesignatedDealer_Dealer;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#259: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#260: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_VASP_ChildVASP_$memory#261: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#262: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#265: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,28405,28814)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall mint_cap_owner: TypeDomain<address>() where exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner): Roles::spec_has_treasury_compliance_role_addr(mint_cap_owner) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1596:9+197
    assume (forall mint_cap_owner: int :: $IsValid'address'(mint_cap_owner) ==> ($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner))  ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, mint_cap_owner)));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume $IsValid'u64'($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::MintCapability<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_MintCapability'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_MintCapability'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::Dealer>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_Dealer_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_Dealer'($rsc))));

    // assume forall $rsc: ResourceDomain<DesignatedDealer::TierInfo<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DesignatedDealer_TierInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DesignatedDealer_TierInfo'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DesignatedDealer_TierInfo'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+409
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:466:9+82
    assume {:print "$at(12,20581,20663)"} true;
    assume ($t6 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2))));

    // assume Identical($t7, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:468:9+69
    assume {:print "$at(12,20773,20842)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t8, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t8 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t2)));

    // assume Identical($t9, pack DiemAccount::ReceivedPaymentEvent($t3, Diem::spec_currency_code<XDX::XDX>(), 0, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t9 == $1_DiemAccount_ReceivedPaymentEvent($t3, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), 0, $EmptyVec'u8'()));

    // assume Identical($t10, select DesignatedDealer::Dealer.mint_event_handle(global<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:192:9+55
    assume {:print "$at(10,8319,8374)"} true;
    assume ($t10 == $mint_event_handle#$1_DesignatedDealer_Dealer($ResourceValue($1_DesignatedDealer_Dealer_$memory, $t2)));

    // assume Identical($t11, pack DesignatedDealer::ReceivedMintEvent(Diem::spec_currency_code<XDX::XDX>(), $t2, $t3)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:193:9+167
    assume {:print "$at(10,8383,8550)"} true;
    assume ($t11 == $1_DesignatedDealer_ReceivedMintEvent($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t2, $t3));

    // assume Identical($t12, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+66
    assume {:print "$at(11,22075,22141)"} true;
    assume ($t12 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t13, select Diem::CurrencyInfo.mint_events($t12)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(11,22150,22189)"} true;
    assume ($t13 == $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t12));

    // assume Identical($t14, pack Diem::MintEvent($t3, select Diem::CurrencyInfo.currency_code($t12))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(11,22198,22312)"} true;
    assume ($t14 == $1_Diem_MintEvent($t3, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t12)));

    // assume Identical($t15, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t15 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @263 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @255 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#255 := $1_Roles_RoleId_$memory;

    // @253 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#253 := $1_SlidingNonce_SlidingNonce_$memory;

    // @257 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @254 := save_mem(Diem::MintCapability<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_MintCapability'$1_XDX_XDX'_$memory#254 := $1_Diem_MintCapability'$1_XDX_XDX'_$memory;

    // @264 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @260 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#260 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // @261 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#261 := $1_VASP_ChildVASP_$memory;

    // @262 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#262 := $1_VASP_ParentVASP_$memory;

    // @256 := save_mem(DesignatedDealer::Dealer) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DesignatedDealer_Dealer_$memory#256 := $1_DesignatedDealer_Dealer_$memory;

    // @265 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#265 := $1_AccountFreezing_FreezingBit_$memory;

    // @259 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#259 := $1_DiemAccount_DiemAccount_$memory;

    // @258 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$at(34,28405,28406)"} true;
    assume {:print "$track_local(42,7,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,1):", $t1} $t1 == $t1;

    // trace_local[designated_dealer_address]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,2):", $t2} $t2 == $t2;

    // trace_local[mint_amount]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,3):", $t3} $t3 == $t3;

    // trace_local[tier_index]($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:365:5+1
    assume {:print "$track_local(42,7,4):", $t4} $t4 == $t4;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t16 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:372:9+63
    assume {:print "$at(34,28613,28676)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,28613,28676)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(42,7):", $t16} $t16 == $t16;
        goto L2;
    }

    // assume Identical($t17, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t17 == $1_Signer_spec_address_of($t0));

    // assume Identical($t18, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:466:9+82
    assume {:print "$at(12,20581,20663)"} true;
    assume ($t18 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2))));

    // assume Identical($t19, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:468:9+69
    assume {:print "$at(12,20773,20842)"} true;
    assume ($t19 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t20, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t20 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t2)));

    // assume Identical($t21, pack DiemAccount::ReceivedPaymentEvent($t3, Diem::spec_currency_code<XDX::XDX>(), 0, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t21 == $1_DiemAccount_ReceivedPaymentEvent($t3, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), 0, $EmptyVec'u8'()));

    // assume Identical($t22, select DesignatedDealer::Dealer.mint_event_handle(global<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:192:9+55
    assume {:print "$at(10,8319,8374)"} true;
    assume ($t22 == $mint_event_handle#$1_DesignatedDealer_Dealer($ResourceValue($1_DesignatedDealer_Dealer_$memory, $t2)));

    // assume Identical($t23, pack DesignatedDealer::ReceivedMintEvent(Diem::spec_currency_code<XDX::XDX>(), $t2, $t3)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:193:9+167
    assume {:print "$at(10,8383,8550)"} true;
    assume ($t23 == $1_DesignatedDealer_ReceivedMintEvent($1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t2, $t3));

    // assume Identical($t24, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:460:9+66
    assume {:print "$at(11,22075,22141)"} true;
    assume ($t24 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t25, select Diem::CurrencyInfo.mint_events($t24)) at /home/ying/diem/language/diem-framework/modules/Diem.move:461:9+39
    assume {:print "$at(11,22150,22189)"} true;
    assume ($t25 == $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t24));

    // assume Identical($t26, pack Diem::MintEvent($t3, select Diem::CurrencyInfo.currency_code($t24))) at /home/ying/diem/language/diem-framework/modules/Diem.move:462:9+114
    assume {:print "$at(11,22198,22312)"} true;
    assume ($t26 == $1_Diem_MintEvent($t3, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t24)));

    // opaque begin: DiemAccount::tiered_mint<XDX::XDX>($t0, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;

    // assume Identical($t27, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Eq<u64>($t3, 0), Not(exists<Diem::MintCapability<XDX::XDX>>(Signer::spec_address_of($t0)))), Not(exists<Roles::RoleId>($t17))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed)), Not(exists<DesignatedDealer::Dealer>($t2))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<XDX::XDX>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<XDX::XDX>()), $t3), MaxU128())), Not(Diem::spec_is_currency<XDX::XDX>())), Not(exists<DiemAccount::Balance<XDX::XDX>>($t2))), Not(DiemAccount::$exists_at($t2))), Eq<u64>($t3, 0)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t3, VASP::spec_parent_address($t2))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XDX::XDX>())), AccountFreezing::spec_account_is_frozen($t2)), Gt(Add(DiemAccount::$balance<XDX::XDX>($t2), $t3), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume ($t27 == (((((((((((((((((((((($IsEqual'u64'($t3, 0) || !$ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory, $t17)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2)) || !$can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))) || (($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) + $t3) > $MAX_U128)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2)) || $IsEqual'u64'($t3, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t2)) || (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2) + $t3) > $MAX_U64)));

    // if ($t27) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    if ($t27) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
L4:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Eq<u64>($t3, 0), Eq(7, $t16)), And(Not(exists<Diem::MintCapability<XDX::XDX>>(Signer::spec_address_of($t0))), Eq(4, $t16))), And(Not(exists<Roles::RoleId>($t17)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t17)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t16))), And(Not(exists<DesignatedDealer::Dealer>($t2)), Eq(5, $t16))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info<XDX::XDX>())), Eq(1, $t16))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<XDX::XDX>()), $t3), MaxU128()), Eq(8, $t16))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t16))), And(Not(exists<DiemAccount::Balance<XDX::XDX>>($t2)), Eq(7, $t16))), And(Not(DiemAccount::$exists_at($t2)), Eq(5, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t3, VASP::spec_parent_address($t2)))), Eq(8, $t16))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2))))), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t16))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t16))), And(AccountFreezing::spec_account_is_frozen($t2), Eq(1, $t16))), And(Gt(Add(DiemAccount::$balance<XDX::XDX>($t2), $t3), MaxU64()), Eq(8, $t16))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume ((((((((((((((((((((((($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16)) || (!$ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory, $t17) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t17)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory, $t2) && $IsEqual'num'(5, $t16))) || (!$can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(1, $t16))) || ((($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) + $t3) > $MAX_U128) && $IsEqual'num'(8, $t16))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t16))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2) && $IsEqual'num'(7, $t16))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t2) && $IsEqual'num'(5, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && $IsEqual'num'(8, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))))) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t16))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t16))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t2) && $IsEqual'num'(1, $t16))) || ((($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2) + $t3) > $MAX_U64) && $IsEqual'num'(8, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    assume {:print "$track_abort(42,7):", $t16} $t16 == $t16;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
L3:

    // modifies global<DiemAccount::DiemAccount>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t2, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t2);
    }

    // modifies global<DesignatedDealer::Dealer>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_Dealer';
        $1_DesignatedDealer_Dealer_$memory := $ResourceUpdate($1_DesignatedDealer_Dealer_$memory, $t2, $temp_0'$1_DesignatedDealer_Dealer');
    } else {
        $1_DesignatedDealer_Dealer_$memory := $ResourceRemove($1_DesignatedDealer_Dealer_$memory, $t2);
    }

    // modifies global<DesignatedDealer::TierInfo<XDX::XDX>>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DesignatedDealer_TierInfo'$1_XDX_XDX'';
        $1_DesignatedDealer_TierInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DesignatedDealer_TierInfo'$1_XDX_XDX'_$memory, $t2, $temp_0'$1_DesignatedDealer_TierInfo'$1_XDX_XDX'');
    } else {
        $1_DesignatedDealer_TierInfo'$1_XDX_XDX'_$memory := $ResourceRemove($1_DesignatedDealer_TierInfo'$1_XDX_XDX'_$memory, $t2);
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2, $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2);
    }

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t2));
    }

    // modifies global<Diem::CurrencyInfo<XDX::XDX>>(a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'';
        $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceUpdate($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816, $temp_0'$1_Diem_CurrencyInfo'$1_XDX_XDX'');
    } else {
        $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory := $ResourceRemove($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816);
    }

    // assume Identical($t28, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:467:9+92
    assume {:print "$at(12,20672,20764)"} true;
    assume ($t28 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2))));

    // assume Identical($t29, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t29 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Eq<Diem::CurrencyInfo<XDX::XDX>>($t29, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<XDX::XDX>>($t19, Add(select Diem::CurrencyInfo.total_value($t19), $t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''($t29, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value($t19, ($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t19) + $t3)));

    // assume Eq<u64>($t28, Add($t18, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume $IsEqual'u64'($t28, ($t18 + $t3));

    // assume Identical($t30, $t21) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t30 == $t21);

    // assume Identical($t31, $t20) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t31 == $t20);

    // emit_event($t30, $t31) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t31, $t30);

    // assume Identical($t32, $t23) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t32 == $t23);

    // assume Identical($t33, $t22) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t33 == $t22);

    // emit_event($t32, $t33) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, $t33, $t32);

    // assume Identical($t34, $t26) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t34 == $t26);

    // assume Identical($t35, $t25) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t35 == $t25);

    // assume Identical($t36, Not(select Diem::CurrencyInfo.is_synthetic($t24))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume ($t36 == !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t24));

    // emit_event($t34, $t35, $t36) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:373:9+121
    assume {:print "$at(34,28686,28807)"} true;
    $es := $CondExtendEventStore'$1_Diem_MintEvent'($es, $t35, $t34, $t36);

    // opaque end: DiemAccount::tiered_mint<XDX::XDX>($t0, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:376:5+1
    assume {:print "$at(34,28813,28814)"} true;
L1:

    // assume Identical($t37, select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t2)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:467:9+92
    assume {:print "$at(12,20672,20764)"} true;
    assume ($t37 == $value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t2))));

    // assume Identical($t38, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:469:9+79
    assume {:print "$at(12,20851,20930)"} true;
    assume ($t38 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assert Not(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Eq<u64>($t3, 0)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:184:9+52
    assume {:print "$at(10,7937,7989)"} true;
    assert {:msg "assert_failed(10,7937,7989): function does not abort under this condition"}
      !$IsEqual'u64'($t3, 0);

    // assert Not(Not(exists[@254]<Diem::MintCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:186:9+120
    assume {:print "$at(10,8032,8152)"} true;
    assert {:msg "assert_failed(10,8032,8152): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory#254, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@255]<Roles::RoleId>($t5))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#255, $t5);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(exists[@256]<DesignatedDealer::Dealer>($t2))) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:21:9+62
    assume {:print "$at(10,712,774)"} true;
    assert {:msg "assert_failed(10,712,774): function does not abort under this condition"}
      !!$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2);

    // assert Not(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:446:9+78
    assume {:print "$at(11,21338,21416)"} true;
    assert {:msg "assert_failed(11,21338,21416): function does not abort under this condition"}
      !!$can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257));

    // assert Not(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<XDX::XDX>()), $t3), MaxU128())) at /home/ying/diem/language/diem-framework/modules/Diem.move:447:9+102
    assume {:print "$at(11,21425,21527)"} true;
    assert {:msg "assert_failed(11,21425,21527): function does not abort under this condition"}
      !(($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257)) + $t3) > $MAX_U128);

    // assert Not(Not(Diem::spec_is_currency[@257]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257);

    // assert Not(Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2);

    // assert Not(Not(DiemAccount::$exists_at[@259]($t2))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2);

    // assert Not(Eq<u64>($t3, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t3, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<XDX::XDX>($t3, VASP::spec_parent_address[@261, @262]($t2))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)));

    // assert Not(Not(DiemTimestamp::$is_operating[@263]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)));

    // assert Not(Not(Diem::spec_is_currency[@257]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257);

    // assert Not(AccountFreezing::spec_account_is_frozen[@265]($t2)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2);

    // assert Not(Gt(Add(DiemAccount::$balance[@258]<XDX::XDX>($t2), $t3), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2) + $t3) > $MAX_U64);

    // assert Not(Not(exists[@255]<Roles::RoleId>($t15))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#255, $t15);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<Diem::CurrencyInfo<XDX::XDX>>($t38, update Diem::CurrencyInfo.total_value<Diem::CurrencyInfo<XDX::XDX>>($t7, Add(select Diem::CurrencyInfo.total_value($t7), $t3))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:471:9+112
    assume {:print "$at(12,21002,21114)"} true;
    assert {:msg "assert_failed(12,21002,21114): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''($t38, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value($t7, ($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) + $t3)));

    // assert Eq<u64>($t37, Add($t6, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:473:9+60
    assume {:print "$at(12,21191,21251)"} true;
    assert {:msg "assert_failed(12,21191,21251): post-condition does not hold"}
      $IsEqual'u64'($t37, ($t6 + $t3));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t9, $t8)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:198:9+20
    assume {:print "$at(10,8559,8579)"} true;
    assert {:msg "assert_failed(10,8559,8579): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:466:9+51
    assume {:print "$at(11,22321,22372)"} true;
    assert {:msg "assert_failed(11,22321,22372): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11), $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t12)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t9, $t8), $t11, $t10), $t14, $t13, Not(select Diem::CurrencyInfo.is_synthetic($t12)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assume {:print "$at(34,28820,29756)"} true;
    assert {:msg "assert_failed(34,28820,29756): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_MintEvent'($ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t8, $t9), $t10, $t11), $t13, $t14, !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t12)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:376:5+1
    assume {:print "$at(34,28813,28814)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Eq<u64>($t3, 0)), Not(exists[@254]<Diem::MintCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))), Not(exists[@255]<Roles::RoleId>($t5))), Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(exists[@256]<DesignatedDealer::Dealer>($t2))), Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<XDX::XDX>()))), Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<XDX::XDX>()), $t3), MaxU128())), Not(Diem::spec_is_currency[@257]<XDX::XDX>())), Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2))), Not(DiemAccount::$exists_at[@259]($t2))), Eq<u64>($t3, 0)), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<XDX::XDX>($t3, VASP::spec_parent_address[@261, @262]($t2))))), Not(DiemTimestamp::$is_operating[@263]())), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))))))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]())))), Not(Diem::spec_is_currency[@257]<XDX::XDX>())), AccountFreezing::spec_account_is_frozen[@265]($t2)), Gt(Add(DiemAccount::$balance[@258]<XDX::XDX>($t2), $t3), MaxU64())), Not(exists[@255]<Roles::RoleId>($t15))), Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assume {:print "$at(34,28820,29756)"} true;
    assert {:msg "assert_failed(34,28820,29756): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $IsEqual'u64'($t3, 0)) || !$ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory#254, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Roles_RoleId_$memory#255, $t5)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2)) || !$can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257))) || (($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257)) + $t3) > $MAX_U128)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2)) || $IsEqual'u64'($t3, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2)) || (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2) + $t3) > $MAX_U64)) || !$ResourceExists($1_Roles_RoleId_$memory#255, $t15)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@253]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t16)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(Not(exists[@254]<Diem::MintCapability<XDX::XDX>>(Signer::spec_address_of[]($t0))), Eq(4, $t16))), And(Not(exists[@255]<Roles::RoleId>($t5)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t5)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t16))), And(Not(exists[@256]<DesignatedDealer::Dealer>($t2)), Eq(5, $t16))), And(Not(select Diem::CurrencyInfo.can_mint(Diem::spec_currency_info[@257]<XDX::XDX>())), Eq(1, $t16))), And(Gt(Add(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@257]<XDX::XDX>()), $t3), MaxU128()), Eq(8, $t16))), And(Not(Diem::spec_is_currency[@257]<XDX::XDX>()), Eq(5, $t16))), And(Not(exists[@258]<DiemAccount::Balance<XDX::XDX>>($t2)), Eq(7, $t16))), And(Not(DiemAccount::$exists_at[@259]($t2)), Eq(5, $t16))), And(Eq<u64>($t3, 0), Eq(7, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(AccountLimits::spec_update_deposit_limits[@263, @264, @260]<XDX::XDX>($t3, VASP::spec_parent_address[@261, @262]($t2)))), Eq(8, $t16))), And(Not(DiemTimestamp::$is_operating[@263]()), Eq(1, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(exists[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), Not(exists[@264]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))))), Eq(5, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@263, @264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@263, @264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), $t3), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Gt(Add(select AccountLimits::Window.window_start(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2))))), MaxU64()))), Eq(8, $t16))), And(And(DiemAccount::spec_should_track_limits_for_account[@260, @261, @262]<XDX::XDX>(0, $t2, false), And(Not(AccountLimits::spec_window_unrestricted[@264]<XDX::XDX>(global[@260]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@261, @262]($t2)))), Not(DiemTimestamp::$is_operating[@263]()))), Eq(1, $t16))), And(Not(Diem::spec_is_currency[@257]<XDX::XDX>()), Eq(5, $t16))), And(AccountFreezing::spec_account_is_frozen[@265]($t2), Eq(1, $t16))), And(Gt(Add(DiemAccount::$balance[@258]<XDX::XDX>($t2), $t3), MaxU64()), Eq(8, $t16))), And(Not(exists[@255]<Roles::RoleId>($t15)), Eq(5, $t16))), And(Neq<u64>(select Roles::RoleId.role_id(global[@255]<Roles::RoleId>($t15)), 1), Eq(3, $t16))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t16))), Eq(7, $t16)), Eq(2, $t16)), Eq(5, $t16)), Eq(4, $t16)), Eq(1, $t16)), Eq(8, $t16)), Eq(3, $t16)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    assert {:msg "assert_failed(34,28820,29756): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#253, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t16)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (!$ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory#254, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#255, $t5) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t5)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || (!$ResourceExists($1_DesignatedDealer_Dealer_$memory#256, $t2) && $IsEqual'num'(5, $t16))) || (!$can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257)) && $IsEqual'num'(1, $t16))) || ((($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257)) + $t3) > $MAX_U128) && $IsEqual'num'(8, $t16))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257) && $IsEqual'num'(5, $t16))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2) && $IsEqual'num'(7, $t16))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#259, $t2) && $IsEqual'num'(5, $t16))) || ($IsEqual'u64'($t3, 0) && $IsEqual'num'(7, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $t3, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && $IsEqual'num'(8, $t16))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263) && $IsEqual'num'(1, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) && $IsEqual'num'(5, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2)))) + $t3) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))))) > $MAX_U64))) && $IsEqual'num'(8, $t16))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, 0, $t2, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#264, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#260, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#261, $1_VASP_ParentVASP_$memory#262, $t2))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#263))) && $IsEqual'num'(1, $t16))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#257) && $IsEqual'num'(5, $t16))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#265, $t2) && $IsEqual'num'(1, $t16))) || ((($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#258, $t2) + $t3) > $MAX_U64) && $IsEqual'num'(8, $t16))) || (!$ResourceExists($1_Roles_RoleId_$memory#255, $t15) && $IsEqual'num'(5, $t16))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#255, $t15)), 1) && $IsEqual'num'(3, $t16))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t16))) || $IsEqual'num'(7, $t16)) || $IsEqual'num'(2, $t16)) || $IsEqual'num'(5, $t16)) || $IsEqual'num'(4, $t16)) || $IsEqual'num'(1, $t16)) || $IsEqual'num'(8, $t16)) || $IsEqual'num'(3, $t16));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:378:5+936
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::freeze_account [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_freeze_account$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    var $t6: $1_AccountFreezing_FreezeAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,33700,33955)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+255
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+1
    assume {:print "$track_local(42,4,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+1
    assume {:print "$track_local(42,4,1):", $t1} $t1 == $t1;

    // trace_local[to_freeze_account]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:447:5+1
    assume {:print "$track_local(42,4,2):", $t2} $t2 == $t2;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:448:9+63
    assume {:print "$at(34,33812,33875)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,33812,33875)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, select AccountFreezing::FreezeEventsHolder.freeze_event_handle(global<AccountFreezing::FreezeEventsHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:114:9+71
    assume {:print "$at(4,4640,4711)"} true;
    assume ($t5 == $freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816)));

    // assume Identical($t6, pack AccountFreezing::FreezeAccountEvent(Signer::spec_address_of($t0), $t2)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:115:9+133
    assume {:print "$at(4,4720,4853)"} true;
    assume ($t6 == $1_AccountFreezing_FreezeAccountEvent($1_Signer_spec_address_of($t0), $t2));

    // AccountFreezing::freeze_account($t0, $t2) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:449:9+63
    assume {:print "$at(34,33885,33948)"} true;
    call $1_AccountFreezing_freeze_account($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,33885,33948)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:450:5+1
    assume {:print "$at(34,33954,33955)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:450:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:450:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:450:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::unfreeze_account [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_unfreeze_account$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    var $t6: $1_AccountFreezing_UnfreezeAccountEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,36942,37196)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezeEventsHolder>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezeEventsHolder'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+254
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+1
    assume {:print "$track_local(42,8,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+1
    assume {:print "$track_local(42,8,1):", $t1} $t1 == $t1;

    // trace_local[to_unfreeze_account]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:486:5+1
    assume {:print "$track_local(42,8,2):", $t2} $t2 == $t2;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:487:9+60
    assume {:print "$at(34,37055,37115)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,37055,37115)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Identical($t5, select AccountFreezing::FreezeEventsHolder.unfreeze_event_handle(global<AccountFreezing::FreezeEventsHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:151:9+73
    assume {:print "$at(4,6106,6179)"} true;
    assume ($t5 == $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder($ResourceValue($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816)));

    // assume Identical($t6, pack AccountFreezing::UnfreezeAccountEvent(Signer::spec_address_of($t0), $t2)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:152:9+137
    assume {:print "$at(4,6188,6325)"} true;
    assume ($t6 == $1_AccountFreezing_UnfreezeAccountEvent($1_Signer_spec_address_of($t0), $t2));

    // AccountFreezing::unfreeze_account($t0, $t2) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:488:9+64
    assume {:print "$at(34,37125,37189)"} true;
    call $1_AccountFreezing_unfreeze_account($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,37125,37189)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,8):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:489:5+1
    assume {:print "$at(34,37195,37196)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:489:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:489:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:489:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::burn_txn_fees [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_burn_txn_fees$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: $1_TransactionFee_TransactionFee'#0';
    var $t3: $1_Diem_CurrencyInfo'#0';
    var $t4: int;
    var $t0: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,22379,22507)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'#0'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'#0''($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+1
    assume {:print "$track_local(42,1,0):", $t0} $t0 == $t0;

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, TransactionFee::spec_transaction_fee<#0>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:144:9+44
    assume {:print "$at(33,6048,6092)"} true;
    assume ($t2 == $1_TransactionFee_spec_transaction_fee'#0'($1_TransactionFee_TransactionFee'#0'_$memory));

    // assume Identical($t3, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t3 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // TransactionFee::burn_fees<#0>($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:309:9+48
    assume {:print "$at(34,22452,22500)"} true;
    call $1_TransactionFee_burn_fees'#0'($t0);
    if ($abort_flag) {
        assume {:print "$at(34,22452,22500)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(42,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    assume {:print "$at(34,22506,22507)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::burn_txn_fees [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_burn_txn_fees$verify_instantiated_0(_$t0: $signer) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t1: int;
    var $t2: $1_TransactionFee_TransactionFee'$1_XUS_XUS';
    var $t3: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t4: int;
    var $t0: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,22379,22507)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+1
    assume {:print "$track_local(42,1,0):", $t0} $t0 == $t0;

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, TransactionFee::spec_transaction_fee<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:144:9+44
    assume {:print "$at(33,6048,6092)"} true;
    assume ($t2 == $1_TransactionFee_spec_transaction_fee'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Identical($t3, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t3 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // TransactionFee::burn_fees<XUS::XUS>($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:309:9+48
    assume {:print "$at(34,22452,22500)"} true;
    call $1_TransactionFee_burn_fees'$1_XUS_XUS'($t0);
    if ($abort_flag) {
        assume {:print "$at(34,22452,22500)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(42,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    assume {:print "$at(34,22506,22507)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::burn_txn_fees [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_burn_txn_fees$verify_instantiated_1(_$t0: $signer) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t1: int;
    var $t2: $1_TransactionFee_TransactionFee'$1_XDX_XDX';
    var $t3: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t4: int;
    var $t0: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,22379,22507)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<TransactionFee::TransactionFee<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+128
    assume (forall $a_0: int :: {$ResourceValue($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_TransactionFee_TransactionFee'$1_XDX_XDX''($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:308:5+1
    assume {:print "$track_local(42,1,0):", $t0} $t0 == $t0;

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // assume Identical($t2, TransactionFee::spec_transaction_fee<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:144:9+44
    assume {:print "$at(33,6048,6092)"} true;
    assume ($t2 == $1_TransactionFee_spec_transaction_fee'$1_XDX_XDX'($1_TransactionFee_TransactionFee'$1_XDX_XDX'_$memory));

    // assume Identical($t3, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1089:9+42
    assume {:print "$at(11,52304,52346)"} true;
    assume ($t3 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // TransactionFee::burn_fees<XDX::XDX>($t0) on_abort goto L2 with $t4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:309:9+48
    assume {:print "$at(34,22452,22500)"} true;
    call $1_TransactionFee_burn_fees'$1_XDX_XDX'($t0);
    if ($abort_flag) {
        assume {:print "$at(34,22452,22500)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(42,1):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    assume {:print "$at(34,22506,22507)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
L2:

    // abort($t4) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:310:5+1
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::burn_with_amount [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_burn_with_amount$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $1_Diem_Preburn'#0';
    var $t5: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t6: int;
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: $1_Diem_Preburn'#0';
    var $t9: $1_Diem_CurrencyInfo'#0';
    var $t10: Vec (int);
    var $t11: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t12: int;
    var $t13: $1_Diem_Preburn'#0';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: int;
    var $t16: $1_Diem_CurrencyInfo'#0';
    var $t17: $1_Diem_Preburn'#0';
    var $t18: $1_Diem_CurrencyInfo'#0';
    var $t19: Vec (int);
    var $t20: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#219: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Diem_BurnCapability'#0'_$memory#220: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#221: $Memory $1_Diem_PreburnQueue'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#222: $Memory $1_Diem_CurrencyInfo'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume {:print "$at(34,13004,13261)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<#0>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<#0>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($ResourceValue($1_Diem_Preburn'#0'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<#0>>(dd_addr): Not(exists<Diem::Preburn<#0>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume Identical($t4, Diem::spec_make_preburn<#0>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t4 == $1_Diem_spec_make_preburn'#0'($t3));

    // assume Identical($t5, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t5 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t2)));

    // assume Identical($t6, select Diem::Diem.value(select Diem::Preburn.to_burn($t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t6 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t4)));

    // assume Identical($t7, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t8, Diem::spec_make_preburn<#0>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'#0'($t3));

    // assume Identical($t9, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t10 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t11, select Diem::CurrencyInfo.burn_events($t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t11 == $burn_events#$1_Diem_CurrencyInfo'#0'($t9));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @219 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#219 := $1_SlidingNonce_SlidingNonce_$memory;

    // @220 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_BurnCapability'#0'_$memory#220 := $1_Diem_BurnCapability'#0'_$memory;

    // @222 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#222 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @221 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'#0'_$memory#221 := $1_Diem_PreburnQueue'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$at(34,13004,13005)"} true;
    assume {:print "$track_local(42,2,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,1):", $t1} $t1 == $t1;

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,3):", $t3} $t3 == $t3;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t12 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:171:9+60
    assume {:print "$at(34,13133,13193)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,13133,13193)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,2):", $t12} $t12 == $t12;
        goto L2;
    }

    // assume Identical($t13, Diem::spec_make_preburn<#0>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t13 == $1_Diem_spec_make_preburn'#0'($t3));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t2)));

    // assume Identical($t15, select Diem::Diem.value(select Diem::Preburn.to_burn($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t15 == $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t13)));

    // assume Identical($t16, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, Diem::spec_make_preburn<#0>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t17 == $1_Diem_spec_make_preburn'#0'($t3));

    // assume Identical($t18, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t18 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t19, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t19 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t20, select Diem::CurrencyInfo.burn_events($t18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t20 == $burn_events#$1_Diem_CurrencyInfo'#0'($t18));

    // Diem::burn<#0>($t0, $t2, $t3) on_abort goto L2 with $t12 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:172:9+52
    assume {:print "$at(34,13203,13255)"} true;
    call $1_Diem_burn'#0'($t0, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(34,13203,13255)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,2):", $t12} $t12 == $t12;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:173:5+1
    assume {:print "$at(34,13260,13261)"} true;
L1:

    // assert Not(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Not(exists[@220]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:344:9+111
    assume {:print "$at(11,16880,16991)"} true;
    assert {:msg "assert_failed(11,16880,16991): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@221]<Diem::PreburnQueue<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:354:9+86
    assume {:print "$at(11,17303,17389)"} true;
    assert {:msg "assert_failed(11,17303,17389): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, $t2);

    // assert Not(Not(exists[@221]<Diem::PreburnQueue<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:860:9+86
    assume {:print "$at(11,41226,41312)"} true;
    assert {:msg "assert_failed(11,41226,41312): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, $t2);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:861:9+121
    assume {:print "$at(11,41321,41442)"} true;
    assert {:msg "assert_failed(11,41321,41442): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t5, i)))), $t3)))));

    // assert Not(Eq<u64>($t6, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+50
    assume {:print "$at(11,46449,46499)"} true;
    assert {:msg "assert_failed(11,46449,46499): function does not abort under this condition"}
      !$IsEqual'u64'($t6, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t7), $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+65
    assume {:print "$at(11,46508,46573)"} true;
    assert {:msg "assert_failed(11,46508,46573): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $t6);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+67
    assume {:print "$at(11,46582,46649)"} true;
    assert {:msg "assert_failed(11,46582,46649): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t6);

    // assert Not(Not(Diem::spec_is_currency[@222]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#222);

    // assert Not(Not(exists[@220]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:9+111
    assume {:print "$at(11,53156,53267)"} true;
    assert {:msg "assert_failed(11,53156,53267): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, $1_Signer_spec_address_of($t0));

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@222]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:969:9+142
    assume {:print "$at(11,46755,46897)"} true;
    assert {:msg "assert_failed(11,46755,46897): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($total_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#222)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t8))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<#0>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@222]<#0>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:971:9+146
    assume {:print "$at(11,46906,47052)"} true;
    assert {:msg "assert_failed(11,46906,47052): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory#222)) - $value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($t8))));

    // assert Implies(exists[@221]<Diem::PreburnQueue<#0>>($t2), exists<Diem::PreburnQueue<#0>>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:9+113
    assume {:print "$at(11,41714,41827)"} true;
    assert {:msg "assert_failed(11,41714,41827): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, $t2) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t2));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t3))), $t10, $t2), $t11, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:980:9+187
    assume {:print "$at(11,47340,47527)"} true;
    assert {:msg "assert_failed(11,47340,47527): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t11, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t3))), $t10, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t9)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<#0>($t3))), $t10, $t2), $t11, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assume {:print "$at(34,13266,14136)"} true;
    assert {:msg "assert_failed(34,13266,14136): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t11, $1_Diem_BurnEvent($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($1_Diem_spec_make_preburn'#0'($t3))), $t10, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t9)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:173:5+1
    assume {:print "$at(34,13260,13261)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Not(exists[@220]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))), Not(exists[@221]<Diem::PreburnQueue<#0>>($t2))), Not(exists[@221]<Diem::PreburnQueue<#0>>($t2))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3)), Eq<u64>($t6, 0)), Lt(select Diem::CurrencyInfo.total_value($t7), $t6)), Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6)), Not(Diem::spec_is_currency[@222]<#0>())), Not(exists[@220]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assume {:print "$at(34,13266,14136)"} true;
    assert {:msg "assert_failed(34,13266,14136): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, $t2)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, $t2)) || (var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t5, i)))), $t3)))))) || $IsEqual'u64'($t6, 0)) || ($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $t6)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t6)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#222)) || !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, $1_Signer_spec_address_of($t0)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t12)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t12))), And(Not(exists[@220]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), And(Not(exists[@221]<Diem::PreburnQueue<#0>>($t2)), Eq(5, $t12))), And(Not(exists[@221]<Diem::PreburnQueue<#0>>($t2)), Eq(5, $t12))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3), Eq(1, $t12))), And(Eq<u64>($t6, 0), Eq(1, $t12))), And(Lt(select Diem::CurrencyInfo.total_value($t7), $t6), Eq(8, $t12))), And(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6), Eq(8, $t12))), And(Not(Diem::spec_is_currency[@222]<#0>()), Eq(5, $t12))), And(Not(exists[@220]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), Eq(7, $t12)), Eq(4, $t12)), Eq(5, $t12)), Eq(1, $t12)), Eq(8, $t12)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assert {:msg "assert_failed(34,13266,14136): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t12)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t12))) || (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t12))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, $t2) && $IsEqual'num'(5, $t12))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#221, $t2) && $IsEqual'num'(5, $t12))) || ((var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t5, i)))), $t3))))) && $IsEqual'num'(1, $t12))) || ($IsEqual'u64'($t6, 0) && $IsEqual'num'(1, $t12))) || (($total_value#$1_Diem_CurrencyInfo'#0'($t7) < $t6) && $IsEqual'num'(8, $t12))) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) < $t6) && $IsEqual'num'(8, $t12))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#222) && $IsEqual'num'(5, $t12))) || (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#220, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t12))) || $IsEqual'num'(7, $t12)) || $IsEqual'num'(4, $t12)) || $IsEqual'num'(5, $t12)) || $IsEqual'num'(1, $t12)) || $IsEqual'num'(8, $t12));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::burn_with_amount [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_burn_with_amount$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t4: $1_Diem_Preburn'$1_XUS_XUS';
    var $t5: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t6: int;
    var $t7: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t8: $1_Diem_Preburn'$1_XUS_XUS';
    var $t9: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t10: Vec (int);
    var $t11: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t12: int;
    var $t13: $1_Diem_Preburn'$1_XUS_XUS';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t15: int;
    var $t16: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t17: $1_Diem_Preburn'$1_XUS_XUS';
    var $t18: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t19: Vec (int);
    var $t20: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#219: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220: $Memory $1_Diem_BurnCapability'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#222: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume {:print "$at(34,13004,13261)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XUS::XUS>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr): Not(exists<Diem::Preburn<XUS::XUS>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume Identical($t4, Diem::spec_make_preburn<XUS::XUS>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t4 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t3));

    // assume Identical($t5, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t5 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t2)));

    // assume Identical($t6, select Diem::Diem.value(select Diem::Preburn.to_burn($t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t6 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t4)));

    // assume Identical($t7, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t8, Diem::spec_make_preburn<XUS::XUS>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t3));

    // assume Identical($t9, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t10, Diem::spec_currency_code<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t10 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t11, select Diem::CurrencyInfo.burn_events($t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t11 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t9));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @219 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#219 := $1_SlidingNonce_SlidingNonce_$memory;

    // @220 := save_mem(Diem::BurnCapability<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220 := $1_Diem_BurnCapability'$1_XUS_XUS'_$memory;

    // @222 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#222 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @221 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$at(34,13004,13005)"} true;
    assume {:print "$track_local(42,2,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,1):", $t1} $t1 == $t1;

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,3):", $t3} $t3 == $t3;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t12 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:171:9+60
    assume {:print "$at(34,13133,13193)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,13133,13193)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,2):", $t12} $t12 == $t12;
        goto L2;
    }

    // assume Identical($t13, Diem::spec_make_preburn<XUS::XUS>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t13 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t3));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t2)));

    // assume Identical($t15, select Diem::Diem.value(select Diem::Preburn.to_burn($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t15 == $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t13)));

    // assume Identical($t16, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t17, Diem::spec_make_preburn<XUS::XUS>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t17 == $1_Diem_spec_make_preburn'$1_XUS_XUS'($t3));

    // assume Identical($t18, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t18 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t19, Diem::spec_currency_code<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t19 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t20, select Diem::CurrencyInfo.burn_events($t18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t20 == $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t18));

    // Diem::burn<XUS::XUS>($t0, $t2, $t3) on_abort goto L2 with $t12 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:172:9+52
    assume {:print "$at(34,13203,13255)"} true;
    call $1_Diem_burn'$1_XUS_XUS'($t0, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(34,13203,13255)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,2):", $t12} $t12 == $t12;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:173:5+1
    assume {:print "$at(34,13260,13261)"} true;
L1:

    // assert Not(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Not(exists[@220]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:344:9+111
    assume {:print "$at(11,16880,16991)"} true;
    assert {:msg "assert_failed(11,16880,16991): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@221]<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:354:9+86
    assume {:print "$at(11,17303,17389)"} true;
    assert {:msg "assert_failed(11,17303,17389): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221, $t2);

    // assert Not(Not(exists[@221]<Diem::PreburnQueue<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:860:9+86
    assume {:print "$at(11,41226,41312)"} true;
    assert {:msg "assert_failed(11,41226,41312): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221, $t2);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:861:9+121
    assume {:print "$at(11,41321,41442)"} true;
    assert {:msg "assert_failed(11,41321,41442): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t5, i)))), $t3)))));

    // assert Not(Eq<u64>($t6, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+50
    assume {:print "$at(11,46449,46499)"} true;
    assert {:msg "assert_failed(11,46449,46499): function does not abort under this condition"}
      !$IsEqual'u64'($t6, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t7), $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+65
    assume {:print "$at(11,46508,46573)"} true;
    assert {:msg "assert_failed(11,46508,46573): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) < $t6);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+67
    assume {:print "$at(11,46582,46649)"} true;
    assert {:msg "assert_failed(11,46582,46649): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) < $t6);

    // assert Not(Not(Diem::spec_is_currency[@222]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#222);

    // assert Not(Not(exists[@220]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:9+111
    assume {:print "$at(11,53156,53267)"} true;
    assert {:msg "assert_failed(11,53156,53267): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220, $1_Signer_spec_address_of($t0));

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<XUS::XUS>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@222]<XUS::XUS>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:969:9+142
    assume {:print "$at(11,46755,46897)"} true;
    assert {:msg "assert_failed(11,46755,46897): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), ($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#222)) - $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t8))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<XUS::XUS>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@222]<XUS::XUS>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:971:9+146
    assume {:print "$at(11,46906,47052)"} true;
    assert {:msg "assert_failed(11,46906,47052): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#222)) - $value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($t8))));

    // assert Implies(exists[@221]<Diem::PreburnQueue<XUS::XUS>>($t2), exists<Diem::PreburnQueue<XUS::XUS>>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:9+113
    assume {:print "$at(11,41714,41827)"} true;
    assert {:msg "assert_failed(11,41714,41827): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221, $t2) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t2));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<XUS::XUS>($t3))), $t10, $t2), $t11, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:980:9+187
    assume {:print "$at(11,47340,47527)"} true;
    assert {:msg "assert_failed(11,47340,47527): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t11, $1_Diem_BurnEvent($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($1_Diem_spec_make_preburn'$1_XUS_XUS'($t3))), $t10, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t9)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<XUS::XUS>($t3))), $t10, $t2), $t11, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assume {:print "$at(34,13266,14136)"} true;
    assert {:msg "assert_failed(34,13266,14136): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t11, $1_Diem_BurnEvent($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($1_Diem_spec_make_preburn'$1_XUS_XUS'($t3))), $t10, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t9)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:173:5+1
    assume {:print "$at(34,13260,13261)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Not(exists[@220]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))), Not(exists[@221]<Diem::PreburnQueue<XUS::XUS>>($t2))), Not(exists[@221]<Diem::PreburnQueue<XUS::XUS>>($t2))), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3)), Eq<u64>($t6, 0)), Lt(select Diem::CurrencyInfo.total_value($t7), $t6)), Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6)), Not(Diem::spec_is_currency[@222]<XUS::XUS>())), Not(exists[@220]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assume {:print "$at(34,13266,14136)"} true;
    assert {:msg "assert_failed(34,13266,14136): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || !$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221, $t2)) || !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221, $t2)) || (var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t5, i)))), $t3)))))) || $IsEqual'u64'($t6, 0)) || ($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) < $t6)) || ($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) < $t6)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#222)) || !$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220, $1_Signer_spec_address_of($t0)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t12)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t12))), And(Not(exists[@220]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), And(Not(exists[@221]<Diem::PreburnQueue<XUS::XUS>>($t2)), Eq(5, $t12))), And(Not(exists[@221]<Diem::PreburnQueue<XUS::XUS>>($t2)), Eq(5, $t12))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3), Eq(1, $t12))), And(Eq<u64>($t6, 0), Eq(1, $t12))), And(Lt(select Diem::CurrencyInfo.total_value($t7), $t6), Eq(8, $t12))), And(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6), Eq(8, $t12))), And(Not(Diem::spec_is_currency[@222]<XUS::XUS>()), Eq(5, $t12))), And(Not(exists[@220]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), Eq(7, $t12)), Eq(4, $t12)), Eq(5, $t12)), Eq(1, $t12)), Eq(8, $t12)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assert {:msg "assert_failed(34,13266,14136): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t12)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t12))) || (!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t12))) || (!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221, $t2) && $IsEqual'num'(5, $t12))) || (!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#221, $t2) && $IsEqual'num'(5, $t12))) || ((var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t5, i)))), $t3))))) && $IsEqual'num'(1, $t12))) || ($IsEqual'u64'($t6, 0) && $IsEqual'num'(1, $t12))) || (($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) < $t6) && $IsEqual'num'(8, $t12))) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) < $t6) && $IsEqual'num'(8, $t12))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#222) && $IsEqual'num'(5, $t12))) || (!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#220, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t12))) || $IsEqual'num'(7, $t12)) || $IsEqual'num'(4, $t12)) || $IsEqual'num'(5, $t12)) || $IsEqual'num'(1, $t12)) || $IsEqual'num'(8, $t12));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::burn_with_amount [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_burn_with_amount$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t4: $1_Diem_Preburn'$1_XDX_XDX';
    var $t5: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t6: int;
    var $t7: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t8: $1_Diem_Preburn'$1_XDX_XDX';
    var $t9: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t10: Vec (int);
    var $t11: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t12: int;
    var $t13: $1_Diem_Preburn'$1_XDX_XDX';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t15: int;
    var $t16: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t17: $1_Diem_Preburn'$1_XDX_XDX';
    var $t18: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t19: Vec (int);
    var $t20: $1_Event_EventHandle'$1_Diem_BurnEvent';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#219: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#222: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume {:print "$at(34,13004,13261)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XDX::XDX>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr): Not(exists<Diem::Preburn<XDX::XDX>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'address'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XDX::XDX>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+257
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc), i)))) > 0))))))))));

    // assume Identical($t4, Diem::spec_make_preburn<XDX::XDX>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t4 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t3));

    // assume Identical($t5, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t5 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t2)));

    // assume Identical($t6, select Diem::Diem.value(select Diem::Preburn.to_burn($t4))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t6 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t4)));

    // assume Identical($t7, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t7 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t8, Diem::spec_make_preburn<XDX::XDX>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t8 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t3));

    // assume Identical($t9, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t9 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t10, Diem::spec_currency_code<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t10 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t11, select Diem::CurrencyInfo.burn_events($t9)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t11 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t9));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @219 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#219 := $1_SlidingNonce_SlidingNonce_$memory;

    // @220 := save_mem(Diem::BurnCapability<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220 := $1_Diem_BurnCapability'$1_XDX_XDX'_$memory;

    // @222 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#222 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @221 := save_mem(Diem::PreburnQueue<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221 := $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$at(34,13004,13005)"} true;
    assume {:print "$track_local(42,2,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,1):", $t1} $t1 == $t1;

    // trace_local[preburn_address]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:170:5+1
    assume {:print "$track_local(42,2,3):", $t3} $t3 == $t3;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t12 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:171:9+60
    assume {:print "$at(34,13133,13193)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,13133,13193)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,2):", $t12} $t12 == $t12;
        goto L2;
    }

    // assume Identical($t13, Diem::spec_make_preburn<XDX::XDX>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:905:9+50
    assume {:print "$at(11,43607,43657)"} true;
    assume ($t13 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t3));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t2)));

    // assume Identical($t15, select Diem::Diem.value(select Diem::Preburn.to_burn($t13))) at /home/ying/diem/language/diem-framework/modules/Diem.move:961:9+36
    assume {:print "$at(11,46353,46389)"} true;
    assume ($t15 == $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t13)));

    // assume Identical($t16, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:962:9+42
    assume {:print "$at(11,46398,46440)"} true;
    assume ($t16 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t17, Diem::spec_make_preburn<XDX::XDX>($t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:913:9+50
    assume {:print "$at(11,43962,44012)"} true;
    assume ($t17 == $1_Diem_spec_make_preburn'$1_XDX_XDX'($t3));

    // assume Identical($t18, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:977:9+42
    assume {:print "$at(11,47190,47232)"} true;
    assume ($t18 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t19, Diem::spec_currency_code<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:978:9+51
    assume {:print "$at(11,47241,47292)"} true;
    assume ($t19 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t20, select Diem::CurrencyInfo.burn_events($t18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:979:9+30
    assume {:print "$at(11,47301,47331)"} true;
    assume ($t20 == $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t18));

    // Diem::burn<XDX::XDX>($t0, $t2, $t3) on_abort goto L2 with $t12 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:172:9+52
    assume {:print "$at(34,13203,13255)"} true;
    call $1_Diem_burn'$1_XDX_XDX'($t0, $t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(34,13203,13255)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(42,2):", $t12} $t12 == $t12;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:173:5+1
    assume {:print "$at(34,13260,13261)"} true;
L1:

    // assert Not(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Not(exists[@220]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:344:9+111
    assume {:print "$at(11,16880,16991)"} true;
    assert {:msg "assert_failed(11,16880,16991): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220, $1_Signer_spec_address_of($t0));

    // assert Not(Not(exists[@221]<Diem::PreburnQueue<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:354:9+86
    assume {:print "$at(11,17303,17389)"} true;
    assert {:msg "assert_failed(11,17303,17389): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221, $t2);

    // assert Not(Not(exists[@221]<Diem::PreburnQueue<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:860:9+86
    assume {:print "$at(11,41226,41312)"} true;
    assert {:msg "assert_failed(11,41226,41312): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221, $t2);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3)) at /home/ying/diem/language/diem-framework/modules/Diem.move:861:9+121
    assume {:print "$at(11,41321,41442)"} true;
    assert {:msg "assert_failed(11,41321,41442): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t5, i)))), $t3)))));

    // assert Not(Eq<u64>($t6, 0)) at /home/ying/diem/language/diem-framework/modules/Diem.move:963:9+50
    assume {:print "$at(11,46449,46499)"} true;
    assert {:msg "assert_failed(11,46449,46499): function does not abort under this condition"}
      !$IsEqual'u64'($t6, 0);

    // assert Not(Lt(select Diem::CurrencyInfo.total_value($t7), $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:964:9+65
    assume {:print "$at(11,46508,46573)"} true;
    assert {:msg "assert_failed(11,46508,46573): function does not abort under this condition"}
      !($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) < $t6);

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6)) at /home/ying/diem/language/diem-framework/modules/Diem.move:965:9+67
    assume {:print "$at(11,46582,46649)"} true;
    assert {:msg "assert_failed(11,46582,46649): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) < $t6);

    // assert Not(Not(Diem::spec_is_currency[@222]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#222);

    // assert Not(Not(exists[@220]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:9+111
    assume {:print "$at(11,53156,53267)"} true;
    assert {:msg "assert_failed(11,53156,53267): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220, $1_Signer_spec_address_of($t0));

    // assert Eq<u128>(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info<XDX::XDX>()), Sub(select Diem::CurrencyInfo.total_value(Diem::spec_currency_info[@222]<XDX::XDX>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:969:9+142
    assume {:print "$at(11,46755,46897)"} true;
    assert {:msg "assert_failed(11,46755,46897): post-condition does not hold"}
      $IsEqual'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), ($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#222)) - $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t8))));

    // assert Eq<u64>(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info<XDX::XDX>()), Sub(select Diem::CurrencyInfo.preburn_value(Diem::spec_currency_info[@222]<XDX::XDX>()), select Diem::Diem.value(select Diem::Preburn.to_burn($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:971:9+146
    assume {:print "$at(11,46906,47052)"} true;
    assert {:msg "assert_failed(11,46906,47052): post-condition does not hold"}
      $IsEqual'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), ($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#222)) - $value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($t8))));

    // assert Implies(exists[@221]<Diem::PreburnQueue<XDX::XDX>>($t2), exists<Diem::PreburnQueue<XDX::XDX>>($t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:9+113
    assume {:print "$at(11,41714,41827)"} true;
    assert {:msg "assert_failed(11,41714,41827): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221, $t2) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t2));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<XDX::XDX>($t3))), $t10, $t2), $t11, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:980:9+187
    assume {:print "$at(11,47340,47527)"} true;
    assert {:msg "assert_failed(11,47340,47527): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t11, $1_Diem_BurnEvent($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($1_Diem_spec_make_preburn'$1_XDX_XDX'($t3))), $t10, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t9)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), pack Diem::BurnEvent(select Diem::Diem.value(select Diem::Preburn.to_burn(Diem::spec_make_preburn<XDX::XDX>($t3))), $t10, $t2), $t11, Not(select Diem::CurrencyInfo.is_synthetic($t9)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assume {:print "$at(34,13266,14136)"} true;
    assert {:msg "assert_failed(34,13266,14136): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_BurnEvent'($EmptyEventStore, $t11, $1_Diem_BurnEvent($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($1_Diem_spec_make_preburn'$1_XDX_XDX'($t3))), $t10, $t2), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t9)); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:173:5+1
    assume {:print "$at(34,13260,13261)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Not(exists[@220]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))), Not(exists[@221]<Diem::PreburnQueue<XDX::XDX>>($t2))), Not(exists[@221]<Diem::PreburnQueue<XDX::XDX>>($t2))), forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3)), Eq<u64>($t6, 0)), Lt(select Diem::CurrencyInfo.total_value($t7), $t6)), Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6)), Not(Diem::spec_is_currency[@222]<XDX::XDX>())), Not(exists[@220]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assume {:print "$at(34,13266,14136)"} true;
    assert {:msg "assert_failed(34,13266,14136): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || !$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220, $1_Signer_spec_address_of($t0))) || !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221, $t2)) || !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221, $t2)) || (var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t5, i)))), $t3)))))) || $IsEqual'u64'($t6, 0)) || ($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) < $t6)) || ($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) < $t6)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#222)) || !$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220, $1_Signer_spec_address_of($t0)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@219]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t12)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t12))), And(Not(exists[@220]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), And(Not(exists[@221]<Diem::PreburnQueue<XDX::XDX>>($t2)), Eq(5, $t12))), And(Not(exists[@221]<Diem::PreburnQueue<XDX::XDX>>($t2)), Eq(5, $t12))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>($t5)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t5, i)))), $t3), Eq(1, $t12))), And(Eq<u64>($t6, 0), Eq(1, $t12))), And(Lt(select Diem::CurrencyInfo.total_value($t7), $t6), Eq(8, $t12))), And(Lt(select Diem::CurrencyInfo.preburn_value($t7), $t6), Eq(8, $t12))), And(Not(Diem::spec_is_currency[@222]<XDX::XDX>()), Eq(5, $t12))), And(Not(exists[@220]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0))), Eq(4, $t12))), Eq(7, $t12)), Eq(4, $t12)), Eq(5, $t12)), Eq(1, $t12)), Eq(8, $t12)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    assert {:msg "assert_failed(34,13266,14136): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#219, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t12)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t12))) || (!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t12))) || (!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221, $t2) && $IsEqual'num'(5, $t12))) || (!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#221, $t2) && $IsEqual'num'(5, $t12))) || ((var $range_0 := $Range(0, LenVec($t5)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t5, i)))), $t3))))) && $IsEqual'num'(1, $t12))) || ($IsEqual'u64'($t6, 0) && $IsEqual'num'(1, $t12))) || (($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) < $t6) && $IsEqual'num'(8, $t12))) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) < $t6) && $IsEqual'num'(8, $t12))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#222) && $IsEqual'num'(5, $t12))) || (!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#220, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t12))) || $IsEqual'num'(7, $t12)) || $IsEqual'num'(4, $t12)) || $IsEqual'num'(5, $t12)) || $IsEqual'num'(1, $t12)) || $IsEqual'num'(8, $t12));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:174:5+870
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::cancel_burn_with_amount [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_cancel_burn_with_amount$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_Diem_CurrencyInfo'#0';
    var $t6: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t7: $1_Diem_CurrencyInfo'#0';
    var $t8: $1_Diem_CurrencyInfo'#0';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t11: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t12: $1_DiemAccount_ReceivedPaymentEvent;
    var $t13: $1_Diem_CurrencyInfo'#0';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'#0');
    var $t15: $1_Diem_CurrencyInfo'#0';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t18: $1_Diem_CurrencyInfo'#0';
    var $t19: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t20: $1_DiemAccount_ReceivedPaymentEvent;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $1_Diem_CurrencyInfo'#0';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'#0'_$memory#239: $Memory $1_Diem_BurnCapability'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#240: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_Diem_PreburnQueue'#0'_$memory#241: $Memory $1_Diem_PreburnQueue'#0';
    var $1_DiemAccount_Balance'#0'_$memory#242: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#243: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#244: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#245: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#246: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#248: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountFreezing_FreezingBit_$memory#249: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,5793,5981)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<#0>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'#0'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<#0>>(addr1), exists<Diem::Preburn<#0>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'#0'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<#0>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<#0>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($ResourceValue($1_Diem_Preburn'#0'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<#0>>(dd_addr): Not(exists<Diem::Preburn<#0>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'#0'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'#0'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<#0>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'#0''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'#0'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($preburns#$1_Diem_PreburnQueue'#0'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t3, select Diem::CurrencyInfo.preburn_value(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:80:9+111
    assume {:print "$at(34,6377,6488)"} true;
    assume ($t3 == $preburn_value#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)));

    // assume Identical($t4, DiemAccount::$balance<#0>($t1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:87:9+67
    assume {:print "$at(34,6628,6695)"} true;
    assume ($t4 == $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1));

    // assume Identical($t5, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t5 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t6, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t6 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t7, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t8, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.cancel_burn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t10 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t8));

    // assume Identical($t11, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t11 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t12, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t12 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $EmptyVec'u8'()));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @247 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @239 := save_mem(Diem::BurnCapability<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_BurnCapability'#0'_$memory#239 := $1_Diem_BurnCapability'#0'_$memory;

    // @240 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#240 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @241 := save_mem(Diem::PreburnQueue<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'#0'_$memory#241 := $1_Diem_PreburnQueue'#0'_$memory;

    // @248 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'#0'_$memory#248 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @244 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'#0'_$memory#244 := $1_AccountLimits_Window'#0'_$memory;

    // @245 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#245 := $1_VASP_ChildVASP_$memory;

    // @246 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#246 := $1_VASP_ParentVASP_$memory;

    // @249 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#249 := $1_AccountFreezing_FreezingBit_$memory;

    // @243 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#243 := $1_DiemAccount_DiemAccount_$memory;

    // @242 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'#0'_$memory#242 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$at(34,5793,5794)"} true;
    assume {:print "$track_local(42,3,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$track_local(42,3,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$track_local(42,3,2):", $t2} $t2 == $t2;

    // assume Identical($t13, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'#0'($ResourceValue($1_Diem_PreburnQueue'#0'_$memory, $t1)));

    // assume Identical($t15, Diem::spec_currency_info<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.cancel_burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t17 == $cancel_burn_events#$1_Diem_CurrencyInfo'#0'($t15));

    // assume Identical($t18, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t18 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assume Identical($t19, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t19 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t20, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t20 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $EmptyVec'u8'()));

    // DiemAccount::cancel_burn<#0>($t0, $t1, $t2) on_abort goto L2 with $t21 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:68:9+66
    assume {:print "$at(34,5909,5975)"} true;
    call $1_DiemAccount_cancel_burn'#0'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,5909,5975)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(42,3):", $t21} $t21 == $t21;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:69:5+1
    assume {:print "$at(34,5980,5981)"} true;
L1:

    // assume Identical($t22, select Diem::CurrencyInfo.preburn_value(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:83:9+121
    assume {:print "$at(34,6497,6618)"} true;
    assume ($t22 == $preburn_value#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)));

    // assume Identical($t23, DiemAccount::$balance<#0>($t1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:88:9+77
    assume {:print "$at(34,6704,6781)"} true;
    assume ($t23 == $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1));

    // assume Identical($t24, global<Diem::CurrencyInfo<#0>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1045:9+67
    assume {:print "$at(11,50208,50275)"} true;
    assume ($t24 == $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816));

    // assert Not(Not(exists[@239]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:401:9+111
    assume {:print "$at(11,19424,19535)"} true;
    assert {:msg "assert_failed(11,19424,19535): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#239, $1_Signer_spec_address_of($t0));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1038:9+66
    assume {:print "$at(11,49896,49962)"} true;
    assert {:msg "assert_failed(11,49896,49962): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'#0'($t5) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@240]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240);

    // assert Not(Not(exists[@241]<Diem::PreburnQueue<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:860:9+86
    assume {:print "$at(11,41226,41312)"} true;
    assert {:msg "assert_failed(11,41226,41312): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#241, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:861:9+121
    assume {:print "$at(11,41321,41442)"} true;
    assert {:msg "assert_failed(11,41321,41442): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t6, i)))), $t2)))));

    // assert Not(Not(exists[@242]<DiemAccount::Balance<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#242, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@243]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<#0>($t2, VASP::spec_parent_address[@245, @246]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $1_AccountLimits_Window'#0'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@247]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)));

    // assert Not(Not(Diem::spec_is_currency[@240]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240);

    // assert Not(AccountFreezing::spec_account_is_frozen[@249]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1);

    // assert Not(Gt(Add(DiemAccount::$balance[@242]<#0>($t1), $t2), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#242, $t1) + $t2) > $MAX_U64);

    // assert Not(Not(exists[@239]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:9+111
    assume {:print "$at(11,53156,53267)"} true;
    assert {:msg "assert_failed(11,53156,53267): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#239, $1_Signer_spec_address_of($t0));

    // assert Eq<Diem::CurrencyInfo<#0>>($t24, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<#0>>($t7, Sub(select Diem::CurrencyInfo.preburn_value($t7), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1046:9+84
    assume {:print "$at(11,50284,50368)"} true;
    assert {:msg "assert_failed(11,50284,50368): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'#0''($t24, $Update'$1_Diem_CurrencyInfo'#0''_preburn_value($t7, ($preburn_value#$1_Diem_CurrencyInfo'#0'($t7) - $t2)));

    // assert Implies(exists[@241]<Diem::PreburnQueue<#0>>($t1), exists<Diem::PreburnQueue<#0>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:9+113
    assume {:print "$at(11,41714,41827)"} true;
    assert {:msg "assert_failed(11,41714,41827): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'#0'_$memory#241, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'#0'_$memory, $t1));

    // assert exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:394:9+38
    assume {:print "$at(12,17250,17288)"} true;
    assert {:msg "assert_failed(12,17250,17288): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assert Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@242]<#0>($t1), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:395:9+69
    assume {:print "$at(12,17297,17366)"} true;
    assert {:msg "assert_failed(12,17297,17366): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#242, $t1) + $t2));

    // assert exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:397:9+35
    assume {:print "$at(12,17376,17411)"} true;
    assert {:msg "assert_failed(12,17376,17411): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:398:9+122
    assume {:print "$at(12,17420,17542)"} true;
    assert {:msg "assert_failed(12,17420,17542): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:400:9+120
    assume {:print "$at(12,17551,17671)"} true;
    assert {:msg "assert_failed(12,17551,17671): post-condition does not hold"}
      $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:403:9+149
    assume {:print "$at(12,17681,17830)"} true;
    assert {:msg "assert_failed(12,17681,17830): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:405:9+157
    assume {:print "$at(12,17839,17996)"} true;
    assert {:msg "assert_failed(12,17839,17996): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Eq<u64>($t22, Sub($t3, $t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:91:9+65
    assume {:print "$at(34,6883,6948)"} true;
    assert {:msg "assert_failed(34,6883,6948): post-condition does not hold"}
      $IsEqual'u64'($t22, ($t3 - $t2));

    // assert Eq<u64>($t23, Add($t4, $t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:94:9+57
    assume {:print "$at(34,7055,7112)"} true;
    assert {:msg "assert_failed(34,7055,7112): post-condition does not hold"}
      $IsEqual'u64'($t23, ($t4 + $t2));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1054:9+165
    assume {:print "$at(11,50646,50811)"} true;
    assert {:msg "assert_failed(11,50646,50811): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)), $t11, $t12); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assume {:print "$at(34,5987,7772)"} true;
    assert {:msg "assert_failed(34,5987,7772): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'#0'($t8)), $t11, $t12); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:69:5+1
    assume {:print "$at(34,5980,5981)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@239]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2)), Not(Diem::spec_is_currency[@240]<#0>())), Not(exists[@241]<Diem::PreburnQueue<#0>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2)), Not(exists[@242]<DiemAccount::Balance<#0>>($t1))), Not(DiemAccount::$exists_at[@243]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<#0>($t2, VASP::spec_parent_address[@245, @246]($t1))))), Not(DiemTimestamp::$is_operating[@247]())), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]())))), Not(Diem::spec_is_currency[@240]<#0>())), AccountFreezing::spec_account_is_frozen[@249]($t1)), Gt(Add(DiemAccount::$balance[@242]<#0>($t1), $t2), MaxU64())), Not(exists[@239]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assume {:print "$at(34,5987,7772)"} true;
    assert {:msg "assert_failed(34,5987,7772): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#239, $1_Signer_spec_address_of($t0)) || ($preburn_value#$1_Diem_CurrencyInfo'#0'($t5) < $t2)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240)) || !$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#241, $t1)) || (var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t6, i)))), $t2)))))) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#242, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $1_AccountLimits_Window'#0'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1)) || (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#242, $t1) + $t2) > $MAX_U64)) || !$ResourceExists($1_Diem_BurnCapability'#0'_$memory#239, $1_Signer_spec_address_of($t0)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@239]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t21)), And(Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2), Eq(8, $t21))), And(Not(Diem::spec_is_currency[@240]<#0>()), Eq(5, $t21))), And(Not(exists[@241]<Diem::PreburnQueue<#0>>($t1)), Eq(5, $t21))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<#0>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2), Eq(1, $t21))), And(Not(exists[@242]<DiemAccount::Balance<#0>>($t1)), Eq(7, $t21))), And(Not(DiemAccount::$exists_at[@243]($t1)), Eq(5, $t21))), And(Eq<u64>($t2, 0), Eq(7, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<#0>($t2, VASP::spec_parent_address[@245, @246]($t1)))), Eq(8, $t21))), And(Not(DiemTimestamp::$is_operating[@247]()), Eq(1, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<#0>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<#0>(global[@244]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]()))), Eq(1, $t21))), And(Not(Diem::spec_is_currency[@240]<#0>()), Eq(5, $t21))), And(AccountFreezing::spec_account_is_frozen[@249]($t1), Eq(1, $t21))), And(Gt(Add(DiemAccount::$balance[@242]<#0>($t1), $t2), MaxU64()), Eq(8, $t21))), And(Not(exists[@239]<Diem::BurnCapability<#0>>(Signer::spec_address_of[]($t0))), Eq(4, $t21))), Eq(4, $t21)), Eq(5, $t21)), Eq(7, $t21)), Eq(8, $t21)), Eq(1, $t21)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assert {:msg "assert_failed(34,5987,7772): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#239, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t21)) || (($preburn_value#$1_Diem_CurrencyInfo'#0'($t5) < $t2) && $IsEqual'num'(8, $t21))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240) && $IsEqual'num'(5, $t21))) || (!$ResourceExists($1_Diem_PreburnQueue'#0'_$memory#241, $t1) && $IsEqual'num'(5, $t21))) || ((var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'#0'($to_burn#$1_Diem_Preburn'#0'($preburn#$1_Diem_PreburnWithMetadata'#0'(ReadVec($t6, i)))), $t2))))) && $IsEqual'num'(1, $t21))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#242, $t1) && $IsEqual'num'(7, $t21))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1) && $IsEqual'num'(5, $t21))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $1_AccountLimits_Window'#0'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && $IsEqual'num'(8, $t21))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247) && $IsEqual'num'(1, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && $IsEqual'num'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) && $IsEqual'num'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#248, $ResourceValue($1_AccountLimits_Window'#0'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247))) && $IsEqual'num'(1, $t21))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#240) && $IsEqual'num'(5, $t21))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1) && $IsEqual'num'(1, $t21))) || ((($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#242, $t1) + $t2) > $MAX_U64) && $IsEqual'num'(8, $t21))) || (!$ResourceExists($1_Diem_BurnCapability'#0'_$memory#239, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t21))) || $IsEqual'num'(4, $t21)) || $IsEqual'num'(5, $t21)) || $IsEqual'num'(7, $t21)) || $IsEqual'num'(8, $t21)) || $IsEqual'num'(1, $t21));

    // abort($t21) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    $abort_code := $t21;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::cancel_burn_with_amount [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_cancel_burn_with_amount$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t6: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t7: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t8: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t11: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t12: $1_DiemAccount_ReceivedPaymentEvent;
    var $t13: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XUS_XUS');
    var $t15: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t18: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t19: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t20: $1_DiemAccount_ReceivedPaymentEvent;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239: $Memory $1_Diem_BurnCapability'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#241: $Memory $1_Diem_PreburnQueue'$1_XUS_XUS';
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#243: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#244: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_VASP_ChildVASP_$memory#245: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#246: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountFreezing_FreezingBit_$memory#249: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,5793,5981)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XUS::XUS>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XUS::XUS>>(addr1), exists<Diem::Preburn<XUS::XUS>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XUS::XUS>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($ResourceValue($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XUS::XUS>>(dd_addr): Not(exists<Diem::Preburn<XUS::XUS>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XUS::XUS>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XUS_XUS''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t3, select Diem::CurrencyInfo.preburn_value(global<Diem::CurrencyInfo<XUS::XUS>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:80:9+111
    assume {:print "$at(34,6377,6488)"} true;
    assume ($t3 == $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)));

    // assume Identical($t4, DiemAccount::$balance<XUS::XUS>($t1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:87:9+67
    assume {:print "$at(34,6628,6695)"} true;
    assume ($t4 == $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1));

    // assume Identical($t5, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t5 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t6, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t6 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t7, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t8, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.cancel_burn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t10 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t8));

    // assume Identical($t11, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t11 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t12, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t12 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t1, $EmptyVec'u8'()));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @247 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @239 := save_mem(Diem::BurnCapability<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239 := $1_Diem_BurnCapability'$1_XUS_XUS'_$memory;

    // @240 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @241 := save_mem(Diem::PreburnQueue<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#241 := $1_Diem_PreburnQueue'$1_XUS_XUS'_$memory;

    // @248 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @244 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#244 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // @245 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#245 := $1_VASP_ChildVASP_$memory;

    // @246 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#246 := $1_VASP_ParentVASP_$memory;

    // @249 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#249 := $1_AccountFreezing_FreezingBit_$memory;

    // @243 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#243 := $1_DiemAccount_DiemAccount_$memory;

    // @242 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$at(34,5793,5794)"} true;
    assume {:print "$track_local(42,3,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$track_local(42,3,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$track_local(42,3,2):", $t2} $t2 == $t2;

    // assume Identical($t13, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XUS_XUS'($ResourceValue($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1)));

    // assume Identical($t15, Diem::spec_currency_info<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.cancel_burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t17 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t15));

    // assume Identical($t18, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t18 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assume Identical($t19, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t19 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t20, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t20 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t1, $EmptyVec'u8'()));

    // DiemAccount::cancel_burn<XUS::XUS>($t0, $t1, $t2) on_abort goto L2 with $t21 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:68:9+66
    assume {:print "$at(34,5909,5975)"} true;
    call $1_DiemAccount_cancel_burn'$1_XUS_XUS'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,5909,5975)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(42,3):", $t21} $t21 == $t21;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:69:5+1
    assume {:print "$at(34,5980,5981)"} true;
L1:

    // assume Identical($t22, select Diem::CurrencyInfo.preburn_value(global<Diem::CurrencyInfo<XUS::XUS>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:83:9+121
    assume {:print "$at(34,6497,6618)"} true;
    assume ($t22 == $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)));

    // assume Identical($t23, DiemAccount::$balance<XUS::XUS>($t1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:88:9+77
    assume {:print "$at(34,6704,6781)"} true;
    assume ($t23 == $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1));

    // assume Identical($t24, global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1045:9+67
    assume {:print "$at(11,50208,50275)"} true;
    assume ($t24 == $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816));

    // assert Not(Not(exists[@239]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:401:9+111
    assume {:print "$at(11,19424,19535)"} true;
    assert {:msg "assert_failed(11,19424,19535): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239, $1_Signer_spec_address_of($t0));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1038:9+66
    assume {:print "$at(11,49896,49962)"} true;
    assert {:msg "assert_failed(11,49896,49962): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t5) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@240]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240);

    // assert Not(Not(exists[@241]<Diem::PreburnQueue<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:860:9+86
    assume {:print "$at(11,41226,41312)"} true;
    assert {:msg "assert_failed(11,41226,41312): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#241, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:861:9+121
    assume {:print "$at(11,41321,41442)"} true;
    assert {:msg "assert_failed(11,41321,41442): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t6, i)))), $t2)))));

    // assert Not(Not(exists[@242]<DiemAccount::Balance<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@243]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<XUS::XUS>($t2, VASP::spec_parent_address[@245, @246]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@247]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)));

    // assert Not(Not(Diem::spec_is_currency[@240]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240);

    // assert Not(AccountFreezing::spec_account_is_frozen[@249]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1);

    // assert Not(Gt(Add(DiemAccount::$balance[@242]<XUS::XUS>($t1), $t2), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242, $t1) + $t2) > $MAX_U64);

    // assert Not(Not(exists[@239]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:9+111
    assume {:print "$at(11,53156,53267)"} true;
    assert {:msg "assert_failed(11,53156,53267): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239, $1_Signer_spec_address_of($t0));

    // assert Eq<Diem::CurrencyInfo<XUS::XUS>>($t24, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<XUS::XUS>>($t7, Sub(select Diem::CurrencyInfo.preburn_value($t7), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1046:9+84
    assume {:print "$at(11,50284,50368)"} true;
    assert {:msg "assert_failed(11,50284,50368): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''($t24, $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value($t7, ($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t7) - $t2)));

    // assert Implies(exists[@241]<Diem::PreburnQueue<XUS::XUS>>($t1), exists<Diem::PreburnQueue<XUS::XUS>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:9+113
    assume {:print "$at(11,41714,41827)"} true;
    assert {:msg "assert_failed(11,41714,41827): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#241, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory, $t1));

    // assert exists<DiemAccount::Balance<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:394:9+38
    assume {:print "$at(12,17250,17288)"} true;
    assert {:msg "assert_failed(12,17250,17288): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1);

    // assert Eq<u64>(DiemAccount::$balance<XUS::XUS>($t1), Add(DiemAccount::$balance[@242]<XUS::XUS>($t1), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:395:9+69
    assume {:print "$at(12,17297,17366)"} true;
    assert {:msg "assert_failed(12,17297,17366): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242, $t1) + $t2));

    // assert exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:397:9+35
    assume {:print "$at(12,17376,17411)"} true;
    assert {:msg "assert_failed(12,17376,17411): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:398:9+122
    assume {:print "$at(12,17420,17542)"} true;
    assert {:msg "assert_failed(12,17420,17542): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:400:9+120
    assume {:print "$at(12,17551,17671)"} true;
    assert {:msg "assert_failed(12,17551,17671): post-condition does not hold"}
      $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:403:9+149
    assume {:print "$at(12,17681,17830)"} true;
    assert {:msg "assert_failed(12,17681,17830): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:405:9+157
    assume {:print "$at(12,17839,17996)"} true;
    assert {:msg "assert_failed(12,17839,17996): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Eq<u64>($t22, Sub($t3, $t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:91:9+65
    assume {:print "$at(34,6883,6948)"} true;
    assert {:msg "assert_failed(34,6883,6948): post-condition does not hold"}
      $IsEqual'u64'($t22, ($t3 - $t2));

    // assert Eq<u64>($t23, Add($t4, $t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:94:9+57
    assume {:print "$at(34,7055,7112)"} true;
    assert {:msg "assert_failed(34,7055,7112): post-condition does not hold"}
      $IsEqual'u64'($t23, ($t4 + $t2));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1054:9+165
    assume {:print "$at(11,50646,50811)"} true;
    assert {:msg "assert_failed(11,50646,50811): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t8)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t8)), $t11, $t12); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assume {:print "$at(34,5987,7772)"} true;
    assert {:msg "assert_failed(34,5987,7772): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t8)), $t11, $t12); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:69:5+1
    assume {:print "$at(34,5980,5981)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@239]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0))), Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2)), Not(Diem::spec_is_currency[@240]<XUS::XUS>())), Not(exists[@241]<Diem::PreburnQueue<XUS::XUS>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2)), Not(exists[@242]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(DiemAccount::$exists_at[@243]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<XUS::XUS>($t2, VASP::spec_parent_address[@245, @246]($t1))))), Not(DiemTimestamp::$is_operating[@247]())), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]())))), Not(Diem::spec_is_currency[@240]<XUS::XUS>())), AccountFreezing::spec_account_is_frozen[@249]($t1)), Gt(Add(DiemAccount::$balance[@242]<XUS::XUS>($t1), $t2), MaxU64())), Not(exists[@239]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assume {:print "$at(34,5987,7772)"} true;
    assert {:msg "assert_failed(34,5987,7772): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239, $1_Signer_spec_address_of($t0)) || ($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t5) < $t2)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240)) || !$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#241, $t1)) || (var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t6, i)))), $t2)))))) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1)) || (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242, $t1) + $t2) > $MAX_U64)) || !$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239, $1_Signer_spec_address_of($t0)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@239]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0))), Eq(4, $t21)), And(Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2), Eq(8, $t21))), And(Not(Diem::spec_is_currency[@240]<XUS::XUS>()), Eq(5, $t21))), And(Not(exists[@241]<Diem::PreburnQueue<XUS::XUS>>($t1)), Eq(5, $t21))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<XUS::XUS>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2), Eq(1, $t21))), And(Not(exists[@242]<DiemAccount::Balance<XUS::XUS>>($t1)), Eq(7, $t21))), And(Not(DiemAccount::$exists_at[@243]($t1)), Eq(5, $t21))), And(Eq<u64>($t2, 0), Eq(7, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<XUS::XUS>($t2, VASP::spec_parent_address[@245, @246]($t1)))), Eq(8, $t21))), And(Not(DiemTimestamp::$is_operating[@247]()), Eq(1, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XUS::XUS>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XUS::XUS>(global[@244]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]()))), Eq(1, $t21))), And(Not(Diem::spec_is_currency[@240]<XUS::XUS>()), Eq(5, $t21))), And(AccountFreezing::spec_account_is_frozen[@249]($t1), Eq(1, $t21))), And(Gt(Add(DiemAccount::$balance[@242]<XUS::XUS>($t1), $t2), MaxU64()), Eq(8, $t21))), And(Not(exists[@239]<Diem::BurnCapability<XUS::XUS>>(Signer::spec_address_of[]($t0))), Eq(4, $t21))), Eq(4, $t21)), Eq(5, $t21)), Eq(7, $t21)), Eq(8, $t21)), Eq(1, $t21)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assert {:msg "assert_failed(34,5987,7772): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t21)) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'($t5) < $t2) && $IsEqual'num'(8, $t21))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240) && $IsEqual'num'(5, $t21))) || (!$ResourceExists($1_Diem_PreburnQueue'$1_XUS_XUS'_$memory#241, $t1) && $IsEqual'num'(5, $t21))) || ((var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XUS_XUS'($to_burn#$1_Diem_Preburn'$1_XUS_XUS'($preburn#$1_Diem_PreburnWithMetadata'$1_XUS_XUS'(ReadVec($t6, i)))), $t2))))) && $IsEqual'num'(1, $t21))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242, $t1) && $IsEqual'num'(7, $t21))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1) && $IsEqual'num'(5, $t21))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && $IsEqual'num'(8, $t21))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247) && $IsEqual'num'(1, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && $IsEqual'num'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) && $IsEqual'num'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247))) && $IsEqual'num'(1, $t21))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#240) && $IsEqual'num'(5, $t21))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1) && $IsEqual'num'(1, $t21))) || ((($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#242, $t1) + $t2) > $MAX_U64) && $IsEqual'num'(8, $t21))) || (!$ResourceExists($1_Diem_BurnCapability'$1_XUS_XUS'_$memory#239, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t21))) || $IsEqual'num'(4, $t21)) || $IsEqual'num'(5, $t21)) || $IsEqual'num'(7, $t21)) || $IsEqual'num'(8, $t21)) || $IsEqual'num'(1, $t21));

    // abort($t21) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    $abort_code := $t21;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::cancel_burn_with_amount [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_cancel_burn_with_amount$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t6: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t7: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t8: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t9: Vec (int);
    var $t10: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t11: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t12: $1_DiemAccount_ReceivedPaymentEvent;
    var $t13: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t14: Vec ($1_Diem_PreburnWithMetadata'$1_XDX_XDX');
    var $t15: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t16: Vec (int);
    var $t17: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    var $t18: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t19: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t20: $1_DiemAccount_ReceivedPaymentEvent;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#241: $Memory $1_Diem_PreburnQueue'$1_XDX_XDX';
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#243: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#244: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_VASP_ChildVASP_$memory#245: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#246: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#249: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(34,5793,5981)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(exists<Diem::BurnCapability<XDX::XDX>>(addr1), Roles::spec_has_treasury_compliance_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1675:9+188
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, addr1) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall addr1: TypeDomain<address>(): Implies(Or(exists<Diem::PreburnQueue<XDX::XDX>>(addr1), exists<Diem::Preburn<XDX::XDX>>(addr1)), Roles::spec_has_designated_dealer_role_addr(addr1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1742:9+220
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> ((($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, addr1) || $ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr1)) ==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(dd_addr): And(Eq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(global<Diem::Preburn<XDX::XDX>>(dd_addr))), 0), Not(exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1754:9+228
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))  ==> (($IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($ResourceValue($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr))), 0) && !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))));

    // assume forall dd_addr: TypeDomain<address>() where exists<Diem::PreburnQueue<XDX::XDX>>(dd_addr): Not(exists<Diem::Preburn<XDX::XDX>>(dd_addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1762:9+155
    assume (forall dd_addr: int :: $IsValid'address'(dd_addr) ==> ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, dd_addr))  ==> (!$ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, dd_addr)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::BurnCapability<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_BurnCapability'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<Diem::PreburnQueue<XDX::XDX>>(): And(WellFormed($rsc), And(Le(Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc)), 256), forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>(select Diem::PreburnQueue.preburns($rsc))): Gt(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index(select Diem::PreburnQueue.preburns($rsc), i)))), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_PreburnQueue'$1_XDX_XDX''($rsc) && ((LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc)) <= 256) && (var $range_1 := $Range(0, LenVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc))); (forall $i_2: int :: $InRange($range_1, $i_2) ==> (var i := $i_2;
    (($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($rsc), i)))) > 0))))))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+188
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t3, select Diem::CurrencyInfo.preburn_value(global<Diem::CurrencyInfo<XDX::XDX>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:80:9+111
    assume {:print "$at(34,6377,6488)"} true;
    assume ($t3 == $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)));

    // assume Identical($t4, DiemAccount::$balance<XDX::XDX>($t1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:87:9+67
    assume {:print "$at(34,6628,6695)"} true;
    assume ($t4 == $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1));

    // assume Identical($t5, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t5 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t6, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t6 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t7, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t7 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t8, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t8 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t9, Diem::spec_currency_code<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t9 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t10, select Diem::CurrencyInfo.cancel_burn_events($t8)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t10 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t8));

    // assume Identical($t11, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t11 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t12, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t12 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t1, $EmptyVec'u8'()));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @247 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @239 := save_mem(Diem::BurnCapability<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239 := $1_Diem_BurnCapability'$1_XDX_XDX'_$memory;

    // @240 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @241 := save_mem(Diem::PreburnQueue<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#241 := $1_Diem_PreburnQueue'$1_XDX_XDX'_$memory;

    // @248 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @244 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#244 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // @245 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#245 := $1_VASP_ChildVASP_$memory;

    // @246 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#246 := $1_VASP_ParentVASP_$memory;

    // @249 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#249 := $1_AccountFreezing_FreezingBit_$memory;

    // @243 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#243 := $1_DiemAccount_DiemAccount_$memory;

    // @242 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$at(34,5793,5794)"} true;
    assume {:print "$track_local(42,3,0):", $t0} $t0 == $t0;

    // trace_local[preburn_address]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$track_local(42,3,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:67:5+1
    assume {:print "$track_local(42,3,2):", $t2} $t2 == $t2;

    // assume Identical($t13, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1035:9+57
    assume {:print "$at(11,49726,49783)"} true;
    assume ($t13 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t14, select Diem::PreburnQueue.preburns(global<Diem::PreburnQueue<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:859:9+77
    assume {:print "$at(11,41140,41217)"} true;
    assume ($t14 == $preburns#$1_Diem_PreburnQueue'$1_XDX_XDX'($ResourceValue($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1)));

    // assume Identical($t15, Diem::spec_currency_info<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1051:9+42
    assume {:print "$at(11,50489,50531)"} true;
    assume ($t15 == $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t16, Diem::spec_currency_code<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1052:9+51
    assume {:print "$at(11,50540,50591)"} true;
    assume ($t16 == $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Identical($t17, select Diem::CurrencyInfo.cancel_burn_events($t15)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1053:9+37
    assume {:print "$at(11,50600,50637)"} true;
    assume ($t17 == $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t15));

    // assume Identical($t18, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1044:9+57
    assume {:print "$at(11,50142,50199)"} true;
    assume ($t18 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assume Identical($t19, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t19 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t20, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t1, [])) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t20 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t1, $EmptyVec'u8'()));

    // DiemAccount::cancel_burn<XDX::XDX>($t0, $t1, $t2) on_abort goto L2 with $t21 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:68:9+66
    assume {:print "$at(34,5909,5975)"} true;
    call $1_DiemAccount_cancel_burn'$1_XDX_XDX'($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,5909,5975)"} true;
        $t21 := $abort_code;
        assume {:print "$track_abort(42,3):", $t21} $t21 == $t21;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:69:5+1
    assume {:print "$at(34,5980,5981)"} true;
L1:

    // assume Identical($t22, select Diem::CurrencyInfo.preburn_value(global<Diem::CurrencyInfo<XDX::XDX>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:83:9+121
    assume {:print "$at(34,6497,6618)"} true;
    assume ($t22 == $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)));

    // assume Identical($t23, DiemAccount::$balance<XDX::XDX>($t1)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:88:9+77
    assume {:print "$at(34,6704,6781)"} true;
    assume ($t23 == $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1));

    // assume Identical($t24, global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1045:9+67
    assume {:print "$at(11,50208,50275)"} true;
    assume ($t24 == $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816));

    // assert Not(Not(exists[@239]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:401:9+111
    assume {:print "$at(11,19424,19535)"} true;
    assert {:msg "assert_failed(11,19424,19535): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239, $1_Signer_spec_address_of($t0));

    // assert Not(Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1038:9+66
    assume {:print "$at(11,49896,49962)"} true;
    assert {:msg "assert_failed(11,49896,49962): function does not abort under this condition"}
      !($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t5) < $t2);

    // assert Not(Not(Diem::spec_is_currency[@240]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240);

    // assert Not(Not(exists[@241]<Diem::PreburnQueue<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/Diem.move:860:9+86
    assume {:print "$at(11,41226,41312)"} true;
    assert {:msg "assert_failed(11,41226,41312): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#241, $t1);

    // assert Not(forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2)) at /home/ying/diem/language/diem-framework/modules/Diem.move:861:9+121
    assume {:print "$at(11,41321,41442)"} true;
    assert {:msg "assert_failed(11,41321,41442): function does not abort under this condition"}
      !(var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t6, i)))), $t2)))));

    // assert Not(Not(exists[@242]<DiemAccount::Balance<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@243]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<XDX::XDX>($t2, VASP::spec_parent_address[@245, @246]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@247]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)));

    // assert Not(Not(Diem::spec_is_currency[@240]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240);

    // assert Not(AccountFreezing::spec_account_is_frozen[@249]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1);

    // assert Not(Gt(Add(DiemAccount::$balance[@242]<XDX::XDX>($t1), $t2), MaxU64())) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242, $t1) + $t2) > $MAX_U64);

    // assert Not(Not(exists[@239]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1107:9+111
    assume {:print "$at(11,53156,53267)"} true;
    assert {:msg "assert_failed(11,53156,53267): function does not abort under this condition"}
      !!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239, $1_Signer_spec_address_of($t0));

    // assert Eq<Diem::CurrencyInfo<XDX::XDX>>($t24, update Diem::CurrencyInfo.preburn_value<Diem::CurrencyInfo<XDX::XDX>>($t7, Sub(select Diem::CurrencyInfo.preburn_value($t7), $t2))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1046:9+84
    assume {:print "$at(11,50284,50368)"} true;
    assert {:msg "assert_failed(11,50284,50368): post-condition does not hold"}
      $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''($t24, $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value($t7, ($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t7) - $t2)));

    // assert Implies(exists[@241]<Diem::PreburnQueue<XDX::XDX>>($t1), exists<Diem::PreburnQueue<XDX::XDX>>($t1)) at /home/ying/diem/language/diem-framework/modules/Diem.move:868:9+113
    assume {:print "$at(11,41714,41827)"} true;
    assert {:msg "assert_failed(11,41714,41827): post-condition does not hold"}
      ($ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#241, $t1) ==> $ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory, $t1));

    // assert exists<DiemAccount::Balance<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:394:9+38
    assume {:print "$at(12,17250,17288)"} true;
    assert {:msg "assert_failed(12,17250,17288): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1);

    // assert Eq<u64>(DiemAccount::$balance<XDX::XDX>($t1), Add(DiemAccount::$balance[@242]<XDX::XDX>($t1), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:395:9+69
    assume {:print "$at(12,17297,17366)"} true;
    assert {:msg "assert_failed(12,17297,17366): post-condition does not hold"}
      $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242, $t1) + $t2));

    // assert exists<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:397:9+35
    assume {:print "$at(12,17376,17411)"} true;
    assert {:msg "assert_failed(12,17376,17411): post-condition does not hold"}
      $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t1);

    // assert Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.withdraw_capability(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:398:9+122
    assume {:print "$at(12,17420,17542)"} true;
    assert {:msg "assert_failed(12,17420,17542): post-condition does not hold"}
      $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Eq<vector<u8>>(select DiemAccount::DiemAccount.authentication_key(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.authentication_key(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:400:9+120
    assume {:print "$at(12,17551,17671)"} true;
    assert {:msg "assert_failed(12,17551,17671): post-condition does not hold"}
      $IsEqual'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $authentication_key#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:403:9+149
    assume {:print "$at(12,17681,17830)"} true;
    assert {:msg "assert_failed(12,17681,17830): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@243]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:405:9+157
    assume {:print "$at(12,17839,17996)"} true;
    assert {:msg "assert_failed(12,17839,17996): post-condition does not hold"}
      $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#243, $t1)));

    // assert Eq<u64>($t22, Sub($t3, $t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:91:9+65
    assume {:print "$at(34,6883,6948)"} true;
    assert {:msg "assert_failed(34,6883,6948): post-condition does not hold"}
      $IsEqual'u64'($t22, ($t3 - $t2));

    // assert Eq<u64>($t23, Add($t4, $t2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:94:9+57
    assume {:print "$at(34,7055,7112)"} true;
    assert {:msg "assert_failed(34,7055,7112): post-condition does not hold"}
      $IsEqual'u64'($t23, ($t4 + $t2));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8)))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1054:9+165
    assume {:print "$at(11,50646,50811)"} true;
    assert {:msg "assert_failed(11,50646,50811): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t8)); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t8)), $t11, $t12); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), pack Diem::CancelBurnEvent($t2, $t9, $t1), $t10, Not(select Diem::CurrencyInfo.is_synthetic($t8))), $t12, $t11)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assume {:print "$at(34,5987,7772)"} true;
    assert {:msg "assert_failed(34,5987,7772): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($CondExtendEventStore'$1_Diem_CancelBurnEvent'($EmptyEventStore, $t10, $1_Diem_CancelBurnEvent($t2, $t9, $t1), !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t8)), $t11, $t12); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:69:5+1
    assume {:print "$at(34,5980,5981)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@239]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0))), Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2)), Not(Diem::spec_is_currency[@240]<XDX::XDX>())), Not(exists[@241]<Diem::PreburnQueue<XDX::XDX>>($t1))), forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2)), Not(exists[@242]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(DiemAccount::$exists_at[@243]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<XDX::XDX>($t2, VASP::spec_parent_address[@245, @246]($t1))))), Not(DiemTimestamp::$is_operating[@247]())), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]())))), Not(Diem::spec_is_currency[@240]<XDX::XDX>())), AccountFreezing::spec_account_is_frozen[@249]($t1)), Gt(Add(DiemAccount::$balance[@242]<XDX::XDX>($t1), $t2), MaxU64())), Not(exists[@239]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assume {:print "$at(34,5987,7772)"} true;
    assert {:msg "assert_failed(34,5987,7772): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239, $1_Signer_spec_address_of($t0)) || ($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t5) < $t2)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240)) || !$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#241, $t1)) || (var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t6, i)))), $t2)))))) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1)) || (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242, $t1) + $t2) > $MAX_U64)) || !$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239, $1_Signer_spec_address_of($t0)));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@239]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0))), Eq(4, $t21)), And(Lt(select Diem::CurrencyInfo.preburn_value($t5), $t2), Eq(8, $t21))), And(Not(Diem::spec_is_currency[@240]<XDX::XDX>()), Eq(5, $t21))), And(Not(exists[@241]<Diem::PreburnQueue<XDX::XDX>>($t1)), Eq(5, $t21))), And(forall i: Range(0, Len<Diem::PreburnWithMetadata<XDX::XDX>>($t6)): Neq<u64>(select Diem::Diem.value(select Diem::Preburn.to_burn(select Diem::PreburnWithMetadata.preburn(Index($t6, i)))), $t2), Eq(1, $t21))), And(Not(exists[@242]<DiemAccount::Balance<XDX::XDX>>($t1)), Eq(7, $t21))), And(Not(DiemAccount::$exists_at[@243]($t1)), Eq(5, $t21))), And(Eq<u64>($t2, 0), Eq(7, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(AccountLimits::spec_update_deposit_limits[@247, @248, @244]<XDX::XDX>($t2, VASP::spec_parent_address[@245, @246]($t1)))), Eq(8, $t21))), And(Not(DiemTimestamp::$is_operating[@247]()), Eq(1, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(exists[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), Not(exists[@248]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))))), Eq(5, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@247, @248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@247, @248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), $t2), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1))))), MaxU64()))), Eq(8, $t21))), And(And(DiemAccount::spec_should_track_limits_for_account[@244, @245, @246]<XDX::XDX>($t1, $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@248]<XDX::XDX>(global[@244]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@245, @246]($t1)))), Not(DiemTimestamp::$is_operating[@247]()))), Eq(1, $t21))), And(Not(Diem::spec_is_currency[@240]<XDX::XDX>()), Eq(5, $t21))), And(AccountFreezing::spec_account_is_frozen[@249]($t1), Eq(1, $t21))), And(Gt(Add(DiemAccount::$balance[@242]<XDX::XDX>($t1), $t2), MaxU64()), Eq(8, $t21))), And(Not(exists[@239]<Diem::BurnCapability<XDX::XDX>>(Signer::spec_address_of[]($t0))), Eq(4, $t21))), Eq(4, $t21)), Eq(5, $t21)), Eq(7, $t21)), Eq(8, $t21)), Eq(1, $t21)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    assert {:msg "assert_failed(34,5987,7772): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t21)) || (($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'($t5) < $t2) && $IsEqual'num'(8, $t21))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240) && $IsEqual'num'(5, $t21))) || (!$ResourceExists($1_Diem_PreburnQueue'$1_XDX_XDX'_$memory#241, $t1) && $IsEqual'num'(5, $t21))) || ((var $range_0 := $Range(0, LenVec($t6)); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i := $i_1;
    (!$IsEqual'u64'($value#$1_Diem_Diem'$1_XDX_XDX'($to_burn#$1_Diem_Preburn'$1_XDX_XDX'($preburn#$1_Diem_PreburnWithMetadata'$1_XDX_XDX'(ReadVec($t6, i)))), $t2))))) && $IsEqual'num'(1, $t21))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242, $t1) && $IsEqual'num'(7, $t21))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#243, $t1) && $IsEqual'num'(5, $t21))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && $IsEqual'num'(8, $t21))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247) && $IsEqual'num'(1, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && $IsEqual'num'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) && $IsEqual'num'(5, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t21))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1, $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#248, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#244, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#245, $1_VASP_ParentVASP_$memory#246, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#247))) && $IsEqual'num'(1, $t21))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#240) && $IsEqual'num'(5, $t21))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#249, $t1) && $IsEqual'num'(1, $t21))) || ((($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#242, $t1) + $t2) > $MAX_U64) && $IsEqual'num'(8, $t21))) || (!$ResourceExists($1_Diem_BurnCapability'$1_XDX_XDX'_$memory#239, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(4, $t21))) || $IsEqual'num'(4, $t21)) || $IsEqual'num'(5, $t21)) || $IsEqual'num'(7, $t21)) || $IsEqual'num'(8, $t21)) || $IsEqual'num'(1, $t21));

    // abort($t21) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:71:5+1785
    $abort_code := $t21;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::update_dual_attestation_limit [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_update_dual_attestation_limit$verify(_$t0: $signer, _$t1: int, _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,39846,40167)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    assume $IsValid'u64'($t2);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+321
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+1
    assume {:print "$track_local(42,9,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+1
    assume {:print "$track_local(42,9,1):", $t1} $t1 == $t1;

    // trace_local[new_micro_xdx_limit]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:520:5+1
    assume {:print "$track_local(42,9,2):", $t2} $t2 == $t2;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:525:9+63
    assume {:print "$at(34,40017,40080)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,40017,40080)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,9):", $t3} $t3 == $t3;
        goto L2;
    }

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // DualAttestation::set_microdiem_limit($t0, $t2) on_abort goto L2 with $t3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:526:9+70
    assume {:print "$at(34,40090,40160)"} true;
    call $1_DualAttestation_set_microdiem_limit($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(34,40090,40160)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(42,9):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:527:5+1
    assume {:print "$at(34,40166,40167)"} true;
L1:

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:527:5+1
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:527:5+1
L2:

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:527:5+1
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::update_exchange_rate [verification] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_update_exchange_rate$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: $1_FixedPoint32_FixedPoint32;
    var $t5: $1_FixedPoint32_FixedPoint32;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t11: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_FixedPoint32_FixedPoint32;
    var $t21: bool;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t24: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#195: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#196: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'#0'_$memory#197: $Memory $1_Diem_CurrencyInfo'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,44221,44743)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume Identical($t5, FixedPoint32::spec_create_from_rational($t2, $t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:589:9+153
    assume {:print "$at(34,45273,45426)"} true;
    assume ($t5 == $1_FixedPoint32_spec_create_from_rational($t2, $t3));

    // assume Identical($t6, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t6 == $shl($t2, 64));

    // assume Identical($t7, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t7 == $shl($t3, 32));

    // assume Identical($t8, Div($t6, $t7)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t8 == ($t6 div $t7));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t10 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)));

    // assume Identical($t11, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<#0>>(a550c18)), FixedPoint32::$get_raw_value($t5))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t11 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t5)));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @196 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#196 := $1_Roles_RoleId_$memory;

    // @195 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#195 := $1_SlidingNonce_SlidingNonce_$memory;

    // @197 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#197 := $1_Diem_CurrencyInfo'#0'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$at(34,44221,44222)"} true;
    assume {:print "$track_local(42,10,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,1):", $t1} $t1 == $t1;

    // trace_local[new_exchange_rate_numerator]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,2):", $t2} $t2 == $t2;

    // trace_local[new_exchange_rate_denominator]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,3):", $t3} $t3 == $t3;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t13 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:571:9+63
    assume {:print "$at(34,44446,44509)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,44446,44509)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;
        goto L2;
    }

    // assume Identical($t14, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t14 == $shl($t2, 64));

    // assume Identical($t15, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t15 == $shl($t3, 32));

    // assume Identical($t16, Div($t14, $t15)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t16 == ($t14 div $t15));

    // assume Identical($t17, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t17 == $shl($t2, 64));

    // assume Identical($t18, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t18 == $shl($t3, 32));

    // assume Identical($t19, Div($t17, $t18)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t19 == ($t17 div $t18));

    // $t20 := opaque begin: FixedPoint32::create_from_rational($t2, $t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume {:print "$at(34,44530,44667)"} true;

    // assume Identical($t21, Or(Or(Eq<num>($t18, 0), And(Eq<num>($t19, 0), Neq<num>($t17, 0))), Gt($t19, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume ($t21 == (($IsEqual'num'($t18, 0) || ($IsEqual'num'($t19, 0) && !$IsEqual'num'($t17, 0))) || ($t19 > 18446744073709551615)));

    // if ($t21) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    if ($t21) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
L4:

    // assume Or(Or(And(Eq<num>($t18, 0), Eq(7, $t13)), And(And(Eq<num>($t19, 0), Neq<num>($t17, 0)), Eq(7, $t13))), And(Gt($t19, 18446744073709551615), Eq(8, $t13))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume ((($IsEqual'num'($t18, 0) && $IsEqual'num'(7, $t13)) || (($IsEqual'num'($t19, 0) && !$IsEqual'num'($t17, 0)) && $IsEqual'num'(7, $t13))) || (($t19 > 18446744073709551615) && $IsEqual'num'(8, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume {:print "$at(34,44530,44667)"} true;
    assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
L3:

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t20);

    // assume Eq<FixedPoint32::FixedPoint32>($t20, FixedPoint32::spec_create_from_rational($t2, $t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t20, $1_FixedPoint32_spec_create_from_rational($t2, $t3));

    // $t20 := opaque end: FixedPoint32::create_from_rational($t2, $t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137

    // trace_local[rate]($t20) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:13+4
    assume {:print "$track_local(42,10,4):", $t20} $t20 == $t20;

    // assume Identical($t22, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t0));

    // assume Identical($t23, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<#0>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t23 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)));

    // assume Identical($t24, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<#0>>(a550c18)), FixedPoint32::$get_raw_value($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t24 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t20)));

    // Diem::update_xdx_exchange_rate<#0>($t0, $t20) on_abort goto L2 with $t13 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:576:9+59
    assume {:print "$at(34,44677,44736)"} true;
    call $1_Diem_update_xdx_exchange_rate'#0'($t0, $t20);
    if ($abort_flag) {
        assume {:print "$at(34,44677,44736)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:577:5+1
    assume {:print "$at(34,44742,44743)"} true;
L1:

    // assert Not(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Eq<num>($t7, 0)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+64
    assume {:print "$at(46,8502,8566)"} true;
    assert {:msg "assert_failed(46,8502,8566): function does not abort under this condition"}
      !$IsEqual'num'($t7, 0);

    // assert Not(And(Eq<num>($t8, 0), Neq<num>($t6, 0))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+79
    assume {:print "$at(46,8575,8654)"} true;
    assert {:msg "assert_failed(46,8575,8654): function does not abort under this condition"}
      !($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0));

    // assert Not(Gt($t8, 18446744073709551615)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:189:9+57
    assume {:print "$at(46,8663,8720)"} true;
    assert {:msg "assert_failed(46,8663,8720): function does not abort under this condition"}
      !($t8 > 18446744073709551615);

    // assert Not(Not(exists[@196]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#196, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(Diem::spec_is_currency[@197]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#197);

    // assert Not(Not(exists[@196]<Roles::RoleId>($t12))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#196, $t12);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<#0>()), $t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:9+85
    assume {:print "$at(11,69524,69609)"} true;
    assert {:msg "assert_failed(11,69524,69609): post-condition does not hold"}
      $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory)), $t5);

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1501:9+20
    assume {:print "$at(11,70062,70082)"} true;
    assert {:msg "assert_failed(11,70062,70082): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assume {:print "$at(34,44748,46084)"} true;
    assert {:msg "assert_failed(34,44748,46084): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:577:5+1
    assume {:print "$at(34,44742,44743)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Eq<num>($t7, 0)), And(Eq<num>($t8, 0), Neq<num>($t6, 0))), Gt($t8, 18446744073709551615)), Not(exists[@196]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(Diem::spec_is_currency[@197]<#0>())), Not(exists[@196]<Roles::RoleId>($t12))), Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assume {:print "$at(34,44748,46084)"} true;
    assert {:msg "assert_failed(34,44748,46084): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $IsEqual'num'($t7, 0)) || ($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0))) || ($t8 > 18446744073709551615)) || !$ResourceExists($1_Roles_RoleId_$memory#196, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#197)) || !$ResourceExists($1_Roles_RoleId_$memory#196, $t12)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t13)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t13))), And(Eq<num>($t7, 0), Eq(7, $t13))), And(And(Eq<num>($t8, 0), Neq<num>($t6, 0)), Eq(7, $t13))), And(Gt($t8, 18446744073709551615), Eq(8, $t13))), And(Not(exists[@196]<Roles::RoleId>($t9)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t13))), And(Not(Diem::spec_is_currency[@197]<#0>()), Eq(5, $t13))), And(Not(exists[@196]<Roles::RoleId>($t12)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t13))), Eq(7, $t13)), Eq(2, $t13)), Eq(8, $t13)), Eq(3, $t13)), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assert {:msg "assert_failed(34,44748,46084): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t13)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t13))) || ($IsEqual'num'($t7, 0) && $IsEqual'num'(7, $t13))) || (($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0)) && $IsEqual'num'(7, $t13))) || (($t8 > 18446744073709551615) && $IsEqual'num'(8, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#196, $t9) && $IsEqual'num'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1) && $IsEqual'num'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t13))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#197) && $IsEqual'num'(5, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#196, $t12) && $IsEqual'num'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1) && $IsEqual'num'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t13))) || $IsEqual'num'(7, $t13)) || $IsEqual'num'(2, $t13)) || $IsEqual'num'(8, $t13)) || $IsEqual'num'(3, $t13)) || $IsEqual'num'(5, $t13));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::update_exchange_rate [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_update_exchange_rate$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t4: $1_FixedPoint32_FixedPoint32;
    var $t5: $1_FixedPoint32_FixedPoint32;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t11: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_FixedPoint32_FixedPoint32;
    var $t21: bool;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t24: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#195: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#196: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#197: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,44221,44743)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume Identical($t5, FixedPoint32::spec_create_from_rational($t2, $t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:589:9+153
    assume {:print "$at(34,45273,45426)"} true;
    assume ($t5 == $1_FixedPoint32_spec_create_from_rational($t2, $t3));

    // assume Identical($t6, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t6 == $shl($t2, 64));

    // assume Identical($t7, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t7 == $shl($t3, 32));

    // assume Identical($t8, Div($t6, $t7)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t8 == ($t6 div $t7));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<XUS::XUS>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t10 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)));

    // assume Identical($t11, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)), FixedPoint32::$get_raw_value($t5))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t11 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t5)));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @196 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#196 := $1_Roles_RoleId_$memory;

    // @195 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#195 := $1_SlidingNonce_SlidingNonce_$memory;

    // @197 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#197 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$at(34,44221,44222)"} true;
    assume {:print "$track_local(42,10,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,1):", $t1} $t1 == $t1;

    // trace_local[new_exchange_rate_numerator]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,2):", $t2} $t2 == $t2;

    // trace_local[new_exchange_rate_denominator]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,3):", $t3} $t3 == $t3;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t13 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:571:9+63
    assume {:print "$at(34,44446,44509)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,44446,44509)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;
        goto L2;
    }

    // assume Identical($t14, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t14 == $shl($t2, 64));

    // assume Identical($t15, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t15 == $shl($t3, 32));

    // assume Identical($t16, Div($t14, $t15)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t16 == ($t14 div $t15));

    // assume Identical($t17, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t17 == $shl($t2, 64));

    // assume Identical($t18, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t18 == $shl($t3, 32));

    // assume Identical($t19, Div($t17, $t18)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t19 == ($t17 div $t18));

    // $t20 := opaque begin: FixedPoint32::create_from_rational($t2, $t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume {:print "$at(34,44530,44667)"} true;

    // assume Identical($t21, Or(Or(Eq<num>($t18, 0), And(Eq<num>($t19, 0), Neq<num>($t17, 0))), Gt($t19, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume ($t21 == (($IsEqual'num'($t18, 0) || ($IsEqual'num'($t19, 0) && !$IsEqual'num'($t17, 0))) || ($t19 > 18446744073709551615)));

    // if ($t21) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    if ($t21) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
L4:

    // assume Or(Or(And(Eq<num>($t18, 0), Eq(7, $t13)), And(And(Eq<num>($t19, 0), Neq<num>($t17, 0)), Eq(7, $t13))), And(Gt($t19, 18446744073709551615), Eq(8, $t13))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume ((($IsEqual'num'($t18, 0) && $IsEqual'num'(7, $t13)) || (($IsEqual'num'($t19, 0) && !$IsEqual'num'($t17, 0)) && $IsEqual'num'(7, $t13))) || (($t19 > 18446744073709551615) && $IsEqual'num'(8, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume {:print "$at(34,44530,44667)"} true;
    assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
L3:

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t20);

    // assume Eq<FixedPoint32::FixedPoint32>($t20, FixedPoint32::spec_create_from_rational($t2, $t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t20, $1_FixedPoint32_spec_create_from_rational($t2, $t3));

    // $t20 := opaque end: FixedPoint32::create_from_rational($t2, $t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137

    // trace_local[rate]($t20) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:13+4
    assume {:print "$track_local(42,10,4):", $t20} $t20 == $t20;

    // assume Identical($t22, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t0));

    // assume Identical($t23, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<XUS::XUS>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t23 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)));

    // assume Identical($t24, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<XUS::XUS>>(a550c18)), FixedPoint32::$get_raw_value($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t24 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t20)));

    // Diem::update_xdx_exchange_rate<XUS::XUS>($t0, $t20) on_abort goto L2 with $t13 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:576:9+59
    assume {:print "$at(34,44677,44736)"} true;
    call $1_Diem_update_xdx_exchange_rate'$1_XUS_XUS'($t0, $t20);
    if ($abort_flag) {
        assume {:print "$at(34,44677,44736)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:577:5+1
    assume {:print "$at(34,44742,44743)"} true;
L1:

    // assert Not(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Eq<num>($t7, 0)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+64
    assume {:print "$at(46,8502,8566)"} true;
    assert {:msg "assert_failed(46,8502,8566): function does not abort under this condition"}
      !$IsEqual'num'($t7, 0);

    // assert Not(And(Eq<num>($t8, 0), Neq<num>($t6, 0))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+79
    assume {:print "$at(46,8575,8654)"} true;
    assert {:msg "assert_failed(46,8575,8654): function does not abort under this condition"}
      !($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0));

    // assert Not(Gt($t8, 18446744073709551615)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:189:9+57
    assume {:print "$at(46,8663,8720)"} true;
    assert {:msg "assert_failed(46,8663,8720): function does not abort under this condition"}
      !($t8 > 18446744073709551615);

    // assert Not(Not(exists[@196]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#196, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(Diem::spec_is_currency[@197]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#197);

    // assert Not(Not(exists[@196]<Roles::RoleId>($t12))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#196, $t12);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<XUS::XUS>()), $t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:9+85
    assume {:print "$at(11,69524,69609)"} true;
    assert {:msg "assert_failed(11,69524,69609): post-condition does not hold"}
      $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)), $t5);

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1501:9+20
    assume {:print "$at(11,70062,70082)"} true;
    assert {:msg "assert_failed(11,70062,70082): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assume {:print "$at(34,44748,46084)"} true;
    assert {:msg "assert_failed(34,44748,46084): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:577:5+1
    assume {:print "$at(34,44742,44743)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Eq<num>($t7, 0)), And(Eq<num>($t8, 0), Neq<num>($t6, 0))), Gt($t8, 18446744073709551615)), Not(exists[@196]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(Diem::spec_is_currency[@197]<XUS::XUS>())), Not(exists[@196]<Roles::RoleId>($t12))), Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assume {:print "$at(34,44748,46084)"} true;
    assert {:msg "assert_failed(34,44748,46084): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $IsEqual'num'($t7, 0)) || ($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0))) || ($t8 > 18446744073709551615)) || !$ResourceExists($1_Roles_RoleId_$memory#196, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#197)) || !$ResourceExists($1_Roles_RoleId_$memory#196, $t12)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t13)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t13))), And(Eq<num>($t7, 0), Eq(7, $t13))), And(And(Eq<num>($t8, 0), Neq<num>($t6, 0)), Eq(7, $t13))), And(Gt($t8, 18446744073709551615), Eq(8, $t13))), And(Not(exists[@196]<Roles::RoleId>($t9)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t13))), And(Not(Diem::spec_is_currency[@197]<XUS::XUS>()), Eq(5, $t13))), And(Not(exists[@196]<Roles::RoleId>($t12)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t13))), Eq(7, $t13)), Eq(2, $t13)), Eq(8, $t13)), Eq(3, $t13)), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assert {:msg "assert_failed(34,44748,46084): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t13)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t13))) || ($IsEqual'num'($t7, 0) && $IsEqual'num'(7, $t13))) || (($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0)) && $IsEqual'num'(7, $t13))) || (($t8 > 18446744073709551615) && $IsEqual'num'(8, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#196, $t9) && $IsEqual'num'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1) && $IsEqual'num'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t13))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#197) && $IsEqual'num'(5, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#196, $t12) && $IsEqual'num'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1) && $IsEqual'num'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t13))) || $IsEqual'num'(7, $t13)) || $IsEqual'num'(2, $t13)) || $IsEqual'num'(8, $t13)) || $IsEqual'num'(3, $t13)) || $IsEqual'num'(5, $t13));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun TreasuryComplianceScripts::update_exchange_rate [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
procedure {:timeLimit 40} $1_TreasuryComplianceScripts_update_exchange_rate$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t4: $1_FixedPoint32_FixedPoint32;
    var $t5: $1_FixedPoint32_FixedPoint32;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t11: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_FixedPoint32_FixedPoint32;
    var $t21: bool;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    var $t24: $1_Diem_ToXDXExchangeRateUpdateEvent;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_FixedPoint32_FixedPoint32': $1_FixedPoint32_FixedPoint32;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_SlidingNonce_SlidingNonce_$memory#195: $Memory $1_SlidingNonce_SlidingNonce;
    var $1_Roles_RoleId_$memory#196: $Memory $1_Roles_RoleId;
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#197: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(34,44221,44743)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume $IsValid'u64'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<SlidingNonce::SlidingNonce>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_SlidingNonce_SlidingNonce_$memory, $a_0);
    ($IsValid'$1_SlidingNonce_SlidingNonce'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+522
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume Identical($t5, FixedPoint32::spec_create_from_rational($t2, $t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:589:9+153
    assume {:print "$at(34,45273,45426)"} true;
    assume ($t5 == $1_FixedPoint32_spec_create_from_rational($t2, $t3));

    // assume Identical($t6, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t6 == $shl($t2, 64));

    // assume Identical($t7, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t7 == $shl($t3, 32));

    // assume Identical($t8, Div($t6, $t7)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t8 == ($t6 div $t7));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // assume Identical($t10, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<XDX::XDX>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t10 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)));

    // assume Identical($t11, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)), FixedPoint32::$get_raw_value($t5))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t11 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t5)));

    // assume Identical($t12, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t12 == $1_Signer_spec_address_of($t0));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @196 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Roles_RoleId_$memory#196 := $1_Roles_RoleId_$memory;

    // @195 := save_mem(SlidingNonce::SlidingNonce) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_SlidingNonce_SlidingNonce_$memory#195 := $1_SlidingNonce_SlidingNonce_$memory;

    // @197 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#197 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$at(34,44221,44222)"} true;
    assume {:print "$track_local(42,10,0):", $t0} $t0 == $t0;

    // trace_local[sliding_nonce]($t1) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,1):", $t1} $t1 == $t1;

    // trace_local[new_exchange_rate_numerator]($t2) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,2):", $t2} $t2 == $t2;

    // trace_local[new_exchange_rate_denominator]($t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:565:5+1
    assume {:print "$track_local(42,10,3):", $t3} $t3 == $t3;

    // SlidingNonce::record_nonce_or_abort($t0, $t1) on_abort goto L2 with $t13 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:571:9+63
    assume {:print "$at(34,44446,44509)"} true;
    call $1_SlidingNonce_record_nonce_or_abort($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(34,44446,44509)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;
        goto L2;
    }

    // assume Identical($t14, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t14 == $shl($t2, 64));

    // assume Identical($t15, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t15 == $shl($t3, 32));

    // assume Identical($t16, Div($t14, $t15)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t16 == ($t14 div $t15));

    // assume Identical($t17, Shl($t2, 64)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:184:9+39
    assume {:print "$at(46,8340,8379)"} true;
    assume ($t17 == $shl($t2, 64));

    // assume Identical($t18, Shl($t3, 32)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:185:9+43
    assume {:print "$at(46,8388,8431)"} true;
    assume ($t18 == $shl($t3, 32));

    // assume Identical($t19, Div($t17, $t18)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:186:9+53
    assume {:print "$at(46,8440,8493)"} true;
    assume ($t19 == ($t17 div $t18));

    // $t20 := opaque begin: FixedPoint32::create_from_rational($t2, $t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume {:print "$at(34,44530,44667)"} true;

    // assume Identical($t21, Or(Or(Eq<num>($t18, 0), And(Eq<num>($t19, 0), Neq<num>($t17, 0))), Gt($t19, 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume ($t21 == (($IsEqual'num'($t18, 0) || ($IsEqual'num'($t19, 0) && !$IsEqual'num'($t17, 0))) || ($t19 > 18446744073709551615)));

    // if ($t21) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    if ($t21) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
L4:

    // assume Or(Or(And(Eq<num>($t18, 0), Eq(7, $t13)), And(And(Eq<num>($t19, 0), Neq<num>($t17, 0)), Eq(7, $t13))), And(Gt($t19, 18446744073709551615), Eq(8, $t13))) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume ((($IsEqual'num'($t18, 0) && $IsEqual'num'(7, $t13)) || (($IsEqual'num'($t19, 0) && !$IsEqual'num'($t17, 0)) && $IsEqual'num'(7, $t13))) || (($t19 > 18446744073709551615) && $IsEqual'num'(8, $t13)));

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume {:print "$at(34,44530,44667)"} true;
    assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
L3:

    // assume WellFormed($t20) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume $IsValid'$1_FixedPoint32_FixedPoint32'($t20);

    // assume Eq<FixedPoint32::FixedPoint32>($t20, FixedPoint32::spec_create_from_rational($t2, $t3)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137
    assume $IsEqual'$1_FixedPoint32_FixedPoint32'($t20, $1_FixedPoint32_spec_create_from_rational($t2, $t3));

    // $t20 := opaque end: FixedPoint32::create_from_rational($t2, $t3) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:20+137

    // trace_local[rate]($t20) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:572:13+4
    assume {:print "$track_local(42,10,4):", $t20} $t20 == $t20;

    // assume Identical($t22, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t22 == $1_Signer_spec_address_of($t0));

    // assume Identical($t23, select Diem::CurrencyInfo.exchange_rate_update_events(global<Diem::CurrencyInfo<XDX::XDX>>(a550c18))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1496:9+91
    assume {:print "$at(11,69725,69816)"} true;
    assume ($t23 == $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)));

    // assume Identical($t24, pack Diem::ToXDXExchangeRateUpdateEvent(select Diem::CurrencyInfo.currency_code(global<Diem::CurrencyInfo<XDX::XDX>>(a550c18)), FixedPoint32::$get_raw_value($t20))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1497:9+228
    assume {:print "$at(11,69825,70053)"} true;
    assume ($t24 == $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)), $1_FixedPoint32_$get_raw_value($t20)));

    // Diem::update_xdx_exchange_rate<XDX::XDX>($t0, $t20) on_abort goto L2 with $t13 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:576:9+59
    assume {:print "$at(34,44677,44736)"} true;
    call $1_Diem_update_xdx_exchange_rate'$1_XDX_XDX'($t0, $t20);
    if ($abort_flag) {
        assume {:print "$at(34,44677,44736)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(42,10):", $t13} $t13 == $t13;
        goto L2;
    }

    // label L1 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:577:5+1
    assume {:print "$at(34,44742,44743)"} true;
L1:

    // assert Not(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0)))) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:47:9+93
    assume {:print "$at(31,1971,2064)"} true;
    assert {:msg "assert_failed(31,1971,2064): function does not abort under this condition"}
      !!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0));

    // assert Not(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)) at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:48:9+87
    assume {:print "$at(31,2073,2160)"} true;
    assert {:msg "assert_failed(31,2073,2160): function does not abort under this condition"}
      !!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0);

    // assert Not(Eq<num>($t7, 0)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:187:9+64
    assume {:print "$at(46,8502,8566)"} true;
    assert {:msg "assert_failed(46,8502,8566): function does not abort under this condition"}
      !$IsEqual'num'($t7, 0);

    // assert Not(And(Eq<num>($t8, 0), Neq<num>($t6, 0))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:188:9+79
    assume {:print "$at(46,8575,8654)"} true;
    assert {:msg "assert_failed(46,8575,8654): function does not abort under this condition"}
      !($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0));

    // assert Not(Gt($t8, 18446744073709551615)) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:189:9+57
    assume {:print "$at(46,8663,8720)"} true;
    assert {:msg "assert_failed(46,8663,8720): function does not abort under this condition"}
      !($t8 > 18446744073709551615);

    // assert Not(Not(exists[@196]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#196, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Not(Not(Diem::spec_is_currency[@197]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#197);

    // assert Not(Not(exists[@196]<Roles::RoleId>($t12))) at /home/ying/diem/language/diem-framework/modules/Roles.move:546:9+59
    assume {:print "$at(28,24327,24386)"} true;
    assert {:msg "assert_failed(28,24327,24386): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#196, $t12);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:547:9+97
    assume {:print "$at(28,24395,24492)"} true;
    assert {:msg "assert_failed(28,24395,24492): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:49:9+108
    assume {:print "$at(9,2057,2165)"} true;
    assert {:msg "assert_failed(9,2057,2165): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453);

    // assert Eq<FixedPoint32::FixedPoint32>(select Diem::CurrencyInfo.to_xdx_exchange_rate(Diem::spec_currency_info<XDX::XDX>()), $t5) at /home/ying/diem/language/diem-framework/modules/Diem.move:1491:9+85
    assume {:print "$at(11,69524,69609)"} true;
    assert {:msg "assert_failed(11,69524,69609): post-condition does not hold"}
      $IsEqual'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)), $t5);

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/Diem.move:1501:9+20
    assume {:print "$at(11,70062,70082)"} true;
    assert {:msg "assert_failed(11,70062,70082): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assume {:print "$at(34,44748,46084)"} true;
    assert {:msg "assert_failed(34,44748,46084): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:577:5+1
    assume {:print "$at(34,44742,44743)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0)), Eq<num>($t7, 0)), And(Eq<num>($t8, 0), Neq<num>($t6, 0))), Gt($t8, 18446744073709551615)), Not(exists[@196]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)), Not(Diem::spec_is_currency[@197]<XDX::XDX>())), Not(exists[@196]<Roles::RoleId>($t12))), Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1)), Neq<address>(Signer::spec_address_of[]($t0), b1e55ed)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assume {:print "$at(34,44748,46084)"} true;
    assert {:msg "assert_failed(34,44748,46084): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0)) || !$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0)) || $IsEqual'num'($t7, 0)) || ($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0))) || ($t8 > 18446744073709551615)) || !$ResourceExists($1_Roles_RoleId_$memory#196, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#197)) || !$ResourceExists($1_Roles_RoleId_$memory#196, $t12)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@195]<SlidingNonce::SlidingNonce>(Signer::spec_address_of[]($t0))), Eq(5, $t13)), And(Neq<u64>(SlidingNonce::spec_try_record_nonce[]($t0, $t1), 0), Eq(7, $t13))), And(Eq<num>($t7, 0), Eq(7, $t13))), And(And(Eq<num>($t8, 0), Neq<num>($t6, 0)), Eq(7, $t13))), And(Gt($t8, 18446744073709551615), Eq(8, $t13))), And(Not(exists[@196]<Roles::RoleId>($t9)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t9)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t13))), And(Not(Diem::spec_is_currency[@197]<XDX::XDX>()), Eq(5, $t13))), And(Not(exists[@196]<Roles::RoleId>($t12)), Eq(5, $t13))), And(Neq<u64>(select Roles::RoleId.role_id(global[@196]<Roles::RoleId>($t12)), 1), Eq(3, $t13))), And(Neq<address>(Signer::spec_address_of[]($t0), b1e55ed), Eq(2, $t13))), Eq(7, $t13)), Eq(2, $t13)), Eq(8, $t13)), Eq(3, $t13)), Eq(5, $t13)) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    assert {:msg "assert_failed(34,44748,46084): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((!$ResourceExists($1_SlidingNonce_SlidingNonce_$memory#195, $1_Signer_spec_address_of($t0)) && $IsEqual'num'(5, $t13)) || (!$IsEqual'u64'($1_SlidingNonce_spec_try_record_nonce($t0, $t1), 0) && $IsEqual'num'(7, $t13))) || ($IsEqual'num'($t7, 0) && $IsEqual'num'(7, $t13))) || (($IsEqual'num'($t8, 0) && !$IsEqual'num'($t6, 0)) && $IsEqual'num'(7, $t13))) || (($t8 > 18446744073709551615) && $IsEqual'num'(8, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#196, $t9) && $IsEqual'num'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t9)), 1) && $IsEqual'num'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t13))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#197) && $IsEqual'num'(5, $t13))) || (!$ResourceExists($1_Roles_RoleId_$memory#196, $t12) && $IsEqual'num'(5, $t13))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#196, $t12)), 1) && $IsEqual'num'(3, $t13))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t13))) || $IsEqual'num'(7, $t13)) || $IsEqual'num'(2, $t13)) || $IsEqual'num'(8, $t13)) || $IsEqual'num'(3, $t13)) || $IsEqual'num'(5, $t13));

    // abort($t13) at /home/ying/diem/language/diem-framework/modules/TreasuryComplianceScripts.move:578:5+1336
    $abort_code := $t13;
    $abort_flag := true;
    return;

}
