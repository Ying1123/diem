(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_68 () (Seq Element))
(declare-fun a_69 () (Seq Element))
(declare-fun a_71 () (Seq Element))
(declare-fun a_72 () (Seq Element))
(declare-fun a_74 () (Seq Element))
(declare-fun a_76 () (Seq Element))
(declare-fun a_78 () (Seq Element))
(declare-fun a_79 () (Seq Element))
(declare-fun a_81 () (Seq Element))
(declare-fun a_83 () (Seq Element))
(declare-fun a_84 () (Seq Element))
(declare-fun a_85 () (Seq Element))
(declare-fun e_67 () Element)
(declare-fun e_70 () Element)
(declare-fun e_73 () Element)
(declare-fun e_75 () Element)
(declare-fun e_77 () Element)
(declare-fun e_80 () Element)
(declare-fun e_82 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i4 () Int)
(assert (= a_68 (seq.update a1 i2 (seq.unit e_67))))
(assert (= a_69 (seq.update a_68 i2 (seq.unit e_67))))
(assert (= a_71 (seq.update a_69 i4 (seq.unit e_70))))
(assert (= a_72 (seq.update a_71 i4 (seq.unit e_70))))
(assert (= a_74 (seq.update a_72 i4 (seq.unit e_73))))
(assert (= a_76 (seq.update a_74 i1 (seq.unit e_75))))
(assert (= a_78 (seq.update a_76 i2 (seq.unit e_77))))
(assert (= a_79 (seq.update a_78 i2 (seq.unit e_77))))
(assert (= a_81 (seq.update a_79 i1 (seq.unit e_80))))
(assert (= a_83 (seq.update a_81 i2 (seq.unit e_82))))
(assert (= a_84 (seq.update a_79 i2 (seq.unit e_80))))
(assert (= a_85 (seq.update a_84 i2 (seq.unit e_80))))
(assert (= e_67 (seq.nth a1 i2)))
(assert (= e_70 (seq.nth a_69 i4)))
(assert (= e_73 (seq.nth a_72 i1)))
(assert (= e_75 (seq.nth a_72 i4)))
(assert (= e_77 (seq.nth a_76 i2)))
(assert (= e_80 (seq.nth a_79 i2)))
(assert (= e_82 (seq.nth a_79 i1)))
(assert (not (= a_83 a_85)))
(check-sat)
(exit)
