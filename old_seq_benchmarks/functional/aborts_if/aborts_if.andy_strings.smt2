(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :strings-exp true)
(set-logic ALL)
; done setting options


(declare-datatypes ((T@$signer 0)) ((($signer (|$addr#$signer| Int) ) ) ))
(declare-datatypes ((T@$Location 0)) ((($Global (|a#$Global| Int) ) ($Local (|i#$Local| Int) ) ($Param (|i#$Param| Int) ) ) ))
(declare-datatypes ((T@$Mutation_3430 0)) ((($Mutation_3430 (|l#$Mutation_3430| T@$Location) (|p#$Mutation_3430| (Seq Int)) (|v#$Mutation_3430| Int) ) ) ))
(declare-datatypes ((T@$Mutation_9139 0)) ((($Mutation_9139 (|l#$Mutation_9139| T@$Location) (|p#$Mutation_9139| (Seq Int)) (|v#$Mutation_9139| (Seq Int)) ) ) ))
(declare-datatypes ((T@$Range 0)) ((($Range (|lb#$Range| Int) (|ub#$Range| Int) ) ) ))
(declare-fun $MAX_U8 () Int)
(declare-fun $MAX_U64 () Int)
(declare-fun $MAX_U128 () Int)
(declare-fun |$IsValid'u8'| (Int) Bool)
(declare-fun |$IsValid'u64'| (Int) Bool)
(declare-fun |$IsValid'u128'| (Int) Bool)
(declare-fun |$IsValid'num'| (Int) Bool)
(declare-fun |$IsValid'address'| (Int) Bool)
(declare-fun $InRange (T@$Range Int) Bool)
(declare-sort |T@[Int]Bool| 0)
(declare-fun $ConstMemoryDomain (Bool) |T@[Int]Bool|)
(declare-fun |lambda#0| (Bool) |T@[Int]Bool|)
(declare-fun $EXEC_FAILURE_CODE () Int)
(declare-fun $shl (Int Int) Int)
(declare-fun $shr (Int Int) Int)
(declare-fun |$IsValid'vec'u8''| ((Seq Int)) Bool)
(declare-fun |$IndexOfVec'u8'| ((Seq Int) Int) Int)
(declare-fun $1_Hash_sha2 ((Seq Int)) (Seq Int))
(declare-fun $1_Hash_sha3 ((Seq Int)) (Seq Int))
(declare-fun $1_Signature_$ed25519_validate_pubkey ((Seq Int)) Bool)
(declare-fun $1_Signature_$ed25519_verify ((Seq Int) (Seq Int) (Seq Int)) Bool)
(declare-fun ReverseVec_3283 ((Seq Int)) (Seq Int))
(declare-fun |Select__T@[Int]Bool_| (|T@[Int]Bool| Int) Bool)
(assert (= $MAX_U8 255))
(assert (= $MAX_U64 18446744073709551615))
(assert (= $MAX_U128 340282366920938463463374607431768211455))
(assert (forall ((v Int) ) (! (= (|$IsValid'u8'| v)  (and (>= v 0) (<= v $MAX_U8)))
 :qid |abortsifandybpl.160:23|
 :skolemid |4|
 :pattern ( (|$IsValid'u8'| v))
)))
(assert (forall ((v@@0 Int) ) (! (= (|$IsValid'u64'| v@@0)  (and (>= v@@0 0) (<= v@@0 $MAX_U64)))
 :qid |abortsifandybpl.164:24|
 :skolemid |5|
 :pattern ( (|$IsValid'u64'| v@@0))
)))
(assert (forall ((v@@1 Int) ) (! (= (|$IsValid'u128'| v@@1)  (and (>= v@@1 0) (<= v@@1 $MAX_U128)))
 :qid |abortsifandybpl.168:25|
 :skolemid |6|
 :pattern ( (|$IsValid'u128'| v@@1))
)))
(assert (forall ((v@@2 Int) ) (! (= (|$IsValid'num'| v@@2) true)
 :qid |abortsifandybpl.172:24|
 :skolemid |7|
 :pattern ( (|$IsValid'num'| v@@2))
)))
(assert (forall ((v@@3 Int) ) (! (= (|$IsValid'address'| v@@3) (>= v@@3 0))
 :qid |abortsifandybpl.176:28|
 :skolemid |8|
 :pattern ( (|$IsValid'address'| v@@3))
)))
(assert (forall ((r T@$Range) (i Int) ) (! (= ($InRange r i)  (and (<= (|lb#$Range| r) i) (< i (|ub#$Range| r))))
 :qid |abortsifandybpl.186:19|
 :skolemid |9|
 :pattern ( ($InRange r i))
)))
(assert (= ($ConstMemoryDomain false) (|lambda#0| false)))
(assert (= ($ConstMemoryDomain true) (|lambda#0| true)))
(assert (= $EXEC_FAILURE_CODE (- 0 1)))
(assert (forall ((src1 Int) (p Int) ) (! (= ($shl src1 p) (ite (= p 8) (* src1 256) (ite (= p 16) (* src1 65536) (ite (= p 32) (* src1 4294967296) (ite (= p 64) (* src1 18446744073709551616) (- 0 1))))))
 :qid |abortsifandybpl.452:15|
 :skolemid |13|
 :pattern ( ($shl src1 p))
)))
(assert (forall ((src1@@0 Int) (p@@0 Int) ) (! (= ($shr src1@@0 p@@0) (ite (= p@@0 8) (div src1@@0 256) (ite (= p@@0 16) (div src1@@0 65536) (ite (= p@@0 32) (div src1@@0 4294967296) (ite (= p@@0 64) (div src1@@0 18446744073709551616) (- 0 1))))))
 :qid |abortsifandybpl.461:15|
 :skolemid |14|
 :pattern ( ($shr src1@@0 p@@0))
)))
(assert (forall ((v@@4 (Seq Int)) ) (! (= (|$IsValid'vec'u8''| v@@4)  (and (|$IsValid'u64'| (seq.len v@@4)) (forall ((i@@0 Int) ) (!  (=> (and (>= i@@0 0) (< i@@0 (seq.len v@@4))) (|$IsValid'u8'| (seq.nth v@@4 i@@0)))
 :qid |abortsifandybpl.590:13|
 :skolemid |15|
))))
 :qid |abortsifandybpl.588:28|
 :skolemid |16|
 :pattern ( (|$IsValid'vec'u8''| v@@4))
)))
(assert (forall ((v@@5 (Seq Int)) (e Int) ) (! (let ((i@@1 (|$IndexOfVec'u8'| v@@5 e)))
(ite  (not (exists ((i@@2 Int) ) (!  (and (and (|$IsValid'u64'| i@@2) (and (>= i@@2 0) (< i@@2 (seq.len v@@5)))) (= (seq.nth v@@5 i@@2) e))
 :qid |abortsifandybpl.595:13|
 :skolemid |17|
))) (= i@@1 (- 0 1))  (and (and (and (|$IsValid'u64'| i@@1) (and (>= i@@1 0) (< i@@1 (seq.len v@@5)))) (= (seq.nth v@@5 i@@1) e)) (forall ((j Int) ) (!  (=> (and (and (|$IsValid'u64'| j) (>= j 0)) (< j i@@1)) (not (= (seq.nth v@@5 j) e)))
 :qid |abortsifandybpl.603:17|
 :skolemid |18|
)))))
 :qid |abortsifandybpl.599:15|
 :skolemid |19|
 :pattern ( (|$IndexOfVec'u8'| v@@5 e))
)))
(assert (forall ((v1 (Seq Int)) (v2 (Seq Int)) ) (! (= (= v1 v2) (= ($1_Hash_sha2 v1) ($1_Hash_sha2 v2)))
 :qid |abortsifandybpl.776:15|
 :skolemid |20|
 :pattern ( ($1_Hash_sha2 v1) ($1_Hash_sha2 v2))
)))
(assert (forall ((v1@@0 (Seq Int)) (v2@@0 (Seq Int)) ) (! (= (= v1@@0 v2@@0) (= ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0)))
 :qid |abortsifandybpl.792:15|
 :skolemid |21|
 :pattern ( ($1_Hash_sha3 v1@@0) ($1_Hash_sha3 v2@@0))
)))
(assert (forall ((k1 (Seq Int)) (k2 (Seq Int)) ) (!  (=> (= k1 k2) (= ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2)))
 :qid |abortsifandybpl.859:15|
 :skolemid |22|
 :pattern ( ($1_Signature_$ed25519_validate_pubkey k1) ($1_Signature_$ed25519_validate_pubkey k2))
)))
(assert (forall ((s1 (Seq Int)) (s2 (Seq Int)) (k1@@0 (Seq Int)) (k2@@0 (Seq Int)) (m1 (Seq Int)) (m2 (Seq Int)) ) (!  (=> (and (and (= s1 s2) (= k1@@0 k2@@0)) (= m1 m2)) (= ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2)))
 :qid |abortsifandybpl.862:15|
 :skolemid |23|
 :pattern ( ($1_Signature_$ed25519_verify s1 k1@@0 m1) ($1_Signature_$ed25519_verify s2 k2@@0 m2))
)))
(assert (forall ((v@@6 (Seq Int)) ) (! (let ((r@@0 (ReverseVec_3283 v@@6)))
 (and (= (seq.len r@@0) (seq.len v@@6)) (forall ((i@@3 Int) ) (!  (=> (and (>= i@@3 0) (< i@@3 (seq.len r@@0))) (= (seq.nth r@@0 i@@3) (seq.nth v@@6 (- (- (seq.len v@@6) i@@3) 1))))
 :qid |abortsifandybpl.67:18|
 :skolemid |0|
 :pattern ( (seq.nth r@@0 i@@3))
))))
 :qid |abortsifandybpl.64:32|
 :skolemid |1|
 :pattern ( (ReverseVec_3283 v@@6))
)))
(assert (forall ((|l#0| Bool) (i@@4 Int) ) (! (= (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4) |l#0|)
 :qid |abortsifandybpl.245:54|
 :skolemid |24|
 :pattern ( (|Select__T@[Int]Bool_| (|lambda#0| |l#0|) i@@4))
)))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun inline$$Not$0$dst@1 () Bool)
(declare-fun _$t0 () Int)
(declare-fun _$t1 () Int)
(declare-fun inline$$Gt$0$dst@1 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort1$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 15895) (let ((anon4_Else_correct  (=> (and (not inline$$Not$0$dst@1) (= (ControlFlow 0 13227) (- 0 16037))) (not (<= _$t0 _$t1)))))
(let ((anon4_Then_correct  (=> (and (and inline$$Not$0$dst@1 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 13257) (- 0 16019)))) (<= _$t0 _$t1))))
(let ((inline$$Not$0$anon0_correct  (=> (= inline$$Not$0$dst@1  (not inline$$Gt$0$dst@1)) (and (=> (= (ControlFlow 0 13201) 13257) anon4_Then_correct) (=> (= (ControlFlow 0 13201) 13227) anon4_Else_correct)))))
(let ((inline$$Gt$0$anon0_correct  (=> (and (= inline$$Gt$0$dst@1 (> _$t0 _$t1)) (= (ControlFlow 0 13163) 13201)) inline$$Not$0$anon0_correct)))
(let ((anon0$1_correct  (=> (|$IsValid'u64'| _$t0) (=> (and (and (|$IsValid'u64'| _$t1) (= _$t0 _$t0)) (and (= _$t1 _$t1) (= (ControlFlow 0 13169) 13163))) inline$$Gt$0$anon0_correct))))
(let ((anon0_correct  (=> (= (ControlFlow 0 15895) 13169) anon0$1_correct)))
anon0_correct)))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun _$t0@@0 () Int)
(declare-fun _$t1@@0 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort2_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16061) (let ((anon0$1_correct@@0  (=> (|$IsValid'u64'| _$t0@@0) (=> (and (and (|$IsValid'u64'| _$t1@@0) (= _$t0@@0 _$t0@@0)) (and (= _$t1@@0 _$t1@@0) (= (ControlFlow 0 13349) (- 0 16115)))) (not (<= _$t0@@0 _$t1@@0))))))
(let ((anon0_correct@@0  (=> (= (ControlFlow 0 16061) 13349) anon0$1_correct@@0)))
anon0_correct@@0)))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 16061)))
(get-value ((ControlFlow 0 13349)))
(assert (not (= (ControlFlow 0 13349) (- 16115))))
(check-sat)
(pop 1)
; Invalid
(declare-fun _$t0@@1 () Int)
(declare-fun _$t1@@1 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort3$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16126) (let ((anon0$1_correct@@1  (=> (|$IsValid'u64'| _$t0@@1) (=> (and (|$IsValid'u64'| _$t1@@1) (= _$t0@@1 _$t0@@1)) (=> (and (and (= _$t1@@1 _$t1@@1) (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 13455) (- 0 16203)))) true)))))
(let ((anon0_correct@@1  (=> (= (ControlFlow 0 16126) 13455) anon0$1_correct@@1)))
anon0_correct@@1)))
))
(check-sat)
(pop 1)
; Valid
(declare-fun inline$$Gt$0$dst@1@@0 () Bool)
(declare-fun _$t0@@2 () Int)
(declare-fun _$t1@@2 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort4_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16219) (let ((anon4_Else_correct@@0  (=> (and (not inline$$Gt$0$dst@1@@0) (= (ControlFlow 0 13603) (- 0 16332))) (not (<= _$t0@@2 _$t1@@2)))))
(let ((anon4_Then_correct@@0 true))
(let ((inline$$Gt$0$anon0_correct@@0  (=> (= inline$$Gt$0$dst@1@@0 (> _$t0@@2 _$t1@@2)) (and (=> (= (ControlFlow 0 13577) 13625) anon4_Then_correct@@0) (=> (= (ControlFlow 0 13577) 13603) anon4_Else_correct@@0)))))
(let ((anon0$1_correct@@2  (=> (|$IsValid'u64'| _$t0@@2) (=> (and (and (|$IsValid'u64'| _$t1@@2) (= _$t0@@2 _$t0@@2)) (and (= _$t1@@2 _$t1@@2) (= (ControlFlow 0 13583) 13577))) inline$$Gt$0$anon0_correct@@0))))
(let ((anon0_correct@@2  (=> (= (ControlFlow 0 16219) 13583) anon0$1_correct@@2)))
anon0_correct@@2))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 16219)))
(get-value ((ControlFlow 0 13583)))
(get-value ((ControlFlow 0 13577)))
(get-value ((ControlFlow 0 13603)))
(assert (not (= (ControlFlow 0 13603) (- 16332))))
(check-sat)
(pop 1)
; Invalid
(declare-fun inline$$Le$0$dst@1 () Bool)
(declare-fun _$t0@@3 () Int)
(declare-fun _$t1@@3 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort5_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16347) (let ((anon4_Else_correct@@1  (=> (and (not inline$$Le$0$dst@1) (= (ControlFlow 0 13773) (- 0 16467))) (not (< _$t0@@3 _$t1@@3)))))
(let ((anon4_Then_correct@@1  (=> (and (and inline$$Le$0$dst@1 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 13803) (- 0 16449)))) (< _$t0@@3 _$t1@@3))))
(let ((inline$$Le$0$anon0_correct  (=> (= inline$$Le$0$dst@1 (<= _$t0@@3 _$t1@@3)) (and (=> (= (ControlFlow 0 13747) 13803) anon4_Then_correct@@1) (=> (= (ControlFlow 0 13747) 13773) anon4_Else_correct@@1)))))
(let ((anon0$1_correct@@3  (=> (|$IsValid'u64'| _$t0@@3) (=> (and (and (|$IsValid'u64'| _$t1@@3) (= _$t0@@3 _$t0@@3)) (and (= _$t1@@3 _$t1@@3) (= (ControlFlow 0 13753) 13747))) inline$$Le$0$anon0_correct))))
(let ((anon0_correct@@3  (=> (= (ControlFlow 0 16347) 13753) anon0$1_correct@@3)))
anon0_correct@@3))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 16347)))
(get-value ((ControlFlow 0 13753)))
(get-value ((ControlFlow 0 13747)))
(get-value ((ControlFlow 0 13803)))
(assert (not (= (ControlFlow 0 13803) (- 16449))))
(check-sat)
(pop 1)
; Invalid
(declare-fun inline$$Lt$0$dst@1 () Bool)
(declare-fun _$t0@@4 () Int)
(declare-fun _$t1@@4 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort6_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16482) (let ((anon4_Else_correct@@2  (=> (and (not inline$$Lt$0$dst@1) (= (ControlFlow 0 13951) (- 0 16602))) (not (<= _$t0@@4 _$t1@@4)))))
(let ((anon4_Then_correct@@2  (=> (and (and inline$$Lt$0$dst@1 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 13981) (- 0 16584)))) (<= _$t0@@4 _$t1@@4))))
(let ((inline$$Lt$0$anon0_correct  (=> (= inline$$Lt$0$dst@1 (< _$t0@@4 _$t1@@4)) (and (=> (= (ControlFlow 0 13925) 13981) anon4_Then_correct@@2) (=> (= (ControlFlow 0 13925) 13951) anon4_Else_correct@@2)))))
(let ((anon0$1_correct@@4  (=> (|$IsValid'u64'| _$t0@@4) (=> (and (and (|$IsValid'u64'| _$t1@@4) (= _$t0@@4 _$t0@@4)) (and (= _$t1@@4 _$t1@@4) (= (ControlFlow 0 13931) 13925))) inline$$Lt$0$anon0_correct))))
(let ((anon0_correct@@4  (=> (= (ControlFlow 0 16482) 13931) anon0$1_correct@@4)))
anon0_correct@@4))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 16482)))
(get-value ((ControlFlow 0 13931)))
(get-value ((ControlFlow 0 13925)))
(get-value ((ControlFlow 0 13951)))
(assert (not (= (ControlFlow 0 13951) (- 16602))))
(check-sat)
(pop 1)
; Invalid
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort_1$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16611) (let ((anon0$1_correct@@5  (=> (and (|$IsValid'u64'| 1) (= 1 1)) (and (=> (= (ControlFlow 0 14071) (- 0 16659)) true) (=> (= (ControlFlow 0 14071) (- 0 16661)) (and true (= 1 1)))))))
(let ((anon0_correct@@5  (=> (= (ControlFlow 0 16611) 14071) anon0$1_correct@@5)))
anon0_correct@@5)))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $t1@0 () Bool)
(declare-fun _$t0@@5 () Int)
(declare-fun $t3@0 () Bool)
(declare-fun $t6@0 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort_at_2_or_3$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16683) (let ((anon7_Else_correct  (=> (and (not $t1@0) (= (ControlFlow 0 14199) (- 0 16835))) (not (= _$t0@@5 2)))))
(let ((anon7_Then_correct true))
(let ((anon6_Else_correct  (=> (not $t3@0) (=> (and (and (|$IsValid'u64'| 3) (= $t6@0 (= _$t0@@5 3))) (and (= $t6@0 $t6@0) (= $t1@0 $t6@0))) (and (=> (= (ControlFlow 0 14179) 14221) anon7_Then_correct) (=> (= (ControlFlow 0 14179) 14199) anon7_Else_correct))))))
(let ((anon6_Then_correct  (=> $t3@0 (=> (and (= true true) (= $t1@0 true)) (and (=> (= (ControlFlow 0 14239) 14221) anon7_Then_correct) (=> (= (ControlFlow 0 14239) 14199) anon7_Else_correct))))))
(let ((anon0$1_correct@@6  (=> (and (and (|$IsValid'u64'| _$t0@@5) (= _$t0@@5 _$t0@@5)) (and (|$IsValid'u64'| 2) (= $t3@0 (= _$t0@@5 2)))) (and (=> (= (ControlFlow 0 14153) 14239) anon6_Then_correct) (=> (= (ControlFlow 0 14153) 14179) anon6_Else_correct)))))
(let ((anon0_correct@@6  (=> (= (ControlFlow 0 16683) 14153) anon0$1_correct@@6)))
anon0_correct@@6)))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $t1@0@@0 () Bool)
(declare-fun _$t0@@6 () Int)
(declare-fun $t3@0@@0 () Bool)
(declare-fun $t6@0@@0 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort_at_2_or_3_spec_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 16850) (let ((anon7_Else_correct@@0  (=> (and (not $t1@0@@0) (= (ControlFlow 0 14367) (- 0 17002))) (not (= _$t0@@6 4)))))
(let ((anon7_Then_correct@@0 true))
(let ((anon6_Else_correct@@0  (=> (not $t3@0@@0) (=> (and (and (|$IsValid'u64'| 3) (= $t6@0@@0 (= _$t0@@6 3))) (and (= $t6@0@@0 $t6@0@@0) (= $t1@0@@0 $t6@0@@0))) (and (=> (= (ControlFlow 0 14347) 14389) anon7_Then_correct@@0) (=> (= (ControlFlow 0 14347) 14367) anon7_Else_correct@@0))))))
(let ((anon6_Then_correct@@0  (=> $t3@0@@0 (=> (and (= true true) (= $t1@0@@0 true)) (and (=> (= (ControlFlow 0 14407) 14389) anon7_Then_correct@@0) (=> (= (ControlFlow 0 14407) 14367) anon7_Else_correct@@0))))))
(let ((anon0$1_correct@@7  (=> (and (and (|$IsValid'u64'| _$t0@@6) (= _$t0@@6 _$t0@@6)) (and (|$IsValid'u64'| 2) (= $t3@0@@0 (= _$t0@@6 2)))) (and (=> (= (ControlFlow 0 14321) 14407) anon6_Then_correct@@0) (=> (= (ControlFlow 0 14321) 14347) anon6_Else_correct@@0)))))
(let ((anon0_correct@@7  (=> (= (ControlFlow 0 16850) 14321) anon0$1_correct@@7)))
anon0_correct@@7)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 16850)))
(get-value ((ControlFlow 0 14321)))
(get-value ((ControlFlow 0 14347)))
(get-value ((ControlFlow 0 14367)))
(assert (not (= (ControlFlow 0 14367) (- 17002))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $t1@0@@1 () Bool)
(declare-fun $t3@0@@1 () Bool)
(declare-fun $t6@0@@1 () Bool)
(declare-fun _$t0@@7 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort_at_2_or_3_strict_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 17017) (let ((anon6_Else_correct@@1  (=> (and (not $t1@0@@1) (= (ControlFlow 0 14529) (- 0 17171))) (not false))))
(let ((anon6_Then_correct@@1  (=> (and (and $t1@0@@1 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 14555) (- 0 17158)))) false)))
(let ((anon5_Else_correct  (=> (not $t3@0@@1) (=> (and (and (|$IsValid'u64'| 3) (= $t6@0@@1 (= _$t0@@7 3))) (and (= $t6@0@@1 $t6@0@@1) (= $t1@0@@1 $t6@0@@1))) (and (=> (= (ControlFlow 0 14515) 14555) anon6_Then_correct@@1) (=> (= (ControlFlow 0 14515) 14529) anon6_Else_correct@@1))))))
(let ((anon5_Then_correct  (=> $t3@0@@1 (=> (and (= true true) (= $t1@0@@1 true)) (and (=> (= (ControlFlow 0 14573) 14555) anon6_Then_correct@@1) (=> (= (ControlFlow 0 14573) 14529) anon6_Else_correct@@1))))))
(let ((anon0$1_correct@@8  (=> (and (and (|$IsValid'u64'| _$t0@@7) (= _$t0@@7 _$t0@@7)) (and (|$IsValid'u64'| 2) (= $t3@0@@1 (= _$t0@@7 2)))) (and (=> (= (ControlFlow 0 14489) 14573) anon5_Then_correct) (=> (= (ControlFlow 0 14489) 14515) anon5_Else_correct)))))
(let ((anon0_correct@@8  (=> (= (ControlFlow 0 17017) 14489) anon0$1_correct@@8)))
anon0_correct@@8)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 17017)))
(get-value ((ControlFlow 0 14489)))
(get-value ((ControlFlow 0 14573)))
(get-value ((ControlFlow 0 14555)))
(assert (not (= (ControlFlow 0 14555) (- 17158))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $t1@0@@2 () Bool)
(declare-fun _$t0@@8 () Int)
(declare-fun $t3@0@@2 () Bool)
(declare-fun $t6@0@@2 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_abort_at_2_or_3_total_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 17184) (let ((anon7_Else_correct@@1  (=> (and (not $t1@0@@2) (= (ControlFlow 0 14701) (- 0 17344))) (not (= _$t0@@8 2)))))
(let ((anon7_Then_correct@@1  (=> (and (and $t1@0@@2 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 14731) (- 0 17325)))) (= _$t0@@8 2))))
(let ((anon6_Else_correct@@2  (=> (not $t3@0@@2) (=> (and (and (|$IsValid'u64'| 3) (= $t6@0@@2 (= _$t0@@8 3))) (and (= $t6@0@@2 $t6@0@@2) (= $t1@0@@2 $t6@0@@2))) (and (=> (= (ControlFlow 0 14681) 14731) anon7_Then_correct@@1) (=> (= (ControlFlow 0 14681) 14701) anon7_Else_correct@@1))))))
(let ((anon6_Then_correct@@2  (=> $t3@0@@2 (=> (and (= true true) (= $t1@0@@2 true)) (and (=> (= (ControlFlow 0 14749) 14731) anon7_Then_correct@@1) (=> (= (ControlFlow 0 14749) 14701) anon7_Else_correct@@1))))))
(let ((anon0$1_correct@@9  (=> (and (and (|$IsValid'u64'| _$t0@@8) (= _$t0@@8 _$t0@@8)) (and (|$IsValid'u64'| 2) (= $t3@0@@2 (= _$t0@@8 2)))) (and (=> (= (ControlFlow 0 14655) 14749) anon6_Then_correct@@2) (=> (= (ControlFlow 0 14655) 14681) anon6_Else_correct@@2)))))
(let ((anon0_correct@@9  (=> (= (ControlFlow 0 17184) 14655) anon0$1_correct@@9)))
anon0_correct@@9)))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 17184)))
(get-value ((ControlFlow 0 14655)))
(get-value ((ControlFlow 0 14681)))
(get-value ((ControlFlow 0 14731)))
(assert (not (= (ControlFlow 0 14731) (- 17325))))
(check-sat)
(pop 1)
; Invalid
(declare-fun $t7 () Bool)
(declare-fun $t8 () Int)
(declare-fun _$t0@@9 () Int)
(declare-fun $t1@0@@3 () Bool)
(declare-fun $t3@0@@3 () Bool)
(declare-fun $t6@0@@3 () Bool)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_aborts_if_with_code$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 17359) (let ((anon10_Then_correct  (=> $t7 (=> (and (and true (= 1 $t8)) (and (= $t8 $t8) (= (ControlFlow 0 14945) (- 0 17515)))) (or (and (= _$t0@@9 2) (= 1 $t8)) (= 1 $t8))))))
(let ((L6_correct  (=> (= (ControlFlow 0 14879) (- 0 17552)) (not (= _$t0@@9 2)))))
(let ((anon10_Else_correct  (=> (and (not $t7) (= (ControlFlow 0 14895) 14879)) L6_correct)))
(let ((anon9_Then_correct  (=> (and $t1@0@@3 (= $t7 true)) (and (=> (= (ControlFlow 0 14889) 14945) anon10_Then_correct) (=> (= (ControlFlow 0 14889) 14895) anon10_Else_correct)))))
(let ((anon9_Else_correct  (=> (and (not $t1@0@@3) (= (ControlFlow 0 14865) 14879)) L6_correct)))
(let ((anon8_Else_correct  (=> (not $t3@0@@3) (=> (and (and (|$IsValid'u64'| 3) (= $t6@0@@3 (= _$t0@@9 3))) (and (= $t6@0@@3 $t6@0@@3) (= $t1@0@@3 $t6@0@@3))) (and (=> (= (ControlFlow 0 14857) 14889) anon9_Then_correct) (=> (= (ControlFlow 0 14857) 14865) anon9_Else_correct))))))
(let ((anon8_Then_correct  (=> $t3@0@@3 (=> (and (= true true) (= $t1@0@@3 true)) (and (=> (= (ControlFlow 0 14963) 14889) anon9_Then_correct) (=> (= (ControlFlow 0 14963) 14865) anon9_Else_correct))))))
(let ((anon0$1_correct@@10  (=> (and (and (|$IsValid'u64'| _$t0@@9) (= _$t0@@9 _$t0@@9)) (and (|$IsValid'u64'| 2) (= $t3@0@@3 (= _$t0@@9 2)))) (and (=> (= (ControlFlow 0 14831) 14963) anon8_Then_correct) (=> (= (ControlFlow 0 14831) 14857) anon8_Else_correct)))))
(let ((anon0_correct@@10  (=> (= (ControlFlow 0 17359) 14831) anon0$1_correct@@10)))
anon0_correct@@10))))))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun inline$$Le$0$dst@1@@0 () Bool)
(declare-fun _$t0@@10 () Int)
(declare-fun _$t1@@5 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_multi_abort1$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 17568) (let ((anon4_Else_correct@@3  (=> (not inline$$Le$0$dst@1@@0) (and (=> (= (ControlFlow 0 15121) (- 0 17694)) (not (< _$t0@@10 _$t1@@5))) (=> (not (< _$t0@@10 _$t1@@5)) (=> (= (ControlFlow 0 15121) (- 0 17703)) (not (= _$t0@@10 _$t1@@5))))))))
(let ((anon4_Then_correct@@3  (=> (and (and inline$$Le$0$dst@1@@0 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 15159) (- 0 17670)))) (or (< _$t0@@10 _$t1@@5) (= _$t0@@10 _$t1@@5)))))
(let ((inline$$Le$0$anon0_correct@@0  (=> (= inline$$Le$0$dst@1@@0 (<= _$t0@@10 _$t1@@5)) (and (=> (= (ControlFlow 0 15085) 15159) anon4_Then_correct@@3) (=> (= (ControlFlow 0 15085) 15121) anon4_Else_correct@@3)))))
(let ((anon0$1_correct@@11  (=> (|$IsValid'u64'| _$t0@@10) (=> (and (and (|$IsValid'u64'| _$t1@@5) (= _$t0@@10 _$t0@@10)) (and (= _$t1@@5 _$t1@@5) (= (ControlFlow 0 15091) 15085))) inline$$Le$0$anon0_correct@@0))))
(let ((anon0_correct@@11  (=> (= (ControlFlow 0 17568) 15091) anon0$1_correct@@11)))
anon0_correct@@11))))))
))
(check-sat)
(pop 1)
; Valid
(declare-fun inline$$Lt$0$dst@1@@0 () Bool)
(declare-fun _$t0@@11 () Int)
(declare-fun _$t1@@6 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_multi_abort2_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 17718) (let ((anon4_Else_correct@@4  (=> (not inline$$Lt$0$dst@1@@0) (and (=> (= (ControlFlow 0 15317) (- 0 17844)) (not (< _$t0@@11 _$t1@@6))) (=> (not (< _$t0@@11 _$t1@@6)) (=> (= (ControlFlow 0 15317) (- 0 17853)) (not (= _$t0@@11 _$t1@@6))))))))
(let ((anon4_Then_correct@@4  (=> (and (and inline$$Lt$0$dst@1@@0 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 15355) (- 0 17820)))) (or (< _$t0@@11 _$t1@@6) (= _$t0@@11 _$t1@@6)))))
(let ((inline$$Lt$0$anon0_correct@@0  (=> (= inline$$Lt$0$dst@1@@0 (< _$t0@@11 _$t1@@6)) (and (=> (= (ControlFlow 0 15281) 15355) anon4_Then_correct@@4) (=> (= (ControlFlow 0 15281) 15317) anon4_Else_correct@@4)))))
(let ((anon0$1_correct@@12  (=> (|$IsValid'u64'| _$t0@@11) (=> (and (and (|$IsValid'u64'| _$t1@@6) (= _$t0@@11 _$t0@@11)) (and (= _$t1@@6 _$t1@@6) (= (ControlFlow 0 15287) 15281))) inline$$Lt$0$anon0_correct@@0))))
(let ((anon0_correct@@12  (=> (= (ControlFlow 0 17718) 15287) anon0$1_correct@@12)))
anon0_correct@@12))))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 17718)))
(get-value ((ControlFlow 0 15287)))
(get-value ((ControlFlow 0 15281)))
(get-value ((ControlFlow 0 15317)))
(assert (not (= (ControlFlow 0 15317) (- 17853))))
(check-sat)
(pop 1)
; Invalid
(declare-fun _$t0@@12 () Int)
(declare-fun _$t1@@7 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_multi_abort3_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 17864) (let ((anon0$1_correct@@13  (=> (|$IsValid'u64'| _$t0@@12) (=> (and (|$IsValid'u64'| _$t1@@7) (= _$t0@@12 _$t0@@12)) (=> (and (and (= _$t1@@7 _$t1@@7) (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 15473) (- 0 17941)))) (or (< _$t0@@12 _$t1@@7) (= _$t0@@12 _$t1@@7)))))))
(let ((anon0_correct@@13  (=> (= (ControlFlow 0 17864) 15473) anon0$1_correct@@13)))
anon0_correct@@13)))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 17864)))
(get-value ((ControlFlow 0 15473)))
(assert (not (= (ControlFlow 0 15473) (- 17941))))
(check-sat)
(pop 1)
; Invalid
(declare-fun _$t0@@13 () Int)
(declare-fun _$t1@@8 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_multi_abort4$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 17961) (let ((anon0$1_correct@@14  (=> (|$IsValid'u64'| _$t0@@13) (=> (and (|$IsValid'u64'| _$t1@@8) (= _$t0@@13 _$t0@@13)) (=> (and (and (= _$t1@@8 _$t1@@8) (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 15599) (- 0 18038)))) (or (or (< _$t0@@13 _$t1@@8) (= _$t0@@13 _$t1@@8)) (> _$t0@@13 _$t1@@8)))))))
(let ((anon0_correct@@14  (=> (= (ControlFlow 0 17961) 15599) anon0$1_correct@@14)))
anon0_correct@@14)))
))
(check-sat)
(pop 1)
; Valid
(declare-fun $t2@0 () Bool)
(declare-fun _$t0@@14 () Int)
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_multi_abort5_incorrect$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 18067) (let ((anon6_Else_correct@@3  (=> (not $t2@0) (and (=> (= (ControlFlow 0 15705) (- 0 18172)) (not true)) (=> (not true) (=> (= (ControlFlow 0 15705) (- 0 18179)) (not (> _$t0@@14 0))))))))
(let ((anon6_Then_correct@@3  (=> (and (and $t2@0 (|$IsValid'u64'| 1)) (and (= 1 1) (= (ControlFlow 0 15739) (- 0 18149)))) (or true (> _$t0@@14 0)))))
(let ((anon0$1_correct@@15  (=> (and (and (|$IsValid'u64'| _$t0@@14) (= _$t0@@14 _$t0@@14)) (and (|$IsValid'u64'| 0) (= $t2@0 (= _$t0@@14 0)))) (and (=> (= (ControlFlow 0 15681) 15739) anon6_Then_correct@@3) (=> (= (ControlFlow 0 15681) 15705) anon6_Else_correct@@3)))))
(let ((anon0_correct@@15  (=> (= (ControlFlow 0 18067) 15681) anon0$1_correct@@15)))
anon0_correct@@15)))))
))
(check-sat)
(get-info :reason-unknown)
(get-value ((ControlFlow 0 0)))
(get-value ((ControlFlow 0 18067)))
(get-value ((ControlFlow 0 15681)))
(get-value ((ControlFlow 0 15705)))
(assert (not (= (ControlFlow 0 15705) (- 18172))))
(check-sat)
(pop 1)
; Invalid
(push 1)
(set-info :boogie-vc-id $42_TestAbortsIf_no_aborts_if$verify)
(assert (not
 (=> (= (ControlFlow 0 0) 18191) true)
))
(check-sat)
(pop 1)
; Valid
