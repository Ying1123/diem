(set-info :smt-lib-version 2.6)
(set-logic QF_AX)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)
(declare-sort Index 0)
(declare-sort Element 0)
(declare-fun a_345 () (Array Index Element))
(declare-fun a_347 () (Array Index Element))
(declare-fun a_349 () (Array Index Element))
(declare-fun a_351 () (Array Index Element))
(declare-fun a_353 () (Array Index Element))
(declare-fun a_354 () (Array Index Element))
(declare-fun a_356 () (Array Index Element))
(declare-fun a_358 () (Array Index Element))
(declare-fun a_360 () (Array Index Element))
(declare-fun a_362 () (Array Index Element))
(declare-fun a_364 () (Array Index Element))
(declare-fun a_366 () (Array Index Element))
(declare-fun a_368 () (Array Index Element))
(declare-fun a_370 () (Array Index Element))
(declare-fun a_372 () (Array Index Element))
(declare-fun a_374 () (Array Index Element))
(declare-fun a_375 () (Array Index Element))
(declare-fun a_376 () (Array Index Element))
(declare-fun a_378 () (Array Index Element))
(declare-fun a_380 () (Array Index Element))
(declare-fun a_382 () (Array Index Element))
(declare-fun a_383 () (Array Index Element))
(declare-fun a_385 () (Array Index Element))
(declare-fun a_387 () (Array Index Element))
(declare-fun a_389 () (Array Index Element))
(declare-fun a_391 () (Array Index Element))
(declare-fun a_393 () (Array Index Element))
(declare-fun a_395 () (Array Index Element))
(declare-fun a_397 () (Array Index Element))
(declare-fun a_399 () (Array Index Element))
(declare-fun a_401 () (Array Index Element))
(declare-fun a_403 () (Array Index Element))
(declare-fun e_344 () Element)
(declare-fun e_346 () Element)
(declare-fun e_348 () Element)
(declare-fun e_350 () Element)
(declare-fun e_352 () Element)
(declare-fun e_355 () Element)
(declare-fun e_357 () Element)
(declare-fun e_359 () Element)
(declare-fun e_361 () Element)
(declare-fun e_363 () Element)
(declare-fun e_365 () Element)
(declare-fun e_367 () Element)
(declare-fun e_369 () Element)
(declare-fun e_371 () Element)
(declare-fun e_373 () Element)
(declare-fun e_377 () Element)
(declare-fun e_379 () Element)
(declare-fun e_381 () Element)
(declare-fun e_384 () Element)
(declare-fun e_386 () Element)
(declare-fun e_388 () Element)
(declare-fun e_390 () Element)
(declare-fun e_392 () Element)
(declare-fun e_394 () Element)
(declare-fun e_396 () Element)
(declare-fun e_398 () Element)
(declare-fun e_400 () Element)
(declare-fun e_402 () Element)
(declare-fun a1 () (Array Index Element))
(declare-fun i0 () Index)
(declare-fun i1 () Index)
(declare-fun i2 () Index)
(declare-fun i3 () Index)
(declare-fun i4 () Index)
(declare-fun i5 () Index)
(declare-fun i6 () Index)
(declare-fun i7 () Index)
(assert (= a_345 (store a1 i3 e_344)))
(assert (= a_347 (store a_345 i7 e_346)))
(assert (= a_349 (store a_347 i4 e_348)))
(assert (= a_351 (store a_349 i0 e_350)))
(assert (= a_353 (store a_351 i7 e_352)))
(assert (= a_354 (store a_353 i7 e_352)))
(assert (= a_356 (store a_354 i1 e_355)))
(assert (= a_358 (store a_356 i7 e_357)))
(assert (= a_360 (store a_358 i6 e_359)))
(assert (= a_362 (store a_360 i5 e_361)))
(assert (= a_364 (store a_362 i1 e_363)))
(assert (= a_366 (store a_364 i6 e_365)))
(assert (= a_368 (store a_366 i6 e_367)))
(assert (= a_370 (store a_368 i2 e_369)))
(assert (= a_372 (store a_370 i3 e_371)))
(assert (= a_374 (store a_372 i0 e_373)))
(assert (= a_375 (store a1 i7 e_346)))
(assert (= a_376 (store a_375 i3 e_344)))
(assert (= a_378 (store a_376 i4 e_377)))
(assert (= a_380 (store a_378 i0 e_379)))
(assert (= a_382 (store a_380 i7 e_381)))
(assert (= a_383 (store a_382 i7 e_381)))
(assert (= a_385 (store a_383 i7 e_384)))
(assert (= a_387 (store a_385 i1 e_386)))
(assert (= a_389 (store a_387 i6 e_388)))
(assert (= a_391 (store a_389 i5 e_390)))
(assert (= a_393 (store a_391 i6 e_392)))
(assert (= a_395 (store a_393 i1 e_394)))
(assert (= a_397 (store a_395 i2 e_396)))
(assert (= a_399 (store a_397 i6 e_398)))
(assert (= a_401 (store a_399 i1 e_400)))
(assert (= a_403 (store a_401 i3 e_402)))
(assert (= e_344 (select a1 i7)))
(assert (= e_346 (select a1 i3)))
(assert (= e_348 (select a_347 i0)))
(assert (= e_350 (select a_347 i4)))
(assert (= e_352 (select a_351 i7)))
(assert (= e_355 (select a_354 i7)))
(assert (= e_357 (select a_354 i1)))
(assert (= e_359 (select a_358 i5)))
(assert (= e_361 (select a_358 i6)))
(assert (= e_363 (select a_362 i6)))
(assert (= e_365 (select a_362 i1)))
(assert (= e_367 (select a_366 i2)))
(assert (= e_369 (select a_366 i6)))
(assert (= e_371 (select a_370 i0)))
(assert (= e_373 (select a_370 i3)))
(assert (= e_377 (select a_376 i0)))
(assert (= e_379 (select a_376 i4)))
(assert (= e_381 (select a_380 i7)))
(assert (= e_384 (select a_383 i1)))
(assert (= e_386 (select a_383 i7)))
(assert (= e_388 (select a_387 i5)))
(assert (= e_390 (select a_387 i6)))
(assert (= e_392 (select a_391 i1)))
(assert (= e_394 (select a_391 i6)))
(assert (= e_396 (select a_395 i6)))
(assert (= e_398 (select a_395 i2)))
(assert (= e_400 (select a_399 i3)))
(assert (= e_402 (select a_399 i1)))
(assert (not (= a_374 a_403)))
(check-sat)
(exit)
