21:43:50 [DEBUG] (1) bytecode::verification_analysis_v2: marking `TestNaiveSort::verify_sort` to be verified
21:43:50 [DEBUG] (1) boogie_backend::bytecode_translator: translating module Vector
[INFO] translating module TestNaiveSort
21:43:50 [DEBUG] (1) move_prover: writing boogie to `output.bpl`
[INFO] running solver
21:43:50 [DEBUG] (1) boogie_backend::boogie_wrapper: command line: /home/ying/.dotnet/tools/boogie -doModSetAnalysis -printVerifiedProceduresCount:0 -printModel:1 -enhancedErrorMessages:1 -monomorphize -proverOpt:PROVER_PATH=/home/ying/bin/z3 -proverOpt:O:smt.QI.EAGER_THRESHOLD=100 -proverOpt:O:smt.QI.LAZY_THRESHOLD=100 -vcsCores:4 -proverLog:@PROC@.smt output.bpl
21:43:50 [DEBUG] (15) boogie_backend::prover_task_runner: runing Boogie command with seed 1
21:44:33 [DEBUG] (1) boogie_backend::boogie_wrapper: analyzing boogie output
21:44:33 [DEBUG] (1) boogie_backend::boogie_wrapper: writing boogie log to output.bpl.log
[INFO] 0.012s build, 0.013s trafo, 0.003s gen, 42.774s verify
error: verification out of resources/timeout (global timeout set to 40s)

    ┌── /home/ying/diem/language/move-prover/tests/sources/functional/naive_sort2.move:6:2 ───
    │
  6 │ ╭     public fun verify_sort(v: &mut vector<u64>): vector<u64> {
  7 │ │ 		let vlen = Vector::length(v);
  8 │ │ 		spec {
  9 │ │ 			assume len(v) == 2;
 10 │ │ 		};
 11 │ │ 		let p = &mut Vector::empty<u64>();
 12 │ │ 		let i = 0;
 13 │ │ 		while ({
 14 │ │ 			spec {
 15 │ │ 				assert len(p) == i;
 16 │ │ 				assert forall k in 0..len(p): p[k] == k;
 17 │ │ 			};
 18 │ │ 			(i < vlen)
 19 │ │ 		}) {
 20 │ │ 			Vector::push_back(p, i);
 21 │ │ 			i = i + 1;
 22 │ │ 		};
 23 │ │ 		if (vlen <= 1) return *p;
 24 │ │ 
 25 │ │ 		let i = 0;
 26 │ │ 		let j = 1;
 27 │ │         while ({
 28 │ │ 			spec {
 29 │ │ 				assert i < j;
 30 │ │ 				assert len(v) == vlen;
 31 │ │ 				assert forall k in 0..i-1: v[k] <= v[k + 1];
 32 │ │ 				assert forall k in i+1..j: v[i] <= v[k];
 33 │ │ 		        assert forall k in 0..len(v): v[k] == old(v)[p[k]];
 34 │ │ 				// p is a permutation
 35 │ │ 				assert forall k in 0..vlen: 0 <= p[k] && p[k] < vlen;
 36 │ │ 				assert forall k in 0..vlen: forall l in 0..vlen: k != l ==> p[k] != p[l];
 37 │ │ 			};
 38 │ │ 			(j < vlen)
 39 │ │ 		}) {
 40 │ │ 			if (*Vector::borrow(v, i) > *Vector::borrow(v, j)) {
 41 │ │ 				Vector::swap(p, i, j);
 42 │ │ 				Vector::swap(v, i, j);
 43 │ │ 			};
 44 │ │ 			if (j + 1 < vlen) {
 45 │ │ 				j = j + 1;
 46 │ │ 			} else {
 47 │ │ 				i = i + 1;
 48 │ │ 				j = i + 1;
 49 │ │ 			};
 50 │ │ 		};
 51 │ │ 		*p
 52 │ │     }
    │ ╰─────^
    │

exiting with boogie verification errors
