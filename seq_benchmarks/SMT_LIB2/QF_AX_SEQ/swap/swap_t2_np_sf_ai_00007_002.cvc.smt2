(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status unsat)

(declare-sort Element 0)
(declare-fun a_627 () (Seq Element))
(declare-fun a_629 () (Seq Element))
(declare-fun a_631 () (Seq Element))
(declare-fun a_633 () (Seq Element))
(declare-fun a_635 () (Seq Element))
(declare-fun a_637 () (Seq Element))
(declare-fun a_639 () (Seq Element))
(declare-fun a_641 () (Seq Element))
(declare-fun a_643 () (Seq Element))
(declare-fun a_645 () (Seq Element))
(declare-fun a_647 () (Seq Element))
(declare-fun a_649 () (Seq Element))
(declare-fun a_651 () (Seq Element))
(declare-fun a_653 () (Seq Element))
(declare-fun a_654 () (Seq Element))
(declare-fun a_655 () (Seq Element))
(declare-fun a_657 () (Seq Element))
(declare-fun a_659 () (Seq Element))
(declare-fun a_661 () (Seq Element))
(declare-fun a_663 () (Seq Element))
(declare-fun a_665 () (Seq Element))
(declare-fun a_667 () (Seq Element))
(declare-fun a_669 () (Seq Element))
(declare-fun a_671 () (Seq Element))
(declare-fun a_673 () (Seq Element))
(declare-fun a_675 () (Seq Element))
(declare-fun a_677 () (Seq Element))
(declare-fun a_679 () (Seq Element))
(declare-fun e_626 () Element)
(declare-fun e_628 () Element)
(declare-fun e_630 () Element)
(declare-fun e_632 () Element)
(declare-fun e_634 () Element)
(declare-fun e_636 () Element)
(declare-fun e_638 () Element)
(declare-fun e_640 () Element)
(declare-fun e_642 () Element)
(declare-fun e_644 () Element)
(declare-fun e_646 () Element)
(declare-fun e_648 () Element)
(declare-fun e_650 () Element)
(declare-fun e_652 () Element)
(declare-fun e_656 () Element)
(declare-fun e_658 () Element)
(declare-fun e_660 () Element)
(declare-fun e_662 () Element)
(declare-fun e_664 () Element)
(declare-fun e_666 () Element)
(declare-fun e_668 () Element)
(declare-fun e_670 () Element)
(declare-fun e_672 () Element)
(declare-fun e_674 () Element)
(declare-fun e_676 () Element)
(declare-fun e_678 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(assert (= a_627 (seq.update a1 i1 (seq.unit e_626))))
(assert (= a_629 (seq.update a_627 i5 (seq.unit e_628))))
(assert (= a_631 (seq.update a_629 i0 (seq.unit e_630))))
(assert (= a_633 (seq.update a_631 i1 (seq.unit e_632))))
(assert (= a_635 (seq.update a_633 i2 (seq.unit e_634))))
(assert (= a_637 (seq.update a_635 i6 (seq.unit e_636))))
(assert (= a_639 (seq.update a_637 i1 (seq.unit e_638))))
(assert (= a_641 (seq.update a_639 i5 (seq.unit e_640))))
(assert (= a_643 (seq.update a_641 i3 (seq.unit e_642))))
(assert (= a_645 (seq.update a_643 i2 (seq.unit e_644))))
(assert (= a_647 (seq.update a_645 i2 (seq.unit e_646))))
(assert (= a_649 (seq.update a_647 i3 (seq.unit e_648))))
(assert (= a_651 (seq.update a_649 i6 (seq.unit e_650))))
(assert (= a_653 (seq.update a_651 i4 (seq.unit e_652))))
(assert (= a_654 (seq.update a1 i5 (seq.unit e_628))))
(assert (= a_655 (seq.update a_654 i1 (seq.unit e_626))))
(assert (= a_657 (seq.update a_655 i1 (seq.unit e_656))))
(assert (= a_659 (seq.update a_657 i0 (seq.unit e_658))))
(assert (= a_661 (seq.update a_659 i2 (seq.unit e_660))))
(assert (= a_663 (seq.update a_661 i6 (seq.unit e_662))))
(assert (= a_665 (seq.update a_663 i1 (seq.unit e_664))))
(assert (= a_667 (seq.update a_665 i5 (seq.unit e_666))))
(assert (= a_669 (seq.update a_667 i3 (seq.unit e_668))))
(assert (= a_671 (seq.update a_669 i2 (seq.unit e_670))))
(assert (= a_673 (seq.update a_671 i2 (seq.unit e_672))))
(assert (= a_675 (seq.update a_673 i3 (seq.unit e_674))))
(assert (= a_677 (seq.update a_675 i4 (seq.unit e_676))))
(assert (= a_679 (seq.update a_677 i6 (seq.unit e_678))))
(assert (= e_626 (seq.nth a1 i5)))
(assert (= e_628 (seq.nth a1 i1)))
(assert (= e_630 (seq.nth a_629 i1)))
(assert (= e_632 (seq.nth a_629 i0)))
(assert (= e_634 (seq.nth a_633 i6)))
(assert (= e_636 (seq.nth a_633 i2)))
(assert (= e_638 (seq.nth a_637 i5)))
(assert (= e_640 (seq.nth a_637 i1)))
(assert (= e_642 (seq.nth a_641 i2)))
(assert (= e_644 (seq.nth a_641 i3)))
(assert (= e_646 (seq.nth a_645 i3)))
(assert (= e_648 (seq.nth a_645 i2)))
(assert (= e_650 (seq.nth a_649 i4)))
(assert (= e_652 (seq.nth a_649 i6)))
(assert (= e_656 (seq.nth a_655 i0)))
(assert (= e_658 (seq.nth a_655 i1)))
(assert (= e_660 (seq.nth a_659 i6)))
(assert (= e_662 (seq.nth a_659 i2)))
(assert (= e_664 (seq.nth a_663 i5)))
(assert (= e_666 (seq.nth a_663 i1)))
(assert (= e_668 (seq.nth a_667 i2)))
(assert (= e_670 (seq.nth a_667 i3)))
(assert (= e_672 (seq.nth a_671 i3)))
(assert (= e_674 (seq.nth a_671 i2)))
(assert (= e_676 (seq.nth a_675 i6)))
(assert (= e_678 (seq.nth a_675 i4)))
(assert (not (= a_653 a_679)))
(check-sat)
(exit)
