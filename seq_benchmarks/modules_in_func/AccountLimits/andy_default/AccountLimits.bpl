
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for vectors, based on Z3 sequences.
//
// This version of vectors has extensional equality.
//
// This implementation works to some extend but has been so far been much slower/times out compared to
// non-extensional array versions, even though the later require stratified custom equality.
//
// Major issues seem to be:
//
// (a) UpdateVec, SwapVec etc. are slow. UpdateVec requires a ConcatVec of two SliceVec.
// (b) ReverseVec needs to be fully axiomatized with quantifiers which makes it infeasible
//     to work in practice.

type {:builtin "Seq"} Vec _;

function {:builtin "seq.empty"} EmptyVec<T>(): Vec T;

function {:builtin "seq.unit"} MakeVec1<T>(v: T): Vec T;

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    ConcatVec(MakeVec1(v1), MakeVec1(v2))
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    ConcatVec(MakeVec2(v1, v2), MakeVec1(v3))
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    ConcatVec(MakeVec3(v1, v2, v3), MakeVec1(v4))
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    ConcatVec(v, MakeVec1(elem))
}

function {:builtin "seq.nth"} ReadVec<T>(v: Vec T, i: int): T;

function {:builtin "seq.len"} LenVec<T>(v: Vec T): int;

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    LenVec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    SliceVec(v, 0, LenVec(v) - 1)
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    ConcatVec(SliceVec(v, 0, i), SliceVec(v, i + 1, LenVec(v)))
}

function {:builtin "seq.++"} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec3<T>(v1: Vec T, v2: Vec T, v3: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec4<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec5<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T, v5: Vec T): Vec T;

function {:inline} ReverseVec<T>(v: Vec T): Vec T;
axiom {:ctor "Vec"} (forall<T> v: Vec T:: {ReverseVec(v)}
        (var r := ReverseVec(v);
         LenVec(r) == LenVec(v) &&
         (forall i: int:: {ReadVec(r, i)} i >= 0 && i < LenVec(r) ==> ReadVec(r, i) == ReadVec(v, LenVec(v) - i - 1))));

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    ExtractVec(v, i, j - i)
}
/*private*/ function {:builtin "seq.extract"} ExtractVec<T>(v: Vec T, start: int, len: int): Vec T;

//function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
//    ConcatVec3(SliceVec(v, 0, i), MakeVec1(elem), SliceVec(v, i + 1, LenVec(v)))
//}
function {:builtin "seq.update"} Vec_Update<T>(v: Vec T, i: int, x: Vec T): Vec T;

function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
	Vec_Update(v, i, MakeVec1(elem))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    UpdateVec(UpdateVec(v, j, ReadVec(v, i)), i, ReadVec(v, j))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    ContainsSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.contains"} ContainsSubVec<T>(v: Vec T, sub: Vec T): bool;

function {:inline} IndexOfVec<T>(v: Vec T, e: T): int {
    IndexOfSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.indexof"} IndexOfSubVec<T>(v: Vec T, sub: Vec T): int;

function {:inline} InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`


function {:inline} $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_VASPDomain_VASPDomain`


function {:inline} $IsEqual'vec'$1_VASPDomain_VASPDomain''(v1: Vec ($1_VASPDomain_VASPDomain), v2: Vec ($1_VASPDomain_VASPDomain)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_VASPDomain_VASPDomain''(v: Vec ($1_VASPDomain_VASPDomain)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_VASPDomain_VASPDomain'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain): int;
axiom (forall v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain:: {$IndexOfVec'$1_VASPDomain_VASPDomain'(v, e)}
    (var i := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
     if (!$ContainsVec'$1_VASPDomain_VASPDomain'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_VASPDomain_VASPDomain'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_VASPDomain_VASPDomain'() returns (v: Vec ($1_VASPDomain_VASPDomain)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_VASPDomain_VASPDomain'(): Vec ($1_VASPDomain_VASPDomain) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), val: $1_VASPDomain_VASPDomain) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), val: $1_VASPDomain_VASPDomain): Vec ($1_VASPDomain_VASPDomain) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    var v: Vec ($1_VASPDomain_VASPDomain);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), other: Vec ($1_VASPDomain_VASPDomain)) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain))) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int) returns (dst: $1_VASPDomain_VASPDomain) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), index: int)
returns (dst: $Mutation ($1_VASPDomain_VASPDomain), m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int): $1_VASPDomain_VASPDomain {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int, j: int) returns (m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), i: int, j: int): Vec ($1_VASPDomain_VASPDomain) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_VASPDomain_VASPDomain'(m: $Mutation (Vec ($1_VASPDomain_VASPDomain)), i: int) returns (e: $1_VASPDomain_VASPDomain, m': $Mutation (Vec ($1_VASPDomain_VASPDomain)))
{
    var len: int;
    var v: Vec ($1_VASPDomain_VASPDomain);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res: bool)  {
    res := $ContainsVec'$1_VASPDomain_VASPDomain'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_VASPDomain_VASPDomain'(v: Vec ($1_VASPDomain_VASPDomain), e: $1_VASPDomain_VASPDomain) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_VASPDomain_VASPDomain'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_ValidatorConfig_Config`


function {:inline} $IsEqual'vec'$1_ValidatorConfig_Config''(v1: Vec ($1_ValidatorConfig_Config), v2: Vec ($1_ValidatorConfig_Config)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_ValidatorConfig_Config''(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_ValidatorConfig_Config'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config): int;
axiom (forall v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config:: {$IndexOfVec'$1_ValidatorConfig_Config'(v, e)}
    (var i := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
     if (!$ContainsVec'$1_ValidatorConfig_Config'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_ValidatorConfig_Config'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_ValidatorConfig_Config'() returns (v: Vec ($1_ValidatorConfig_Config)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_ValidatorConfig_Config'(): Vec ($1_ValidatorConfig_Config) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), val: $1_ValidatorConfig_Config) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), val: $1_ValidatorConfig_Config): Vec ($1_ValidatorConfig_Config) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    var v: Vec ($1_ValidatorConfig_Config);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), other: Vec ($1_ValidatorConfig_Config)) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config))) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int) returns (dst: $1_ValidatorConfig_Config) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), index: int)
returns (dst: $Mutation ($1_ValidatorConfig_Config), m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int): $1_ValidatorConfig_Config {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int, j: int) returns (m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), i: int, j: int): Vec ($1_ValidatorConfig_Config) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_ValidatorConfig_Config'(m: $Mutation (Vec ($1_ValidatorConfig_Config)), i: int) returns (e: $1_ValidatorConfig_Config, m': $Mutation (Vec ($1_ValidatorConfig_Config)))
{
    var len: int;
    var v: Vec ($1_ValidatorConfig_Config);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res: bool)  {
    res := $ContainsVec'$1_ValidatorConfig_Config'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config), e: $1_ValidatorConfig_Config) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_ValidatorConfig_Config'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`


function {:inline} $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`


function {:inline} $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`


function {:inline} $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native Signer

type {:datatype} $signer;
function {:constructor} $signer($addr: int): $signer;
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'($addr#$signer(s))
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_Signer_borrow_address(signer: $signer) returns (res: int) {
    res := $addr#$signer(signer);
}

function {:inline} $1_Signer_$borrow_address(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_spec_address_of(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_is_txn_signer(s: $signer): bool;

function {:inline} $1_Signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize


// ==================================================================================
// Native Event module




// Publishing a generator does nothing. Currently we just ignore this function and do not represent generators
// at all because they are not publicly exposed by the Event module.
// TODO: we should check (and abort with the right code) if a generator already exists for
// the signer.

procedure {:inline 1} $1_Event_publish_generator(signer: $signer) {
}

// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DesignatedDealer_ReceivedMintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(a: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', b: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''(h: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): bool {
    true
}

// Embed event `$1_DesignatedDealer_ReceivedMintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(e: $1_DesignatedDealer_ReceivedMintEvent): $EventRep;
axiom (forall v1, v2: $1_DesignatedDealer_ReceivedMintEvent :: {$ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1), $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2)}
    $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(v1, v2) <==> $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v1) == $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DesignatedDealer_ReceivedMintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DesignatedDealer_ReceivedMintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
    var handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DesignatedDealer_ReceivedMintEvent'(handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent') {
}

function {:inline} $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DesignatedDealer_ReceivedMintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent', msg: $1_DesignatedDealer_ReceivedMintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DesignatedDealer_ReceivedMintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_VASPDomain_VASPDomainEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(a: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', b: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''(h: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): bool {
    true
}

// Embed event `$1_VASPDomain_VASPDomainEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_VASPDomain_VASPDomainEvent'(e: $1_VASPDomain_VASPDomainEvent): $EventRep;
axiom (forall v1, v2: $1_VASPDomain_VASPDomainEvent :: {$ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1), $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2)}
    $IsEqual'$1_VASPDomain_VASPDomainEvent'(v1, v2) <==> $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v1) == $ToEventRep'$1_VASPDomain_VASPDomainEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_VASPDomain_VASPDomainEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_VASPDomain_VASPDomainEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
    var handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_VASPDomain_VASPDomainEvent'(handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent') {
}

function {:inline} $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_VASPDomain_VASPDomainEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_VASPDomain_VASPDomainEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent', msg: $1_VASPDomain_VASPDomainEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_VASPDomain_VASPDomainEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }

// spec fun at /home/ying/diem/language/move-stdlib/modules/Signer.move:12:5+77
function {:inline} $1_Signer_$address_of(s: $signer): int {
    $1_Signer_$borrow_address(s)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:138:5+89
function {:inline} $1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    !$ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:158:5+90
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:120:10+104
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816))
}

// struct DiemTimestamp::CurrentTimeMicroseconds at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:20:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// fun DiemTimestamp::is_genesis [baseline] at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:138:5+89
procedure {:inline 1} $1_DiemTimestamp_is_genesis() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 0xa550c18 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:139:42+9
    assume {:print "$at(18,5897,5906)"} true;
    $t0 := 173345816;
    assume $IsValid'address'($t0);

    // $t1 := exists<DiemTimestamp::CurrentTimeMicroseconds>($t0) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:139:10+6
    $t1 := $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $t0);

    // $t2 := !($t1) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:139:9+1
    call $t2 := $Not($t1);

    // trace_return[0]($t2) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:139:9+43
    assume {:print "$track_return(3,2,0):", $t2} $t2 == $t2;

    // label L1 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:140:5+1
    assume {:print "$at(18,5912,5913)"} true;
L1:

    // return $t2 at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:140:5+1
    $ret0 := $t2;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:481:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:485:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:489:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 1)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:493:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:497:9+124
function {:inline} $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 3)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:501:9+142
function {:inline} $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 4)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:505:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 5)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:509:9+126
function {:inline} $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 6)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:513:9+229
function {:inline} $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    (($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr)) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:519:9+169
function {:inline} $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId): bool {
    (exists a: int :: $IsValid'address'(a) && (($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, a))))
}

// struct Roles::RoleId at /home/ying/diem/language/diem-framework/modules/Roles.move:53:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// fun Roles::grant_role [verification] at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
procedure {:timeLimit 40} $1_Roles_grant_role$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $1_Roles_RoleId;
    var $t0: $signer;
    var $t1: int;
    var $1_Roles_RoleId_$modifies: [int]bool;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_Roles_RoleId_$memory#120: $Memory $1_Roles_RoleId;
    var $1_Roles_RoleId_$memory#139: $Memory $1_Roles_RoleId;
    var $1_ValidatorConfig_ValidatorConfig_$memory#140: $Memory $1_ValidatorConfig_ValidatorConfig;
    var $1_DualAttestation_Limit_$memory#141: $Memory $1_DualAttestation_Limit;
    var $1_AccountFreezing_FreezingBit_$memory#142: $Memory $1_AccountFreezing_FreezingBit;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(28,7001,7200)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    assume $IsValid'u64'($t1);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:173:9+44
    assume {:print "$at(28,7316,7360)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // assume Implies(Eq<u64>($t1, 0), Eq<address>($t4, a550c18)) at /home/ying/diem/language/diem-framework/modules/Roles.move:175:9+60
    assume {:print "$at(28,7419,7479)"} true;
    assume ($IsEqual'u64'($t1, 0) ==> $IsEqual'address'($t4, 173345816));

    // assume Implies(Eq<u64>($t1, 1), Eq<address>($t4, b1e55ed)) at /home/ying/diem/language/diem-framework/modules/Roles.move:176:9+80
    assume {:print "$at(28,7488,7568)"} true;
    assume ($IsEqual'u64'($t1, 1) ==> $IsEqual'address'($t4, 186537453));

    // assume CanModify<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    assume {:print "$at(28,7822,7852)"} true;
    assume $1_Roles_RoleId_$modifies[$1_Signer_$address_of($t0)];

    // @120 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:184:9+30
    $1_Roles_RoleId_$memory#120 := $1_Roles_RoleId_$memory;

    // trace_local[account]($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+1
    assume {:print "$at(28,7001,7002)"} true;
    assume {:print "$track_local(4,12,0):", $t0} $t0 == $t0;

    // trace_local[role_id]($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+1
    assume {:print "$track_local(4,12,1):", $t1} $t1 == $t1;

    // $t5 := opaque begin: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:32+27
    assume {:print "$at(28,7081,7108)"} true;

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:32+27
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:32+27
    assume $IsEqual'address'($t5, $1_Signer_spec_address_of($t0));

    // $t5 := opaque end: Signer::address_of($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:32+27

    // $t6 := exists<Roles::RoleId>($t5) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:17+6
    $t6 := $ResourceExists($1_Roles_RoleId_$memory, $t5);

    // $t7 := !($t6) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:16+1
    call $t7 := $Not($t6);

    // $t8 := 0 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:88+8
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := opaque begin: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:62+35

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:62+35
    assume $IsValid'u64'($t9);

    // assume Eq<u64>($t9, 6) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:62+35
    assume $IsEqual'u64'($t9, 6);

    // $t9 := opaque end: Errors::already_published($t8) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:62+35

    // trace_local[tmp#$3]($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89
    assume {:print "$track_local(4,12,3):", $t9} $t9 == $t9;

    // trace_local[tmp#$2]($t7) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89
    assume {:print "$track_local(4,12,2):", $t7} $t7 == $t7;

    // if ($t7) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89
    if ($t7) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89
    assume {:print "$at(28,7058,7147)"} true;
    assume {:print "$track_abort(4,12):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89
    $t10 := $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:167:9+89
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/Roles.move:168:17+7
    assume {:print "$at(28,7165,7172)"} true;
L0:

    // $t11 := pack Roles::RoleId($t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:26+18
    $t11 := $1_Roles_RoleId($t1);

    // assert CanModify<Roles::RoleId>($t0) at /home/ying/diem/language/diem-framework/modules/Roles.move:168:9+7
    assert {:msg "assert_failed(28,7157,7164): caller does not have permission to modify `Roles::RoleId` at given address"}
      $1_Roles_RoleId_$modifies[$1_Signer_spec_address_of($t0)];

    // @139 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    // state save for global update invariants
    assume {:print "$at(28,7001,7200)"} true;
    $1_Roles_RoleId_$memory#139 := $1_Roles_RoleId_$memory;

    // @140 := save_mem(ValidatorConfig::ValidatorConfig) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    $1_ValidatorConfig_ValidatorConfig_$memory#140 := $1_ValidatorConfig_ValidatorConfig_$memory;

    // @141 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    $1_DualAttestation_Limit_$memory#141 := $1_DualAttestation_Limit_$memory;

    // @142 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/Roles.move:166:5+199
    $1_AccountFreezing_FreezingBit_$memory#142 := $1_AccountFreezing_FreezingBit_$memory;

    // move_to<Roles::RoleId>($t11, $t0) on_abort goto L3 with $t10 at /home/ying/diem/language/diem-framework/modules/Roles.move:168:9+7
    assume {:print "$at(28,7157,7164)"} true;
    if ($ResourceExists($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t0))) {
        call $ExecFailureAbort();
    } else {
        $1_Roles_RoleId_$memory := $ResourceUpdate($1_Roles_RoleId_$memory, $1_Signer_spec_address_of($t0), $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(28,7157,7164)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(4,12):", $t10} $t10 == $t10;
        goto L3;
    }

    // assert forall addr: TypeDomain<address>() where exists[@139]<Roles::RoleId>(addr): And(exists<Roles::RoleId>(addr), Eq<u64>(select Roles::RoleId.role_id(global[@139]<Roles::RoleId>(addr)), select Roles::RoleId.role_id(global<Roles::RoleId>(addr)))) at /home/ying/diem/language/diem-framework/modules/Roles.move:378:9+189
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:378:9+189
    assume {:print "$at(28,15262,15451)"} true;
    assert {:msg "assert_failed(28,15262,15451): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Roles_RoleId_$memory#139, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#139, addr)), $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr))))));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(28,19372,19463)"} true;
    assert {:msg "assert_failed(28,19372,19463): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume {:print "$at(28,19851,19972)"} true;
    assert {:msg "assert_failed(28,19851,19972): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume {:print "$at(28,20357,20476)"} true;
    assert {:msg "assert_failed(28,20357,20476): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume {:print "$at(28,20552,20681)"} true;
    assert {:msg "assert_failed(28,20552,20681): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume {:print "$at(28,20748,20867)"} true;
    assert {:msg "assert_failed(28,20748,20867): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume {:print "$at(28,20942,21070)"} true;
    assert {:msg "assert_failed(28,20942,21070): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume {:print "$at(28,21137,21263)"} true;
    assert {:msg "assert_failed(28,21137,21263): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume {:print "$at(28,21324,21444)"} true;
    assert {:msg "assert_failed(28,21324,21444): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume {:print "$at(28,21504,21623)"} true;
    assert {:msg "assert_failed(28,21504,21623): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume {:print "$at(39,3154,3291)"} true;
    assert {:msg "assert_failed(39,3154,3291): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where And(exists[@140]<ValidatorConfig::ValidatorConfig>(a), exists<ValidatorConfig::ValidatorConfig>(a)): Implies(Neq<Option::Option<address>>(select ValidatorConfig::ValidatorConfig.operator_account(global[@140]<ValidatorConfig::ValidatorConfig>(a)), select ValidatorConfig::ValidatorConfig.operator_account(global<ValidatorConfig::ValidatorConfig>(a))), And(Signer::is_txn_signer_addr(a), Roles::spec_has_validator_role_addr(a))) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:318:9+304
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:318:9+304
    assume {:print "$at(38,13733,14037)"} true;
    assert {:msg "assert_failed(38,13733,14037): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> (($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory#140, a) && $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, a)))  ==> ((!$IsEqual'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory#140, a)), $operator_account#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, a))) ==> ($1_Signer_is_txn_signer_addr(a) && $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, a)))));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume {:print "$at(38,14521,14633)"} true;
    assert {:msg "assert_failed(38,14521,14633): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume {:print "$at(38,14862,14974)"} true;
    assert {:msg "assert_failed(38,14862,14974): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume {:print "$at(38,15308,15415)"} true;
    assert {:msg "assert_failed(38,15308,15415): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assert forall a: TypeDomain<address>() where exists[@141]<DualAttestation::Limit>(a550c18): Implies(Neq<u64>(DualAttestation::spec_get_cur_microdiem_limit(), DualAttestation::spec_get_cur_microdiem_limit[@141]()), Roles::spec_signed_by_treasury_compliance_role()) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:558:9+214
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:558:9+214
    assume {:print "$at(22,24708,24922)"} true;
    assert {:msg "assert_failed(22,24708,24922): global memory invariant does not hold"}
      (forall a: int :: $IsValid'address'(a) ==> ($ResourceExists($1_DualAttestation_Limit_$memory#141, 173345816))  ==> ((!$IsEqual'u64'($1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory), $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory#141)) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume {:print "$at(22,25137,25346)"} true;
    assert {:msg "assert_failed(22,25137,25346): global memory invariant does not hold"}
      (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assert forall addr: TypeDomain<address>() where exists[@142]<AccountFreezing::FreezingBit>(addr): Implies(Neq<bool>(select AccountFreezing::FreezingBit.is_frozen(global<AccountFreezing::FreezingBit>(addr)), select AccountFreezing::FreezingBit.is_frozen(global[@142]<AccountFreezing::FreezingBit>(addr))), Roles::spec_signed_by_treasury_compliance_role()) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:219:9+237
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:219:9+237
    assume {:print "$at(4,8702,8939)"} true;
    assert {:msg "assert_failed(4,8702,8939): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountFreezing_FreezingBit_$memory#142, addr))  ==> ((!$IsEqual'bool'($is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)), $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory#142, addr))) ==> $1_Roles_spec_signed_by_treasury_compliance_role($1_Roles_RoleId_$memory))));

    // assert forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume {:print "$at(12,109678,109825)"} true;
    assert {:msg "assert_failed(12,109678,109825): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // label L2 at /home/ying/diem/language/diem-framework/modules/Roles.move:169:5+1
    assume {:print "$at(28,7199,7200)"} true;
L2:

    // assert Not(exists[@120]<Roles::RoleId>(Signer::$address_of[]($t0))) at /home/ying/diem/language/diem-framework/modules/Roles.move:181:9+62
    assume {:print "$at(28,7656,7718)"} true;
    assert {:msg "assert_failed(28,7656,7718): function does not abort under this condition"}
      !$ResourceExists($1_Roles_RoleId_$memory#120, $1_Signer_$address_of($t0));

    // assert exists<Roles::RoleId>(Signer::$address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:182:9+29
    assume {:print "$at(28,7727,7756)"} true;
    assert {:msg "assert_failed(28,7727,7756): post-condition does not hold"}
      $ResourceExists($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0));

    // assert Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(Signer::$address_of($t0))), $t1) at /home/ying/diem/language/diem-framework/modules/Roles.move:183:9+48
    assume {:print "$at(28,7765,7813)"} true;
    assert {:msg "assert_failed(28,7765,7813): post-condition does not hold"}
      $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $1_Signer_$address_of($t0))), $t1);

    // return () at /home/ying/diem/language/diem-framework/modules/Roles.move:183:9+48
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/Roles.move:169:5+1
    assume {:print "$at(28,7199,7200)"} true;
L3:

    // assert exists[@120]<Roles::RoleId>(Signer::$address_of[]($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:170:5+369
    assume {:print "$at(28,7205,7574)"} true;
    assert {:msg "assert_failed(28,7205,7574): abort not covered by any of the `aborts_if` clauses"}
      $ResourceExists($1_Roles_RoleId_$memory#120, $1_Signer_$address_of($t0));

    // assert And(exists[@120]<Roles::RoleId>(Signer::$address_of[]($t0)), Eq(6, $t10)) at /home/ying/diem/language/diem-framework/modules/Roles.move:170:5+369
    assert {:msg "assert_failed(28,7205,7574): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ($ResourceExists($1_Roles_RoleId_$memory#120, $1_Signer_$address_of($t0)) && $IsEqual'num'(6, $t10));

    // abort($t10) at /home/ying/diem/language/diem-framework/modules/Roles.move:170:5+369
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:63:5+153
function {:inline} $1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig, validator_operator_addr: int): bool {
    $ResourceExists($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, validator_operator_addr)
}

// struct ValidatorOperatorConfig::ValidatorOperatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:9:5+141
type {:datatype} $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:constructor} $1_ValidatorOperatorConfig_ValidatorOperatorConfig($human_name: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig;
function {:inline} $Update'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'_human_name(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, x: Vec (int)): $1_ValidatorOperatorConfig_ValidatorOperatorConfig {
    $1_ValidatorOperatorConfig_ValidatorOperatorConfig(x)
}
function $IsValid'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    $IsValid'vec'u8''($human_name#$1_ValidatorOperatorConfig_ValidatorOperatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorOperatorConfig_ValidatorOperatorConfig'(s1: $1_ValidatorOperatorConfig_ValidatorOperatorConfig, s2: $1_ValidatorOperatorConfig_ValidatorOperatorConfig): bool {
    s1 == s2
}
var $1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory: $Memory $1_ValidatorOperatorConfig_ValidatorOperatorConfig;

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_ValidatorConfig_Config'(v: Vec ($1_ValidatorConfig_Config)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_ValidatorConfig_Config'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_ValidatorConfig_Config'(t: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    !$1_Vector_$is_empty'$1_ValidatorConfig_Config'($vec#$1_Option_Option'$1_ValidatorConfig_Config'(t))
}

// struct Option::Option<address> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'address';
function {:constructor} $1_Option_Option'address'($vec: Vec (int)): $1_Option_Option'address';
function {:inline} $Update'$1_Option_Option'address''_vec(s: $1_Option_Option'address', x: Vec (int)): $1_Option_Option'address' {
    $1_Option_Option'address'(x)
}
function $IsValid'$1_Option_Option'address''(s: $1_Option_Option'address'): bool {
    $IsValid'vec'address''($vec#$1_Option_Option'address'(s))
}
function {:inline} $IsEqual'$1_Option_Option'address''(s1: $1_Option_Option'address', s2: $1_Option_Option'address'): bool {
    s1 == s2
}

// struct Option::Option<ValidatorConfig::Config> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_ValidatorConfig_Config';
function {:constructor} $1_Option_Option'$1_ValidatorConfig_Config'($vec: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config';
function {:inline} $Update'$1_Option_Option'$1_ValidatorConfig_Config''_vec(s: $1_Option_Option'$1_ValidatorConfig_Config', x: Vec ($1_ValidatorConfig_Config)): $1_Option_Option'$1_ValidatorConfig_Config' {
    $1_Option_Option'$1_ValidatorConfig_Config'(x)
}
function $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''(s: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    $IsValid'vec'$1_ValidatorConfig_Config''($vec#$1_Option_Option'$1_ValidatorConfig_Config'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_ValidatorConfig_Config''(s1: $1_Option_Option'$1_ValidatorConfig_Config', s2: $1_Option_Option'$1_ValidatorConfig_Config'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::KeyRotationCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::WithdrawCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:84:5+84
function {:inline} $1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    $ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:229:5+176
function {:inline} $1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig, addr: int): bool {
    ($ResourceExists($1_ValidatorConfig_ValidatorConfig_$memory, addr) && $1_Option_$is_some'$1_ValidatorConfig_Config'($config#$1_ValidatorConfig_ValidatorConfig($ResourceValue($1_ValidatorConfig_ValidatorConfig_$memory, addr))))
}

// struct ValidatorConfig::ValidatorConfig at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:22:5+260
type {:datatype} $1_ValidatorConfig_ValidatorConfig;
function {:constructor} $1_ValidatorConfig_ValidatorConfig($config: $1_Option_Option'$1_ValidatorConfig_Config', $operator_account: $1_Option_Option'address', $human_name: Vec (int)): $1_ValidatorConfig_ValidatorConfig;
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_config(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'$1_ValidatorConfig_Config'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig(x, $operator_account#$1_ValidatorConfig_ValidatorConfig(s), $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_operator_account(s: $1_ValidatorConfig_ValidatorConfig, x: $1_Option_Option'address'): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), x, $human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $Update'$1_ValidatorConfig_ValidatorConfig'_human_name(s: $1_ValidatorConfig_ValidatorConfig, x: Vec (int)): $1_ValidatorConfig_ValidatorConfig {
    $1_ValidatorConfig_ValidatorConfig($config#$1_ValidatorConfig_ValidatorConfig(s), $operator_account#$1_ValidatorConfig_ValidatorConfig(s), x)
}
function $IsValid'$1_ValidatorConfig_ValidatorConfig'(s: $1_ValidatorConfig_ValidatorConfig): bool {
    $IsValid'$1_Option_Option'$1_ValidatorConfig_Config''($config#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'$1_Option_Option'address''($operator_account#$1_ValidatorConfig_ValidatorConfig(s))
      && $IsValid'vec'u8''($human_name#$1_ValidatorConfig_ValidatorConfig(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_ValidatorConfig'(s1: $1_ValidatorConfig_ValidatorConfig, s2: $1_ValidatorConfig_ValidatorConfig): bool {
    s1 == s2
}
var $1_ValidatorConfig_ValidatorConfig_$memory: $Memory $1_ValidatorConfig_ValidatorConfig;

// struct ValidatorConfig::Config at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:16:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    s1 == s2
}

// struct SlidingNonce::SlidingNonce at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:11:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:95:5+260
function {:inline} $1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): $1_DiemSystem_DiemSystem {
    (var addr := 173345816; $payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($ResourceValue($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:457:9+84
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816)
}

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:31:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    s1 == s2
}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:41:5+65
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::NewEpochEvent at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:26:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:647:10+105
function {:inline} $1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): Vec ($1_DiemSystem_ValidatorInfo) {
    $validators#$1_DiemSystem_DiemSystem($1_DiemConfig_$get'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))
}

// struct DiemSystem::DiemSystem at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:48:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    s1 == s2
}

// struct DiemSystem::CapabilityHolder at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:39:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:18:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    s1 == s2
}

// struct FixedPoint32::FixedPoint32 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:17:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// struct RegisteredCurrencies::RegisteredCurrencies at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:13:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// struct Diem::Diem<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+58
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:58:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    s1 == s2
}

// struct Diem::CancelBurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:83:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    s1 == s2
}

// struct Diem::CurrencyInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::MintCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:44:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    s1 == s2
}

// struct Diem::Preburn<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::PreburnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:70:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    s1 == s2
}

// struct Diem::ToXDXExchangeRateUpdateEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:94:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'#0'(window) + $time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    if ($1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XUS_XUS'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(window), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    if ($1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XDX_XDX'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(window), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): $1_AccountLimits_Window'#0' {
    if ($1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'#0'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'#0'(window), $limit_address#$1_AccountLimits_Window'#0'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_LimitsDefinition'#0' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): bool {
    $1_AccountLimits_spec_is_unrestricted'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', receiving: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', receiving: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', receiving: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:405:10+272
function {:inline} $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'(receiving: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow(receiving, ($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(receiving) + amount)), ($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(receiving) + amount))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:405:10+272
function {:inline} $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'(receiving: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow(receiving, ($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(receiving) + amount)), ($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(receiving) + amount))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:405:10+272
function {:inline} $1_AccountLimits_spec_update_inflow'#0'(receiving: $1_AccountLimits_Window'#0', amount: int): $1_AccountLimits_Window'#0' {
    $Update'$1_AccountLimits_Window'#0''_tracked_balance($Update'$1_AccountLimits_Window'#0''_window_inflow(receiving, ($window_inflow#$1_AccountLimits_Window'#0'(receiving) + amount)), ($tracked_balance#$1_AccountLimits_Window'#0'(receiving) + amount))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', sending: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', sending: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', sending: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:474:10+342
function {:inline} $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'(sending: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow(sending, ($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(sending) + amount)), if ((amount >= $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(sending))) then (0) else (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(sending) - amount)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:474:10+342
function {:inline} $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'(sending: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow(sending, ($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(sending) + amount)), if ((amount >= $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(sending))) then (0) else (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(sending) - amount)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:474:10+342
function {:inline} $1_AccountLimits_spec_update_outflow'#0'(sending: $1_AccountLimits_Window'#0', amount: int): $1_AccountLimits_Window'#0' {
    $Update'$1_AccountLimits_Window'#0''_tracked_balance($Update'$1_AccountLimits_Window'#0''_window_outflow(sending, ($window_outflow#$1_AccountLimits_Window'#0'(sending) + amount)), if ((amount >= $tracked_balance#$1_AccountLimits_Window'#0'(sending))) then (0) else (($tracked_balance#$1_AccountLimits_Window'#0'(sending) - amount)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'#0'(limits_def: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:518:9+115
function {:inline} $1_AccountLimits_spec_has_window_published'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'#0'_$memory, addr)
}

// struct AccountLimits::AccountLimitMutationCapability at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:11:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// struct AccountLimits::LimitsDefinition<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'#0';
function {:constructor} $1_AccountLimits_LimitsDefinition'#0'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'#0';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'#0''(s: $1_AccountLimits_LimitsDefinition'#0'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'#0''(s1: $1_AccountLimits_LimitsDefinition'#0', s2: $1_AccountLimits_LimitsDefinition'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0';

// struct AccountLimits::Window<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_Window'$1_XUS_XUS'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_start(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'(x, $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_limit_address(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''(s: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''(s1: $1_AccountLimits_Window'$1_XUS_XUS', s2: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS';

// struct AccountLimits::Window<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_Window'$1_XDX_XDX'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_start(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'(x, $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_limit_address(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''(s: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''(s1: $1_AccountLimits_Window'$1_XDX_XDX', s2: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX';

// struct AccountLimits::Window<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'#0';
function {:constructor} $1_AccountLimits_Window'#0'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'#0';
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_start(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'(x, $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_inflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), x, $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_outflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), x, $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_tracked_balance(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), x, $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_limit_address(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), x)
}
function $IsValid'$1_AccountLimits_Window'#0''(s: $1_AccountLimits_Window'#0'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'#0'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'#0''(s1: $1_AccountLimits_Window'#0', s2: $1_AccountLimits_Window'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0';

// fun AccountLimits::current_time [baseline] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
procedure {:inline 1} $1_AccountLimits_current_time() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t1 := DiemTimestamp::is_genesis() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:13+27
    assume {:print "$at(5,24276,24303)"} true;
    call $t1 := $1_DiemTimestamp_is_genesis();
    if ($abort_flag) {
        assume {:print "$at(5,24276,24303)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(19,2):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:42+1
L0:

    // $t3 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:42+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t0 := $t3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    $t0 := $t3;

    // trace_local[tmp#$0]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    assume {:print "$track_local(19,2,0):", $t3} $t3 == $t3;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
L2:

    // $t4 := opaque begin: DiemTimestamp::now_microseconds() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33

    // assume Identical($t5, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume ($t5 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    if ($t5) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
L7:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t2)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t2));

    // trace_abort($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume {:print "$at(5,24312,24345)"} true;
    assume {:print "$track_abort(19,2):", $t2} $t2 == $t2;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
L6:

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume $IsValid'u64'($t4);

    // assume Eq<u64>($t4, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume $IsEqual'u64'($t4, $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // $t4 := opaque end: DiemTimestamp::now_microseconds() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33

    // $t0 := $t4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    $t0 := $t4;

    // trace_local[tmp#$0]($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    assume {:print "$track_local(19,2,0):", $t4} $t4 == $t4;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
L3:

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    assume {:print "$track_return(19,2,0):", $t0} $t0 == $t0;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
    assume {:print "$at(5,24350,24351)"} true;
L4:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
    $ret0 := $t0;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
L5:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun AccountLimits::current_time [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
procedure {:timeLimit 40} $1_AccountLimits_current_time$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $temp_0'u64': int;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,24238,24351)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:523:5+113
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // $t1 := DiemTimestamp::is_genesis() on_abort goto L5 with $t2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:13+27
    assume {:print "$at(5,24276,24303)"} true;
    call $t1 := $1_DiemTimestamp_is_genesis();
    if ($abort_flag) {
        assume {:print "$at(5,24276,24303)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(19,2):", $t2} $t2 == $t2;
        goto L5;
    }

    // if ($t1) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    if ($t1) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:42+1
L0:

    // $t3 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:42+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t0 := $t3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    $t0 := $t3;

    // trace_local[tmp#$0]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    assume {:print "$track_local(19,2,0):", $t3} $t3 == $t3;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
L2:

    // $t4 := opaque begin: DiemTimestamp::now_microseconds() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33

    // assume Identical($t5, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume ($t5 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t5) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    if ($t5) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
L7:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t2)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t2));

    // trace_abort($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume {:print "$at(5,24312,24345)"} true;
    assume {:print "$track_abort(19,2):", $t2} $t2 == $t2;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
L6:

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume $IsValid'u64'($t4);

    // assume Eq<u64>($t4, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33
    assume $IsEqual'u64'($t4, $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // $t4 := opaque end: DiemTimestamp::now_microseconds() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:49+33

    // $t0 := $t4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    $t0 := $t4;

    // trace_local[tmp#$0]($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    assume {:print "$track_local(19,2,0):", $t4} $t4 == $t4;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
L3:

    // trace_return[0]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:524:9+73
    assume {:print "$track_return(19,2,0):", $t0} $t0 == $t0;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
    assume {:print "$at(5,24350,24351)"} true;
L4:

    // return $t0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
    $ret0 := $t0;
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
L5:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:525:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_receive_and_update_window [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
procedure {:timeLimit 40} $1_AccountLimits_can_receive_and_update_window$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'#0')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: $1_AccountLimits_LimitsDefinition'#0';
    var $t11: $1_AccountLimits_Window'#0';
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'#0';
    var $t19: bool;
    var $t20: bool;
    var $t21: bool;
    var $t22: $1_AccountLimits_Window'#0';
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: $Mutation (int);
    var $t48: int;
    var $t49: int;
    var $t50: $Mutation (int);
    var $t51: bool;
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'#0');
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#127: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t47));
    assume IsEmptyVec(p#$Mutation($t50));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,14869,16331)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume {:print "$at(5,16458,16485)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // @128 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    assume {:print "$at(5,14869,14870)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @127 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#127 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // $t11 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $t11 := $Dereference($t1);

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    assume {:print "$track_local(19,0,0):", $t0} $t0 == $t0;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t12 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:51+23
    assume {:print "$at(5,15067,15090)"} true;
    $t12 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t13 := exists<AccountLimits::LimitsDefinition<#0>>($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:16+6
    $t13 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t12);

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:99+18
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$track_local(19,0,3):", $t15} $t15 == $t15;

    // trace_local[tmp#$2]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$track_local(19,0,2):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$at(5,15025,15135)"} true;
    assume {:print "$track_abort(19,0):", $t15} $t15 == $t15;

    // $t16 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    $t16 := $t15;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    goto L14;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:75+9
    assume {:print "$at(5,15211,15220)"} true;
L0:

    // $t17 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:75+23
    $t17 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t18 := get_global<AccountLimits::LimitsDefinition<#0>>($t17) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(5,15169,15182)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // trace_local[limits_definition]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:13+17
    assume {:print "$track_local(19,0,10):", $t18} $t18 == $t18;

    // $t19 := opaque begin: AccountLimits::is_unrestricted<#0>($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume {:print "$at(5,15320,15354)"} true;

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume $IsValid'bool'($t19);

    // assume Eq<bool>($t19, AccountLimits::spec_is_unrestricted<#0>($t18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume $IsEqual'bool'($t19, $1_AccountLimits_spec_is_unrestricted'#0'($t18));

    // $t19 := opaque end: AccountLimits::is_unrestricted<#0>($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34

    // if ($t19) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
    if ($t19) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
L2:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11

    // $t20 := true at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:56+4
    $t20 := true;
    assume $IsValid'bool'($t20);

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    assume {:print "$track_return(19,0,0):", $t20} $t20 == $t20;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t21 := move($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    $t21 := $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:22+9
    assume {:print "$at(5,15391,15400)"} true;
L4:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42

    // $t22 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    $t22 := $Dereference($t1);

    // assume Identical($t23, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t18)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume ($t23 == ((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t18)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t23) goto L16 else goto L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    if ($t23) { goto L16; } else { goto L15; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
L16:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t18)), MaxU64()), Eq(8, $t16)), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume (((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t18)) > $MAX_U64) && $IsEqual'num'(8, $t16)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume {:print "$at(5,15378,15420)"} true;
    assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    goto L14;

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
L15:

    // @129 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@129]<#0>($t22, $t18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129, $t22, $t18));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42

    // $t24 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:16+23
    assume {:print "$at(5,15590,15613)"} true;
    $t24 := $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t25 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:43+7
    $t25 := 18446744073709551615;
    assume $IsValid'u64'($t25);

    // $t26 := -($t25, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:51+1
    call $t26 := $Sub($t25, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15625,15626)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t27 := <=($t24, $t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:40+2
    call $t27 := $Le($t24, $t26);

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:84+7
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := opaque begin: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31
    assume $IsEqual'u64'($t29, 8);

    // $t29 := opaque end: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31

    // trace_local[tmp#$5]($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$track_local(19,0,5):", $t29} $t29 == $t29;

    // trace_local[tmp#$4]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$track_local(19,0,4):", $t27} $t27 == $t27;

    // if ($t27) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    if ($t27) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
L6:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$at(5,15583,15667)"} true;
    assume {:print "$track_abort(19,0):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    $t16 := $t29;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    goto L14;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:26+9
    assume {:print "$at(5,15694,15703)"} true;
L5:

    // $t30 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:26+23
    $t30 := $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t31 := +($t30, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:50+1
    call $t31 := $AddU64($t30, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15718,15719)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t32 := get_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:63+28
    $t32 := $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t18);

    // $t33 := <=($t31, $t32) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:60+2
    call $t33 := $Le($t31, $t32);

    // trace_local[inflow_ok]($t33) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:13+9
    assume {:print "$track_local(19,0,9):", $t33} $t33 == $t33;

    // $t34 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:16+25
    assume {:print "$at(5,15834,15859)"} true;
    $t34 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t35 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:45+7
    $t35 := 18446744073709551615;
    assume $IsValid'u64'($t35);

    // $t36 := -($t35, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:53+1
    call $t36 := $Sub($t35, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15871,15872)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t37 := <=($t34, $t36) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:42+2
    call $t37 := $Le($t34, $t36);

    // $t38 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:86+7
    $t38 := 1;
    assume $IsValid'u64'($t38);

    // $t39 := opaque begin: Errors::limit_exceeded($t38) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31

    // assume WellFormed($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31
    assume $IsValid'u64'($t39);

    // assume Eq<u64>($t39, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31
    assume $IsEqual'u64'($t39, 8);

    // $t39 := opaque end: Errors::limit_exceeded($t38) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31

    // trace_local[tmp#$7]($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$track_local(19,0,7):", $t39} $t39 == $t39;

    // trace_local[tmp#$6]($t37) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$track_local(19,0,6):", $t37} $t37 == $t37;

    // if ($t37) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    if ($t37) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
L8:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$at(5,15827,15913)"} true;
    assume {:print "$track_abort(19,0):", $t39} $t39 == $t39;

    // $t16 := move($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    $t16 := $t39;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    goto L14;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:27+9
    assume {:print "$at(5,15941,15950)"} true;
L7:

    // $t40 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:27+25
    $t40 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t41 := +($t40, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:53+1
    call $t41 := $AddU64($t40, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15967,15968)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t42 := get_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:66+29
    $t42 := $max_holding#$1_AccountLimits_LimitsDefinition'#0'($t18);

    // $t43 := <=($t41, $t42) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:63+2
    call $t43 := $Le($t41, $t42);

    // trace_local[holding_ok]($t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:13+10
    assume {:print "$track_local(19,0,8):", $t43} $t43 == $t43;

    // $t44 := &&($t33, $t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:23+2
    assume {:print "$at(5,16118,16120)"} true;
    call $t44 := $And($t33, $t43);

    // if ($t44) goto L9 else goto L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    if ($t44) { goto L9; } else { goto L10; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    goto L11;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:39+9
    assume {:print "$at(5,16173,16182)"} true;
L9:

    // $t45 := get_field<AccountLimits::Window<#0>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:39+23
    $t45 := $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t46 := +($t45, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:63+1
    call $t46 := $AddU64($t45, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,16197,16198)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t47 := borrow_field<AccountLimits::Window<#0>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+23
    $t47 := $ChildMutation($t1, 1, $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t47, $t46) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+58
    $t47 := $UpdateMutation($t47, $t46);

    // write_back[Reference($t1).window_inflow]($t47) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+58
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_window_inflow($Dereference($t1), $Dereference($t47)));

    // $t48 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:41+25
    assume {:print "$at(5,16247,16272)"} true;
    $t48 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t49 := +($t48, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:67+1
    call $t49 := $AddU64($t48, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,16273,16274)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t50 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+25
    $t50 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t50, $t49) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+62
    $t50 := $UpdateMutation($t50, $t49);

    // write_back[Reference($t1).tracked_balance]($t50) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+62
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_tracked_balance($Dereference($t1), $Dereference($t50)));

    // goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:75+1
    goto L12;

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    assume {:print "$at(5,16104,16292)"} true;
L11:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+9
    assume {:print "$at(5,16302,16311)"} true;
L12:

    // $t51 := &&($t33, $t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:19+2
    call $t51 := $And($t33, $t43);

    // trace_return[0]($t51) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    assume {:print "$track_return(19,0,0):", $t51} $t51 == $t51;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t21 := move($t51) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    $t21 := $t51;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:352:5+1
    assume {:print "$at(5,16330,16331)"} true;
L13:

    // assert Not(Not(exists[@127]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t11)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $limit_address#$1_AccountLimits_Window'#0'($t11));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<#0>($t11)), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<#0>($t11)), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<#0>($t11))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'#0'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Not(DiemTimestamp::$is_operating[@128]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128));

    // assert Eq<bool>($t21, AccountLimits::spec_receiving_limits_ok<#0>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:378:9+67
    assume {:print "$at(5,17457,17524)"} true;
    assert {:msg "assert_failed(5,17457,17524): post-condition does not hold"}
      $IsEqual'bool'($t21, $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11, $t0));

    // assert (if And($t21, Not(AccountLimits::spec_window_unrestricted<#0>($t11))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t11), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t11)), Eq<AccountLimits::Window<#0>>($t1, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    assume {:print "$at(5,17533,17812)"} true;
    assert {:msg "assert_failed(5,17533,17812): post-condition does not hold"}
      if (($t21 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_update_inflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $t11)));

    // return $t21 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    $ret0 := $t21;
    $ret1 := $t1;
    return;

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:352:5+1
    assume {:print "$at(5,16330,16331)"} true;
L14:

    // assert Or(Or(Or(Or(Not(exists[@127]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t11))), And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<#0>($t11)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<#0>($t11)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<#0>($t11))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Not(DiemTimestamp::$is_operating[@128]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    assume {:print "$at(5,16336,16492)"} true;
    assert {:msg "assert_failed(5,16336,16492): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $limit_address#$1_AccountLimits_Window'#0'($t11)) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'#0'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128)));

    // assert Or(Or(Or(Or(And(Not(exists[@127]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t11))), Eq(5, $t16)), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<#0>($t11)), $t0), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<#0>($t11)), $t0), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<#0>($t11))), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<#0>($t11)), Not(DiemTimestamp::$is_operating[@128]())), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    assert {:msg "assert_failed(5,16336,16492): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $limit_address#$1_AccountLimits_Window'#0'($t11)) && $IsEqual'num'(5, $t16)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11)) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11)) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'#0'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11))) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128)) && $IsEqual'num'(1, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_receive_and_update_window [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
procedure {:timeLimit 40} $1_AccountLimits_can_receive_and_update_window$verify_instantiated_0(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS'))
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t11: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t19: bool;
    var $t20: bool;
    var $t21: bool;
    var $t22: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: $Mutation (int);
    var $t48: int;
    var $t49: int;
    var $t50: $Mutation (int);
    var $t51: bool;
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'': $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t47));
    assume IsEmptyVec(p#$Mutation($t50));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,14869,16331)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume {:print "$at(5,16458,16485)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // @128 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    assume {:print "$at(5,14869,14870)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @127 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // $t11 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $t11 := $Dereference($t1);

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    assume {:print "$track_local(19,0,0):", $t0} $t0 == $t0;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t12 := get_field<AccountLimits::Window<XUS::XUS>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:51+23
    assume {:print "$at(5,15067,15090)"} true;
    $t12 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t13 := exists<AccountLimits::LimitsDefinition<XUS::XUS>>($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:16+6
    $t13 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t12);

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:99+18
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$track_local(19,0,3):", $t15} $t15 == $t15;

    // trace_local[tmp#$2]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$track_local(19,0,2):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$at(5,15025,15135)"} true;
    assume {:print "$track_abort(19,0):", $t15} $t15 == $t15;

    // $t16 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    $t16 := $t15;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    goto L14;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:75+9
    assume {:print "$at(5,15211,15220)"} true;
L0:

    // $t17 := get_field<AccountLimits::Window<XUS::XUS>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:75+23
    $t17 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t18 := get_global<AccountLimits::LimitsDefinition<XUS::XUS>>($t17) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(5,15169,15182)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // trace_local[limits_definition]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:13+17
    assume {:print "$track_local(19,0,10):", $t18} $t18 == $t18;

    // $t19 := opaque begin: AccountLimits::is_unrestricted<XUS::XUS>($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume {:print "$at(5,15320,15354)"} true;

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume $IsValid'bool'($t19);

    // assume Eq<bool>($t19, AccountLimits::spec_is_unrestricted<XUS::XUS>($t18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume $IsEqual'bool'($t19, $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($t18));

    // $t19 := opaque end: AccountLimits::is_unrestricted<XUS::XUS>($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34

    // if ($t19) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
    if ($t19) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
L2:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11

    // $t20 := true at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:56+4
    $t20 := true;
    assume $IsValid'bool'($t20);

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    assume {:print "$track_return(19,0,0):", $t20} $t20 == $t20;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t21 := move($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    $t21 := $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:22+9
    assume {:print "$at(5,15391,15400)"} true;
L4:

    // opaque begin: AccountLimits::reset_window<XUS::XUS>($t1, $t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42

    // $t22 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    $t22 := $Dereference($t1);

    // assume Identical($t23, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t18)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume ($t23 == ((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t18)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t23) goto L16 else goto L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    if ($t23) { goto L16; } else { goto L15; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
L16:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t18)), MaxU64()), Eq(8, $t16)), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume (((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t18)) > $MAX_U64) && $IsEqual'num'(8, $t16)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume {:print "$at(5,15378,15420)"} true;
    assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    goto L14;

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
L15:

    // @129 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume Eq<AccountLimits::Window<XUS::XUS>>($t1, AccountLimits::spec_window_reset_with_limits[@129]<XUS::XUS>($t22, $t18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129, $t22, $t18));

    // opaque end: AccountLimits::reset_window<XUS::XUS>($t1, $t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42

    // $t24 := get_field<AccountLimits::Window<XUS::XUS>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:16+23
    assume {:print "$at(5,15590,15613)"} true;
    $t24 := $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t25 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:43+7
    $t25 := 18446744073709551615;
    assume $IsValid'u64'($t25);

    // $t26 := -($t25, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:51+1
    call $t26 := $Sub($t25, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15625,15626)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t27 := <=($t24, $t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:40+2
    call $t27 := $Le($t24, $t26);

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:84+7
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := opaque begin: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31
    assume $IsEqual'u64'($t29, 8);

    // $t29 := opaque end: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31

    // trace_local[tmp#$5]($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$track_local(19,0,5):", $t29} $t29 == $t29;

    // trace_local[tmp#$4]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$track_local(19,0,4):", $t27} $t27 == $t27;

    // if ($t27) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    if ($t27) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
L6:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$at(5,15583,15667)"} true;
    assume {:print "$track_abort(19,0):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    $t16 := $t29;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    goto L14;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:26+9
    assume {:print "$at(5,15694,15703)"} true;
L5:

    // $t30 := get_field<AccountLimits::Window<XUS::XUS>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:26+23
    $t30 := $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t31 := +($t30, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:50+1
    call $t31 := $AddU64($t30, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15718,15719)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t32 := get_field<AccountLimits::LimitsDefinition<XUS::XUS>>.max_inflow($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:63+28
    $t32 := $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t18);

    // $t33 := <=($t31, $t32) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:60+2
    call $t33 := $Le($t31, $t32);

    // trace_local[inflow_ok]($t33) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:13+9
    assume {:print "$track_local(19,0,9):", $t33} $t33 == $t33;

    // $t34 := get_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:16+25
    assume {:print "$at(5,15834,15859)"} true;
    $t34 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t35 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:45+7
    $t35 := 18446744073709551615;
    assume $IsValid'u64'($t35);

    // $t36 := -($t35, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:53+1
    call $t36 := $Sub($t35, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15871,15872)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t37 := <=($t34, $t36) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:42+2
    call $t37 := $Le($t34, $t36);

    // $t38 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:86+7
    $t38 := 1;
    assume $IsValid'u64'($t38);

    // $t39 := opaque begin: Errors::limit_exceeded($t38) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31

    // assume WellFormed($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31
    assume $IsValid'u64'($t39);

    // assume Eq<u64>($t39, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31
    assume $IsEqual'u64'($t39, 8);

    // $t39 := opaque end: Errors::limit_exceeded($t38) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31

    // trace_local[tmp#$7]($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$track_local(19,0,7):", $t39} $t39 == $t39;

    // trace_local[tmp#$6]($t37) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$track_local(19,0,6):", $t37} $t37 == $t37;

    // if ($t37) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    if ($t37) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
L8:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$at(5,15827,15913)"} true;
    assume {:print "$track_abort(19,0):", $t39} $t39 == $t39;

    // $t16 := move($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    $t16 := $t39;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    goto L14;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:27+9
    assume {:print "$at(5,15941,15950)"} true;
L7:

    // $t40 := get_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:27+25
    $t40 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t41 := +($t40, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:53+1
    call $t41 := $AddU64($t40, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15967,15968)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t42 := get_field<AccountLimits::LimitsDefinition<XUS::XUS>>.max_holding($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:66+29
    $t42 := $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t18);

    // $t43 := <=($t41, $t42) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:63+2
    call $t43 := $Le($t41, $t42);

    // trace_local[holding_ok]($t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:13+10
    assume {:print "$track_local(19,0,8):", $t43} $t43 == $t43;

    // $t44 := &&($t33, $t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:23+2
    assume {:print "$at(5,16118,16120)"} true;
    call $t44 := $And($t33, $t43);

    // if ($t44) goto L9 else goto L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    if ($t44) { goto L9; } else { goto L10; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    goto L11;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:39+9
    assume {:print "$at(5,16173,16182)"} true;
L9:

    // $t45 := get_field<AccountLimits::Window<XUS::XUS>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:39+23
    $t45 := $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t46 := +($t45, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:63+1
    call $t46 := $AddU64($t45, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,16197,16198)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t47 := borrow_field<AccountLimits::Window<XUS::XUS>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+23
    $t47 := $ChildMutation($t1, 1, $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t47, $t46) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+58
    $t47 := $UpdateMutation($t47, $t46);

    // write_back[Reference($t1).window_inflow]($t47) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+58
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow($Dereference($t1), $Dereference($t47)));

    // $t48 := get_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:41+25
    assume {:print "$at(5,16247,16272)"} true;
    $t48 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t49 := +($t48, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:67+1
    call $t49 := $AddU64($t48, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,16273,16274)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t50 := borrow_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+25
    $t50 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t50, $t49) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+62
    $t50 := $UpdateMutation($t50, $t49);

    // write_back[Reference($t1).tracked_balance]($t50) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+62
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Dereference($t1), $Dereference($t50)));

    // goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:75+1
    goto L12;

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    assume {:print "$at(5,16104,16292)"} true;
L11:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+9
    assume {:print "$at(5,16302,16311)"} true;
L12:

    // $t51 := &&($t33, $t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:19+2
    call $t51 := $And($t33, $t43);

    // trace_return[0]($t51) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    assume {:print "$track_return(19,0,0):", $t51} $t51 == $t51;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t21 := move($t51) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    $t21 := $t51;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:352:5+1
    assume {:print "$at(5,16330,16331)"} true;
L13:

    // assert Not(Not(exists[@127]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t11)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t11));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<XUS::XUS>($t11)), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<XUS::XUS>($t11)), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<XUS::XUS>($t11))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Not(DiemTimestamp::$is_operating[@128]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128));

    // assert Eq<bool>($t21, AccountLimits::spec_receiving_limits_ok<XUS::XUS>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:378:9+67
    assume {:print "$at(5,17457,17524)"} true;
    assert {:msg "assert_failed(5,17457,17524): post-condition does not hold"}
      $IsEqual'bool'($t21, $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11, $t0));

    // assert (if And($t21, Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t11))) {Eq<AccountLimits::Window<XUS::XUS>>($t1, AccountLimits::spec_update_inflow<XUS::XUS>(AccountLimits::spec_window_reset<XUS::XUS>($t11), $t0))} else {Or(Eq<AccountLimits::Window<XUS::XUS>>($t1, AccountLimits::spec_window_reset<XUS::XUS>($t11)), Eq<AccountLimits::Window<XUS::XUS>>($t1, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    assume {:print "$at(5,17533,17812)"} true;
    assert {:msg "assert_failed(5,17533,17812): post-condition does not hold"}
      if (($t21 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $t11)));

    // return $t21 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    $ret0 := $t21;
    $ret1 := $t1;
    return;

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:352:5+1
    assume {:print "$at(5,16330,16331)"} true;
L14:

    // assert Or(Or(Or(Or(Not(exists[@127]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t11))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<XUS::XUS>($t11)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<XUS::XUS>($t11)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<XUS::XUS>($t11))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Not(DiemTimestamp::$is_operating[@128]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    assume {:print "$at(5,16336,16492)"} true;
    assert {:msg "assert_failed(5,16336,16492): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t11)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128)));

    // assert Or(Or(Or(Or(And(Not(exists[@127]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t11))), Eq(5, $t16)), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<XUS::XUS>($t11)), $t0), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<XUS::XUS>($t11)), $t0), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<XUS::XUS>($t11))), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XUS::XUS>($t11)), Not(DiemTimestamp::$is_operating[@128]())), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    assert {:msg "assert_failed(5,16336,16492): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t11)) && $IsEqual'num'(5, $t16)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11)) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11)) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11))) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128)) && $IsEqual'num'(1, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_receive_and_update_window [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
procedure {:timeLimit 40} $1_AccountLimits_can_receive_and_update_window$verify_instantiated_1(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX'))
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: bool;
    var $t9: bool;
    var $t10: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t11: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t19: bool;
    var $t20: bool;
    var $t21: bool;
    var $t22: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: bool;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: bool;
    var $t38: int;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: bool;
    var $t44: bool;
    var $t45: int;
    var $t46: int;
    var $t47: $Mutation (int);
    var $t48: int;
    var $t49: int;
    var $t50: $Mutation (int);
    var $t51: bool;
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'': $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t47));
    assume IsEmptyVec(p#$Mutation($t50));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,14869,16331)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1462
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume {:print "$at(5,16458,16485)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:356:17+27
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // @128 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    assume {:print "$at(5,14869,14870)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @127 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // $t11 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $t11 := $Dereference($t1);

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    assume {:print "$track_local(19,0,0):", $t0} $t0 == $t0;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:329:5+1
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t12 := get_field<AccountLimits::Window<XDX::XDX>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:51+23
    assume {:print "$at(5,15067,15090)"} true;
    $t12 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t13 := exists<AccountLimits::LimitsDefinition<XDX::XDX>>($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:16+6
    $t13 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t12);

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:99+18
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:77+41

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$track_local(19,0,3):", $t15} $t15 == $t15;

    // trace_local[tmp#$2]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$track_local(19,0,2):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    assume {:print "$at(5,15025,15135)"} true;
    assume {:print "$track_abort(19,0):", $t15} $t15 == $t15;

    // $t16 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    $t16 := $t15;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:333:9+110
    goto L14;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:75+9
    assume {:print "$at(5,15211,15220)"} true;
L0:

    // $t17 := get_field<AccountLimits::Window<XDX::XDX>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:75+23
    $t17 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t18 := get_global<AccountLimits::LimitsDefinition<XDX::XDX>>($t17) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t17)) {
        call $ExecFailureAbort();
    } else {
        $t18 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t17);
    }
    if ($abort_flag) {
        assume {:print "$at(5,15169,15182)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // trace_local[limits_definition]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:334:13+17
    assume {:print "$track_local(19,0,10):", $t18} $t18 == $t18;

    // $t19 := opaque begin: AccountLimits::is_unrestricted<XDX::XDX>($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume {:print "$at(5,15320,15354)"} true;

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume $IsValid'bool'($t19);

    // assume Eq<bool>($t19, AccountLimits::spec_is_unrestricted<XDX::XDX>($t18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34
    assume $IsEqual'bool'($t19, $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($t18));

    // $t19 := opaque end: AccountLimits::is_unrestricted<XDX::XDX>($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:13+34

    // if ($t19) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
    if ($t19) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:9+51
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
L2:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11

    // $t20 := true at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:56+4
    $t20 := true;
    assume $IsValid'bool'($t20);

    // trace_return[0]($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    assume {:print "$track_return(19,0,0):", $t20} $t20 == $t20;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t21 := move($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    $t21 := $t20;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:336:49+11
    goto L13;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:22+9
    assume {:print "$at(5,15391,15400)"} true;
L4:

    // opaque begin: AccountLimits::reset_window<XDX::XDX>($t1, $t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42

    // $t22 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    $t22 := $Dereference($t1);

    // assume Identical($t23, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t18)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume ($t23 == ((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t18)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t23) goto L16 else goto L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    if ($t23) { goto L16; } else { goto L15; }

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
L16:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t18)), MaxU64()), Eq(8, $t16)), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume (((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t18)) > $MAX_U64) && $IsEqual'num'(8, $t16)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t16)));

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume {:print "$at(5,15378,15420)"} true;
    assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    goto L14;

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
L15:

    // @129 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume Eq<AccountLimits::Window<XDX::XDX>>($t1, AccountLimits::spec_window_reset_with_limits[@129]<XDX::XDX>($t22, $t18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42
    assume $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#129, $t22, $t18));

    // opaque end: AccountLimits::reset_window<XDX::XDX>($t1, $t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:338:9+42

    // $t24 := get_field<AccountLimits::Window<XDX::XDX>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:16+23
    assume {:print "$at(5,15590,15613)"} true;
    $t24 := $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t25 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:43+7
    $t25 := 18446744073709551615;
    assume $IsValid'u64'($t25);

    // $t26 := -($t25, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:51+1
    call $t26 := $Sub($t25, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15625,15626)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t27 := <=($t24, $t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:40+2
    call $t27 := $Le($t24, $t26);

    // $t28 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:84+7
    $t28 := 1;
    assume $IsValid'u64'($t28);

    // $t29 := opaque begin: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31

    // assume WellFormed($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31
    assume $IsValid'u64'($t29);

    // assume Eq<u64>($t29, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31
    assume $IsEqual'u64'($t29, 8);

    // $t29 := opaque end: Errors::limit_exceeded($t28) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:61+31

    // trace_local[tmp#$5]($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$track_local(19,0,5):", $t29} $t29 == $t29;

    // trace_local[tmp#$4]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$track_local(19,0,4):", $t27} $t27 == $t27;

    // if ($t27) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    if ($t27) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
L6:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84

    // trace_abort($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    assume {:print "$at(5,15583,15667)"} true;
    assume {:print "$track_abort(19,0):", $t29} $t29 == $t29;

    // $t16 := move($t29) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    $t16 := $t29;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:341:9+84
    goto L14;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:26+9
    assume {:print "$at(5,15694,15703)"} true;
L5:

    // $t30 := get_field<AccountLimits::Window<XDX::XDX>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:26+23
    $t30 := $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t31 := +($t30, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:50+1
    call $t31 := $AddU64($t30, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15718,15719)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t32 := get_field<AccountLimits::LimitsDefinition<XDX::XDX>>.max_inflow($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:63+28
    $t32 := $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t18);

    // $t33 := <=($t31, $t32) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:60+2
    call $t33 := $Le($t31, $t32);

    // trace_local[inflow_ok]($t33) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:342:13+9
    assume {:print "$track_local(19,0,9):", $t33} $t33 == $t33;

    // $t34 := get_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:16+25
    assume {:print "$at(5,15834,15859)"} true;
    $t34 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t35 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:45+7
    $t35 := 18446744073709551615;
    assume $IsValid'u64'($t35);

    // $t36 := -($t35, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:53+1
    call $t36 := $Sub($t35, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15871,15872)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t37 := <=($t34, $t36) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:42+2
    call $t37 := $Le($t34, $t36);

    // $t38 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:86+7
    $t38 := 1;
    assume $IsValid'u64'($t38);

    // $t39 := opaque begin: Errors::limit_exceeded($t38) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31

    // assume WellFormed($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31
    assume $IsValid'u64'($t39);

    // assume Eq<u64>($t39, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31
    assume $IsEqual'u64'($t39, 8);

    // $t39 := opaque end: Errors::limit_exceeded($t38) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:63+31

    // trace_local[tmp#$7]($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$track_local(19,0,7):", $t39} $t39 == $t39;

    // trace_local[tmp#$6]($t37) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$track_local(19,0,6):", $t37} $t37 == $t37;

    // if ($t37) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    if ($t37) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
L8:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86

    // destroy($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86

    // trace_abort($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    assume {:print "$at(5,15827,15913)"} true;
    assume {:print "$track_abort(19,0):", $t39} $t39 == $t39;

    // $t16 := move($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    $t16 := $t39;

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:344:9+86
    goto L14;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:27+9
    assume {:print "$at(5,15941,15950)"} true;
L7:

    // $t40 := get_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:27+25
    $t40 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t41 := +($t40, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:53+1
    call $t41 := $AddU64($t40, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,15967,15968)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t42 := get_field<AccountLimits::LimitsDefinition<XDX::XDX>>.max_holding($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:66+29
    $t42 := $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t18);

    // $t43 := <=($t41, $t42) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:63+2
    call $t43 := $Le($t41, $t42);

    // trace_local[holding_ok]($t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:345:13+10
    assume {:print "$track_local(19,0,8):", $t43} $t43 == $t43;

    // $t44 := &&($t33, $t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:23+2
    assume {:print "$at(5,16118,16120)"} true;
    call $t44 := $And($t33, $t43);

    // if ($t44) goto L9 else goto L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    if ($t44) { goto L9; } else { goto L10; }

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
L10:

    // goto L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    goto L11;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:39+9
    assume {:print "$at(5,16173,16182)"} true;
L9:

    // $t45 := get_field<AccountLimits::Window<XDX::XDX>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:39+23
    $t45 := $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t46 := +($t45, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:63+1
    call $t46 := $AddU64($t45, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,16197,16198)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t47 := borrow_field<AccountLimits::Window<XDX::XDX>>.window_inflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+23
    $t47 := $ChildMutation($t1, 1, $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t47, $t46) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+58
    $t47 := $UpdateMutation($t47, $t46);

    // write_back[Reference($t1).window_inflow]($t47) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:348:13+58
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow($Dereference($t1), $Dereference($t47)));

    // $t48 := get_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:41+25
    assume {:print "$at(5,16247,16272)"} true;
    $t48 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t49 := +($t48, $t0) on_abort goto L14 with $t16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:67+1
    call $t49 := $AddU64($t48, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,16273,16274)"} true;
        $t16 := $abort_code;
        assume {:print "$track_abort(19,0):", $t16} $t16 == $t16;
        goto L14;
    }

    // $t50 := borrow_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+25
    $t50 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t50, $t49) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+62
    $t50 := $UpdateMutation($t50, $t49);

    // write_back[Reference($t1).tracked_balance]($t50) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:13+62
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Dereference($t1), $Dereference($t50)));

    // goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:349:75+1
    goto L12;

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188
    assume {:print "$at(5,16104,16292)"} true;
L11:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:347:9+188

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+9
    assume {:print "$at(5,16302,16311)"} true;
L12:

    // $t51 := &&($t33, $t43) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:19+2
    call $t51 := $And($t33, $t43);

    // trace_return[0]($t51) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    assume {:print "$track_return(19,0,0):", $t51} $t51 == $t51;

    // trace_local[receiving]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(19,0,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t21 := move($t51) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:351:9+23
    $t21 := $t51;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:352:5+1
    assume {:print "$at(5,16330,16331)"} true;
L13:

    // assert Not(Not(exists[@127]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t11)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t11));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<XDX::XDX>($t11)), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<XDX::XDX>($t11)), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11)) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<XDX::XDX>($t11))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Not(DiemTimestamp::$is_operating[@128]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128));

    // assert Eq<bool>($t21, AccountLimits::spec_receiving_limits_ok<XDX::XDX>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:378:9+67
    assume {:print "$at(5,17457,17524)"} true;
    assert {:msg "assert_failed(5,17457,17524): post-condition does not hold"}
      $IsEqual'bool'($t21, $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11, $t0));

    // assert (if And($t21, Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t11))) {Eq<AccountLimits::Window<XDX::XDX>>($t1, AccountLimits::spec_update_inflow<XDX::XDX>(AccountLimits::spec_window_reset<XDX::XDX>($t11), $t0))} else {Or(Eq<AccountLimits::Window<XDX::XDX>>($t1, AccountLimits::spec_window_reset<XDX::XDX>($t11)), Eq<AccountLimits::Window<XDX::XDX>>($t1, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    assume {:print "$at(5,17533,17812)"} true;
    assert {:msg "assert_failed(5,17533,17812): post-condition does not hold"}
      if (($t21 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $t11)));

    // return $t21 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    $ret0 := $t21;
    $ret1 := $t1;
    return;

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:352:5+1
    assume {:print "$at(5,16330,16331)"} true;
L14:

    // assert Or(Or(Or(Or(Not(exists[@127]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t11))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<XDX::XDX>($t11)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<XDX::XDX>($t11)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<XDX::XDX>($t11))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Not(DiemTimestamp::$is_operating[@128]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    assume {:print "$at(5,16336,16492)"} true;
    assert {:msg "assert_failed(5,16336,16492): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t11)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11)) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128)));

    // assert Or(Or(Or(Or(And(Not(exists[@127]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t11))), Eq(5, $t16)), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@128, @127]<XDX::XDX>($t11)), $t0), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@128, @127]<XDX::XDX>($t11)), $t0), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Gt(Add(select AccountLimits::Window.window_start($t11), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@127]<XDX::XDX>($t11))), MaxU64())), Eq(8, $t16))), And(And(Not(AccountLimits::spec_window_unrestricted[@127]<XDX::XDX>($t11)), Not(DiemTimestamp::$is_operating[@128]())), Eq(1, $t16))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    assert {:msg "assert_failed(5,16336,16492): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t11)) && $IsEqual'num'(5, $t16)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11)) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11)) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t11) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11))) > $MAX_U64)) && $IsEqual'num'(8, $t16))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#127, $t11) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#128)) && $IsEqual'num'(1, $t16)));

    // abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:353:5+156
    $abort_code := $t16;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_withdraw_and_update_window [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
procedure {:timeLimit 40} $1_AccountLimits_can_withdraw_and_update_window$verify(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'#0')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $1_AccountLimits_LimitsDefinition'#0';
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'#0';
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_AccountLimits_LimitsDefinition'#0';
    var $t17: bool;
    var $t18: bool;
    var $t19: bool;
    var $t20: $1_AccountLimits_Window'#0';
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation (int);
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: $Mutation (int);
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'#0');
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#124: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t34));
    assume IsEmptyVec(p#$Mutation($t40));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,19576,20662)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume {:print "$at(5,20791,20819)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // @125 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    assume {:print "$at(5,19576,19577)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @124 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#124 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // $t9 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $t9 := $Dereference($t1);

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    assume {:print "$track_local(19,1,0):", $t0} $t0 == $t0;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t10 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:51+21
    assume {:print "$at(5,19773,19794)"} true;
    $t10 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t11 := exists<AccountLimits::LimitsDefinition<#0>>($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:16+6
    $t11 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:97+18
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := opaque begin: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41
    assume $IsEqual'u64'($t13, 5);

    // $t13 := opaque end: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$track_local(19,1,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$track_local(19,1,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$at(5,19731,19839)"} true;
    assume {:print "$track_abort(19,1):", $t13} $t13 == $t13;

    // $t14 := move($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    $t14 := $t13;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:75+7
    assume {:print "$at(5,19915,19922)"} true;
L0:

    // $t15 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:75+21
    $t15 := $limit_address#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t16 := get_global<AccountLimits::LimitsDefinition<#0>>($t15) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(5,19873,19886)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // trace_local[limits_definition]($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:13+17
    assume {:print "$track_local(19,1,7):", $t16} $t16 == $t16;

    // $t17 := opaque begin: AccountLimits::is_unrestricted<#0>($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume {:print "$at(5,20022,20056)"} true;

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume $IsValid'bool'($t17);

    // assume Eq<bool>($t17, AccountLimits::spec_is_unrestricted<#0>($t16)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume $IsEqual'bool'($t17, $1_AccountLimits_spec_is_unrestricted'#0'($t16));

    // $t17 := opaque end: AccountLimits::is_unrestricted<#0>($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34

    // if ($t17) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
L2:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11

    // destroy($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11

    // $t18 := true at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:56+4
    $t18 := true;
    assume $IsValid'bool'($t18);

    // trace_return[0]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    assume {:print "$track_return(19,1,0):", $t18} $t18 == $t18;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t19 := move($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    $t19 := $t18;

    // goto L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    goto L15;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:22+7
    assume {:print "$at(5,20093,20100)"} true;
L4:

    // opaque begin: AccountLimits::reset_window<#0>($t1, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40

    // $t20 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    $t20 := $Dereference($t1);

    // assume Identical($t21, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t16)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume ($t21 == ((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t16)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t21) goto L18 else goto L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    if ($t21) { goto L18; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
L18:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t16)), MaxU64()), Eq(8, $t14)), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume (((($window_start#$1_AccountLimits_Window'#0'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t16)) > $MAX_U64) && $IsEqual'num'(8, $t14)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t14)));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume {:print "$at(5,20080,20120)"} true;
    assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
L17:

    // @126 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t1));

    // assume Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset_with_limits[@126]<#0>($t20, $t16)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126, $t20, $t16));

    // opaque end: AccountLimits::reset_window<#0>($t1, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40

    // $t22 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:16+22
    assume {:print "$at(5,20168,20190)"} true;
    $t22 := $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t23 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:42+7
    $t23 := 18446744073709551615;
    assume $IsValid'u64'($t23);

    // $t24 := -($t23, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:50+1
    call $t24 := $Sub($t23, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20202,20203)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t25 := <=($t22, $t24) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:39+2
    call $t25 := $Le($t22, $t24);

    // $t26 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:83+7
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := opaque begin: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31
    assume $IsEqual'u64'($t27, 8);

    // $t27 := opaque end: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31

    // trace_local[tmp#$5]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$track_local(19,1,5):", $t27} $t27 == $t27;

    // trace_local[tmp#$4]($t25) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$track_local(19,1,4):", $t25} $t25 == $t25;

    // if ($t25) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    if ($t25) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
L6:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83

    // destroy($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$at(5,20161,20244)"} true;
    assume {:print "$track_abort(19,1):", $t27} $t27 == $t27;

    // $t14 := move($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    $t14 := $t27;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    goto L16;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:26+7
    assume {:print "$at(5,20271,20278)"} true;
L5:

    // $t28 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:26+22
    $t28 := $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t29 := +($t28, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:49+1
    call $t29 := $AddU64($t28, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20294,20295)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t30 := get_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:61+29
    $t30 := $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t16);

    // $t31 := <=($t29, $t30) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:58+2
    call $t31 := $Le($t29, $t30);

    // trace_local[outflow_ok]($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:13+10
    assume {:print "$track_local(19,1,8):", $t31} $t31 == $t31;

    // if ($t31) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    assume {:print "$at(5,20382,20636)"} true;
    if ($t31) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:38+7
    assume {:print "$at(5,20437,20444)"} true;
L7:

    // $t32 := get_field<AccountLimits::Window<#0>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:38+22
    $t32 := $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t33 := +($t32, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:61+1
    call $t33 := $AddU64($t32, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20460,20461)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t34 := borrow_field<AccountLimits::Window<#0>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+22
    $t34 := $ChildMutation($t1, 2, $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t34, $t33) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+56
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t1).window_outflow]($t34) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+56
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_window_outflow($Dereference($t1), $Dereference($t34)));

    // $t35 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:53+23
    assume {:print "$at(5,20522,20545)"} true;
    $t35 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t36 := >=($t0, $t35) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:50+2
    call $t36 := $Ge($t0, $t35);

    // if ($t36) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    if ($t36) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:78+1
L10:

    // $t37 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:78+1
    $t37 := 0;
    assume $IsValid'u64'($t37);

    // $t6 := $t37 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    $t6 := $t37;

    // trace_local[tmp#$6]($t37) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$track_local(19,1,6):", $t37} $t37 == $t37;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    goto L13;

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:45+7
    assume {:print "$at(5,20593,20600)"} true;
L12:

    // $t38 := get_field<AccountLimits::Window<#0>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:45+23
    $t38 := $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1));

    // $t39 := -($t38, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:69+1
    call $t39 := $Sub($t38, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20617,20618)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t6 := $t39 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$at(5,20508,20625)"} true;
    $t6 := $t39;

    // trace_local[tmp#$6]($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$track_local(19,1,6):", $t39} $t39 == $t39;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
L13:

    // $t40 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+23
    $t40 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t1)));

    // write_ref($t40, $t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+143
    $t40 := $UpdateMutation($t40, $t6);

    // write_back[Reference($t1).tracked_balance]($t40) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+143
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'#0''_tracked_balance($Dereference($t1), $Dereference($t40)));

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:77+1
    assume {:print "$at(5,20625,20626)"} true;
    goto L14;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    assume {:print "$at(5,20382,20636)"} true;
L9:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    assume {:print "$at(5,20646,20656)"} true;
L14:

    // trace_return[0]($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    assume {:print "$track_return(19,1,0):", $t31} $t31 == $t31;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t19 := move($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    $t19 := $t31;

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:436:5+1
    assume {:print "$at(5,20661,20662)"} true;
L15:

    // assert Not(Not(exists[@124]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t9)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $limit_address#$1_AccountLimits_Window'#0'($t9));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<#0>($t9)), $t0), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9)) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<#0>($t9))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'#0'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Not(DiemTimestamp::$is_operating[@125]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125));

    // assert Eq<bool>($t19, AccountLimits::spec_withdrawal_limits_ok<#0>($t9, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:461:9+66
    assume {:print "$at(5,21670,21736)"} true;
    assert {:msg "assert_failed(5,21670,21736): post-condition does not hold"}
      $IsEqual'bool'($t19, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9, $t0));

    // assert (if And($t19, Not(AccountLimits::spec_window_unrestricted<#0>($t9))) {Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t9), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t1, AccountLimits::spec_window_reset<#0>($t9)), Eq<AccountLimits::Window<#0>>($t1, $t9))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    assume {:print "$at(5,21745,22011)"} true;
    assert {:msg "assert_failed(5,21745,22011): post-condition does not hold"}
      if (($t19 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t1), $t9)));

    // return $t19 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    $ret0 := $t19;
    $ret1 := $t1;
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:436:5+1
    assume {:print "$at(5,20661,20662)"} true;
L16:

    // assert Or(Or(Or(Not(exists[@124]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<#0>($t9)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<#0>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Not(DiemTimestamp::$is_operating[@125]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    assume {:print "$at(5,20667,20826)"} true;
    assert {:msg "assert_failed(5,20667,20826): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $limit_address#$1_AccountLimits_Window'#0'($t9)) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9)) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'#0'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Or(Or(Or(And(Not(exists[@124]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t14)), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<#0>($t9)), $t0), 18446744073709551615)), Eq(8, $t14))), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<#0>($t9))), MaxU64())), Eq(8, $t14))), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<#0>($t9)), Not(DiemTimestamp::$is_operating[@125]())), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    assert {:msg "assert_failed(5,20667,20826): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $limit_address#$1_AccountLimits_Window'#0'($t9)) && $IsEqual'num'(5, $t14)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9)) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t14))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'#0'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9))) > $MAX_U64)) && $IsEqual'num'(8, $t14))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) && $IsEqual'num'(1, $t14)));

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_withdraw_and_update_window [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
procedure {:timeLimit 40} $1_AccountLimits_can_withdraw_and_update_window$verify_instantiated_0(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS'))
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $t17: bool;
    var $t18: bool;
    var $t19: bool;
    var $t20: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation (int);
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: $Mutation (int);
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'': $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t34));
    assume IsEmptyVec(p#$Mutation($t40));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,19576,20662)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume {:print "$at(5,20791,20819)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // @125 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    assume {:print "$at(5,19576,19577)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @124 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // $t9 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $t9 := $Dereference($t1);

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    assume {:print "$track_local(19,1,0):", $t0} $t0 == $t0;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t10 := get_field<AccountLimits::Window<XUS::XUS>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:51+21
    assume {:print "$at(5,19773,19794)"} true;
    $t10 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t11 := exists<AccountLimits::LimitsDefinition<XUS::XUS>>($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:16+6
    $t11 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:97+18
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := opaque begin: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41
    assume $IsEqual'u64'($t13, 5);

    // $t13 := opaque end: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$track_local(19,1,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$track_local(19,1,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$at(5,19731,19839)"} true;
    assume {:print "$track_abort(19,1):", $t13} $t13 == $t13;

    // $t14 := move($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    $t14 := $t13;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:75+7
    assume {:print "$at(5,19915,19922)"} true;
L0:

    // $t15 := get_field<AccountLimits::Window<XUS::XUS>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:75+21
    $t15 := $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t16 := get_global<AccountLimits::LimitsDefinition<XUS::XUS>>($t15) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(5,19873,19886)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // trace_local[limits_definition]($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:13+17
    assume {:print "$track_local(19,1,7):", $t16} $t16 == $t16;

    // $t17 := opaque begin: AccountLimits::is_unrestricted<XUS::XUS>($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume {:print "$at(5,20022,20056)"} true;

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume $IsValid'bool'($t17);

    // assume Eq<bool>($t17, AccountLimits::spec_is_unrestricted<XUS::XUS>($t16)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume $IsEqual'bool'($t17, $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($t16));

    // $t17 := opaque end: AccountLimits::is_unrestricted<XUS::XUS>($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34

    // if ($t17) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
L2:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11

    // destroy($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11

    // $t18 := true at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:56+4
    $t18 := true;
    assume $IsValid'bool'($t18);

    // trace_return[0]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    assume {:print "$track_return(19,1,0):", $t18} $t18 == $t18;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t19 := move($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    $t19 := $t18;

    // goto L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    goto L15;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:22+7
    assume {:print "$at(5,20093,20100)"} true;
L4:

    // opaque begin: AccountLimits::reset_window<XUS::XUS>($t1, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40

    // $t20 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    $t20 := $Dereference($t1);

    // assume Identical($t21, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t16)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume ($t21 == ((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t16)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t21) goto L18 else goto L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    if ($t21) { goto L18; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
L18:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t16)), MaxU64()), Eq(8, $t14)), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume (((($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t16)) > $MAX_U64) && $IsEqual'num'(8, $t14)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t14)));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume {:print "$at(5,20080,20120)"} true;
    assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
L17:

    // @126 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1));

    // assume Eq<AccountLimits::Window<XUS::XUS>>($t1, AccountLimits::spec_window_reset_with_limits[@126]<XUS::XUS>($t20, $t16)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126, $t20, $t16));

    // opaque end: AccountLimits::reset_window<XUS::XUS>($t1, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40

    // $t22 := get_field<AccountLimits::Window<XUS::XUS>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:16+22
    assume {:print "$at(5,20168,20190)"} true;
    $t22 := $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t23 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:42+7
    $t23 := 18446744073709551615;
    assume $IsValid'u64'($t23);

    // $t24 := -($t23, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:50+1
    call $t24 := $Sub($t23, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20202,20203)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t25 := <=($t22, $t24) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:39+2
    call $t25 := $Le($t22, $t24);

    // $t26 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:83+7
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := opaque begin: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31
    assume $IsEqual'u64'($t27, 8);

    // $t27 := opaque end: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31

    // trace_local[tmp#$5]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$track_local(19,1,5):", $t27} $t27 == $t27;

    // trace_local[tmp#$4]($t25) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$track_local(19,1,4):", $t25} $t25 == $t25;

    // if ($t25) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    if ($t25) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
L6:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83

    // destroy($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$at(5,20161,20244)"} true;
    assume {:print "$track_abort(19,1):", $t27} $t27 == $t27;

    // $t14 := move($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    $t14 := $t27;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    goto L16;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:26+7
    assume {:print "$at(5,20271,20278)"} true;
L5:

    // $t28 := get_field<AccountLimits::Window<XUS::XUS>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:26+22
    $t28 := $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t29 := +($t28, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:49+1
    call $t29 := $AddU64($t28, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20294,20295)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t30 := get_field<AccountLimits::LimitsDefinition<XUS::XUS>>.max_outflow($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:61+29
    $t30 := $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($t16);

    // $t31 := <=($t29, $t30) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:58+2
    call $t31 := $Le($t29, $t30);

    // trace_local[outflow_ok]($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:13+10
    assume {:print "$track_local(19,1,8):", $t31} $t31 == $t31;

    // if ($t31) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    assume {:print "$at(5,20382,20636)"} true;
    if ($t31) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:38+7
    assume {:print "$at(5,20437,20444)"} true;
L7:

    // $t32 := get_field<AccountLimits::Window<XUS::XUS>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:38+22
    $t32 := $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t33 := +($t32, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:61+1
    call $t33 := $AddU64($t32, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20460,20461)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t34 := borrow_field<AccountLimits::Window<XUS::XUS>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+22
    $t34 := $ChildMutation($t1, 2, $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t34, $t33) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+56
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t1).window_outflow]($t34) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+56
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow($Dereference($t1), $Dereference($t34)));

    // $t35 := get_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:53+23
    assume {:print "$at(5,20522,20545)"} true;
    $t35 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t36 := >=($t0, $t35) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:50+2
    call $t36 := $Ge($t0, $t35);

    // if ($t36) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    if ($t36) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:78+1
L10:

    // $t37 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:78+1
    $t37 := 0;
    assume $IsValid'u64'($t37);

    // $t6 := $t37 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    $t6 := $t37;

    // trace_local[tmp#$6]($t37) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$track_local(19,1,6):", $t37} $t37 == $t37;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    goto L13;

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:45+7
    assume {:print "$at(5,20593,20600)"} true;
L12:

    // $t38 := get_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:45+23
    $t38 := $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1));

    // $t39 := -($t38, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:69+1
    call $t39 := $Sub($t38, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20617,20618)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t6 := $t39 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$at(5,20508,20625)"} true;
    $t6 := $t39;

    // trace_local[tmp#$6]($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$track_local(19,1,6):", $t39} $t39 == $t39;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
L13:

    // $t40 := borrow_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+23
    $t40 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t1)));

    // write_ref($t40, $t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+143
    $t40 := $UpdateMutation($t40, $t6);

    // write_back[Reference($t1).tracked_balance]($t40) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+143
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Dereference($t1), $Dereference($t40)));

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:77+1
    assume {:print "$at(5,20625,20626)"} true;
    goto L14;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    assume {:print "$at(5,20382,20636)"} true;
L9:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    assume {:print "$at(5,20646,20656)"} true;
L14:

    // trace_return[0]($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    assume {:print "$track_return(19,1,0):", $t31} $t31 == $t31;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t19 := move($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    $t19 := $t31;

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:436:5+1
    assume {:print "$at(5,20661,20662)"} true;
L15:

    // assert Not(Not(exists[@124]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t9)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t9));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<XUS::XUS>($t9)), $t0), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9)) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<XUS::XUS>($t9))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Not(DiemTimestamp::$is_operating[@125]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125));

    // assert Eq<bool>($t19, AccountLimits::spec_withdrawal_limits_ok<XUS::XUS>($t9, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:461:9+66
    assume {:print "$at(5,21670,21736)"} true;
    assert {:msg "assert_failed(5,21670,21736): post-condition does not hold"}
      $IsEqual'bool'($t19, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9, $t0));

    // assert (if And($t19, Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9))) {Eq<AccountLimits::Window<XUS::XUS>>($t1, AccountLimits::spec_update_outflow<XUS::XUS>(AccountLimits::spec_window_reset<XUS::XUS>($t9), $t0))} else {Or(Eq<AccountLimits::Window<XUS::XUS>>($t1, AccountLimits::spec_window_reset<XUS::XUS>($t9)), Eq<AccountLimits::Window<XUS::XUS>>($t1, $t9))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    assume {:print "$at(5,21745,22011)"} true;
    assert {:msg "assert_failed(5,21745,22011): post-condition does not hold"}
      if (($t19 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t1), $t9)));

    // return $t19 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    $ret0 := $t19;
    $ret1 := $t1;
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:436:5+1
    assume {:print "$at(5,20661,20662)"} true;
L16:

    // assert Or(Or(Or(Not(exists[@124]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<XUS::XUS>($t9)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<XUS::XUS>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Not(DiemTimestamp::$is_operating[@125]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    assume {:print "$at(5,20667,20826)"} true;
    assert {:msg "assert_failed(5,20667,20826): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t9)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9)) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Or(Or(Or(And(Not(exists[@124]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t14)), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<XUS::XUS>($t9)), $t0), 18446744073709551615)), Eq(8, $t14))), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<XUS::XUS>($t9))), MaxU64())), Eq(8, $t14))), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<XUS::XUS>($t9)), Not(DiemTimestamp::$is_operating[@125]())), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    assert {:msg "assert_failed(5,20667,20826): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($t9)) && $IsEqual'num'(5, $t14)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9)) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t14))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9))) > $MAX_U64)) && $IsEqual'num'(8, $t14))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) && $IsEqual'num'(1, $t14)));

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun AccountLimits::can_withdraw_and_update_window [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
procedure {:timeLimit 40} $1_AccountLimits_can_withdraw_and_update_window$verify_instantiated_1(_$t0: int, _$t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX')) returns ($ret0: bool, $ret1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX'))
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t8: bool;
    var $t9: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: int;
    var $t14: int;
    var $t15: int;
    var $t16: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $t17: bool;
    var $t18: bool;
    var $t19: bool;
    var $t20: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: bool;
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation (int);
    var $t35: int;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: $Mutation (int);
    var $t0: int;
    var $t1: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'': $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t34));
    assume IsEmptyVec(p#$Mutation($t40));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t1) == $Param(1);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,19576,20662)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1086
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume {:print "$at(5,20791,20819)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:440:17+28
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // @125 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    assume {:print "$at(5,19576,19577)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @124 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // $t9 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $t9 := $Dereference($t1);

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    assume {:print "$track_local(19,1,0):", $t0} $t0 == $t0;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:416:5+1
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t10 := get_field<AccountLimits::Window<XDX::XDX>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:51+21
    assume {:print "$at(5,19773,19794)"} true;
    $t10 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t11 := exists<AccountLimits::LimitsDefinition<XDX::XDX>>($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:16+6
    $t11 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t10);

    // $t12 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:97+18
    $t12 := 0;
    assume $IsValid'u64'($t12);

    // $t13 := opaque begin: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41

    // assume WellFormed($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41
    assume $IsValid'u64'($t13);

    // assume Eq<u64>($t13, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41
    assume $IsEqual'u64'($t13, 5);

    // $t13 := opaque end: Errors::not_published($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:75+41

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$track_local(19,1,3):", $t13} $t13 == $t13;

    // trace_local[tmp#$2]($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$track_local(19,1,2):", $t11} $t11 == $t11;

    // if ($t11) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    if ($t11) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108

    // trace_abort($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    assume {:print "$at(5,19731,19839)"} true;
    assume {:print "$track_abort(19,1):", $t13} $t13 == $t13;

    // $t14 := move($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    $t14 := $t13;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:420:9+108
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:75+7
    assume {:print "$at(5,19915,19922)"} true;
L0:

    // $t15 := get_field<AccountLimits::Window<XDX::XDX>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:75+21
    $t15 := $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t16 := get_global<AccountLimits::LimitsDefinition<XDX::XDX>>($t15) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:33+13
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t15)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t15);
    }
    if ($abort_flag) {
        assume {:print "$at(5,19873,19886)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // trace_local[limits_definition]($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:421:13+17
    assume {:print "$track_local(19,1,7):", $t16} $t16 == $t16;

    // $t17 := opaque begin: AccountLimits::is_unrestricted<XDX::XDX>($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume {:print "$at(5,20022,20056)"} true;

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume $IsValid'bool'($t17);

    // assume Eq<bool>($t17, AccountLimits::spec_is_unrestricted<XDX::XDX>($t16)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34
    assume $IsEqual'bool'($t17, $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($t16));

    // $t17 := opaque end: AccountLimits::is_unrestricted<XDX::XDX>($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:13+34

    // if ($t17) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:9+51
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
L2:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11

    // destroy($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11

    // $t18 := true at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:56+4
    $t18 := true;
    assume $IsValid'bool'($t18);

    // trace_return[0]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    assume {:print "$track_return(19,1,0):", $t18} $t18 == $t18;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t19 := move($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    $t19 := $t18;

    // goto L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:423:49+11
    goto L15;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:22+7
    assume {:print "$at(5,20093,20100)"} true;
L4:

    // opaque begin: AccountLimits::reset_window<XDX::XDX>($t1, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40

    // $t20 := read_ref($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    $t20 := $Dereference($t1);

    // assume Identical($t21, Or(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t16)), MaxU64()), Not(DiemTimestamp::$is_operating()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume ($t21 == ((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t16)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)));

    // if ($t21) goto L18 else goto L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    if ($t21) { goto L18; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
L18:

    // assume Or(And(Gt(Add(select AccountLimits::Window.window_start($t1), select AccountLimits::LimitsDefinition.time_period($t16)), MaxU64()), Eq(8, $t14)), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume (((($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t16)) > $MAX_U64) && $IsEqual'num'(8, $t14)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t14)));

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume {:print "$at(5,20080,20120)"} true;
    assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
L17:

    // @126 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // havoc[mut]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t1 := $UpdateMutation($t1, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1));

    // assume Eq<AccountLimits::Window<XDX::XDX>>($t1, AccountLimits::spec_window_reset_with_limits[@126]<XDX::XDX>($t20, $t16)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40
    assume $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#126, $t20, $t16));

    // opaque end: AccountLimits::reset_window<XDX::XDX>($t1, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:425:9+40

    // $t22 := get_field<AccountLimits::Window<XDX::XDX>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:16+22
    assume {:print "$at(5,20168,20190)"} true;
    $t22 := $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t23 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:42+7
    $t23 := 18446744073709551615;
    assume $IsValid'u64'($t23);

    // $t24 := -($t23, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:50+1
    call $t24 := $Sub($t23, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20202,20203)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t25 := <=($t22, $t24) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:39+2
    call $t25 := $Le($t22, $t24);

    // $t26 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:83+7
    $t26 := 1;
    assume $IsValid'u64'($t26);

    // $t27 := opaque begin: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31

    // assume WellFormed($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31
    assume $IsValid'u64'($t27);

    // assume Eq<u64>($t27, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31
    assume $IsEqual'u64'($t27, 8);

    // $t27 := opaque end: Errors::limit_exceeded($t26) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:60+31

    // trace_local[tmp#$5]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$track_local(19,1,5):", $t27} $t27 == $t27;

    // trace_local[tmp#$4]($t25) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$track_local(19,1,4):", $t25} $t25 == $t25;

    // if ($t25) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    if ($t25) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
L6:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83

    // destroy($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83

    // trace_abort($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    assume {:print "$at(5,20161,20244)"} true;
    assume {:print "$track_abort(19,1):", $t27} $t27 == $t27;

    // $t14 := move($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    $t14 := $t27;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:427:9+83
    goto L16;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:26+7
    assume {:print "$at(5,20271,20278)"} true;
L5:

    // $t28 := get_field<AccountLimits::Window<XDX::XDX>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:26+22
    $t28 := $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t29 := +($t28, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:49+1
    call $t29 := $AddU64($t28, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20294,20295)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t30 := get_field<AccountLimits::LimitsDefinition<XDX::XDX>>.max_outflow($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:61+29
    $t30 := $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($t16);

    // $t31 := <=($t29, $t30) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:58+2
    call $t31 := $Le($t29, $t30);

    // trace_local[outflow_ok]($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:428:13+10
    assume {:print "$track_local(19,1,8):", $t31} $t31 == $t31;

    // if ($t31) goto L7 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    assume {:print "$at(5,20382,20636)"} true;
    if ($t31) { goto L7; } else { goto L8; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
L8:

    // goto L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    goto L9;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:38+7
    assume {:print "$at(5,20437,20444)"} true;
L7:

    // $t32 := get_field<AccountLimits::Window<XDX::XDX>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:38+22
    $t32 := $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t33 := +($t32, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:61+1
    call $t33 := $AddU64($t32, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20460,20461)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t34 := borrow_field<AccountLimits::Window<XDX::XDX>>.window_outflow($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+22
    $t34 := $ChildMutation($t1, 2, $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t34, $t33) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+56
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t1).window_outflow]($t34) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:431:13+56
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow($Dereference($t1), $Dereference($t34)));

    // $t35 := get_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:53+23
    assume {:print "$at(5,20522,20545)"} true;
    $t35 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t36 := >=($t0, $t35) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:50+2
    call $t36 := $Ge($t0, $t35);

    // if ($t36) goto L10 else goto L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    if ($t36) { goto L10; } else { goto L11; }

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
L11:

    // goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    goto L12;

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:78+1
L10:

    // $t37 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:78+1
    $t37 := 0;
    assume $IsValid'u64'($t37);

    // $t6 := $t37 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    $t6 := $t37;

    // trace_local[tmp#$6]($t37) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$track_local(19,1,6):", $t37} $t37 == $t37;

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    goto L13;

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:45+7
    assume {:print "$at(5,20593,20600)"} true;
L12:

    // $t38 := get_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:45+23
    $t38 := $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1));

    // $t39 := -($t38, $t0) on_abort goto L16 with $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:69+1
    call $t39 := $Sub($t38, $t0);
    if ($abort_flag) {
        assume {:print "$at(5,20617,20618)"} true;
        $t14 := $abort_code;
        assume {:print "$track_abort(19,1):", $t14} $t14 == $t14;
        goto L16;
    }

    // $t6 := $t39 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$at(5,20508,20625)"} true;
    $t6 := $t39;

    // trace_local[tmp#$6]($t39) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
    assume {:print "$track_local(19,1,6):", $t39} $t39 == $t39;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:39+117
L13:

    // $t40 := borrow_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+23
    $t40 := $ChildMutation($t1, 3, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t1)));

    // write_ref($t40, $t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+143
    $t40 := $UpdateMutation($t40, $t6);

    // write_back[Reference($t1).tracked_balance]($t40) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:432:13+143
    $t1 := $UpdateMutation($t1, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Dereference($t1), $Dereference($t40)));

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:433:77+1
    assume {:print "$at(5,20625,20626)"} true;
    goto L14;

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254
    assume {:print "$at(5,20382,20636)"} true;
L9:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:430:9+254

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    assume {:print "$at(5,20646,20656)"} true;
L14:

    // trace_return[0]($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    assume {:print "$track_return(19,1,0):", $t31} $t31 == $t31;

    // trace_local[sending]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t1);
    assume {:print "$track_local(19,1,1):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t19 := move($t31) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:435:9+10
    $t19 := $t31;

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:436:5+1
    assume {:print "$at(5,20661,20662)"} true;
L15:

    // assert Not(Not(exists[@124]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t9)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t9));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<XDX::XDX>($t9)), $t0), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9)) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<XDX::XDX>($t9))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Not(DiemTimestamp::$is_operating[@125]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125));

    // assert Eq<bool>($t19, AccountLimits::spec_withdrawal_limits_ok<XDX::XDX>($t9, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:461:9+66
    assume {:print "$at(5,21670,21736)"} true;
    assert {:msg "assert_failed(5,21670,21736): post-condition does not hold"}
      $IsEqual'bool'($t19, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9, $t0));

    // assert (if And($t19, Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9))) {Eq<AccountLimits::Window<XDX::XDX>>($t1, AccountLimits::spec_update_outflow<XDX::XDX>(AccountLimits::spec_window_reset<XDX::XDX>($t9), $t0))} else {Or(Eq<AccountLimits::Window<XDX::XDX>>($t1, AccountLimits::spec_window_reset<XDX::XDX>($t9)), Eq<AccountLimits::Window<XDX::XDX>>($t1, $t9))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    assume {:print "$at(5,21745,22011)"} true;
    assert {:msg "assert_failed(5,21745,22011): post-condition does not hold"}
      if (($t19 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t9)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t1), $t9)));

    // return $t19 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    $ret0 := $t19;
    $ret1 := $t1;
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:436:5+1
    assume {:print "$at(5,20661,20662)"} true;
L16:

    // assert Or(Or(Or(Not(exists[@124]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<XDX::XDX>($t9)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<XDX::XDX>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Not(DiemTimestamp::$is_operating[@125]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    assume {:print "$at(5,20667,20826)"} true;
    assert {:msg "assert_failed(5,20667,20826): abort not covered by any of the `aborts_if` clauses"}
      (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t9)) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9)) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Or(Or(Or(And(Not(exists[@124]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t14)), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @124]<XDX::XDX>($t9)), $t0), 18446744073709551615)), Eq(8, $t14))), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@124]<XDX::XDX>($t9))), MaxU64())), Eq(8, $t14))), And(And(Not(AccountLimits::spec_window_unrestricted[@124]<XDX::XDX>($t9)), Not(DiemTimestamp::$is_operating[@125]())), Eq(1, $t14))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    assert {:msg "assert_failed(5,20667,20826): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($t9)) && $IsEqual'num'(5, $t14)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9)) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t14))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($t9) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9))) > $MAX_U64)) && $IsEqual'num'(8, $t14))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#124, $t9) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) && $IsEqual'num'(1, $t14)));

    // abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:437:5+159
    $abort_code := $t14;
    $abort_flag := true;
    return;

}

// fun AccountLimits::grant_mutation_capability [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
procedure {:timeLimit 40} $1_AccountLimits_grant_mutation_capability$verify(_$t0: $signer) returns ($ret0: $1_AccountLimits_AccountLimitMutationCapability)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: bool;
    var $t7: $1_AccountLimits_AccountLimitMutationCapability;
    var $t0: $signer;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'signer': $signer;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#122: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_Roles_RoleId_$memory#123: $Memory $1_Roles_RoleId;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,2510,2734)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+224
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume Identical($t1, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t1 == $1_Signer_spec_address_of($t0));

    // @122 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+1
    assume {:print "$at(5,2510,2511)"} true;
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#122 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @123 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+1
    $1_Roles_RoleId_$memory#123 := $1_Roles_RoleId_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:61:5+1
    assume {:print "$track_local(19,3,0):", $t0} $t0 == $t0;

    // opaque begin: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
    assume {:print "$at(5,2610,2641)"} true;

    // assume Identical($t2, Not(DiemTimestamp::$is_genesis())) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
    assume ($t2 == !$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t2) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
L4:

    // assume And(Not(DiemTimestamp::$is_genesis()), Eq(1, $t3)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
    assume (!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t3));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
    assume {:print "$at(5,2610,2641)"} true;
    assume {:print "$track_abort(19,3):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31
L3:

    // opaque end: DiemTimestamp::assert_genesis() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:62:9+31

    // assume Identical($t4, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t4 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
    assume {:print "$at(5,2651,2686)"} true;

    // assume Identical($t5, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t4))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
    assume ($t5 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t4)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t5) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
    if ($t5) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
L6:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t3)), And(Not(exists<Roles::RoleId>($t4)), Eq(5, $t3))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t4)), 0), Eq(3, $t3))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t3))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t3)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t4) && $IsEqual'num'(5, $t3))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t4)), 0) && $IsEqual'num'(3, $t3))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t3)));

    // trace_abort($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
    assume {:print "$at(5,2651,2686)"} true;
    assume {:print "$track_abort(19,3):", $t3} $t3 == $t3;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35
L5:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:63:9+35

    // $t6 := false at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:64:9+32
    assume {:print "$at(5,2696,2728)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := pack AccountLimits::AccountLimitMutationCapability($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:64:9+32
    $t7 := $1_AccountLimits_AccountLimitMutationCapability($t6);

    // trace_return[0]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:64:9+32
    assume {:print "$track_return(19,3,0):", $t7} $t7 == $t7;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:5+1
    assume {:print "$at(5,2733,2734)"} true;
L1:

    // assert Not(Not(DiemTimestamp::$is_genesis[@122]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:153:9+51
    assume {:print "$at(18,6290,6341)"} true;
    assert {:msg "assert_failed(18,6290,6341): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#122);

    // assert Not(Not(exists[@123]<Roles::RoleId>($t1))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#123, $t1);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@123]<Roles::RoleId>($t1)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#123, $t1)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // return $t7 at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    $ret0 := $t7;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:65:5+1
    assume {:print "$at(5,2733,2734)"} true;
L2:

    // assert Or(Or(Or(Not(DiemTimestamp::$is_genesis[@122]()), Not(exists[@123]<Roles::RoleId>($t1))), Neq<u64>(select Roles::RoleId.role_id(global[@123]<Roles::RoleId>($t1)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:5+154
    assume {:print "$at(5,2739,2893)"} true;
    assert {:msg "assert_failed(5,2739,2893): abort not covered by any of the `aborts_if` clauses"}
      (((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#122) || !$ResourceExists($1_Roles_RoleId_$memory#123, $t1)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#123, $t1)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // assert Or(Or(Or(And(Not(DiemTimestamp::$is_genesis[@122]()), Eq(1, $t3)), And(Not(exists[@123]<Roles::RoleId>($t1)), Eq(5, $t3))), And(Neq<u64>(select Roles::RoleId.role_id(global[@123]<Roles::RoleId>($t1)), 0), Eq(3, $t3))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t3))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:5+154
    assert {:msg "assert_failed(5,2739,2893): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((!$1_DiemTimestamp_$is_genesis($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#122) && $IsEqual'num'(1, $t3)) || (!$ResourceExists($1_Roles_RoleId_$memory#123, $t1) && $IsEqual'num'(5, $t3))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#123, $t1)), 0) && $IsEqual'num'(3, $t3))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t3)));

    // abort($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:66:5+154
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun AccountLimits::has_limits_published [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
procedure {:timeLimit 40} $1_AccountLimits_has_limits_published$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,23743,23862)"} true;
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+1
    assume {:print "$track_local(19,4,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::LimitsDefinition<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:508:9+6
    assume {:print "$at(5,23816,23822)"} true;
    $t1 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:508:9+40
    assume {:print "$track_return(19,4,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:509:5+1
    assume {:print "$at(5,23861,23862)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:509:5+1
    $ret0 := $t1;
    return;

}

// fun AccountLimits::has_limits_published [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
procedure {:timeLimit 40} $1_AccountLimits_has_limits_published$verify_instantiated_0(_$t0: int) returns ($ret0: bool)
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,23743,23862)"} true;
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+1
    assume {:print "$track_local(19,4,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::LimitsDefinition<XUS::XUS>>($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:508:9+6
    assume {:print "$at(5,23816,23822)"} true;
    $t1 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:508:9+40
    assume {:print "$track_return(19,4,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:509:5+1
    assume {:print "$at(5,23861,23862)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:509:5+1
    $ret0 := $t1;
    return;

}

// fun AccountLimits::has_limits_published [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
procedure {:timeLimit 40} $1_AccountLimits_has_limits_published$verify_instantiated_1(_$t0: int) returns ($ret0: bool)
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,23743,23862)"} true;
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+119
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:507:5+1
    assume {:print "$track_local(19,4,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::LimitsDefinition<XDX::XDX>>($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:508:9+6
    assume {:print "$at(5,23816,23822)"} true;
    $t1 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:508:9+40
    assume {:print "$track_return(19,4,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:509:5+1
    assume {:print "$at(5,23861,23862)"} true;
L1:

    // return $t1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:509:5+1
    $ret0 := $t1;
    return;

}

// fun AccountLimits::has_window_published [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
procedure {:timeLimit 40} $1_AccountLimits_has_window_published$verify(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,23868,23977)"} true;
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:515:17+6
    assume {:print "$at(5,24026,24032)"} true;
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:515:17+6
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+1
    assume {:print "$at(5,23868,23869)"} true;
    assume {:print "$track_local(19,5,0):", $t0} $t0 == $t0;

    // $t1 := exists<AccountLimits::Window<#0>>($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:512:9+6
    assume {:print "$at(5,23941,23947)"} true;
    $t1 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t0);

    // trace_return[0]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:512:9+30
    assume {:print "$track_return(19,5,0):", $t1} $t1 == $t1;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:513:5+1
    assume {:print "$at(5,23976,23977)"} true;
L1:

    // assert Eq<bool>($t1, AccountLimits::spec_has_window_published<#0>($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:515:9+60
    assume {:print "$at(5,24018,24078)"} true;
    assert {:msg "assert_failed(5,24018,24078): post-condition does not hold"}
      $IsEqual'bool'($t1, $1_AccountLimits_spec_has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, $t0));

    // return $t1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:515:9+60
    $ret0 := $t1;
    return;

}

// fun AccountLimits::is_unrestricted [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:482:5+260
procedure {:timeLimit 40} $1_AccountLimits_is_unrestricted$verify(_$t0: $1_AccountLimits_LimitsDefinition'#0') returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t0: $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume And(WellFormed($t0), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($t0), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($t0), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($t0), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($t0), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:491:17+6
    assume {:print "$at(5,23135,23141)"} true;
    assume ($IsValid'$1_AccountLimits_LimitsDefinition'#0''($t0) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($t0) > 0)));

    // trace_local[limits_def]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:482:5+1
    assume {:print "$at(5,22783,22784)"} true;
    assume {:print "$track_local(19,6,0):", $t0} $t0 == $t0;

    // $t4 := get_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+21
    assume {:print "$at(5,22870,22891)"} true;
    $t4 := $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t5 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:34+7
    $t5 := 18446744073709551615;
    assume $IsValid'u64'($t5);

    // $t6 := ==($t4, $t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:31+2
    $t6 := $IsEqual'u64'($t4, $t5);

    // if ($t6) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    if ($t6) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:484:9+10
    assume {:print "$at(5,22914,22924)"} true;
L0:

    // $t7 := get_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:484:9+22
    $t7 := $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t8 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:484:35+7
    $t8 := 18446744073709551615;
    assume $IsValid'u64'($t8);

    // $t9 := ==($t7, $t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:484:32+2
    $t9 := $IsEqual'u64'($t7, $t8);

    // $t1 := $t9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    assume {:print "$at(5,22870,22947)"} true;
    $t1 := $t9;

    // trace_local[tmp#$1]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    assume {:print "$track_local(19,6,1):", $t9} $t9 == $t9;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    goto L3;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
L2:

    // $t10 := false at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    $t10 := false;
    assume $IsValid'bool'($t10);

    // $t1 := $t10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    $t1 := $t10;

    // trace_local[tmp#$1]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
    assume {:print "$track_local(19,6,1):", $t10} $t10 == $t10;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+77
L3:

    // if ($t1) goto L4 else goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    if ($t1) { goto L4; } else { goto L5; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
L5:

    // goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    goto L6;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:485:9+10
    assume {:print "$at(5,22959,22969)"} true;
L4:

    // $t11 := get_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:485:9+22
    $t11 := $max_holding#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t12 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:485:35+7
    $t12 := 18446744073709551615;
    assume $IsValid'u64'($t12);

    // $t13 := ==($t11, $t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:485:32+2
    $t13 := $IsEqual'u64'($t11, $t12);

    // $t2 := $t13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    assume {:print "$at(5,22870,22992)"} true;
    $t2 := $t13;

    // trace_local[tmp#$2]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    assume {:print "$track_local(19,6,2):", $t13} $t13 == $t13;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    goto L7;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
L6:

    // $t14 := false at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    $t14 := false;
    assume $IsValid'bool'($t14);

    // $t2 := $t14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    $t2 := $t14;

    // trace_local[tmp#$2]($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
    assume {:print "$track_local(19,6,2):", $t14} $t14 == $t14;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+122
L7:

    // if ($t2) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    if ($t2) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    goto L10;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:486:9+10
    assume {:print "$at(5,23004,23014)"} true;
L8:

    // $t15 := get_field<AccountLimits::LimitsDefinition<#0>>.time_period($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:486:9+22
    $t15 := $time_period#$1_AccountLimits_LimitsDefinition'#0'($t0);

    // $t16 := 86400000000 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:486:35+7
    $t16 := 86400000000;
    assume $IsValid'u64'($t16);

    // $t17 := ==($t15, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:486:32+2
    $t17 := $IsEqual'u64'($t15, $t16);

    // $t3 := $t17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    assume {:print "$at(5,22870,23037)"} true;
    $t3 := $t17;

    // trace_local[tmp#$3]($t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    assume {:print "$track_local(19,6,3):", $t17} $t17 == $t17;

    // goto L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    goto L11;

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
L10:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167

    // $t18 := false at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    $t18 := false;
    assume $IsValid'bool'($t18);

    // $t3 := $t18 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    $t3 := $t18;

    // trace_local[tmp#$3]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    assume {:print "$track_local(19,6,3):", $t18} $t18 == $t18;

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
L11:

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:483:9+167
    assume {:print "$track_return(19,6,0):", $t3} $t3 == $t3;

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:487:5+1
    assume {:print "$at(5,23042,23043)"} true;
L12:

    // assert Not(false) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:490:9+16
    assume {:print "$at(5,23102,23118)"} true;
    assert {:msg "assert_failed(5,23102,23118): function does not abort under this condition"}
      !false;

    // assert Eq<bool>($t3, AccountLimits::spec_is_unrestricted<#0>($t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:491:9+51
    assume {:print "$at(5,23127,23178)"} true;
    assert {:msg "assert_failed(5,23127,23178): post-condition does not hold"}
      $IsEqual'bool'($t3, $1_AccountLimits_spec_is_unrestricted'#0'($t0));

    // return $t3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:491:9+51
    $ret0 := $t3;
    return;

}

// fun AccountLimits::limits_definition_address [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:503:5+154
procedure {:timeLimit 40} $1_AccountLimits_limits_definition_address$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: $1_AccountLimits_Window'#0';
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'address': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:503:5+154
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,23583,23737)"} true;
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:503:5+154
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:503:5+154
    assume $IsValid'address'($t0);

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:503:5+154
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // trace_local[addr]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:503:5+1
    assume {:print "$track_local(19,7,0):", $t0} $t0 == $t0;

    // $t1 := get_global<AccountLimits::Window<#0>>($t0) on_abort goto L2 with $t2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:504:9+13
    assume {:print "$at(5,23680,23693)"} true;
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(5,23680,23693)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(19,7):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<AccountLimits::Window<#0>>.limit_address($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:504:9+51
    $t3 := $limit_address#$1_AccountLimits_Window'#0'($t1);

    // trace_return[0]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:504:9+51
    assume {:print "$track_return(19,7,0):", $t3} $t3 == $t3;

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:505:5+1
    assume {:print "$at(5,23736,23737)"} true;
L1:

    // return $t3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:505:5+1
    $ret0 := $t3;
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:505:5+1
L2:

    // abort($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:505:5+1
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_window [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
procedure {:timeLimit 40} $1_AccountLimits_publish_window$verify(_$t0: $signer, _$t1: $signer, _$t2: int) returns ()
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_AccountLimits_Window'#0';
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#130: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountLimits_Window'#0'_$memory#131: $Memory $1_AccountLimits_Window'#0';
    var $1_Roles_RoleId_$memory#132: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'#0'_$memory#155: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,6101,6872)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume Identical($t7, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:581:9+44
    assume {:print "$at(28,25813,25857)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t1));

    // assume Identical($t8, select Roles::RoleId.role_id(global<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:583:9+43
    assume {:print "$at(28,25934,25977)"} true;
    assume ($t8 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // @132 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$at(5,6101,6102)"} true;
    $1_Roles_RoleId_$memory#132 := $1_Roles_RoleId_$memory;

    // @130 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    $1_AccountLimits_LimitsDefinition'#0'_$memory#130 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @131 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    $1_AccountLimits_Window'#0'_$memory#131 := $1_AccountLimits_Window'#0'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,0):", $t0} $t0 == $t0;

    // trace_local[to_limit]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,1):", $t1} $t1 == $t1;

    // trace_local[limit_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,2):", $t2} $t2 == $t2;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume {:print "$at(5,6242,6277)"} true;

    // assume Identical($t11, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume ($t11 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t11) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    if ($t11) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t12)), And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0) && $IsEqual'num'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume {:print "$at(5,6242,6277)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35

    // $t13 := exists<AccountLimits::LimitsDefinition<#0>>($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:16+6
    assume {:print "$at(5,6294,6300)"} true;
    $t13 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t2);

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:89+18
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41

    // trace_local[tmp#$4]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$track_local(19,9,4):", $t15} $t15 == $t15;

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$track_local(19,9,3):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$at(5,6287,6387)"} true;
    assume {:print "$track_abort(19,9):", $t15} $t15 == $t15;

    // $t12 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    $t12 := $t15;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:49+8
    assume {:print "$at(5,6437,6445)"} true;
L0:

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:581:9+44
    assume {:print "$at(28,25813,25857)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // assume Identical($t17, select Roles::RoleId.role_id(global<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:583:9+43
    assume {:print "$at(28,25934,25977)"} true;
    assume ($t17 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)));

    // opaque begin: Roles::assert_parent_vasp_or_child_vasp($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume {:print "$at(5,6397,6446)"} true;

    // assume Identical($t18, Or(Not(exists<Roles::RoleId>($t16)), And(Neq<u64>($t17, 5), Neq<u64>($t17, 6)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume ($t18 == (!$ResourceExists($1_Roles_RoleId_$memory, $t16) || (!$IsEqual'u64'($t17, 5) && !$IsEqual'u64'($t17, 6))));

    // if ($t18) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    if ($t18) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t16)), Eq(5, $t12)), And(And(Neq<u64>($t17, 5), Neq<u64>($t17, 6)), Eq(3, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t16) && $IsEqual'num'(5, $t12)) || ((!$IsEqual'u64'($t17, 5) && !$IsEqual'u64'($t17, 6)) && $IsEqual'num'(3, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume {:print "$at(5,6397,6446)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
L8:

    // opaque end: Roles::assert_parent_vasp_or_child_vasp($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49

    // $t19 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume {:print "$at(5,6502,6530)"} true;

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume $IsValid'address'($t19);

    // assume Eq<address>($t19, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume $IsEqual'address'($t19, $1_Signer_spec_address_of($t1));

    // $t19 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28

    // $t20 := exists<AccountLimits::Window<#0>>($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:14+6
    $t20 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t19);

    // $t21 := !($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:13+1
    call $t21 := $Not($t20);

    // $t22 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:39+7
    assume {:print "$at(5,6571,6578)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::already_published($t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34
    assume $IsEqual'u64'($t23, 6);

    // $t23 := opaque end: Errors::already_published($t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34

    // trace_local[tmp#$6]($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$at(5,6456,6589)"} true;
    assume {:print "$track_local(19,9,6):", $t23} $t23 == $t23;

    // trace_local[tmp#$5]($t21) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$track_local(19,9,5):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
L3:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$at(5,6456,6589)"} true;
    assume {:print "$track_abort(19,9):", $t23} $t23 == $t23;

    // $t12 := move($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    $t12 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:156:13+8
    assume {:print "$at(5,6620,6628)"} true;
L2:

    // $t24 := AccountLimits::current_time() on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:158:31+14
    assume {:print "$at(5,6691,6705)"} true;
    call $t24 := $1_AccountLimits_current_time();
    if ($abort_flag) {
        assume {:print "$at(5,6691,6705)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t25 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:159:32+1
    assume {:print "$at(5,6738,6739)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:160:33+1
    assume {:print "$at(5,6773,6774)"} true;
    $t26 := 0;
    assume $IsValid'u64'($t26);

    // $t27 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:161:34+1
    assume {:print "$at(5,6809,6810)"} true;
    $t27 := 0;
    assume $IsValid'u64'($t27);

    // $t28 := pack AccountLimits::Window<#0>($t24, $t25, $t26, $t27, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:157:13+214
    assume {:print "$at(5,6642,6856)"} true;
    $t28 := $1_AccountLimits_Window'#0'($t24, $t25, $t26, $t27, $t2);

    // @155 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // state save for global update invariants
    assume {:print "$at(5,6101,6872)"} true;
    $1_AccountLimits_Window'#0'_$memory#155 := $1_AccountLimits_Window'#0'_$memory;

    // move_to<AccountLimits::Window<#0>>($t28, $t1) on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:155:9+7
    assume {:print "$at(5,6599,6606)"} true;
    if ($ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_Signer_spec_address_of($t1))) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_Signer_spec_address_of($t1), $t28);
    }
    if ($abort_flag) {
        assume {:print "$at(5,6599,6606)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;
        goto L5;
    }

    // assert forall window_addr: TypeDomain<address>() where exists[@155]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#155, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:165:5+1
    assume {:print "$at(5,6871,6872)"} true;
L4:

    // assert Not(Not(exists[@130]<AccountLimits::LimitsDefinition<#0>>($t2))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:177:9+88
    assume {:print "$at(5,7396,7484)"} true;
    assert {:msg "assert_failed(5,7396,7484): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#130, $t2);

    // assert Not(exists[@131]<AccountLimits::Window<#0>>(Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:178:9+101
    assume {:print "$at(5,7493,7594)"} true;
    assert {:msg "assert_failed(5,7493,7594): function does not abort under this condition"}
      !$ResourceExists($1_AccountLimits_Window'#0'_$memory#131, $1_Signer_spec_address_of($t1));

    // assert Not(Not(exists[@132]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:582:9+59
    assume {:print "$at(28,25866,25925)"} true;
    assert {:msg "assert_failed(28,25866,25925): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#132, $t7);

    // assert Not(And(Neq<u64>($t8, 5), Neq<u64>($t8, 6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:584:9+113
    assume {:print "$at(28,25986,26099)"} true;
    assert {:msg "assert_failed(28,25986,26099): function does not abort under this condition"}
      !(!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6));

    // assert Not(Not(exists[@132]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#132, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // return () at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:165:5+1
    assume {:print "$at(5,6871,6872)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@130]<AccountLimits::LimitsDefinition<#0>>($t2)), exists[@131]<AccountLimits::Window<#0>>(Signer::spec_address_of[]($t1))), Not(exists[@132]<Roles::RoleId>($t7))), And(Neq<u64>($t8, 5), Neq<u64>($t8, 6))), Not(exists[@132]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    assume {:print "$at(5,6877,6953)"} true;
    assert {:msg "assert_failed(5,6877,6953): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#130, $t2) || $ResourceExists($1_AccountLimits_Window'#0'_$memory#131, $1_Signer_spec_address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#132, $t7)) || (!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6))) || !$ResourceExists($1_Roles_RoleId_$memory#132, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@130]<AccountLimits::LimitsDefinition<#0>>($t2)), Eq(5, $t12)), And(exists[@131]<AccountLimits::Window<#0>>(Signer::spec_address_of[]($t1)), Eq(6, $t12))), And(Not(exists[@132]<Roles::RoleId>($t7)), Eq(5, $t12))), And(And(Neq<u64>($t8, 5), Neq<u64>($t8, 6)), Eq(3, $t12))), And(Not(exists[@132]<Roles::RoleId>($t9)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    assert {:msg "assert_failed(5,6877,6953): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#130, $t2) && $IsEqual'num'(5, $t12)) || ($ResourceExists($1_AccountLimits_Window'#0'_$memory#131, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(6, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#132, $t7) && $IsEqual'num'(5, $t12))) || ((!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6)) && $IsEqual'num'(3, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#132, $t9) && $IsEqual'num'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0) && $IsEqual'num'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_window [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
procedure {:timeLimit 40} $1_AccountLimits_publish_window$verify_instantiated_0(_$t0: $signer, _$t1: $signer, _$t2: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#130: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#131: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_Roles_RoleId_$memory#132: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#156: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,6101,6872)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume Identical($t7, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:581:9+44
    assume {:print "$at(28,25813,25857)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t1));

    // assume Identical($t8, select Roles::RoleId.role_id(global<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:583:9+43
    assume {:print "$at(28,25934,25977)"} true;
    assume ($t8 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // @132 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$at(5,6101,6102)"} true;
    $1_Roles_RoleId_$memory#132 := $1_Roles_RoleId_$memory;

    // @130 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#130 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @131 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#131 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,0):", $t0} $t0 == $t0;

    // trace_local[to_limit]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,1):", $t1} $t1 == $t1;

    // trace_local[limit_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,2):", $t2} $t2 == $t2;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume {:print "$at(5,6242,6277)"} true;

    // assume Identical($t11, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume ($t11 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t11) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    if ($t11) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t12)), And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0) && $IsEqual'num'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume {:print "$at(5,6242,6277)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35

    // $t13 := exists<AccountLimits::LimitsDefinition<XUS::XUS>>($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:16+6
    assume {:print "$at(5,6294,6300)"} true;
    $t13 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t2);

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:89+18
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41

    // trace_local[tmp#$4]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$track_local(19,9,4):", $t15} $t15 == $t15;

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$track_local(19,9,3):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$at(5,6287,6387)"} true;
    assume {:print "$track_abort(19,9):", $t15} $t15 == $t15;

    // $t12 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    $t12 := $t15;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:49+8
    assume {:print "$at(5,6437,6445)"} true;
L0:

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:581:9+44
    assume {:print "$at(28,25813,25857)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // assume Identical($t17, select Roles::RoleId.role_id(global<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:583:9+43
    assume {:print "$at(28,25934,25977)"} true;
    assume ($t17 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)));

    // opaque begin: Roles::assert_parent_vasp_or_child_vasp($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume {:print "$at(5,6397,6446)"} true;

    // assume Identical($t18, Or(Not(exists<Roles::RoleId>($t16)), And(Neq<u64>($t17, 5), Neq<u64>($t17, 6)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume ($t18 == (!$ResourceExists($1_Roles_RoleId_$memory, $t16) || (!$IsEqual'u64'($t17, 5) && !$IsEqual'u64'($t17, 6))));

    // if ($t18) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    if ($t18) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t16)), Eq(5, $t12)), And(And(Neq<u64>($t17, 5), Neq<u64>($t17, 6)), Eq(3, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t16) && $IsEqual'num'(5, $t12)) || ((!$IsEqual'u64'($t17, 5) && !$IsEqual'u64'($t17, 6)) && $IsEqual'num'(3, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume {:print "$at(5,6397,6446)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
L8:

    // opaque end: Roles::assert_parent_vasp_or_child_vasp($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49

    // $t19 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume {:print "$at(5,6502,6530)"} true;

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume $IsValid'address'($t19);

    // assume Eq<address>($t19, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume $IsEqual'address'($t19, $1_Signer_spec_address_of($t1));

    // $t19 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28

    // $t20 := exists<AccountLimits::Window<XUS::XUS>>($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:14+6
    $t20 := $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t19);

    // $t21 := !($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:13+1
    call $t21 := $Not($t20);

    // $t22 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:39+7
    assume {:print "$at(5,6571,6578)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::already_published($t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34
    assume $IsEqual'u64'($t23, 6);

    // $t23 := opaque end: Errors::already_published($t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34

    // trace_local[tmp#$6]($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$at(5,6456,6589)"} true;
    assume {:print "$track_local(19,9,6):", $t23} $t23 == $t23;

    // trace_local[tmp#$5]($t21) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$track_local(19,9,5):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
L3:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$at(5,6456,6589)"} true;
    assume {:print "$track_abort(19,9):", $t23} $t23 == $t23;

    // $t12 := move($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    $t12 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:156:13+8
    assume {:print "$at(5,6620,6628)"} true;
L2:

    // $t24 := AccountLimits::current_time() on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:158:31+14
    assume {:print "$at(5,6691,6705)"} true;
    call $t24 := $1_AccountLimits_current_time();
    if ($abort_flag) {
        assume {:print "$at(5,6691,6705)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t25 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:159:32+1
    assume {:print "$at(5,6738,6739)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:160:33+1
    assume {:print "$at(5,6773,6774)"} true;
    $t26 := 0;
    assume $IsValid'u64'($t26);

    // $t27 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:161:34+1
    assume {:print "$at(5,6809,6810)"} true;
    $t27 := 0;
    assume $IsValid'u64'($t27);

    // $t28 := pack AccountLimits::Window<XUS::XUS>($t24, $t25, $t26, $t27, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:157:13+214
    assume {:print "$at(5,6642,6856)"} true;
    $t28 := $1_AccountLimits_Window'$1_XUS_XUS'($t24, $t25, $t26, $t27, $t2);

    // @156 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // state save for global update invariants
    assume {:print "$at(5,6101,6872)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#156 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // move_to<AccountLimits::Window<XUS::XUS>>($t28, $t1) on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:155:9+7
    assume {:print "$at(5,6599,6606)"} true;
    if ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1))) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1), $t28);
    }
    if ($abort_flag) {
        assume {:print "$at(5,6599,6606)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;
        goto L5;
    }

    // assert forall window_addr: TypeDomain<address>() where exists[@156]<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::Window<XUS::XUS>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#156, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:165:5+1
    assume {:print "$at(5,6871,6872)"} true;
L4:

    // assert Not(Not(exists[@130]<AccountLimits::LimitsDefinition<XUS::XUS>>($t2))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:177:9+88
    assume {:print "$at(5,7396,7484)"} true;
    assert {:msg "assert_failed(5,7396,7484): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#130, $t2);

    // assert Not(exists[@131]<AccountLimits::Window<XUS::XUS>>(Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:178:9+101
    assume {:print "$at(5,7493,7594)"} true;
    assert {:msg "assert_failed(5,7493,7594): function does not abort under this condition"}
      !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#131, $1_Signer_spec_address_of($t1));

    // assert Not(Not(exists[@132]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:582:9+59
    assume {:print "$at(28,25866,25925)"} true;
    assert {:msg "assert_failed(28,25866,25925): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#132, $t7);

    // assert Not(And(Neq<u64>($t8, 5), Neq<u64>($t8, 6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:584:9+113
    assume {:print "$at(28,25986,26099)"} true;
    assert {:msg "assert_failed(28,25986,26099): function does not abort under this condition"}
      !(!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6));

    // assert Not(Not(exists[@132]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#132, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // return () at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:165:5+1
    assume {:print "$at(5,6871,6872)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@130]<AccountLimits::LimitsDefinition<XUS::XUS>>($t2)), exists[@131]<AccountLimits::Window<XUS::XUS>>(Signer::spec_address_of[]($t1))), Not(exists[@132]<Roles::RoleId>($t7))), And(Neq<u64>($t8, 5), Neq<u64>($t8, 6))), Not(exists[@132]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    assume {:print "$at(5,6877,6953)"} true;
    assert {:msg "assert_failed(5,6877,6953): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#130, $t2) || $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#131, $1_Signer_spec_address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#132, $t7)) || (!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6))) || !$ResourceExists($1_Roles_RoleId_$memory#132, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@130]<AccountLimits::LimitsDefinition<XUS::XUS>>($t2)), Eq(5, $t12)), And(exists[@131]<AccountLimits::Window<XUS::XUS>>(Signer::spec_address_of[]($t1)), Eq(6, $t12))), And(Not(exists[@132]<Roles::RoleId>($t7)), Eq(5, $t12))), And(And(Neq<u64>($t8, 5), Neq<u64>($t8, 6)), Eq(3, $t12))), And(Not(exists[@132]<Roles::RoleId>($t9)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    assert {:msg "assert_failed(5,6877,6953): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#130, $t2) && $IsEqual'num'(5, $t12)) || ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#131, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(6, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#132, $t7) && $IsEqual'num'(5, $t12))) || ((!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6)) && $IsEqual'num'(3, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#132, $t9) && $IsEqual'num'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0) && $IsEqual'num'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun AccountLimits::publish_window [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
procedure {:timeLimit 40} $1_AccountLimits_publish_window$verify_instantiated_1(_$t0: $signer, _$t1: $signer, _$t2: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: bool;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#130: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#131: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_Roles_RoleId_$memory#132: $Memory $1_Roles_RoleId;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#157: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,6101,6872)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume $IsValid'address'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume Identical($t7, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:581:9+44
    assume {:print "$at(28,25813,25857)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t1));

    // assume Identical($t8, select Roles::RoleId.role_id(global<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:583:9+43
    assume {:print "$at(28,25934,25977)"} true;
    assume ($t8 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)));

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // @132 := save_mem(Roles::RoleId) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$at(5,6101,6102)"} true;
    $1_Roles_RoleId_$memory#132 := $1_Roles_RoleId_$memory;

    // @130 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#130 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @131 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#131 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // trace_local[dr_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,0):", $t0} $t0 == $t0;

    // trace_local[to_limit]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,1):", $t1} $t1 == $t1;

    // trace_local[limit_address]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+1
    assume {:print "$track_local(19,9,2):", $t2} $t2 == $t2;

    // assume Identical($t10, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:537:9+44
    assume {:print "$at(28,23915,23959)"} true;
    assume ($t10 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume {:print "$at(5,6242,6277)"} true;

    // assume Identical($t11, Or(Or(Or(Neq<address>(Signer::spec_address_of($t0), a550c18), Not(exists<Roles::RoleId>($t10))), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0)), Neq<address>(Signer::spec_address_of($t0), a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume ($t11 == (((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) || !$ResourceExists($1_Roles_RoleId_$memory, $t10)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816)));

    // if ($t11) goto L7 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    if ($t11) { goto L7; } else { goto L6; }

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
L7:

    // assume Or(Or(Or(And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t12)), And(Not(exists<Roles::RoleId>($t10)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t10)), 0), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of($t0), a550c18), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume ((((!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)) || (!$ResourceExists($1_Roles_RoleId_$memory, $t10) && $IsEqual'num'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t10)), 0) && $IsEqual'num'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    assume {:print "$at(5,6242,6277)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
    goto L5;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35
L6:

    // opaque end: Roles::assert_diem_root($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:148:9+35

    // $t13 := exists<AccountLimits::LimitsDefinition<XDX::XDX>>($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:16+6
    assume {:print "$at(5,6294,6300)"} true;
    $t13 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t2);

    // $t14 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:89+18
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41
    assume $IsEqual'u64'($t15, 5);

    // $t15 := opaque end: Errors::not_published($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:67+41

    // trace_local[tmp#$4]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$track_local(19,9,4):", $t15} $t15 == $t15;

    // trace_local[tmp#$3]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$track_local(19,9,3):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
L1:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    assume {:print "$at(5,6287,6387)"} true;
    assume {:print "$track_abort(19,9):", $t15} $t15 == $t15;

    // $t12 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    $t12 := $t15;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:149:9+100
    goto L5;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:49+8
    assume {:print "$at(5,6437,6445)"} true;
L0:

    // assume Identical($t16, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/Roles.move:581:9+44
    assume {:print "$at(28,25813,25857)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t1));

    // assume Identical($t17, select Roles::RoleId.role_id(global<Roles::RoleId>($t16))) at /home/ying/diem/language/diem-framework/modules/Roles.move:583:9+43
    assume {:print "$at(28,25934,25977)"} true;
    assume ($t17 == $role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t16)));

    // opaque begin: Roles::assert_parent_vasp_or_child_vasp($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume {:print "$at(5,6397,6446)"} true;

    // assume Identical($t18, Or(Not(exists<Roles::RoleId>($t16)), And(Neq<u64>($t17, 5), Neq<u64>($t17, 6)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume ($t18 == (!$ResourceExists($1_Roles_RoleId_$memory, $t16) || (!$IsEqual'u64'($t17, 5) && !$IsEqual'u64'($t17, 6))));

    // if ($t18) goto L9 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    if ($t18) { goto L9; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
L9:

    // assume Or(And(Not(exists<Roles::RoleId>($t16)), Eq(5, $t12)), And(And(Neq<u64>($t17, 5), Neq<u64>($t17, 6)), Eq(3, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume ((!$ResourceExists($1_Roles_RoleId_$memory, $t16) && $IsEqual'num'(5, $t12)) || ((!$IsEqual'u64'($t17, 5) && !$IsEqual'u64'($t17, 6)) && $IsEqual'num'(3, $t12)));

    // trace_abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    assume {:print "$at(5,6397,6446)"} true;
    assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
    goto L5;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49
L8:

    // opaque end: Roles::assert_parent_vasp_or_child_vasp($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:150:9+49

    // $t19 := opaque begin: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume {:print "$at(5,6502,6530)"} true;

    // assume WellFormed($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume $IsValid'address'($t19);

    // assume Eq<address>($t19, Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28
    assume $IsEqual'address'($t19, $1_Signer_spec_address_of($t1));

    // $t19 := opaque end: Signer::address_of($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:39+28

    // $t20 := exists<AccountLimits::Window<XDX::XDX>>($t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:14+6
    $t20 := $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t19);

    // $t21 := !($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:152:13+1
    call $t21 := $Not($t20);

    // $t22 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:39+7
    assume {:print "$at(5,6571,6578)"} true;
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := opaque begin: Errors::already_published($t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34

    // assume WellFormed($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34
    assume $IsValid'u64'($t23);

    // assume Eq<u64>($t23, 6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34
    assume $IsEqual'u64'($t23, 6);

    // $t23 := opaque end: Errors::already_published($t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:153:13+34

    // trace_local[tmp#$6]($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$at(5,6456,6589)"} true;
    assume {:print "$track_local(19,9,6):", $t23} $t23 == $t23;

    // trace_local[tmp#$5]($t21) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$track_local(19,9,5):", $t21} $t21 == $t21;

    // if ($t21) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    if ($t21) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
L3:

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133

    // trace_abort($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    assume {:print "$at(5,6456,6589)"} true;
    assume {:print "$track_abort(19,9):", $t23} $t23 == $t23;

    // $t12 := move($t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    $t12 := $t23;

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:151:9+133
    goto L5;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:156:13+8
    assume {:print "$at(5,6620,6628)"} true;
L2:

    // $t24 := AccountLimits::current_time() on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:158:31+14
    assume {:print "$at(5,6691,6705)"} true;
    call $t24 := $1_AccountLimits_current_time();
    if ($abort_flag) {
        assume {:print "$at(5,6691,6705)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t25 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:159:32+1
    assume {:print "$at(5,6738,6739)"} true;
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:160:33+1
    assume {:print "$at(5,6773,6774)"} true;
    $t26 := 0;
    assume $IsValid'u64'($t26);

    // $t27 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:161:34+1
    assume {:print "$at(5,6809,6810)"} true;
    $t27 := 0;
    assume $IsValid'u64'($t27);

    // $t28 := pack AccountLimits::Window<XDX::XDX>($t24, $t25, $t26, $t27, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:157:13+214
    assume {:print "$at(5,6642,6856)"} true;
    $t28 := $1_AccountLimits_Window'$1_XDX_XDX'($t24, $t25, $t26, $t27, $t2);

    // @157 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:143:5+771
    // state save for global update invariants
    assume {:print "$at(5,6101,6872)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#157 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // move_to<AccountLimits::Window<XDX::XDX>>($t28, $t1) on_abort goto L5 with $t12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:155:9+7
    assume {:print "$at(5,6599,6606)"} true;
    if ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1))) {
        call $ExecFailureAbort();
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1), $t28);
    }
    if ($abort_flag) {
        assume {:print "$at(5,6599,6606)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(19,9):", $t12} $t12 == $t12;
        goto L5;
    }

    // assert forall window_addr: TypeDomain<address>() where exists[@157]<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::Window<XDX::XDX>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#157, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:165:5+1
    assume {:print "$at(5,6871,6872)"} true;
L4:

    // assert Not(Not(exists[@130]<AccountLimits::LimitsDefinition<XDX::XDX>>($t2))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:177:9+88
    assume {:print "$at(5,7396,7484)"} true;
    assert {:msg "assert_failed(5,7396,7484): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#130, $t2);

    // assert Not(exists[@131]<AccountLimits::Window<XDX::XDX>>(Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:178:9+101
    assume {:print "$at(5,7493,7594)"} true;
    assert {:msg "assert_failed(5,7493,7594): function does not abort under this condition"}
      !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#131, $1_Signer_spec_address_of($t1));

    // assert Not(Not(exists[@132]<Roles::RoleId>($t7))) at /home/ying/diem/language/diem-framework/modules/Roles.move:582:9+59
    assume {:print "$at(28,25866,25925)"} true;
    assert {:msg "assert_failed(28,25866,25925): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#132, $t7);

    // assert Not(And(Neq<u64>($t8, 5), Neq<u64>($t8, 6))) at /home/ying/diem/language/diem-framework/modules/Roles.move:584:9+113
    assume {:print "$at(28,25986,26099)"} true;
    assert {:msg "assert_failed(28,25986,26099): function does not abort under this condition"}
      !(!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6));

    // assert Not(Not(exists[@132]<Roles::RoleId>($t9))) at /home/ying/diem/language/diem-framework/modules/Roles.move:538:9+59
    assume {:print "$at(28,23968,24027)"} true;
    assert {:msg "assert_failed(28,23968,24027): function does not abort under this condition"}
      !!$ResourceExists($1_Roles_RoleId_$memory#132, $t9);

    // assert Not(Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:539:9+87
    assume {:print "$at(28,24036,24123)"} true;
    assert {:msg "assert_failed(28,24036,24123): function does not abort under this condition"}
      !!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0);

    // assert Not(Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    assume {:print "$at(9,1379,1465)"} true;
    assert {:msg "assert_failed(9,1379,1465): function does not abort under this condition"}
      !!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816);

    // return () at /home/ying/diem/language/diem-framework/modules/CoreAddresses.move:31:9+86
    return;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:165:5+1
    assume {:print "$at(5,6871,6872)"} true;
L5:

    // assert Or(Or(Or(Or(Or(Or(Not(exists[@130]<AccountLimits::LimitsDefinition<XDX::XDX>>($t2)), exists[@131]<AccountLimits::Window<XDX::XDX>>(Signer::spec_address_of[]($t1))), Not(exists[@132]<Roles::RoleId>($t7))), And(Neq<u64>($t8, 5), Neq<u64>($t8, 6))), Not(exists[@132]<Roles::RoleId>($t9))), Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0)), Neq<address>(Signer::spec_address_of[]($t0), a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    assume {:print "$at(5,6877,6953)"} true;
    assert {:msg "assert_failed(5,6877,6953): abort not covered by any of the `aborts_if` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#130, $t2) || $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#131, $1_Signer_spec_address_of($t1))) || !$ResourceExists($1_Roles_RoleId_$memory#132, $t7)) || (!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6))) || !$ResourceExists($1_Roles_RoleId_$memory#132, $t9)) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816));

    // assert Or(Or(Or(Or(Or(Or(And(Not(exists[@130]<AccountLimits::LimitsDefinition<XDX::XDX>>($t2)), Eq(5, $t12)), And(exists[@131]<AccountLimits::Window<XDX::XDX>>(Signer::spec_address_of[]($t1)), Eq(6, $t12))), And(Not(exists[@132]<Roles::RoleId>($t7)), Eq(5, $t12))), And(And(Neq<u64>($t8, 5), Neq<u64>($t8, 6)), Eq(3, $t12))), And(Not(exists[@132]<Roles::RoleId>($t9)), Eq(5, $t12))), And(Neq<u64>(select Roles::RoleId.role_id(global[@132]<Roles::RoleId>($t9)), 0), Eq(3, $t12))), And(Neq<address>(Signer::spec_address_of[]($t0), a550c18), Eq(2, $t12))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    assert {:msg "assert_failed(5,6877,6953): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#130, $t2) && $IsEqual'num'(5, $t12)) || ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#131, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(6, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#132, $t7) && $IsEqual'num'(5, $t12))) || ((!$IsEqual'u64'($t8, 5) && !$IsEqual'u64'($t8, 6)) && $IsEqual'num'(3, $t12))) || (!$ResourceExists($1_Roles_RoleId_$memory#132, $t9) && $IsEqual'num'(5, $t12))) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory#132, $t9)), 0) && $IsEqual'num'(3, $t12))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 173345816) && $IsEqual'num'(2, $t12)));

    // abort($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:166:5+76
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun AccountLimits::reset_window [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
procedure {:timeLimit 40} $1_AccountLimits_reset_window$verify(_$t0: $Mutation ($1_AccountLimits_Window'#0'), _$t1: $1_AccountLimits_LimitsDefinition'#0') returns ($ret0: $Mutation ($1_AccountLimits_Window'#0'))
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $1_AccountLimits_Window'#0';
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: int;
    var $t17: int;
    var $t18: int;
    var $t19: bool;
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: $Mutation (int);
    var $t23: int;
    var $t24: $Mutation (int);
    var $t0: $Mutation ($1_AccountLimits_Window'#0');
    var $t1: $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#121: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    assume IsEmptyVec(p#$Mutation($t20));
    assume IsEmptyVec(p#$Mutation($t22));
    assume IsEmptyVec(p#$Mutation($t24));

    // verification entrypoint assumptions
    call $InitVerification();
    assume l#$Mutation($t0) == $Param(0);

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,12390,12895)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t0));

    // assume And(WellFormed($t1), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($t1), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($t1), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($t1), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($t1), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    assume ($IsValid'$1_AccountLimits_LimitsDefinition'#0''($t1) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($t1) > 0)));

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+505
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // @121 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+1
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#121 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // $t5 := read_ref($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+1
    $t5 := $Dereference($t0);

    // trace_local[window]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+1
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t0);
    assume {:print "$track_local(19,10,0):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // trace_local[limits_definition]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:274:5+1
    assume {:print "$track_local(19,10,1):", $t1} $t1 == $t1;

    // $t6 := opaque begin: DiemTimestamp::now_microseconds() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    assume {:print "$at(5,12525,12558)"} true;

    // assume Identical($t7, Not(DiemTimestamp::$is_operating())) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    assume ($t7 == !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // if ($t7) goto L10 else goto L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    if ($t7) { goto L10; } else { goto L8; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
L9:

    // assume And(Not(DiemTimestamp::$is_operating()), Eq(1, $t8)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    assume (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t8));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    assume {:print "$at(5,12525,12558)"} true;
    assume {:print "$track_abort(19,10):", $t8} $t8 == $t8;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    goto L7;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
L8:

    // assume WellFormed($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    assume $IsValid'u64'($t6);

    // assume Eq<u64>($t6, DiemTimestamp::spec_now_microseconds()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33
    assume $IsEqual'u64'($t6, $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory));

    // $t6 := opaque end: DiemTimestamp::now_microseconds() at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:28+33

    // trace_local[current_time]($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:275:13+12
    assume {:print "$track_local(19,10,4):", $t6} $t6 == $t6;

    // $t9 := get_field<AccountLimits::Window<#0>>.window_start($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:16+19
    assume {:print "$at(5,12575,12594)"} true;
    $t9 := $window_start#$1_AccountLimits_Window'#0'($Dereference($t0));

    // $t10 := 18446744073709551615 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:39+7
    $t10 := 18446744073709551615;
    assume $IsValid'u64'($t10);

    // $t11 := get_field<AccountLimits::LimitsDefinition<#0>>.time_period($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:49+29
    $t11 := $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1);

    // $t12 := -($t10, $t11) on_abort goto L7 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:47+1
    call $t12 := $Sub($t10, $t11);
    if ($abort_flag) {
        assume {:print "$at(5,12606,12607)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,10):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t13 := <=($t9, $t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:36+2
    call $t13 := $Le($t9, $t12);

    // $t14 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:103+7
    $t14 := 1;
    assume $IsValid'u64'($t14);

    // $t15 := opaque begin: Errors::limit_exceeded($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:80+31

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:80+31
    assume $IsValid'u64'($t15);

    // assume Eq<u64>($t15, 8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:80+31
    assume $IsEqual'u64'($t15, 8);

    // $t15 := opaque end: Errors::limit_exceeded($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:80+31

    // trace_local[tmp#$3]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103
    assume {:print "$track_local(19,10,3):", $t15} $t15 == $t15;

    // trace_local[tmp#$2]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103
    assume {:print "$track_local(19,10,2):", $t13} $t13 == $t13;

    // if ($t13) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103
    if ($t13) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103
L1:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103

    // destroy($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103

    // trace_abort($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103
    assume {:print "$at(5,12568,12671)"} true;
    assume {:print "$track_abort(19,10):", $t15} $t15 == $t15;

    // $t8 := move($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103
    $t8 := $t15;

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:276:9+103
    goto L7;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:13+12
    assume {:print "$at(5,12685,12697)"} true;
L0:

    // $t16 := get_field<AccountLimits::Window<#0>>.window_start($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:28+19
    $t16 := $window_start#$1_AccountLimits_Window'#0'($Dereference($t0));

    // $t17 := get_field<AccountLimits::LimitsDefinition<#0>>.time_period($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:50+29
    $t17 := $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1);

    // $t18 := +($t16, $t17) on_abort goto L7 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:48+1
    call $t18 := $AddU64($t16, $t17);
    if ($abort_flag) {
        assume {:print "$at(5,12720,12721)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,10):", $t8} $t8 == $t8;
        goto L7;
    }

    // $t19 := >($t6, $t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:26+1
    call $t19 := $Gt($t6, $t18);

    // if ($t19) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208
    if ($t19) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:278:35+12
    assume {:print "$at(5,12789,12801)"} true;
L2:

    // $t20 := borrow_field<AccountLimits::Window<#0>>.window_start($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:278:13+19
    $t20 := $ChildMutation($t0, 0, $window_start#$1_AccountLimits_Window'#0'($Dereference($t0)));

    // write_ref($t20, $t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:278:13+34
    $t20 := $UpdateMutation($t20, $t6);

    // write_back[Reference($t0).window_start]($t20) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:278:13+34
    $t0 := $UpdateMutation($t0, $Update'$1_AccountLimits_Window'#0''_window_start($Dereference($t0), $Dereference($t20)));

    // $t21 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:279:36+1
    assume {:print "$at(5,12838,12839)"} true;
    $t21 := 0;
    assume $IsValid'u64'($t21);

    // $t22 := borrow_field<AccountLimits::Window<#0>>.window_inflow($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:279:13+20
    $t22 := $ChildMutation($t0, 1, $window_inflow#$1_AccountLimits_Window'#0'($Dereference($t0)));

    // write_ref($t22, $t21) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:279:13+24
    $t22 := $UpdateMutation($t22, $t21);

    // write_back[Reference($t0).window_inflow]($t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:279:13+24
    $t0 := $UpdateMutation($t0, $Update'$1_AccountLimits_Window'#0''_window_inflow($Dereference($t0), $Dereference($t22)));

    // $t23 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:280:37+1
    assume {:print "$at(5,12877,12878)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := borrow_field<AccountLimits::Window<#0>>.window_outflow($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:280:13+21
    $t24 := $ChildMutation($t0, 2, $window_outflow#$1_AccountLimits_Window'#0'($Dereference($t0)));

    // write_ref($t24, $t23) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:280:13+25
    $t24 := $UpdateMutation($t24, $t23);

    // write_back[Reference($t0).window_outflow]($t24) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:280:13+25
    $t0 := $UpdateMutation($t0, $Update'$1_AccountLimits_Window'#0''_window_outflow($Dereference($t0), $Dereference($t24)));

    // goto L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208
    assume {:print "$at(5,12681,12889)"} true;
    goto L5;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208
L4:

    // destroy($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208
L5:

    // trace_local[window]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:277:9+208
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t0);
    assume {:print "$track_local(19,10,0):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:282:5+1
    assume {:print "$at(5,12894,12895)"} true;
L6:

    // assert Not(Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period($t1)), MaxU64())) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1)) > $MAX_U64);

    // assert Not(Not(DiemTimestamp::$is_operating[@121]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#121);

    // assert Eq<AccountLimits::Window<#0>>($t0, AccountLimits::spec_window_reset_with_limits[@121]<#0>($t5, $t1)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:297:9+80
    assume {:print "$at(5,13493,13573)"} true;
    assert {:msg "assert_failed(5,13493,13573): post-condition does not hold"}
      $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t0), $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#121, $t5, $t1));

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:297:9+80
    $ret0 := $t0;
    return;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:282:5+1
    assume {:print "$at(5,12894,12895)"} true;
L7:

    // assert Or(Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period($t1)), MaxU64()), Not(DiemTimestamp::$is_operating[@121]())) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:283:5+141
    assume {:print "$at(5,12900,13041)"} true;
    assert {:msg "assert_failed(5,12900,13041): abort not covered by any of the `aborts_if` clauses"}
      ((($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1)) > $MAX_U64) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#121));

    // assert Or(And(Gt(Add(select AccountLimits::Window.window_start($t5), select AccountLimits::LimitsDefinition.time_period($t1)), MaxU64()), Eq(8, $t8)), And(Not(DiemTimestamp::$is_operating[@121]()), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:283:5+141
    assert {:msg "assert_failed(5,12900,13041): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((($window_start#$1_AccountLimits_Window'#0'($t5) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($t1)) > $MAX_U64) && $IsEqual'num'(8, $t8)) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#121) && $IsEqual'num'(1, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:283:5+141
    $abort_code := $t8;
    $abort_flag := true;
    return;

    // label L10 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L10:

    // destroy($t0) at <internal>:1:1+10

    // goto L9 at <internal>:1:1+10
    goto L9;

}

// fun AccountLimits::update_deposit_limits [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
procedure {:timeLimit 40} $1_AccountLimits_update_deposit_limits$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_AccountLimits_Window'#0');
    var $t10: bool;
    var $t11: $1_AccountLimits_Window'#0';
    var $t12: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'#0'_$memory#136: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#137: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'#0'_$memory#161: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,3102,3504)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume {:print "$at(5,3856,3926)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    assume {:print "$at(5,3569,3609)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$t1];

    // @138 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @137 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_AccountLimits_LimitsDefinition'#0'_$memory#137 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @136 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_AccountLimits_Window'#0'_$memory#136 := $1_AccountLimits_Window'#0'_$memory;

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$at(5,3102,3103)"} true;
    assume {:print "$track_local(19,11,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$track_local(19,11,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$track_local(19,11,2):", $t2} $t2 == $t2;

    // $t5 := exists<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:16+6
    assume {:print "$at(5,3300,3306)"} true;
    $t5 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // $t6 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:70+7
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30
    assume $IsEqual'u64'($t7, 5);

    // $t7 := opaque end: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30

    // trace_local[tmp#$4]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$track_local(19,11,4):", $t7} $t7 == $t7;

    // trace_local[tmp#$3]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$track_local(19,11,3):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$at(5,3293,3363)"} true;
    assume {:print "$track_abort(19,11):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:81:13+6
    assume {:print "$at(5,3426,3432)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:82:13+17
    assume {:print "$at(5,3446,3463)"} true;
    assert {:msg "assert_failed(5,3446,3463): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$t1];

    // $t9 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:82:13+17
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,3446,3463)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,11):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t10 := opaque begin: AccountLimits::can_receive_and_update_window<#0>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;

    // $t11 := read_ref($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    $t11 := $Dereference($t9);

    // assume Identical($t12, Or(Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t9)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t9)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume ($t12 == ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t9))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
L5:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t8)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>($t9)), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>($t9)), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t9))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Not(DiemTimestamp::$is_operating())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t9))) && $IsEqual'num'(5, $t8)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    assume {:print "$track_abort(19,11):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
L4:

    // havoc[mut]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t9 := $UpdateMutation($t9, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t9));

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t9));

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, AccountLimits::spec_receiving_limits_ok<#0>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsEqual'bool'($t10, $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11, $t0));

    // assume (if And($t10, Not(AccountLimits::spec_window_unrestricted<#0>($t11))) {Eq<AccountLimits::Window<#0>>($t9, AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>($t11), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t9, AccountLimits::spec_window_reset<#0>($t11)), Eq<AccountLimits::Window<#0>>($t9, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume if (($t10 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t9), $1_AccountLimits_spec_update_inflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t9), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t9), $t11)));

    // $t10 := opaque end: AccountLimits::can_receive_and_update_window<#0>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125

    // @161 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // state save for global update invariants
    assume {:print "$at(5,3102,3504)"} true;
    $1_AccountLimits_Window'#0'_$memory#161 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // assert forall window_addr: TypeDomain<address>() where exists[@161]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#161, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // trace_return[0]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    assume {:print "$track_return(19,11,0):", $t10} $t10 == $t10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:84:5+1
    assume {:print "$at(5,3503,3504)"} true;
L2:

    // assert Not(Not(exists[@136]<AccountLimits::Window<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'#0'_$memory#136, $t1);

    // assert Not(Not(exists[@137]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<#0>>($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@138]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138));

    // assert exists<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:88:9+39
    assume {:print "$at(5,3618,3657)"} true;
    assert {:msg "assert_failed(5,3618,3657): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // assert Eq<address>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>($t1)), select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:89:9+118
    assume {:print "$at(5,3666,3784)"} true;
    assert {:msg "assert_failed(5,3666,3784): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1)), $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)));

    // assert Eq<bool>($t10, AccountLimits::spec_receiving_limits_ok<#0>(global[@136]<AccountLimits::Window<#0>>($t1), $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:378:9+67
    assume {:print "$at(5,17457,17524)"} true;
    assert {:msg "assert_failed(5,17457,17524): post-condition does not hold"}
      $IsEqual'bool'($t10, $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1), $t0));

    // assert (if And($t10, Not(AccountLimits::spec_window_unrestricted<#0>(global[@136]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_inflow<#0>(AccountLimits::spec_window_reset<#0>(global[@136]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@136]<AccountLimits::Window<#0>>($t1)))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    assume {:print "$at(5,17533,17812)"} true;
    assert {:msg "assert_failed(5,17533,17812): post-condition does not hold"}
      if (($t10 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)))) then ($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_update_inflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) || $IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))));

    // return $t10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    $ret0 := $t10;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:84:5+1
    assume {:print "$at(5,3503,3504)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Not(exists[@136]<AccountLimits::Window<#0>>($t1)), Not(exists[@137]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@138]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    assume {:print "$at(5,3509,3933)"} true;
    assert {:msg "assert_failed(5,3509,3933): abort not covered by any of the `aborts_if` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#136, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138)));

    // assert Or(Or(Or(Or(Or(And(Not(exists[@136]<AccountLimits::Window<#0>>($t1)), Eq(5, $t8)), And(Not(exists[@137]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<#0>>($t1)))), Eq(5, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<#0>(global[@136]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@138]())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    assert {:msg "assert_failed(5,3509,3933): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#136, $t1) && $IsEqual'num'(5, $t8)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) && $IsEqual'num'(5, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#137, $ResourceValue($1_AccountLimits_Window'#0'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138)) && $IsEqual'num'(1, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_deposit_limits [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
procedure {:timeLimit 40} $1_AccountLimits_update_deposit_limits$verify_instantiated_0(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t10: bool;
    var $t11: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t12: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#136: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#162: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,3102,3504)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume {:print "$at(5,3856,3926)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume CanModify<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    assume {:print "$at(5,3569,3609)"} true;
    assume $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // @138 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @137 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @136 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#136 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$at(5,3102,3103)"} true;
    assume {:print "$track_local(19,11,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$track_local(19,11,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$track_local(19,11,2):", $t2} $t2 == $t2;

    // $t5 := exists<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:16+6
    assume {:print "$at(5,3300,3306)"} true;
    $t5 := $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // $t6 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:70+7
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30
    assume $IsEqual'u64'($t7, 5);

    // $t7 := opaque end: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30

    // trace_local[tmp#$4]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$track_local(19,11,4):", $t7} $t7 == $t7;

    // trace_local[tmp#$3]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$track_local(19,11,3):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$at(5,3293,3363)"} true;
    assume {:print "$track_abort(19,11):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:81:13+6
    assume {:print "$at(5,3426,3432)"} true;
L0:

    // assert CanModify<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:82:13+17
    assume {:print "$at(5,3446,3463)"} true;
    assert {:msg "assert_failed(5,3446,3463): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // $t9 := borrow_global<AccountLimits::Window<XUS::XUS>>($t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:82:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,3446,3463)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,11):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t10 := opaque begin: AccountLimits::can_receive_and_update_window<XUS::XUS>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;

    // $t11 := read_ref($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    $t11 := $Dereference($t9);

    // assume Identical($t12, Or(Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>($t9)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>($t9)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume ($t12 == ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
L5:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t8)), And(And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>($t9)), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>($t9)), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>($t9))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Not(DiemTimestamp::$is_operating())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9))) && $IsEqual'num'(5, $t8)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    assume {:print "$track_abort(19,11):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
L4:

    // havoc[mut]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t9 := $UpdateMutation($t9, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9));

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9));

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, AccountLimits::spec_receiving_limits_ok<XUS::XUS>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsEqual'bool'($t10, $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11, $t0));

    // assume (if And($t10, Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t11))) {Eq<AccountLimits::Window<XUS::XUS>>($t9, AccountLimits::spec_update_inflow<XUS::XUS>(AccountLimits::spec_window_reset<XUS::XUS>($t11), $t0))} else {Or(Eq<AccountLimits::Window<XUS::XUS>>($t9, AccountLimits::spec_window_reset<XUS::XUS>($t11)), Eq<AccountLimits::Window<XUS::XUS>>($t9, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9), $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9), $t11)));

    // $t10 := opaque end: AccountLimits::can_receive_and_update_window<XUS::XUS>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125

    // @162 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // state save for global update invariants
    assume {:print "$at(5,3102,3504)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#162 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<XUS::XUS>@]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // assert forall window_addr: TypeDomain<address>() where exists[@162]<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::Window<XUS::XUS>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#162, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // trace_return[0]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    assume {:print "$track_return(19,11,0):", $t10} $t10 == $t10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:84:5+1
    assume {:print "$at(5,3503,3504)"} true;
L2:

    // assert Not(Not(exists[@136]<AccountLimits::Window<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1);

    // assert Not(Not(exists[@137]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Not(DiemTimestamp::$is_operating[@138]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138));

    // assert exists<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:88:9+39
    assume {:print "$at(5,3618,3657)"} true;
    assert {:msg "assert_failed(5,3618,3657): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // assert Eq<address>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>($t1)), select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:89:9+118
    assume {:print "$at(5,3666,3784)"} true;
    assert {:msg "assert_failed(5,3666,3784): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)));

    // assert Eq<bool>($t10, AccountLimits::spec_receiving_limits_ok<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1), $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:378:9+67
    assume {:print "$at(5,17457,17524)"} true;
    assert {:msg "assert_failed(5,17457,17524): post-condition does not hold"}
      $IsEqual'bool'($t10, $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1), $t0));

    // assert (if And($t10, Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)))) {Eq<AccountLimits::Window<XUS::XUS>>(global<AccountLimits::Window<XUS::XUS>>($t1), AccountLimits::spec_update_inflow<XUS::XUS>(AccountLimits::spec_window_reset<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<XUS::XUS>>(global<AccountLimits::Window<XUS::XUS>>($t1), AccountLimits::spec_window_reset<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Eq<AccountLimits::Window<XUS::XUS>>(global<AccountLimits::Window<XUS::XUS>>($t1), global[@136]<AccountLimits::Window<XUS::XUS>>($t1)))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    assume {:print "$at(5,17533,17812)"} true;
    assert {:msg "assert_failed(5,17533,17812): post-condition does not hold"}
      if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_update_inflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))));

    // return $t10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    $ret0 := $t10;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:84:5+1
    assume {:print "$at(5,3503,3504)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Not(exists[@136]<AccountLimits::Window<XUS::XUS>>($t1)), Not(exists[@137]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Not(DiemTimestamp::$is_operating[@138]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    assume {:print "$at(5,3509,3933)"} true;
    assert {:msg "assert_failed(5,3509,3933): abort not covered by any of the `aborts_if` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138)));

    // assert Or(Or(Or(Or(Or(And(Not(exists[@136]<AccountLimits::Window<XUS::XUS>>($t1)), Eq(5, $t8)), And(Not(exists[@137]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)))), Eq(5, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1)))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XUS::XUS>(global[@136]<AccountLimits::Window<XUS::XUS>>($t1))), Not(DiemTimestamp::$is_operating[@138]())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    assert {:msg "assert_failed(5,3509,3933): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1) && $IsEqual'num'(5, $t8)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) && $IsEqual'num'(5, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138)) && $IsEqual'num'(1, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_deposit_limits [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
procedure {:timeLimit 40} $1_AccountLimits_update_deposit_limits$verify_instantiated_1(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t10: bool;
    var $t11: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t12: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#136: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#163: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,3102,3504)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume {:print "$at(5,3856,3926)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:92:17+70
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume CanModify<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    assume {:print "$at(5,3569,3609)"} true;
    assume $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // @138 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @137 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @136 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:87:9+40
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#136 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$at(5,3102,3103)"} true;
    assume {:print "$track_local(19,11,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$track_local(19,11,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+1
    assume {:print "$track_local(19,11,2):", $t2} $t2 == $t2;

    // $t5 := exists<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:16+6
    assume {:print "$at(5,3300,3306)"} true;
    $t5 := $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // $t6 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:70+7
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30
    assume $IsEqual'u64'($t7, 5);

    // $t7 := opaque end: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:48+30

    // trace_local[tmp#$4]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$track_local(19,11,4):", $t7} $t7 == $t7;

    // trace_local[tmp#$3]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$track_local(19,11,3):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    assume {:print "$at(5,3293,3363)"} true;
    assume {:print "$track_abort(19,11):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:79:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:81:13+6
    assume {:print "$at(5,3426,3432)"} true;
L0:

    // assert CanModify<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:82:13+17
    assume {:print "$at(5,3446,3463)"} true;
    assert {:msg "assert_failed(5,3446,3463): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // $t9 := borrow_global<AccountLimits::Window<XDX::XDX>>($t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:82:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,3446,3463)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,11):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t10 := opaque begin: AccountLimits::can_receive_and_update_window<XDX::XDX>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;

    // $t11 := read_ref($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    $t11 := $Dereference($t9);

    // assume Identical($t12, Or(Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>($t9)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>($t9)), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume ($t12 == ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
L5:

    // assume Or(Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t8)), And(And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>($t9)), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>($t9)), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>($t9))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Not(DiemTimestamp::$is_operating())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume (((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9))) && $IsEqual'num'(5, $t8)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    assume {:print "$track_abort(19,11):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
L4:

    // havoc[mut]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t9 := $UpdateMutation($t9, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9));

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9));

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, AccountLimits::spec_receiving_limits_ok<XDX::XDX>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume $IsEqual'bool'($t10, $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11, $t0));

    // assume (if And($t10, Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t11))) {Eq<AccountLimits::Window<XDX::XDX>>($t9, AccountLimits::spec_update_inflow<XDX::XDX>(AccountLimits::spec_window_reset<XDX::XDX>($t11), $t0))} else {Or(Eq<AccountLimits::Window<XDX::XDX>>($t9, AccountLimits::spec_window_reset<XDX::XDX>($t11)), Eq<AccountLimits::Window<XDX::XDX>>($t9, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9), $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9), $t11)));

    // $t10 := opaque end: AccountLimits::can_receive_and_update_window<XDX::XDX>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125

    // @163 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:74:5+402
    // state save for global update invariants
    assume {:print "$at(5,3102,3504)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#163 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<XDX::XDX>@]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // assert forall window_addr: TypeDomain<address>() where exists[@163]<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::Window<XDX::XDX>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#163, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // trace_return[0]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:80:9+125
    assume {:print "$at(5,3373,3498)"} true;
    assume {:print "$track_return(19,11,0):", $t10} $t10 == $t10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:84:5+1
    assume {:print "$at(5,3503,3504)"} true;
L2:

    // assert Not(Not(exists[@136]<AccountLimits::Window<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1);

    // assert Not(Not(exists[@137]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) + $t0) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Not(DiemTimestamp::$is_operating[@138]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138));

    // assert exists<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:88:9+39
    assume {:print "$at(5,3618,3657)"} true;
    assert {:msg "assert_failed(5,3618,3657): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // assert Eq<address>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>($t1)), select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:89:9+118
    assume {:print "$at(5,3666,3784)"} true;
    assert {:msg "assert_failed(5,3666,3784): post-condition does not hold"}
      $IsEqual'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)));

    // assert Eq<bool>($t10, AccountLimits::spec_receiving_limits_ok<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1), $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:378:9+67
    assume {:print "$at(5,17457,17524)"} true;
    assert {:msg "assert_failed(5,17457,17524): post-condition does not hold"}
      $IsEqual'bool'($t10, $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1), $t0));

    // assert (if And($t10, Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)))) {Eq<AccountLimits::Window<XDX::XDX>>(global<AccountLimits::Window<XDX::XDX>>($t1), AccountLimits::spec_update_inflow<XDX::XDX>(AccountLimits::spec_window_reset<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<XDX::XDX>>(global<AccountLimits::Window<XDX::XDX>>($t1), AccountLimits::spec_window_reset<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Eq<AccountLimits::Window<XDX::XDX>>(global<AccountLimits::Window<XDX::XDX>>($t1), global[@136]<AccountLimits::Window<XDX::XDX>>($t1)))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    assume {:print "$at(5,17533,17812)"} true;
    assert {:msg "assert_failed(5,17533,17812): post-condition does not hold"}
      if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_update_inflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))));

    // return $t10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:379:9+279
    $ret0 := $t10;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:84:5+1
    assume {:print "$at(5,3503,3504)"} true;
L3:

    // assert Or(Or(Or(Or(Or(Not(exists[@136]<AccountLimits::Window<XDX::XDX>>($t1)), Not(exists[@137]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Not(DiemTimestamp::$is_operating[@138]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    assume {:print "$at(5,3509,3933)"} true;
    assert {:msg "assert_failed(5,3509,3933): abort not covered by any of the `aborts_if` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) + $t0) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138)));

    // assert Or(Or(Or(Or(Or(And(Not(exists[@136]<AccountLimits::Window<XDX::XDX>>($t1)), Eq(5, $t8)), And(Not(exists[@137]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)))), Eq(5, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@138, @137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@138, @137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1)))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@137]<XDX::XDX>(global[@136]<AccountLimits::Window<XDX::XDX>>($t1))), Not(DiemTimestamp::$is_operating[@138]())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    assert {:msg "assert_failed(5,3509,3933): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1) && $IsEqual'num'(5, $t8)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) && $IsEqual'num'(5, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1))) + $t0) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#137, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#136, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#138)) && $IsEqual'num'(1, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:85:5+424
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_limits_definition [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
procedure {:timeLimit 40} $1_AccountLimits_update_limits_definition$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: $Mutation ($1_AccountLimits_LimitsDefinition'#0');
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_AccountLimits_LimitsDefinition'#0');
    var $t16: int;
    var $t17: bool;
    var $t18: $Mutation (int);
    var $t19: int;
    var $t20: bool;
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: bool;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: bool;
    var $t27: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$1_AccountLimits_LimitsDefinition'#0'': $1_AccountLimits_LimitsDefinition'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#149: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#150: $Memory $1_AccountLimits_LimitsDefinition'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(5,9581,10609)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t5);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,0):", $t0} $t0 == $t0;

    // trace_local[limit_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,1):", $t1} $t1 == $t1;

    // trace_local[new_max_inflow]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,2):", $t2} $t2 == $t2;

    // trace_local[new_max_outflow]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,3):", $t3} $t3 == $t3;

    // trace_local[new_max_holding_balance]($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,4):", $t4} $t4 == $t4;

    // trace_local[new_time_period]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,5):", $t5} $t5 == $t5;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume {:print "$at(5,9858,9903)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t10) goto L18 else goto L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    if ($t10) { goto L18; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
L18:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1), Eq(3, $t11))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t11))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(5, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1) && $IsEqual'num'(3, $t11))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume {:print "$at(5,9858,9903)"} true;
    assume {:print "$track_abort(19,12):", $t11} $t11 == $t11;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
L17:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45

    // $t12 := exists<AccountLimits::LimitsDefinition<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:16+6
    assume {:print "$at(5,10093,10099)"} true;
    $t12 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1);

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:89+18
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41

    // trace_local[tmp#$7]($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$track_local(19,12,7):", $t14} $t14 == $t14;

    // trace_local[tmp#$6]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$track_local(19,12,6):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
L1:

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$at(5,10086,10186)"} true;
    assume {:print "$track_abort(19,12):", $t14} $t14 == $t14;

    // $t11 := move($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    $t11 := $t14;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:72+13
    assume {:print "$at(5,10259,10272)"} true;
L0:

    // $t15 := borrow_global<AccountLimits::LimitsDefinition<#0>>($t1) on_abort goto L16 with $t11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:26+17
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,10213,10230)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,12):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[limits_def]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:13+10
    $temp_0'$1_AccountLimits_LimitsDefinition'#0'' := $Dereference($t15);
    assume {:print "$track_local(19,12,8):", $temp_0'$1_AccountLimits_LimitsDefinition'#0''} $temp_0'$1_AccountLimits_LimitsDefinition'#0'' == $temp_0'$1_AccountLimits_LimitsDefinition'#0'';

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:30+1
    assume {:print "$at(5,10304,10305)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t2, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:28+1
    call $t17 := $Gt($t2, $t16);

    // if ($t17) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:59+14
L2:

    // $t18 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_inflow($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+21
    $t18 := $ChildMutation($t15, 0, $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t18, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+38
    $t18 := $UpdateMutation($t18, $t2);

    // write_back[Reference($t15).max_inflow]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+38
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow($Dereference($t15), $Dereference($t18)));

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:13+15
    assume {:print "$at(5,10363,10378)"} true;
L4:

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:31+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := >($t3, $t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:29+1
    call $t20 := $Gt($t3, $t19);

    // if ($t20) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
    if ($t20) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
L6:

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
    goto L7;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:61+15
L5:

    // $t21 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_outflow($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+22
    $t21 := $ChildMutation($t15, 1, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t21, $t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+40
    $t21 := $UpdateMutation($t21, $t3);

    // write_back[Reference($t15).max_outflow]($t21) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow($Dereference($t15), $Dereference($t21)));

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:13+23
    assume {:print "$at(5,10442,10465)"} true;
L7:

    // $t22 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:39+1
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := >($t4, $t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:37+1
    call $t23 := $Gt($t4, $t22);

    // if ($t23) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
    if ($t23) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
    goto L10;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:69+23
L8:

    // $t24 := borrow_field<AccountLimits::LimitsDefinition<#0>>.max_holding($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+22
    $t24 := $ChildMutation($t15, 3, $max_holding#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t24, $t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+48
    $t24 := $UpdateMutation($t24, $t4);

    // write_back[Reference($t15).max_holding]($t24) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+48
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding($Dereference($t15), $Dereference($t24)));

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:13+15
    assume {:print "$at(5,10537,10552)"} true;
L10:

    // $t25 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:31+1
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := >($t5, $t25) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:29+1
    call $t26 := $Gt($t5, $t25);

    // if ($t26) goto L11 else goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    if ($t26) { goto L11; } else { goto L12; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
L12:

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    goto L13;

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:61+15
L11:

    // $t27 := borrow_field<AccountLimits::LimitsDefinition<#0>>.time_period($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+22
    $t27 := $ChildMutation($t15, 2, $time_period#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)));

    // write_ref($t27, $t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    $t27 := $UpdateMutation($t27, $t5);

    // write_back[Reference($t15).time_period]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period($Dereference($t15), $Dereference($t27)));

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    assume {:print "$at(5,1241,1266)"} true;
    assert {:msg "assert_failed(5,1241,1266): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    assume {:print "$at(5,1275,1301)"} true;
    assert {:msg "assert_failed(5,1275,1301): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    assume {:print "$at(5,1310,1336)"} true;
    assert {:msg "assert_failed(5,1310,1336): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    assume {:print "$at(5,1345,1371)"} true;
    assert {:msg "assert_failed(5,1345,1371): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // @149 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // state save for global update invariants
    assume {:print "$at(5,9581,10609)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory#149 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    assume {:print "$at(5,10560,10600)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'#0'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@149]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    assume {:print "$at(5,24612,24782)"} true;
    assert {:msg "assert_failed(5,24612,24782): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#149, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    assume {:print "$at(5,10560,10600)"} true;
    goto L14;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
L13:

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    assume {:print "$at(5,1241,1266)"} true;
    assert {:msg "assert_failed(5,1241,1266): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    assume {:print "$at(5,1275,1301)"} true;
    assert {:msg "assert_failed(5,1275,1301): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    assume {:print "$at(5,1310,1336)"} true;
    assert {:msg "assert_failed(5,1310,1336): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    assume {:print "$at(5,1345,1371)"} true;
    assert {:msg "assert_failed(5,1345,1371): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($Dereference($t15)) > 0);

    // @150 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // state save for global update invariants
    assume {:print "$at(5,25106,25314)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory#150 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // write_back[AccountLimits::LimitsDefinition<#0>@]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    assume {:print "$at(5,10533,10602)"} true;
    $1_AccountLimits_LimitsDefinition'#0'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'#0'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@150]<AccountLimits::LimitsDefinition<#0>>(addr): exists<AccountLimits::LimitsDefinition<#0>>(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    assume {:print "$at(5,24612,24782)"} true;
    assert {:msg "assert_failed(5,24612,24782): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#150, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // destroy($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    assume {:print "$at(5,10533,10602)"} true;

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:78+1
L14:

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    assume {:print "$at(5,10608,10609)"} true;
L15:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
L16:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_limits_definition [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
procedure {:timeLimit 40} $1_AccountLimits_update_limits_definition$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XUS_XUS');
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XUS_XUS');
    var $t16: int;
    var $t17: bool;
    var $t18: $Mutation (int);
    var $t19: int;
    var $t20: bool;
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: bool;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: bool;
    var $t27: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'': $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#152: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(5,9581,10609)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t5);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,0):", $t0} $t0 == $t0;

    // trace_local[limit_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,1):", $t1} $t1 == $t1;

    // trace_local[new_max_inflow]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,2):", $t2} $t2 == $t2;

    // trace_local[new_max_outflow]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,3):", $t3} $t3 == $t3;

    // trace_local[new_max_holding_balance]($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,4):", $t4} $t4 == $t4;

    // trace_local[new_time_period]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,5):", $t5} $t5 == $t5;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume {:print "$at(5,9858,9903)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t10) goto L18 else goto L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    if ($t10) { goto L18; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
L18:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1), Eq(3, $t11))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t11))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(5, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1) && $IsEqual'num'(3, $t11))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume {:print "$at(5,9858,9903)"} true;
    assume {:print "$track_abort(19,12):", $t11} $t11 == $t11;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
L17:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45

    // $t12 := exists<AccountLimits::LimitsDefinition<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:16+6
    assume {:print "$at(5,10093,10099)"} true;
    $t12 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1);

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:89+18
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41

    // trace_local[tmp#$7]($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$track_local(19,12,7):", $t14} $t14 == $t14;

    // trace_local[tmp#$6]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$track_local(19,12,6):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
L1:

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$at(5,10086,10186)"} true;
    assume {:print "$track_abort(19,12):", $t14} $t14 == $t14;

    // $t11 := move($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    $t11 := $t14;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:72+13
    assume {:print "$at(5,10259,10272)"} true;
L0:

    // $t15 := borrow_global<AccountLimits::LimitsDefinition<XUS::XUS>>($t1) on_abort goto L16 with $t11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:26+17
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,10213,10230)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,12):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[limits_def]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:13+10
    $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'' := $Dereference($t15);
    assume {:print "$track_local(19,12,8):", $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''} $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'';

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:30+1
    assume {:print "$at(5,10304,10305)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t2, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:28+1
    call $t17 := $Gt($t2, $t16);

    // if ($t17) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:59+14
L2:

    // $t18 := borrow_field<AccountLimits::LimitsDefinition<XUS::XUS>>.max_inflow($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+21
    $t18 := $ChildMutation($t15, 0, $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t18, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+38
    $t18 := $UpdateMutation($t18, $t2);

    // write_back[Reference($t15).max_inflow]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+38
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow($Dereference($t15), $Dereference($t18)));

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:13+15
    assume {:print "$at(5,10363,10378)"} true;
L4:

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:31+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := >($t3, $t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:29+1
    call $t20 := $Gt($t3, $t19);

    // if ($t20) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
    if ($t20) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
L6:

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
    goto L7;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:61+15
L5:

    // $t21 := borrow_field<AccountLimits::LimitsDefinition<XUS::XUS>>.max_outflow($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+22
    $t21 := $ChildMutation($t15, 1, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t21, $t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+40
    $t21 := $UpdateMutation($t21, $t3);

    // write_back[Reference($t15).max_outflow]($t21) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow($Dereference($t15), $Dereference($t21)));

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:13+23
    assume {:print "$at(5,10442,10465)"} true;
L7:

    // $t22 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:39+1
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := >($t4, $t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:37+1
    call $t23 := $Gt($t4, $t22);

    // if ($t23) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
    if ($t23) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
    goto L10;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:69+23
L8:

    // $t24 := borrow_field<AccountLimits::LimitsDefinition<XUS::XUS>>.max_holding($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+22
    $t24 := $ChildMutation($t15, 3, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t24, $t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+48
    $t24 := $UpdateMutation($t24, $t4);

    // write_back[Reference($t15).max_holding]($t24) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+48
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding($Dereference($t15), $Dereference($t24)));

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:13+15
    assume {:print "$at(5,10537,10552)"} true;
L10:

    // $t25 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:31+1
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := >($t5, $t25) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:29+1
    call $t26 := $Gt($t5, $t25);

    // if ($t26) goto L11 else goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    if ($t26) { goto L11; } else { goto L12; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
L12:

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    goto L13;

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:61+15
L11:

    // $t27 := borrow_field<AccountLimits::LimitsDefinition<XUS::XUS>>.time_period($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+22
    $t27 := $ChildMutation($t15, 2, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)));

    // write_ref($t27, $t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    $t27 := $UpdateMutation($t27, $t5);

    // write_back[Reference($t15).time_period]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period($Dereference($t15), $Dereference($t27)));

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    assume {:print "$at(5,1241,1266)"} true;
    assert {:msg "assert_failed(5,1241,1266): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    assume {:print "$at(5,1275,1301)"} true;
    assert {:msg "assert_failed(5,1275,1301): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    assume {:print "$at(5,1310,1336)"} true;
    assert {:msg "assert_failed(5,1310,1336): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    assume {:print "$at(5,1345,1371)"} true;
    assert {:msg "assert_failed(5,1345,1371): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // @151 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // state save for global update invariants
    assume {:print "$at(5,9581,10609)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::LimitsDefinition<XUS::XUS>@]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    assume {:print "$at(5,10560,10600)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@151]<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    assume {:print "$at(5,24612,24782)"} true;
    assert {:msg "assert_failed(5,24612,24782): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#151, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume {:print "$at(41,2643,2769)"} true;
    assert {:msg "assert_failed(41,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume {:print "$at(41,2853,2972)"} true;
    assert {:msg "assert_failed(41,2853,2972): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    assume {:print "$at(5,10560,10600)"} true;
    goto L14;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
L13:

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    assume {:print "$at(5,1241,1266)"} true;
    assert {:msg "assert_failed(5,1241,1266): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    assume {:print "$at(5,1275,1301)"} true;
    assert {:msg "assert_failed(5,1275,1301): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    assume {:print "$at(5,1310,1336)"} true;
    assert {:msg "assert_failed(5,1310,1336): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    assume {:print "$at(5,1345,1371)"} true;
    assert {:msg "assert_failed(5,1345,1371): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($Dereference($t15)) > 0);

    // @152 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    // state save for global update invariants
    assume {:print "$at(41,2853,2972)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#152 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::LimitsDefinition<XUS::XUS>@]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    assume {:print "$at(5,10533,10602)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@152]<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    assume {:print "$at(5,24612,24782)"} true;
    assert {:msg "assert_failed(5,24612,24782): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#152, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume {:print "$at(41,2643,2769)"} true;
    assert {:msg "assert_failed(41,2643,2769): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume {:print "$at(41,2853,2972)"} true;
    assert {:msg "assert_failed(41,2853,2972): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // destroy($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    assume {:print "$at(5,10533,10602)"} true;

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:78+1
L14:

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    assume {:print "$at(5,10608,10609)"} true;
L15:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
L16:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_limits_definition [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
procedure {:timeLimit 40} $1_AccountLimits_update_limits_definition$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int, _$t4: int, _$t5: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t6: bool;
    var $t7: int;
    var $t8: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XDX_XDX');
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $Mutation ($1_AccountLimits_LimitsDefinition'$1_XDX_XDX');
    var $t16: int;
    var $t17: bool;
    var $t18: $Mutation (int);
    var $t19: int;
    var $t20: bool;
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: bool;
    var $t24: $Mutation (int);
    var $t25: int;
    var $t26: bool;
    var $t27: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'': $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#153: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#154: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    assume IsEmptyVec(p#$Mutation($t8));
    assume IsEmptyVec(p#$Mutation($t15));
    assume IsEmptyVec(p#$Mutation($t18));
    assume IsEmptyVec(p#$Mutation($t21));
    assume IsEmptyVec(p#$Mutation($t24));
    assume IsEmptyVec(p#$Mutation($t27));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(5,9581,10609)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t4);

    // assume WellFormed($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume $IsValid'u64'($t5);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,0):", $t0} $t0 == $t0;

    // trace_local[limit_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,1):", $t1} $t1 == $t1;

    // trace_local[new_max_inflow]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,2):", $t2} $t2 == $t2;

    // trace_local[new_max_outflow]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,3):", $t3} $t3 == $t3;

    // trace_local[new_max_holding_balance]($t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,4):", $t4} $t4 == $t4;

    // trace_local[new_time_period]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1
    assume {:print "$track_local(19,12,5):", $t5} $t5 == $t5;

    // assume Identical($t9, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t9 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume {:print "$at(5,9858,9903)"} true;

    // assume Identical($t10, Or(Or(Not(exists<Roles::RoleId>($t9)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume ($t10 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t9) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t10) goto L18 else goto L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    if ($t10) { goto L18; } else { goto L17; }

    // label L18 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
L18:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t9)), Eq(5, $t11)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t9)), 1), Eq(3, $t11))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t11))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t9) && $IsEqual'num'(5, $t11)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t9)), 1) && $IsEqual'num'(3, $t11))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t11)));

    // trace_abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    assume {:print "$at(5,9858,9903)"} true;
    assume {:print "$track_abort(19,12):", $t11} $t11 == $t11;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
    goto L16;

    // label L17 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45
L17:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:232:9+45

    // $t12 := exists<AccountLimits::LimitsDefinition<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:16+6
    assume {:print "$at(5,10093,10099)"} true;
    $t12 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1);

    // $t13 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:89+18
    $t13 := 0;
    assume $IsValid'u64'($t13);

    // $t14 := opaque begin: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41

    // assume WellFormed($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41
    assume $IsValid'u64'($t14);

    // assume Eq<u64>($t14, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41
    assume $IsEqual'u64'($t14, 5);

    // $t14 := opaque end: Errors::not_published($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:67+41

    // trace_local[tmp#$7]($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$track_local(19,12,7):", $t14} $t14 == $t14;

    // trace_local[tmp#$6]($t12) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$track_local(19,12,6):", $t12} $t12 == $t12;

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
L1:

    // trace_abort($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    assume {:print "$at(5,10086,10186)"} true;
    assume {:print "$track_abort(19,12):", $t14} $t14 == $t14;

    // $t11 := move($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    $t11 := $t14;

    // goto L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:235:9+100
    goto L16;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:72+13
    assume {:print "$at(5,10259,10272)"} true;
L0:

    // $t15 := borrow_global<AccountLimits::LimitsDefinition<XDX::XDX>>($t1) on_abort goto L16 with $t11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:26+17
    if (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,10213,10230)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(19,12):", $t11} $t11 == $t11;
        goto L16;
    }

    // trace_local[limits_def]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:236:13+10
    $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'' := $Dereference($t15);
    assume {:print "$track_local(19,12,8):", $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''} $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'';

    // $t16 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:30+1
    assume {:print "$at(5,10304,10305)"} true;
    $t16 := 0;
    assume $IsValid'u64'($t16);

    // $t17 := >($t2, $t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:28+1
    call $t17 := $Gt($t2, $t16);

    // if ($t17) goto L2 else goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
    if ($t17) { goto L2; } else { goto L3; }

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
L3:

    // goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:9+66
    goto L4;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:59+14
L2:

    // $t18 := borrow_field<AccountLimits::LimitsDefinition<XDX::XDX>>.max_inflow($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+21
    $t18 := $ChildMutation($t15, 0, $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t18, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+38
    $t18 := $UpdateMutation($t18, $t2);

    // write_back[Reference($t15).max_inflow]($t18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:237:35+38
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow($Dereference($t15), $Dereference($t18)));

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:13+15
    assume {:print "$at(5,10363,10378)"} true;
L4:

    // $t19 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:31+1
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := >($t3, $t19) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:29+1
    call $t20 := $Gt($t3, $t19);

    // if ($t20) goto L5 else goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
    if ($t20) { goto L5; } else { goto L6; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
L6:

    // goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:9+69
    goto L7;

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:61+15
L5:

    // $t21 := borrow_field<AccountLimits::LimitsDefinition<XDX::XDX>>.max_outflow($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+22
    $t21 := $ChildMutation($t15, 1, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t21, $t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+40
    $t21 := $UpdateMutation($t21, $t3);

    // write_back[Reference($t15).max_outflow]($t21) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:238:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow($Dereference($t15), $Dereference($t21)));

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:13+23
    assume {:print "$at(5,10442,10465)"} true;
L7:

    // $t22 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:39+1
    $t22 := 0;
    assume $IsValid'u64'($t22);

    // $t23 := >($t4, $t22) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:37+1
    call $t23 := $Gt($t4, $t22);

    // if ($t23) goto L8 else goto L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
    if ($t23) { goto L8; } else { goto L9; }

    // label L9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
L9:

    // goto L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:9+85
    goto L10;

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:69+23
L8:

    // $t24 := borrow_field<AccountLimits::LimitsDefinition<XDX::XDX>>.max_holding($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+22
    $t24 := $ChildMutation($t15, 3, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t24, $t4) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+48
    $t24 := $UpdateMutation($t24, $t4);

    // write_back[Reference($t15).max_holding]($t24) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:239:44+48
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding($Dereference($t15), $Dereference($t24)));

    // label L10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:13+15
    assume {:print "$at(5,10537,10552)"} true;
L10:

    // $t25 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:31+1
    $t25 := 0;
    assume $IsValid'u64'($t25);

    // $t26 := >($t5, $t25) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:29+1
    call $t26 := $Gt($t5, $t25);

    // if ($t26) goto L11 else goto L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    if ($t26) { goto L11; } else { goto L12; }

    // label L12 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
L12:

    // goto L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    goto L13;

    // label L11 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:61+15
L11:

    // $t27 := borrow_field<AccountLimits::LimitsDefinition<XDX::XDX>>.time_period($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+22
    $t27 := $ChildMutation($t15, 2, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)));

    // write_ref($t27, $t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    $t27 := $UpdateMutation($t27, $t5);

    // write_back[Reference($t15).time_period]($t27) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    $t15 := $UpdateMutation($t15, $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period($Dereference($t15), $Dereference($t27)));

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    assume {:print "$at(5,1241,1266)"} true;
    assert {:msg "assert_failed(5,1241,1266): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    assume {:print "$at(5,1275,1301)"} true;
    assert {:msg "assert_failed(5,1275,1301): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    assume {:print "$at(5,1310,1336)"} true;
    assert {:msg "assert_failed(5,1310,1336): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    assume {:print "$at(5,1345,1371)"} true;
    assert {:msg "assert_failed(5,1345,1371): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // @153 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:224:5+1028
    // state save for global update invariants
    assume {:print "$at(5,9581,10609)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#153 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::LimitsDefinition<XDX::XDX>@]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    assume {:print "$at(5,10560,10600)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@153]<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    assume {:print "$at(5,24612,24782)"} true;
    assert {:msg "assert_failed(5,24612,24782): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#153, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume {:print "$at(40,6295,6421)"} true;
    assert {:msg "assert_failed(40,6295,6421): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume {:print "$at(40,6505,6624)"} true;
    assert {:msg "assert_failed(40,6505,6624): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // goto L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:36+40
    assume {:print "$at(5,10560,10600)"} true;
    goto L14;

    // label L13 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
L13:

    // assert Gt(select AccountLimits::LimitsDefinition.max_inflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:28:9+25
    assume {:print "$at(5,1241,1266)"} true;
    assert {:msg "assert_failed(5,1241,1266): data invariant does not hold"}
      ($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_outflow($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:29:9+26
    assume {:print "$at(5,1275,1301)"} true;
    assert {:msg "assert_failed(5,1275,1301): data invariant does not hold"}
      ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.time_period($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:30:9+26
    assume {:print "$at(5,1310,1336)"} true;
    assert {:msg "assert_failed(5,1310,1336): data invariant does not hold"}
      ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // assert Gt(select AccountLimits::LimitsDefinition.max_holding($t15), 0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    // data invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:31:9+26
    assume {:print "$at(5,1345,1371)"} true;
    assert {:msg "assert_failed(5,1345,1371): data invariant does not hold"}
      ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($Dereference($t15)) > 0);

    // @154 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    // state save for global update invariants
    assume {:print "$at(40,6505,6624)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#154 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::LimitsDefinition<XDX::XDX>@]($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    assume {:print "$at(5,10533,10602)"} true;
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // assert forall addr: TypeDomain<address>() where exists[@154]<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:534:9+170
    assume {:print "$at(5,24612,24782)"} true;
    assert {:msg "assert_failed(5,24612,24782): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#154, addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume {:print "$at(40,6295,6421)"} true;
    assert {:msg "assert_failed(40,6295,6421): global memory invariant does not hold"}
      ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume {:print "$at(40,6505,6624)"} true;
    assert {:msg "assert_failed(40,6505,6624): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // destroy($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:9+69
    assume {:print "$at(5,10533,10602)"} true;

    // label L14 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:240:78+1
L14:

    // label L15 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    assume {:print "$at(5,10608,10609)"} true;
L15:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    return;

    // label L16 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
L16:

    // abort($t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:241:5+1
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_window_info [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
procedure {:timeLimit 40} $1_AccountLimits_update_window_info$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $Mutation ($1_AccountLimits_Window'#0');
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $Mutation ($1_AccountLimits_Window'#0');
    var $t11: int;
    var $t12: bool;
    var $t13: $Mutation (int);
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'#0'_$memory#143: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_Window'#0'_$memory#144: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(5,11418,11996)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'address'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,0):", $t0} $t0 == $t0;

    // trace_local[window_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,1):", $t1} $t1 == $t1;

    // trace_local[aggregate_balance]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,2):", $t2} $t2 == $t2;

    // trace_local[new_limit_address]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,3):", $t3} $t3 == $t3;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume {:print "$at(5,11621,11666)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t8) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    if ($t8) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
L8:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume {:print "$at(5,11621,11666)"} true;
    assume {:print "$track_abort(19,13):", $t9} $t9 == $t9;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    goto L6;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
L7:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45

    // $t10 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L6 with $t9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:261:22+17
    assume {:print "$at(5,11689,11706)"} true;
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,11689,11706)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,13):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[window]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:261:13+6
    $temp_0'$1_AccountLimits_Window'#0'' := $Dereference($t10);
    assume {:print "$track_local(19,13,6):", $temp_0'$1_AccountLimits_Window'#0''} $temp_0'$1_AccountLimits_Window'#0'' == $temp_0'$1_AccountLimits_Window'#0'';

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:34+1
    assume {:print "$at(5,11775,11776)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := !=($t2, $t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:31+2
    $t12 := !$IsEqual'u64'($t2, $t11);

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:65+17
L0:

    // $t13 := borrow_field<AccountLimits::Window<#0>>.tracked_balance($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+22
    $t13 := $ChildMutation($t10, 3, $tracked_balance#$1_AccountLimits_Window'#0'($Dereference($t10)));

    // write_ref($t13, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+42
    $t13 := $UpdateMutation($t13, $t2);

    // write_back[Reference($t10).tracked_balance]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+42
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'#0''_tracked_balance($Dereference($t10), $Dereference($t13)));

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:51+17
    assume {:print "$at(5,11877,11894)"} true;
L2:

    // $t14 := exists<AccountLimits::LimitsDefinition<#0>>($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:16+6
    $t14 := $ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $t3);

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:93+18
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$track_local(19,13,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$track_local(19,13,4):", $t14} $t14 == $t14;

    // if ($t14) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    if ($t14) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
L4:

    // @143 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // state save for global update invariants
    assume {:print "$at(5,11418,11996)"} true;
    $1_AccountLimits_Window'#0'_$memory#143 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@143]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#143, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // destroy($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;
    assume {:print "$track_abort(19,13):", $t16} $t16 == $t16;

    // $t9 := move($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    $t9 := $t16;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    goto L6;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:32+17
    assume {:print "$at(5,11972,11989)"} true;
L3:

    // $t17 := borrow_field<AccountLimits::Window<#0>>.limit_address($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+20
    $t17 := $ChildMutation($t10, 4, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t10)));

    // write_ref($t17, $t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    $t17 := $UpdateMutation($t17, $t3);

    // write_back[Reference($t10).limit_address]($t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'#0''_limit_address($Dereference($t10), $Dereference($t17)));

    // @144 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // state save for global update invariants
    assume {:print "$at(5,25530,25840)"} true;
    $1_AccountLimits_Window'#0'_$memory#144 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    assume {:print "$at(5,11949,11989)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@144]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#144, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    assume {:print "$at(5,11995,11996)"} true;
L5:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    return;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
L6:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_window_info [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
procedure {:timeLimit 40} $1_AccountLimits_update_window_info$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t11: int;
    var $t12: bool;
    var $t13: $Mutation (int);
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#145: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#146: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(5,11418,11996)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'address'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,0):", $t0} $t0 == $t0;

    // trace_local[window_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,1):", $t1} $t1 == $t1;

    // trace_local[aggregate_balance]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,2):", $t2} $t2 == $t2;

    // trace_local[new_limit_address]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,3):", $t3} $t3 == $t3;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume {:print "$at(5,11621,11666)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t8) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    if ($t8) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
L8:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume {:print "$at(5,11621,11666)"} true;
    assume {:print "$track_abort(19,13):", $t9} $t9 == $t9;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    goto L6;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
L7:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45

    // $t10 := borrow_global<AccountLimits::Window<XUS::XUS>>($t1) on_abort goto L6 with $t9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:261:22+17
    assume {:print "$at(5,11689,11706)"} true;
    if (!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,11689,11706)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,13):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[window]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:261:13+6
    $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' := $Dereference($t10);
    assume {:print "$track_local(19,13,6):", $temp_0'$1_AccountLimits_Window'$1_XUS_XUS''} $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'' == $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:34+1
    assume {:print "$at(5,11775,11776)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := !=($t2, $t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:31+2
    $t12 := !$IsEqual'u64'($t2, $t11);

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:65+17
L0:

    // $t13 := borrow_field<AccountLimits::Window<XUS::XUS>>.tracked_balance($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+22
    $t13 := $ChildMutation($t10, 3, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t10)));

    // write_ref($t13, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+42
    $t13 := $UpdateMutation($t13, $t2);

    // write_back[Reference($t10).tracked_balance]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+42
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance($Dereference($t10), $Dereference($t13)));

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:51+17
    assume {:print "$at(5,11877,11894)"} true;
L2:

    // $t14 := exists<AccountLimits::LimitsDefinition<XUS::XUS>>($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:16+6
    $t14 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t3);

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:93+18
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$track_local(19,13,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$track_local(19,13,4):", $t14} $t14 == $t14;

    // if ($t14) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    if ($t14) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
L4:

    // @145 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // state save for global update invariants
    assume {:print "$at(5,11418,11996)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#145 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<XUS::XUS>@]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@145]<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::Window<XUS::XUS>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#145, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // destroy($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;
    assume {:print "$track_abort(19,13):", $t16} $t16 == $t16;

    // $t9 := move($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    $t9 := $t16;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    goto L6;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:32+17
    assume {:print "$at(5,11972,11989)"} true;
L3:

    // $t17 := borrow_field<AccountLimits::Window<XUS::XUS>>.limit_address($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+20
    $t17 := $ChildMutation($t10, 4, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t10)));

    // write_ref($t17, $t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    $t17 := $UpdateMutation($t17, $t3);

    // write_back[Reference($t10).limit_address]($t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XUS_XUS''_limit_address($Dereference($t10), $Dereference($t17)));

    // @146 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // state save for global update invariants
    assume {:print "$at(5,25530,25840)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#146 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<XUS::XUS>@]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    assume {:print "$at(5,11949,11989)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@146]<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::Window<XUS::XUS>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#146, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    assume {:print "$at(5,11995,11996)"} true;
L5:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    return;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
L6:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_window_info [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
procedure {:timeLimit 40} $1_AccountLimits_update_window_info$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: int) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t4: bool;
    var $t5: int;
    var $t6: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t11: int;
    var $t12: bool;
    var $t13: $Mutation (int);
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $Mutation (int);
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#147: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#148: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    assume IsEmptyVec(p#$Mutation($t6));
    assume IsEmptyVec(p#$Mutation($t10));
    assume IsEmptyVec(p#$Mutation($t13));
    assume IsEmptyVec(p#$Mutation($t17));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:432:9+91
    assume {:print "$at(5,11418,11996)"} true;
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Eq<address>(addr, b1e55ed) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:438:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($IsEqual'address'(addr, 186537453)));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_diem_root_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:446:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_treasury_compliance_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:450:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:454:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_validator_operator_role_addr(addr): Not(Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:458:9+128
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))  ==> (!$1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_designated_dealer_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:462:9+126
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_parent_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:466:9+120
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where Roles::spec_has_child_VASP_role_addr(addr): Roles::spec_can_hold_balance_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:470:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))  ==> ($1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorOperatorConfig::$has_validator_operator_config(addr): Roles::spec_has_validator_operator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorOperatorConfig.move:76:9+137
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:337:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$exists_config(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:342:9+112
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall addr: TypeDomain<address>() where ValidatorConfig::$is_valid(addr): Roles::spec_has_validator_role_addr(addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:349:9+107
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_ValidatorConfig_$is_valid($1_ValidatorConfig_ValidatorConfig_$memory, addr))  ==> ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr)));

    // assume forall i1: Range(0, Len<DiemSystem::ValidatorInfo>(DiemSystem::spec_get_validators())): Roles::spec_has_validator_role_addr(select DiemSystem::ValidatorInfo.addr(Index(DiemSystem::spec_get_validators(), i1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:672:8+147
    assume (var $range_0 := $Range(0, LenVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory))); (forall $i_1: int :: $InRange($range_0, $i_1) ==> (var i1 := $i_1;
    ($1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, $addr#$1_DiemSystem_ValidatorInfo(ReadVec($1_DiemSystem_spec_get_validators($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory), i1)))))));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomainManager>(addr), Roles::spec_has_treasury_compliance_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2397:9+159
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomainManager_$memory, addr) <==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<VASPDomain::VASPDomains>(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2401:9+145
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_VASPDomain_VASPDomains_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DesignatedDealer::Dealer>(addr), Roles::spec_has_designated_dealer_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2416:9+152
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DesignatedDealer_Dealer_$memory, addr) <==> $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<SlidingNonce::SlidingNonce>(addr), Or(Roles::spec_has_diem_root_role_addr(addr), Roles::spec_has_treasury_compliance_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2444:9+203
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_SlidingNonce_SlidingNonce_$memory, addr) <==> ($1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorConfig::$exists_config(addr), Roles::spec_has_validator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2448:9+142
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorConfig_$exists_config($1_ValidatorConfig_ValidatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(ValidatorOperatorConfig::$has_validator_operator_config(addr), Roles::spec_has_validator_operator_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2452:9+175
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_ValidatorOperatorConfig_$has_validator_operator_config($1_ValidatorOperatorConfig_ValidatorOperatorConfig_$memory, addr) <==> $1_Roles_spec_has_validator_operator_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume $IsValid'address'($t3);

    // assume forall $rsc: ResourceDomain<Roles::RoleId>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_Roles_RoleId_$memory, $a_0)}(var $rsc := $ResourceValue($1_Roles_RoleId_$memory, $a_0);
    ($IsValid'$1_Roles_RoleId'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // trace_local[tc_account]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,0):", $t0} $t0 == $t0;

    // trace_local[window_address]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,1):", $t1} $t1 == $t1;

    // trace_local[aggregate_balance]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,2):", $t2} $t2 == $t2;

    // trace_local[new_limit_address]($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+1
    assume {:print "$track_local(19,13,3):", $t3} $t3 == $t3;

    // assume Identical($t7, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/Roles.move:545:9+44
    assume {:print "$at(28,24274,24318)"} true;
    assume ($t7 == $1_Signer_spec_address_of($t0));

    // opaque begin: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume {:print "$at(5,11621,11666)"} true;

    // assume Identical($t8, Or(Or(Not(exists<Roles::RoleId>($t7)), Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1)), Neq<address>(Signer::spec_address_of($t0), b1e55ed))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume ($t8 == ((!$ResourceExists($1_Roles_RoleId_$memory, $t7) || !$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1)) || !$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453)));

    // if ($t8) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    if ($t8) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
L8:

    // assume Or(Or(And(Not(exists<Roles::RoleId>($t7)), Eq(5, $t9)), And(Neq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>($t7)), 1), Eq(3, $t9))), And(Neq<address>(Signer::spec_address_of($t0), b1e55ed), Eq(2, $t9))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume (((!$ResourceExists($1_Roles_RoleId_$memory, $t7) && $IsEqual'num'(5, $t9)) || (!$IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, $t7)), 1) && $IsEqual'num'(3, $t9))) || (!$IsEqual'address'($1_Signer_spec_address_of($t0), 186537453) && $IsEqual'num'(2, $t9)));

    // trace_abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    assume {:print "$at(5,11621,11666)"} true;
    assume {:print "$track_abort(19,13):", $t9} $t9 == $t9;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
    goto L6;

    // label L7 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45
L7:

    // opaque end: Roles::assert_treasury_compliance($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:260:9+45

    // $t10 := borrow_global<AccountLimits::Window<XDX::XDX>>($t1) on_abort goto L6 with $t9 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:261:22+17
    assume {:print "$at(5,11689,11706)"} true;
    if (!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,11689,11706)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(19,13):", $t9} $t9 == $t9;
        goto L6;
    }

    // trace_local[window]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:261:13+6
    $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' := $Dereference($t10);
    assume {:print "$track_local(19,13,6):", $temp_0'$1_AccountLimits_Window'$1_XDX_XDX''} $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'' == $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';

    // $t11 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:34+1
    assume {:print "$at(5,11775,11776)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := !=($t2, $t11) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:31+2
    $t12 := !$IsEqual'u64'($t2, $t11);

    // if ($t12) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
    if ($t12) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
L1:

    // goto L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:9+75
    goto L2;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:65+17
L0:

    // $t13 := borrow_field<AccountLimits::Window<XDX::XDX>>.tracked_balance($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+22
    $t13 := $ChildMutation($t10, 3, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t10)));

    // write_ref($t13, $t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+42
    $t13 := $UpdateMutation($t13, $t2);

    // write_back[Reference($t10).tracked_balance]($t13) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:262:40+42
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance($Dereference($t10), $Dereference($t13)));

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:51+17
    assume {:print "$at(5,11877,11894)"} true;
L2:

    // $t14 := exists<AccountLimits::LimitsDefinition<XDX::XDX>>($t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:16+6
    $t14 := $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t3);

    // $t15 := 0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:93+18
    $t15 := 0;
    assume $IsValid'u64'($t15);

    // $t16 := opaque begin: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41

    // assume WellFormed($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41
    assume $IsValid'u64'($t16);

    // assume Eq<u64>($t16, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41
    assume $IsEqual'u64'($t16, 5);

    // $t16 := opaque end: Errors::not_published($t15) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:71+41

    // trace_local[tmp#$5]($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$track_local(19,13,5):", $t16} $t16 == $t16;

    // trace_local[tmp#$4]($t14) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$track_local(19,13,4):", $t14} $t14 == $t14;

    // if ($t14) goto L3 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    if ($t14) { goto L3; } else { goto L4; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
L4:

    // @147 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:254:5+578
    // state save for global update invariants
    assume {:print "$at(5,11418,11996)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#147 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<XDX::XDX>@]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@147]<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::Window<XDX::XDX>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#147, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // destroy($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;

    // trace_abort($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    assume {:print "$at(5,11835,11939)"} true;
    assume {:print "$track_abort(19,13):", $t16} $t16 == $t16;

    // $t9 := move($t16) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    $t9 := $t16;

    // goto L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:263:9+104
    goto L6;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:32+17
    assume {:print "$at(5,11972,11989)"} true;
L3:

    // $t17 := borrow_field<AccountLimits::Window<XDX::XDX>>.limit_address($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+20
    $t17 := $ChildMutation($t10, 4, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t10)));

    // write_ref($t17, $t3) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    $t17 := $UpdateMutation($t17, $t3);

    // write_back[Reference($t10).limit_address]($t17) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    $t10 := $UpdateMutation($t10, $Update'$1_AccountLimits_Window'$1_XDX_XDX''_limit_address($Dereference($t10), $Dereference($t17)));

    // @148 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // state save for global update invariants
    assume {:print "$at(5,25530,25840)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#148 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<XDX::XDX>@]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:264:9+40
    assume {:print "$at(5,11949,11989)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // assert forall window_addr: TypeDomain<address>() where exists[@148]<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::Window<XDX::XDX>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#148, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    assume {:print "$at(5,11995,11996)"} true;
L5:

    // return () at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    return;

    // label L6 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
L6:

    // abort($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:265:5+1
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_withdrawal_limits [verification] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
procedure {:timeLimit 40} $1_AccountLimits_update_withdrawal_limits$verify(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_AccountLimits_Window'#0');
    var $t10: bool;
    var $t11: $1_AccountLimits_Window'#0';
    var $t12: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'#0'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'#0'_$memory#133: $Memory $1_AccountLimits_Window'#0';
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#134: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'#0'_$memory#158: $Memory $1_AccountLimits_Window'#0';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,4711,5117)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume {:print "$at(5,5348,5417)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume CanModify<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    assume {:print "$at(5,5185,5225)"} true;
    assume $1_AccountLimits_Window'#0'_$modifies[$t1];

    // @135 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @134 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_AccountLimits_LimitsDefinition'#0'_$memory#134 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @133 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_AccountLimits_Window'#0'_$memory#133 := $1_AccountLimits_Window'#0'_$memory;

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$at(5,4711,4712)"} true;
    assume {:print "$track_local(19,14,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$track_local(19,14,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$track_local(19,14,2):", $t2} $t2 == $t2;

    // $t5 := exists<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:16+6
    assume {:print "$at(5,4912,4918)"} true;
    $t5 := $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // $t6 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:70+7
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30
    assume $IsEqual'u64'($t7, 5);

    // $t7 := opaque end: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30

    // trace_local[tmp#$4]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$track_local(19,14,4):", $t7} $t7 == $t7;

    // trace_local[tmp#$3]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$track_local(19,14,3):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$at(5,4905,4975)"} true;
    assume {:print "$track_abort(19,14):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:118:13+6
    assume {:print "$at(5,5039,5045)"} true;
L0:

    // assert CanModify<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:119:13+17
    assume {:print "$at(5,5059,5076)"} true;
    assert {:msg "assert_failed(5,5059,5076): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'#0'_$modifies[$t1];

    // $t9 := borrow_global<AccountLimits::Window<#0>>($t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:119:13+17
    if (!$ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,5059,5076)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,14):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t10 := opaque begin: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;

    // $t11 := read_ref($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    $t11 := $Dereference($t9);

    // assume Identical($t12, Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t9)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume ($t12 == (((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t9))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
L5:

    // assume Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t8)), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>($t9)), $t0), 18446744073709551615)), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>($t9))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<#0>($t9)), Not(DiemTimestamp::$is_operating())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($Dereference($t9))) && $IsEqual'num'(5, $t8)) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9))) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'#0'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    assume {:print "$track_abort(19,14):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
L4:

    // havoc[mut]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    havoc $temp_0'$1_AccountLimits_Window'#0'';
    $t9 := $UpdateMutation($t9, $temp_0'$1_AccountLimits_Window'#0'');
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t9));

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsValid'$1_AccountLimits_Window'#0''($Dereference($t9));

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, AccountLimits::spec_withdrawal_limits_ok<#0>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsEqual'bool'($t10, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11, $t0));

    // assume (if And($t10, Not(AccountLimits::spec_window_unrestricted<#0>($t11))) {Eq<AccountLimits::Window<#0>>($t9, AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>($t11), $t0))} else {Or(Eq<AccountLimits::Window<#0>>($t9, AccountLimits::spec_window_reset<#0>($t11)), Eq<AccountLimits::Window<#0>>($t9, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume if (($t10 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t9), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($Dereference($t9), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'#0''($Dereference($t9), $t11)));

    // $t10 := opaque end: AccountLimits::can_withdraw_and_update_window<#0>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126

    // @158 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // state save for global update invariants
    assume {:print "$at(5,4711,5117)"} true;
    $1_AccountLimits_Window'#0'_$memory#158 := $1_AccountLimits_Window'#0'_$memory;

    // write_back[AccountLimits::Window<#0>@]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // assert forall window_addr: TypeDomain<address>() where exists[@158]<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::Window<#0>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory#158, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // trace_return[0]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    assume {:print "$track_return(19,14,0):", $t10} $t10 == $t10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:121:5+1
    assume {:print "$at(5,5116,5117)"} true;
L2:

    // assert Not(Not(exists[@133]<AccountLimits::Window<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'#0'_$memory#133, $t1);

    // assert Not(Not(exists[@134]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<#0>>($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1))) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1)))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@135]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135));

    // assert exists<AccountLimits::Window<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:125:9+39
    assume {:print "$at(5,5234,5273)"} true;
    assert {:msg "assert_failed(5,5234,5273): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'#0'_$memory, $t1);

    // assert Eq<bool>($t10, AccountLimits::spec_withdrawal_limits_ok<#0>(global[@133]<AccountLimits::Window<#0>>($t1), $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:461:9+66
    assume {:print "$at(5,21670,21736)"} true;
    assert {:msg "assert_failed(5,21670,21736): post-condition does not hold"}
      $IsEqual'bool'($t10, $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1), $t0));

    // assert (if And($t10, Not(AccountLimits::spec_window_unrestricted<#0>(global[@133]<AccountLimits::Window<#0>>($t1)))) {Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_update_outflow<#0>(AccountLimits::spec_window_reset<#0>(global[@133]<AccountLimits::Window<#0>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), AccountLimits::spec_window_reset<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Eq<AccountLimits::Window<#0>>(global<AccountLimits::Window<#0>>($t1), global[@133]<AccountLimits::Window<#0>>($t1)))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    assume {:print "$at(5,21745,22011)"} true;
    assert {:msg "assert_failed(5,21745,22011): post-condition does not hold"}
      if (($t10 && !$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)))) then ($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_update_outflow'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1))) || $IsEqual'$1_AccountLimits_Window'#0''($ResourceValue($1_AccountLimits_Window'#0'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1))));

    // return $t10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    $ret0 := $t10;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:121:5+1
    assume {:print "$at(5,5116,5117)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@133]<AccountLimits::Window<#0>>($t1)), Not(exists[@134]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<#0>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@135]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    assume {:print "$at(5,5122,5424)"} true;
    assert {:msg "assert_failed(5,5122,5424): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#133, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135)));

    // assert Or(Or(Or(Or(And(Not(exists[@133]<AccountLimits::Window<#0>>($t1)), Eq(5, $t8)), And(Not(exists[@134]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<#0>>($t1)))), Eq(5, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), $t0), 18446744073709551615)), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<#0>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1)))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<#0>(global[@133]<AccountLimits::Window<#0>>($t1))), Not(DiemTimestamp::$is_operating[@135]())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    assert {:msg "assert_failed(5,5122,5424): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'#0'_$memory#133, $t1) && $IsEqual'num'(5, $t8)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1))) && $IsEqual'num'(5, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1))) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#134, $ResourceValue($1_AccountLimits_Window'#0'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135)) && $IsEqual'num'(1, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_withdrawal_limits [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
procedure {:timeLimit 40} $1_AccountLimits_update_withdrawal_limits$verify_instantiated_0(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_AccountLimits_Window'$1_XUS_XUS');
    var $t10: bool;
    var $t11: $1_AccountLimits_Window'$1_XUS_XUS';
    var $t12: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#133: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#159: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,4711,5117)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume {:print "$at(5,5348,5417)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume CanModify<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    assume {:print "$at(5,5185,5225)"} true;
    assume $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // @135 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @134 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @133 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#133 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$at(5,4711,4712)"} true;
    assume {:print "$track_local(19,14,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$track_local(19,14,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$track_local(19,14,2):", $t2} $t2 == $t2;

    // $t5 := exists<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:16+6
    assume {:print "$at(5,4912,4918)"} true;
    $t5 := $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // $t6 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:70+7
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30
    assume $IsEqual'u64'($t7, 5);

    // $t7 := opaque end: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30

    // trace_local[tmp#$4]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$track_local(19,14,4):", $t7} $t7 == $t7;

    // trace_local[tmp#$3]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$track_local(19,14,3):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$at(5,4905,4975)"} true;
    assume {:print "$track_abort(19,14):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:118:13+6
    assume {:print "$at(5,5039,5045)"} true;
L0:

    // assert CanModify<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:119:13+17
    assume {:print "$at(5,5059,5076)"} true;
    assert {:msg "assert_failed(5,5059,5076): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XUS_XUS'_$modifies[$t1];

    // $t9 := borrow_global<AccountLimits::Window<XUS::XUS>>($t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:119:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,5059,5076)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,14):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t10 := opaque begin: AccountLimits::can_withdraw_and_update_window<XUS::XUS>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;

    // $t11 := read_ref($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    $t11 := $Dereference($t9);

    // assume Identical($t12, Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>($t9)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume ($t12 == (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
L5:

    // assume Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t8)), And(And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>($t9)), $t0), 18446744073709551615)), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>($t9))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t9)), Not(DiemTimestamp::$is_operating())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9))) && $IsEqual'num'(5, $t8)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9))) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    assume {:print "$track_abort(19,14):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
L4:

    // havoc[mut]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
    $t9 := $UpdateMutation($t9, $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9));

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9));

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, AccountLimits::spec_withdrawal_limits_ok<XUS::XUS>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsEqual'bool'($t10, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11, $t0));

    // assume (if And($t10, Not(AccountLimits::spec_window_unrestricted<XUS::XUS>($t11))) {Eq<AccountLimits::Window<XUS::XUS>>($t9, AccountLimits::spec_update_outflow<XUS::XUS>(AccountLimits::spec_window_reset<XUS::XUS>($t11), $t0))} else {Or(Eq<AccountLimits::Window<XUS::XUS>>($t9, AccountLimits::spec_window_reset<XUS::XUS>($t11)), Eq<AccountLimits::Window<XUS::XUS>>($t9, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9), $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($Dereference($t9), $t11)));

    // $t10 := opaque end: AccountLimits::can_withdraw_and_update_window<XUS::XUS>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126

    // @159 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // state save for global update invariants
    assume {:print "$at(5,4711,5117)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#159 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // write_back[AccountLimits::Window<XUS::XUS>@]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // assert forall window_addr: TypeDomain<address>() where exists[@159]<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::Window<XUS::XUS>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#159, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // trace_return[0]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    assume {:print "$track_return(19,14,0):", $t10} $t10 == $t10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:121:5+1
    assume {:print "$at(5,5116,5117)"} true;
L2:

    // assert Not(Not(exists[@133]<AccountLimits::Window<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1);

    // assert Not(Not(exists[@134]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1))) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Not(DiemTimestamp::$is_operating[@135]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135));

    // assert exists<AccountLimits::Window<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:125:9+39
    assume {:print "$at(5,5234,5273)"} true;
    assert {:msg "assert_failed(5,5234,5273): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1);

    // assert Eq<bool>($t10, AccountLimits::spec_withdrawal_limits_ok<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1), $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:461:9+66
    assume {:print "$at(5,21670,21736)"} true;
    assert {:msg "assert_failed(5,21670,21736): post-condition does not hold"}
      $IsEqual'bool'($t10, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1), $t0));

    // assert (if And($t10, Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)))) {Eq<AccountLimits::Window<XUS::XUS>>(global<AccountLimits::Window<XUS::XUS>>($t1), AccountLimits::spec_update_outflow<XUS::XUS>(AccountLimits::spec_window_reset<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<XUS::XUS>>(global<AccountLimits::Window<XUS::XUS>>($t1), AccountLimits::spec_window_reset<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Eq<AccountLimits::Window<XUS::XUS>>(global<AccountLimits::Window<XUS::XUS>>($t1), global[@133]<AccountLimits::Window<XUS::XUS>>($t1)))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    assume {:print "$at(5,21745,22011)"} true;
    assert {:msg "assert_failed(5,21745,22011): post-condition does not hold"}
      if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_update_outflow'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1))));

    // return $t10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    $ret0 := $t10;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:121:5+1
    assume {:print "$at(5,5116,5117)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@133]<AccountLimits::Window<XUS::XUS>>($t1)), Not(exists[@134]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Not(DiemTimestamp::$is_operating[@135]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    assume {:print "$at(5,5122,5424)"} true;
    assert {:msg "assert_failed(5,5122,5424): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135)));

    // assert Or(Or(Or(Or(And(Not(exists[@133]<AccountLimits::Window<XUS::XUS>>($t1)), Eq(5, $t8)), And(Not(exists[@134]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)))), Eq(5, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), $t0), 18446744073709551615)), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1)))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<XUS::XUS>(global[@133]<AccountLimits::Window<XUS::XUS>>($t1))), Not(DiemTimestamp::$is_operating[@135]())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    assert {:msg "assert_failed(5,5122,5424): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1) && $IsEqual'num'(5, $t8)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1))) && $IsEqual'num'(5, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1))) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135)) && $IsEqual'num'(1, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun AccountLimits::update_withdrawal_limits [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
procedure {:timeLimit 40} $1_AccountLimits_update_withdrawal_limits$verify_instantiated_1(_$t0: int, _$t1: int, _$t2: $1_AccountLimits_AccountLimitMutationCapability) returns ($ret0: bool)
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_AccountLimits_Window'$1_XDX_XDX');
    var $t10: bool;
    var $t11: $1_AccountLimits_Window'$1_XDX_XDX';
    var $t12: bool;
    var $t0: int;
    var $t1: int;
    var $t2: $1_AccountLimits_AccountLimitMutationCapability;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$modifies: [int]bool;
    var $temp_0'$1_AccountLimits_AccountLimitMutationCapability': $1_AccountLimits_AccountLimitMutationCapability;
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#133: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#160: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    assume IsEmptyVec(p#$Mutation($t9));

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(5,4711,5117)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume {:print "$at(5,5348,5417)"} true;
    assume $IsValid'u64'($t0);

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($t2);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:127:17+69
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume CanModify<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    assume {:print "$at(5,5185,5225)"} true;
    assume $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // @135 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @134 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @133 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:124:9+40
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#133 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // trace_local[amount]($t0) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$at(5,4711,4712)"} true;
    assume {:print "$track_local(19,14,0):", $t0} $t0 == $t0;

    // trace_local[addr]($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$track_local(19,14,1):", $t1} $t1 == $t1;

    // trace_local[_cap]($t2) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+1
    assume {:print "$track_local(19,14,2):", $t2} $t2 == $t2;

    // $t5 := exists<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:16+6
    assume {:print "$at(5,4912,4918)"} true;
    $t5 := $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // $t6 := 1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:70+7
    $t6 := 1;
    assume $IsValid'u64'($t6);

    // $t7 := opaque begin: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30

    // assume WellFormed($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30
    assume $IsValid'u64'($t7);

    // assume Eq<u64>($t7, 5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30
    assume $IsEqual'u64'($t7, 5);

    // $t7 := opaque end: Errors::not_published($t6) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:48+30

    // trace_local[tmp#$4]($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$track_local(19,14,4):", $t7} $t7 == $t7;

    // trace_local[tmp#$3]($t5) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$track_local(19,14,3):", $t5} $t5 == $t5;

    // if ($t5) goto L0 else goto L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    if ($t5) { goto L0; } else { goto L1; }

    // label L1 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
L1:

    // trace_abort($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    assume {:print "$at(5,4905,4975)"} true;
    assume {:print "$track_abort(19,14):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    $t8 := $t7;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:116:9+70
    goto L3;

    // label L0 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:118:13+6
    assume {:print "$at(5,5039,5045)"} true;
L0:

    // assert CanModify<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:119:13+17
    assume {:print "$at(5,5059,5076)"} true;
    assert {:msg "assert_failed(5,5059,5076): caller does not have permission to modify `AccountLimits::Window<#0>` at given address"}
      $1_AccountLimits_Window'$1_XDX_XDX'_$modifies[$t1];

    // $t9 := borrow_global<AccountLimits::Window<XDX::XDX>>($t1) on_abort goto L3 with $t8 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:119:13+17
    if (!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t1), EmptyVec(), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1));
    }
    if ($abort_flag) {
        assume {:print "$at(5,5059,5076)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(19,14):", $t8} $t8 == $t8;
        goto L3;
    }

    // $t10 := opaque begin: AccountLimits::can_withdraw_and_update_window<XDX::XDX>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;

    // $t11 := read_ref($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    $t11 := $Dereference($t9);

    // assume Identical($t12, Or(Or(Or(Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t9))), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>($t9)), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>($t9))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Not(DiemTimestamp::$is_operating())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume ($t12 == (((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))));

    // if ($t12) goto L5 else goto L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
L5:

    // assume Or(Or(Or(And(Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address($t9))), Eq(5, $t8)), And(And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>($t9)), $t0), 18446744073709551615)), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Gt(Add(select AccountLimits::Window.window_start($t9), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>($t9))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t9)), Not(DiemTimestamp::$is_operating())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume ((((!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9))) && $IsEqual'num'(5, $t8)) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9))) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($Dereference($t9)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $Dereference($t9)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) && $IsEqual'num'(1, $t8)));

    // trace_abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    assume {:print "$track_abort(19,14):", $t8} $t8 == $t8;

    // goto L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    goto L3;

    // label L4 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
L4:

    // havoc[mut]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
    $t9 := $UpdateMutation($t9, $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9));

    // assume WellFormed($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9));

    // assume WellFormed($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, AccountLimits::spec_withdrawal_limits_ok<XDX::XDX>($t11, $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume $IsEqual'bool'($t10, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11, $t0));

    // assume (if And($t10, Not(AccountLimits::spec_window_unrestricted<XDX::XDX>($t11))) {Eq<AccountLimits::Window<XDX::XDX>>($t9, AccountLimits::spec_update_outflow<XDX::XDX>(AccountLimits::spec_window_reset<XDX::XDX>($t11), $t0))} else {Or(Eq<AccountLimits::Window<XDX::XDX>>($t9, AccountLimits::spec_window_reset<XDX::XDX>($t11)), Eq<AccountLimits::Window<XDX::XDX>>($t9, $t11))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9), $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $t11)) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($Dereference($t9), $t11)));

    // $t10 := opaque end: AccountLimits::can_withdraw_and_update_window<XDX::XDX>($t0, $t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126

    // @160 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:111:5+406
    // state save for global update invariants
    assume {:print "$at(5,4711,5117)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#160 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // write_back[AccountLimits::Window<XDX::XDX>@]($t9) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // assert forall window_addr: TypeDomain<address>() where exists[@160]<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::Window<XDX::XDX>>(window_addr) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:539:9+171
    assume {:print "$at(5,24850,25021)"} true;
    assert {:msg "assert_failed(5,24850,25021): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#160, window_addr))  ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)));

    // assert forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume {:print "$at(5,25106,25314)"} true;
    assert {:msg "assert_failed(5,25106,25314): global memory invariant does not hold"}
      (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assert forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume {:print "$at(5,25530,25840)"} true;
    assert {:msg "assert_failed(5,25530,25840): global memory invariant does not hold"}
      (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // trace_return[0]($t10) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:117:9+126
    assume {:print "$at(5,4985,5111)"} true;
    assume {:print "$track_return(19,14,0):", $t10} $t10 == $t10;

    // label L2 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:121:5+1
    assume {:print "$at(5,5116,5117)"} true;
L2:

    // assert Not(Not(exists[@133]<AccountLimits::Window<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1);

    // assert Not(Not(exists[@134]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), 18446744073709551615))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1))) + $t0) > 18446744073709551615));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)))), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)))) > $MAX_U64));

    // assert Not(And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Not(DiemTimestamp::$is_operating[@135]()))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !(!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135));

    // assert exists<AccountLimits::Window<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:125:9+39
    assume {:print "$at(5,5234,5273)"} true;
    assert {:msg "assert_failed(5,5234,5273): post-condition does not hold"}
      $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1);

    // assert Eq<bool>($t10, AccountLimits::spec_withdrawal_limits_ok<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1), $t0)) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:461:9+66
    assume {:print "$at(5,21670,21736)"} true;
    assert {:msg "assert_failed(5,21670,21736): post-condition does not hold"}
      $IsEqual'bool'($t10, $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1), $t0));

    // assert (if And($t10, Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)))) {Eq<AccountLimits::Window<XDX::XDX>>(global<AccountLimits::Window<XDX::XDX>>($t1), AccountLimits::spec_update_outflow<XDX::XDX>(AccountLimits::spec_window_reset<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)), $t0))} else {Or(Eq<AccountLimits::Window<XDX::XDX>>(global<AccountLimits::Window<XDX::XDX>>($t1), AccountLimits::spec_window_reset<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Eq<AccountLimits::Window<XDX::XDX>>(global<AccountLimits::Window<XDX::XDX>>($t1), global[@133]<AccountLimits::Window<XDX::XDX>>($t1)))}) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    assume {:print "$at(5,21745,22011)"} true;
    assert {:msg "assert_failed(5,21745,22011): post-condition does not hold"}
      if (($t10 && !$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)))) then ($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_update_outflow'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)), $t0))) else (($IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1))) || $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t1), $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1))));

    // return $t10 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:462:9+266
    $ret0 := $t10;
    return;

    // label L3 at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:121:5+1
    assume {:print "$at(5,5116,5117)"} true;
L3:

    // assert Or(Or(Or(Or(Not(exists[@133]<AccountLimits::Window<XDX::XDX>>($t1)), Not(exists[@134]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))))), And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), 18446744073709551615))), And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)))), MaxU64()))), And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Not(DiemTimestamp::$is_operating[@135]()))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    assume {:print "$at(5,5122,5424)"} true;
    assert {:msg "assert_failed(5,5122,5424): abort not covered by any of the `aborts_if` clauses"}
      ((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1) || !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1))) + $t0) > 18446744073709551615))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)))) > $MAX_U64))) || (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135)));

    // assert Or(Or(Or(Or(And(Not(exists[@133]<AccountLimits::Window<XDX::XDX>>($t1)), Eq(5, $t8)), And(Not(exists[@134]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)))), Eq(5, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@135, @134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), $t0), 18446744073709551615)), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Gt(Add(select AccountLimits::Window.window_start(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1)))), MaxU64())), Eq(8, $t8))), And(And(Not(AccountLimits::spec_window_unrestricted[@134]<XDX::XDX>(global[@133]<AccountLimits::Window<XDX::XDX>>($t1))), Not(DiemTimestamp::$is_operating[@135]())), Eq(1, $t8))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    assert {:msg "assert_failed(5,5122,5424): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((!$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1) && $IsEqual'num'(5, $t8)) || (!$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1))) && $IsEqual'num'(5, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1))) + $t0) > 18446744073709551615)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)))) > $MAX_U64)) && $IsEqual'num'(8, $t8))) || ((!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#134, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#133, $t1)) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#135)) && $IsEqual'num'(1, $t8)));

    // abort($t8) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:122:5+302
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// struct XUS::XUS at /home/ying/diem/language/diem-framework/modules/XUS.move:10:5+14
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:133:9+80
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, 173345816)
}

// struct XDX::XDX at /home/ying/diem/language/diem-framework/modules/XDX.move:15:5+14
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at /home/ying/diem/language/diem-framework/modules/XDX.move:24:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// struct VASPDomain::VASPDomain at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:25:5+110
type {:datatype} $1_VASPDomain_VASPDomain;
function {:constructor} $1_VASPDomain_VASPDomain($domain: Vec (int)): $1_VASPDomain_VASPDomain;
function {:inline} $Update'$1_VASPDomain_VASPDomain'_domain(s: $1_VASPDomain_VASPDomain, x: Vec (int)): $1_VASPDomain_VASPDomain {
    $1_VASPDomain_VASPDomain(x)
}
function $IsValid'$1_VASPDomain_VASPDomain'(s: $1_VASPDomain_VASPDomain): bool {
    $IsValid'vec'u8''($domain#$1_VASPDomain_VASPDomain(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomain'(s1: $1_VASPDomain_VASPDomain, s2: $1_VASPDomain_VASPDomain): bool {
    s1 == s2
}

// struct VASPDomain::VASPDomainEvent at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:39:5+256
type {:datatype} $1_VASPDomain_VASPDomainEvent;
function {:constructor} $1_VASPDomain_VASPDomainEvent($removed: bool, $domain: $1_VASPDomain_VASPDomain, $address: int): $1_VASPDomain_VASPDomainEvent;
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_removed(s: $1_VASPDomain_VASPDomainEvent, x: bool): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent(x, $domain#$1_VASPDomain_VASPDomainEvent(s), $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_domain(s: $1_VASPDomain_VASPDomainEvent, x: $1_VASPDomain_VASPDomain): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), x, $address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $Update'$1_VASPDomain_VASPDomainEvent'_address(s: $1_VASPDomain_VASPDomainEvent, x: int): $1_VASPDomain_VASPDomainEvent {
    $1_VASPDomain_VASPDomainEvent($removed#$1_VASPDomain_VASPDomainEvent(s), $domain#$1_VASPDomain_VASPDomainEvent(s), x)
}
function $IsValid'$1_VASPDomain_VASPDomainEvent'(s: $1_VASPDomain_VASPDomainEvent): bool {
    $IsValid'bool'($removed#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'$1_VASPDomain_VASPDomain'($domain#$1_VASPDomain_VASPDomainEvent(s))
      && $IsValid'address'($address#$1_VASPDomain_VASPDomainEvent(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainEvent'(s1: $1_VASPDomain_VASPDomainEvent, s2: $1_VASPDomain_VASPDomainEvent): bool {
    s1 == s2
}

// struct VASPDomain::VASPDomainManager at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:33:5+235
type {:datatype} $1_VASPDomain_VASPDomainManager;
function {:constructor} $1_VASPDomain_VASPDomainManager($vasp_domain_events: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager;
function {:inline} $Update'$1_VASPDomain_VASPDomainManager'_vasp_domain_events(s: $1_VASPDomain_VASPDomainManager, x: $1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent'): $1_VASPDomain_VASPDomainManager {
    $1_VASPDomain_VASPDomainManager(x)
}
function $IsValid'$1_VASPDomain_VASPDomainManager'(s: $1_VASPDomain_VASPDomainManager): bool {
    $IsValid'$1_Event_EventHandle'$1_VASPDomain_VASPDomainEvent''($vasp_domain_events#$1_VASPDomain_VASPDomainManager(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomainManager'(s1: $1_VASPDomain_VASPDomainManager, s2: $1_VASPDomain_VASPDomainManager): bool {
    s1 == s2
}
var $1_VASPDomain_VASPDomainManager_$memory: $Memory $1_VASPDomain_VASPDomainManager;

// struct VASPDomain::VASPDomains at /home/ying/diem/language/diem-framework/modules/VASPDomain.move:12:5+142
type {:datatype} $1_VASPDomain_VASPDomains;
function {:constructor} $1_VASPDomain_VASPDomains($domains: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains;
function {:inline} $Update'$1_VASPDomain_VASPDomains'_domains(s: $1_VASPDomain_VASPDomains, x: Vec ($1_VASPDomain_VASPDomain)): $1_VASPDomain_VASPDomains {
    $1_VASPDomain_VASPDomains(x)
}
function $IsValid'$1_VASPDomain_VASPDomains'(s: $1_VASPDomain_VASPDomains): bool {
    $IsValid'vec'$1_VASPDomain_VASPDomain''($domains#$1_VASPDomain_VASPDomains(s))
}
function {:inline} $IsEqual'$1_VASPDomain_VASPDomains'(s1: $1_VASPDomain_VASPDomains, s2: $1_VASPDomain_VASPDomains): bool {
    s1 == s2
}
var $1_VASPDomain_VASPDomains_$memory: $Memory $1_VASPDomain_VASPDomains;

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:164:5+80
function {:inline} $1_VASP_$is_child($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, addr: int): bool {
    $ResourceExists($1_VASP_ChildVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:154:5+82
function {:inline} $1_VASP_$is_parent($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $ResourceExists($1_VASP_ParentVASP_$memory, addr)
}

// struct VASP::ChildVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:21:5+54
type {:datatype} $1_VASP_ChildVASP;
function {:constructor} $1_VASP_ChildVASP($parent_vasp_addr: int): $1_VASP_ChildVASP;
function {:inline} $Update'$1_VASP_ChildVASP'_parent_vasp_addr(s: $1_VASP_ChildVASP, x: int): $1_VASP_ChildVASP {
    $1_VASP_ChildVASP(x)
}
function $IsValid'$1_VASP_ChildVASP'(s: $1_VASP_ChildVASP): bool {
    $IsValid'address'($parent_vasp_addr#$1_VASP_ChildVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ChildVASP'(s1: $1_VASP_ChildVASP, s2: $1_VASP_ChildVASP): bool {
    s1 == s2
}
var $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP;

// struct VASP::ParentVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:15:5+121
type {:datatype} $1_VASP_ParentVASP;
function {:constructor} $1_VASP_ParentVASP($num_children: int): $1_VASP_ParentVASP;
function {:inline} $Update'$1_VASP_ParentVASP'_num_children(s: $1_VASP_ParentVASP, x: int): $1_VASP_ParentVASP {
    $1_VASP_ParentVASP(x)
}
function $IsValid'$1_VASP_ParentVASP'(s: $1_VASP_ParentVASP): bool {
    $IsValid'u64'($num_children#$1_VASP_ParentVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ParentVASP'(s1: $1_VASP_ParentVASP, s2: $1_VASP_ParentVASP): bool {
    s1 == s2
}
var $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP;

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+118
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, 186537453)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// struct TransactionFee::TransactionFee<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:13:5+124
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:121:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:545:9+78
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:550:9+104
function {:inline} $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): int {
    $micro_xdx_limit#$1_DualAttestation_Limit($ResourceValue($1_DualAttestation_Limit_$memory, 173345816))
}

// struct DualAttestation::BaseUrlRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:57:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::ComplianceKeyRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:49:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::Credential at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:19:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    s1 == s2
}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:44:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:24:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    s1 == s2
}

// struct DesignatedDealer::Dealer at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:14:5+130
type {:datatype} $1_DesignatedDealer_Dealer;
function {:constructor} $1_DesignatedDealer_Dealer($mint_event_handle: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer;
function {:inline} $Update'$1_DesignatedDealer_Dealer'_mint_event_handle(s: $1_DesignatedDealer_Dealer, x: $1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent'): $1_DesignatedDealer_Dealer {
    $1_DesignatedDealer_Dealer(x)
}
function $IsValid'$1_DesignatedDealer_Dealer'(s: $1_DesignatedDealer_Dealer): bool {
    $IsValid'$1_Event_EventHandle'$1_DesignatedDealer_ReceivedMintEvent''($mint_event_handle#$1_DesignatedDealer_Dealer(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_Dealer'(s1: $1_DesignatedDealer_Dealer, s2: $1_DesignatedDealer_Dealer): bool {
    s1 == s2
}
var $1_DesignatedDealer_Dealer_$memory: $Memory $1_DesignatedDealer_Dealer;

// struct DesignatedDealer::ReceivedMintEvent at /home/ying/diem/language/diem-framework/modules/DesignatedDealer.move:38:5+286
type {:datatype} $1_DesignatedDealer_ReceivedMintEvent;
function {:constructor} $1_DesignatedDealer_ReceivedMintEvent($currency_code: Vec (int), $destination_address: int, $amount: int): $1_DesignatedDealer_ReceivedMintEvent;
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_currency_code(s: $1_DesignatedDealer_ReceivedMintEvent, x: Vec (int)): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent(x, $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_destination_address(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), x, $amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $Update'$1_DesignatedDealer_ReceivedMintEvent'_amount(s: $1_DesignatedDealer_ReceivedMintEvent, x: int): $1_DesignatedDealer_ReceivedMintEvent {
    $1_DesignatedDealer_ReceivedMintEvent($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s), $destination_address#$1_DesignatedDealer_ReceivedMintEvent(s), x)
}
function $IsValid'$1_DesignatedDealer_ReceivedMintEvent'(s: $1_DesignatedDealer_ReceivedMintEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'address'($destination_address#$1_DesignatedDealer_ReceivedMintEvent(s))
      && $IsValid'u64'($amount#$1_DesignatedDealer_ReceivedMintEvent(s))
}
function {:inline} $IsEqual'$1_DesignatedDealer_ReceivedMintEvent'(s1: $1_DesignatedDealer_ReceivedMintEvent, s2: $1_DesignatedDealer_ReceivedMintEvent): bool {
    s1 == s2
}

// struct ChainId::ChainId at /home/ying/diem/language/diem-framework/modules/ChainId.move:10:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:231:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:22:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:16:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:11:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:30:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1641:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// struct DiemAccount::DiemAccount at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:37:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    s1 == s2
}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:94:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    s1 == s2
}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:130:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::Balance<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XUS_XUS';
function {:constructor} $1_DiemAccount_Balance'$1_XUS_XUS'($coin: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XUS_XUS''_coin(s: $1_DiemAccount_Balance'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS' {
    $1_DiemAccount_Balance'$1_XUS_XUS'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''(s: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''(s1: $1_DiemAccount_Balance'$1_XUS_XUS', s2: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';

// struct DiemAccount::Balance<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XDX_XDX';
function {:constructor} $1_DiemAccount_Balance'$1_XDX_XDX'($coin: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XDX_XDX''_coin(s: $1_DiemAccount_Balance'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX' {
    $1_DiemAccount_Balance'$1_XDX_XDX'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''(s: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''(s1: $1_DiemAccount_Balance'$1_XDX_XDX', s2: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';

// struct DiemAccount::CreateAccountEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:136:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:100:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    s1 == s2
}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:86:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:118:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::SentPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:106:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::WithdrawCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:77:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:55:5+75
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, 173345816)
}

// struct DiemBlock::BlockMetadata at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:9:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    s1 == s2
}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:16:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    s1 == s2
}

// struct DiemVMConfig::DiemVMConfig at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:13:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    s1 == s2
}

// struct DiemVMConfig::GasConstants at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:35:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:29:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    s1 == s2
}

// struct DiemVersion::DiemVersion at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:9:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}
