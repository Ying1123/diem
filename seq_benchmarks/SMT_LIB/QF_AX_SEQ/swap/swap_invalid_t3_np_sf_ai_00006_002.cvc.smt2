(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_567 () (Seq Element))
(declare-fun a_569 () (Seq Element))
(declare-fun a_571 () (Seq Element))
(declare-fun a_573 () (Seq Element))
(declare-fun a_575 () (Seq Element))
(declare-fun a_577 () (Seq Element))
(declare-fun a_579 () (Seq Element))
(declare-fun a_581 () (Seq Element))
(declare-fun a_583 () (Seq Element))
(declare-fun a_585 () (Seq Element))
(declare-fun a_587 () (Seq Element))
(declare-fun a_589 () (Seq Element))
(declare-fun a_590 () (Seq Element))
(declare-fun a_591 () (Seq Element))
(declare-fun a_593 () (Seq Element))
(declare-fun a_595 () (Seq Element))
(declare-fun a_597 () (Seq Element))
(declare-fun a_599 () (Seq Element))
(declare-fun a_601 () (Seq Element))
(declare-fun a_603 () (Seq Element))
(declare-fun a_605 () (Seq Element))
(declare-fun a_607 () (Seq Element))
(declare-fun a_609 () (Seq Element))
(declare-fun a_611 () (Seq Element))
(declare-fun e_566 () Element)
(declare-fun e_568 () Element)
(declare-fun e_570 () Element)
(declare-fun e_572 () Element)
(declare-fun e_574 () Element)
(declare-fun e_576 () Element)
(declare-fun e_578 () Element)
(declare-fun e_580 () Element)
(declare-fun e_582 () Element)
(declare-fun e_584 () Element)
(declare-fun e_586 () Element)
(declare-fun e_588 () Element)
(declare-fun e_592 () Element)
(declare-fun e_594 () Element)
(declare-fun e_596 () Element)
(declare-fun e_598 () Element)
(declare-fun e_600 () Element)
(declare-fun e_602 () Element)
(declare-fun e_604 () Element)
(declare-fun e_606 () Element)
(declare-fun e_608 () Element)
(declare-fun e_610 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(assert (= a_567 (seq.update a1 i0 (seq.unit e_566))))
(assert (= a_569 (seq.update a_567 i5 (seq.unit e_568))))
(assert (= a_571 (seq.update a_569 i3 (seq.unit e_570))))
(assert (= a_573 (seq.update a_571 i1 (seq.unit e_572))))
(assert (= a_575 (seq.update a_573 i2 (seq.unit e_574))))
(assert (= a_577 (seq.update a_575 i0 (seq.unit e_576))))
(assert (= a_579 (seq.update a_577 i4 (seq.unit e_578))))
(assert (= a_581 (seq.update a_579 i1 (seq.unit e_580))))
(assert (= a_583 (seq.update a_581 i3 (seq.unit e_582))))
(assert (= a_585 (seq.update a_583 i0 (seq.unit e_584))))
(assert (= a_587 (seq.update a_585 i2 (seq.unit e_586))))
(assert (= a_589 (seq.update a_587 i5 (seq.unit e_588))))
(assert (= a_590 (seq.update a1 i5 (seq.unit e_568))))
(assert (= a_591 (seq.update a_590 i0 (seq.unit e_566))))
(assert (= a_593 (seq.update a_591 i3 (seq.unit e_592))))
(assert (= a_595 (seq.update a_593 i1 (seq.unit e_594))))
(assert (= a_597 (seq.update a_595 i2 (seq.unit e_596))))
(assert (= a_599 (seq.update a_597 i0 (seq.unit e_598))))
(assert (= a_601 (seq.update a_599 i4 (seq.unit e_600))))
(assert (= a_603 (seq.update a_601 i1 (seq.unit e_602))))
(assert (= a_605 (seq.update a_603 i3 (seq.unit e_604))))
(assert (= a_607 (seq.update a_605 i0 (seq.unit e_606))))
(assert (= a_609 (seq.update a_607 i0 (seq.unit e_608))))
(assert (= a_611 (seq.update a_609 i2 (seq.unit e_610))))
(assert (= e_566 (seq.nth a1 i5)))
(assert (= e_568 (seq.nth a1 i0)))
(assert (= e_570 (seq.nth a_569 i1)))
(assert (= e_572 (seq.nth a_569 i3)))
(assert (= e_574 (seq.nth a_573 i0)))
(assert (= e_576 (seq.nth a_573 i2)))
(assert (= e_578 (seq.nth a_577 i1)))
(assert (= e_580 (seq.nth a_577 i4)))
(assert (= e_582 (seq.nth a_581 i0)))
(assert (= e_584 (seq.nth a_581 i3)))
(assert (= e_586 (seq.nth a_585 i5)))
(assert (= e_588 (seq.nth a_585 i2)))
(assert (= e_592 (seq.nth a_591 i1)))
(assert (= e_594 (seq.nth a_591 i3)))
(assert (= e_596 (seq.nth a_595 i0)))
(assert (= e_598 (seq.nth a_595 i2)))
(assert (= e_600 (seq.nth a_599 i1)))
(assert (= e_602 (seq.nth a_599 i4)))
(assert (= e_604 (seq.nth a_603 i0)))
(assert (= e_606 (seq.nth a_603 i3)))
(assert (= e_608 (seq.nth a_607 i2)))
(assert (= e_610 (seq.nth a_607 i0)))
(assert (not (= a_589 a_611)))
(check-sat)
(exit)
