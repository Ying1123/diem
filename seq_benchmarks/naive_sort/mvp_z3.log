21:47:38 [DEBUG] (1) bytecode::verification_analysis_v2: marking `TestNaiveSort::verify_sort` to be verified
21:47:38 [DEBUG] (1) boogie_backend::bytecode_translator: translating module Vector
[INFO] translating module TestNaiveSort
21:47:38 [DEBUG] (1) move_prover: writing boogie to `output.bpl`
[INFO] running solver
21:47:38 [DEBUG] (1) boogie_backend::boogie_wrapper: command line: /home/ying/.dotnet/tools/boogie -doModSetAnalysis -printVerifiedProceduresCount:0 -printModel:1 -enhancedErrorMessages:1 -monomorphize -proverOpt:PROVER_PATH=/home/ying/bin/z3 -proverOpt:O:smt.QI.EAGER_THRESHOLD=100 -proverOpt:O:smt.QI.LAZY_THRESHOLD=100 -vcsCores:4 -proverLog:@PROC@.smt output.bpl
21:47:38 [DEBUG] (11) boogie_backend::prover_task_runner: runing Boogie command with seed 1
21:48:30 [DEBUG] (1) boogie_backend::boogie_wrapper: analyzing boogie output
21:48:30 [DEBUG] (1) boogie_backend::boogie_wrapper: writing boogie log to output.bpl.log
[INFO] 0.011s build, 0.011s trafo, 0.002s gen, 51.808s verify
error: verification out of resources/timeout (global timeout set to 40s)

    ┌── /home/ying/diem/language/move-prover/tests/sources/functional/naive_sort.move:6:2 ───
    │
  6 │ ╭     public fun verify_sort(v: &mut vector<u64>) {
  7 │ │ 		let vlen = Vector::length(v);
  8 │ │ 		spec {
  9 │ │ 			assume len(v) == 2;
 10 │ │ 		};
 11 │ │ 		if (vlen <= 1) return ();
 12 │ │ 
 13 │ │ 		let i = 0;
 14 │ │ 		let j = 1;
 15 │ │         while ({
 16 │ │ 			spec {
 17 │ │ 				assert i < j;
 18 │ │ 				assert len(v) == vlen;
 19 │ │ 				assert forall k in 0..i-1: v[k] <= v[k + 1];
 20 │ │ 				assert forall k in i+1..j: v[i] <= v[k];
 21 │ │ 		        assert exists p : vector<u64> : forall k in 0..len(v): v[k] == old(v)[p[k]] && (forall num in 0..len(v): exists ind in 0..len(v): p[ind] == num);
 22 │ │ 			};
 23 │ │ 			(j < vlen)
 24 │ │ 		}) {
 25 │ │ 			if (*Vector::borrow(v, i) > *Vector::borrow(v, j))
 26 │ │ 				Vector::swap(v, i, j);
 27 │ │ 			if (j + 1 < vlen) {
 28 │ │ 				j = j + 1;
 29 │ │ 			} else {
 30 │ │ 				i = i + 1;
 31 │ │ 				j = i + 1;
 32 │ │ 			}
 33 │ │ 		};
 34 │ │     }
    │ ╰─────^
    │

exiting with boogie verification errors
