(set-info :smt-lib-version 2.6)
(set-logic ALL)
(set-info :source |
Benchmarks used in the followin paper:
Big proof engines as little proof engines: new results on rewrite-based satisfiability procedure
Alessandro Armando, Maria Paola Bonacina, Silvio Ranise, Stephan Schulz. 
PDPAR'05
http://www.ai.dist.unige.it/pdpar05/


|)
(set-info :category "crafted")
(set-info :status sat)

(declare-sort Element 0)
(declare-fun a_345 () (Seq Element))
(declare-fun a_347 () (Seq Element))
(declare-fun a_349 () (Seq Element))
(declare-fun a_351 () (Seq Element))
(declare-fun a_353 () (Seq Element))
(declare-fun a_354 () (Seq Element))
(declare-fun a_356 () (Seq Element))
(declare-fun a_358 () (Seq Element))
(declare-fun a_360 () (Seq Element))
(declare-fun a_362 () (Seq Element))
(declare-fun a_364 () (Seq Element))
(declare-fun a_366 () (Seq Element))
(declare-fun a_368 () (Seq Element))
(declare-fun a_370 () (Seq Element))
(declare-fun a_372 () (Seq Element))
(declare-fun a_374 () (Seq Element))
(declare-fun a_375 () (Seq Element))
(declare-fun a_376 () (Seq Element))
(declare-fun a_378 () (Seq Element))
(declare-fun a_380 () (Seq Element))
(declare-fun a_382 () (Seq Element))
(declare-fun a_383 () (Seq Element))
(declare-fun a_385 () (Seq Element))
(declare-fun a_387 () (Seq Element))
(declare-fun a_389 () (Seq Element))
(declare-fun a_391 () (Seq Element))
(declare-fun a_393 () (Seq Element))
(declare-fun a_395 () (Seq Element))
(declare-fun a_397 () (Seq Element))
(declare-fun a_399 () (Seq Element))
(declare-fun a_401 () (Seq Element))
(declare-fun a_403 () (Seq Element))
(declare-fun e_344 () Element)
(declare-fun e_346 () Element)
(declare-fun e_348 () Element)
(declare-fun e_350 () Element)
(declare-fun e_352 () Element)
(declare-fun e_355 () Element)
(declare-fun e_357 () Element)
(declare-fun e_359 () Element)
(declare-fun e_361 () Element)
(declare-fun e_363 () Element)
(declare-fun e_365 () Element)
(declare-fun e_367 () Element)
(declare-fun e_369 () Element)
(declare-fun e_371 () Element)
(declare-fun e_373 () Element)
(declare-fun e_377 () Element)
(declare-fun e_379 () Element)
(declare-fun e_381 () Element)
(declare-fun e_384 () Element)
(declare-fun e_386 () Element)
(declare-fun e_388 () Element)
(declare-fun e_390 () Element)
(declare-fun e_392 () Element)
(declare-fun e_394 () Element)
(declare-fun e_396 () Element)
(declare-fun e_398 () Element)
(declare-fun e_400 () Element)
(declare-fun e_402 () Element)
(declare-fun a1 () (Seq Element))
(declare-fun i0 () Int)
(declare-fun i1 () Int)
(declare-fun i2 () Int)
(declare-fun i3 () Int)
(declare-fun i4 () Int)
(declare-fun i5 () Int)
(declare-fun i6 () Int)
(declare-fun i7 () Int)
(assert (= a_345 (seq.update a1 i3 (seq.unit e_344))))
(assert (= a_347 (seq.update a_345 i7 (seq.unit e_346))))
(assert (= a_349 (seq.update a_347 i4 (seq.unit e_348))))
(assert (= a_351 (seq.update a_349 i0 (seq.unit e_350))))
(assert (= a_353 (seq.update a_351 i7 (seq.unit e_352))))
(assert (= a_354 (seq.update a_353 i7 (seq.unit e_352))))
(assert (= a_356 (seq.update a_354 i1 (seq.unit e_355))))
(assert (= a_358 (seq.update a_356 i7 (seq.unit e_357))))
(assert (= a_360 (seq.update a_358 i6 (seq.unit e_359))))
(assert (= a_362 (seq.update a_360 i5 (seq.unit e_361))))
(assert (= a_364 (seq.update a_362 i1 (seq.unit e_363))))
(assert (= a_366 (seq.update a_364 i6 (seq.unit e_365))))
(assert (= a_368 (seq.update a_366 i6 (seq.unit e_367))))
(assert (= a_370 (seq.update a_368 i2 (seq.unit e_369))))
(assert (= a_372 (seq.update a_370 i3 (seq.unit e_371))))
(assert (= a_374 (seq.update a_372 i0 (seq.unit e_373))))
(assert (= a_375 (seq.update a1 i7 (seq.unit e_346))))
(assert (= a_376 (seq.update a_375 i3 (seq.unit e_344))))
(assert (= a_378 (seq.update a_376 i4 (seq.unit e_377))))
(assert (= a_380 (seq.update a_378 i0 (seq.unit e_379))))
(assert (= a_382 (seq.update a_380 i7 (seq.unit e_381))))
(assert (= a_383 (seq.update a_382 i7 (seq.unit e_381))))
(assert (= a_385 (seq.update a_383 i7 (seq.unit e_384))))
(assert (= a_387 (seq.update a_385 i1 (seq.unit e_386))))
(assert (= a_389 (seq.update a_387 i6 (seq.unit e_388))))
(assert (= a_391 (seq.update a_389 i5 (seq.unit e_390))))
(assert (= a_393 (seq.update a_391 i6 (seq.unit e_392))))
(assert (= a_395 (seq.update a_393 i1 (seq.unit e_394))))
(assert (= a_397 (seq.update a_395 i2 (seq.unit e_396))))
(assert (= a_399 (seq.update a_397 i6 (seq.unit e_398))))
(assert (= a_401 (seq.update a_399 i1 (seq.unit e_400))))
(assert (= a_403 (seq.update a_401 i3 (seq.unit e_402))))
(assert (= e_344 (seq.nth a1 i7)))
(assert (= e_346 (seq.nth a1 i3)))
(assert (= e_348 (seq.nth a_347 i0)))
(assert (= e_350 (seq.nth a_347 i4)))
(assert (= e_352 (seq.nth a_351 i7)))
(assert (= e_355 (seq.nth a_354 i7)))
(assert (= e_357 (seq.nth a_354 i1)))
(assert (= e_359 (seq.nth a_358 i5)))
(assert (= e_361 (seq.nth a_358 i6)))
(assert (= e_363 (seq.nth a_362 i6)))
(assert (= e_365 (seq.nth a_362 i1)))
(assert (= e_367 (seq.nth a_366 i2)))
(assert (= e_369 (seq.nth a_366 i6)))
(assert (= e_371 (seq.nth a_370 i0)))
(assert (= e_373 (seq.nth a_370 i3)))
(assert (= e_377 (seq.nth a_376 i0)))
(assert (= e_379 (seq.nth a_376 i4)))
(assert (= e_381 (seq.nth a_380 i7)))
(assert (= e_384 (seq.nth a_383 i1)))
(assert (= e_386 (seq.nth a_383 i7)))
(assert (= e_388 (seq.nth a_387 i5)))
(assert (= e_390 (seq.nth a_387 i6)))
(assert (= e_392 (seq.nth a_391 i1)))
(assert (= e_394 (seq.nth a_391 i6)))
(assert (= e_396 (seq.nth a_395 i6)))
(assert (= e_398 (seq.nth a_395 i2)))
(assert (= e_400 (seq.nth a_399 i3)))
(assert (= e_402 (seq.nth a_399 i1)))
(assert (not (= a_374 a_403)))
(check-sat)
(exit)
