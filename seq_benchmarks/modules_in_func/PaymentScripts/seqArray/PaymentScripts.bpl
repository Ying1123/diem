
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for vectors, based on Z3 sequences.
//
// This version of vectors has extensional equality.
//
// This implementation works to some extend but has been so far been much slower/times out compared to
// non-extensional array versions, even though the later require stratified custom equality.
//
// Major issues seem to be:
//
// (a) UpdateVec, SwapVec etc. are slow. UpdateVec requires a ConcatVec of two SliceVec.
// (b) ReverseVec needs to be fully axiomatized with quantifiers which makes it infeasible
//     to work in practice.

type {:builtin "Seq"} Vec _;

function {:builtin "seq.empty"} EmptyVec<T>(): Vec T;

function {:builtin "seq.unit"} MakeVec1<T>(v: T): Vec T;

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    ConcatVec(MakeVec1(v1), MakeVec1(v2))
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    ConcatVec(MakeVec2(v1, v2), MakeVec1(v3))
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    ConcatVec(MakeVec3(v1, v2, v3), MakeVec1(v4))
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    ConcatVec(v, MakeVec1(elem))
}

function {:builtin "seq.nth"} ReadVec<T>(v: Vec T, i: int): T;

function {:builtin "seq.len"} LenVec<T>(v: Vec T): int;

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    LenVec(v) == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    SliceVec(v, 0, LenVec(v) - 1)
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    ConcatVec(SliceVec(v, 0, i), SliceVec(v, i + 1, LenVec(v)))
}

function {:builtin "seq.++"} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec3<T>(v1: Vec T, v2: Vec T, v3: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec4<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T): Vec T;
/*private*/ function {:builtin "seq.++"} ConcatVec5<T>(v1: Vec T, v2: Vec T, v3: Vec T, v4: Vec T, v5: Vec T): Vec T;

function {:inline} ReverseVec<T>(v: Vec T): Vec T;
axiom {:ctor "Vec"} (forall<T> v: Vec T:: {ReverseVec(v)}
        (var r := ReverseVec(v);
         LenVec(r) == LenVec(v) &&
         (forall i: int:: {ReadVec(r, i)} i >= 0 && i < LenVec(r) ==> ReadVec(r, i) == ReadVec(v, LenVec(v) - i - 1))));

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    ExtractVec(v, i, j - i)
}
/*private*/ function {:builtin "seq.extract"} ExtractVec<T>(v: Vec T, start: int, len: int): Vec T;

//function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
//    ConcatVec3(SliceVec(v, 0, i), MakeVec1(elem), SliceVec(v, i + 1, LenVec(v)))
//}
function {:builtin "seq.update"} Vec_Update<T>(v: Vec T, i: int, x: Vec T): Vec T;

function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
	Vec_Update(v, i, MakeVec1(elem))
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    UpdateVec(UpdateVec(v, j, ReadVec(v, i)), i, ReadVec(v, j))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    ContainsSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.contains"} ContainsSubVec<T>(v: Vec T, sub: Vec T): bool;

function {:inline} IndexOfVec<T>(v: Vec T, e: T): int {
    IndexOfSubVec(v, MakeVec1(e))
}
/*private*/ function {:builtin "seq.indexof"} IndexOfSubVec<T>(v: Vec T, sub: Vec T): int;

function {:inline} InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

type {:datatype} Multiset _;
function {:constructor} Multiset<T>(v: [T]int, l: int): Multiset T;

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    l#Multiset(s)
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := l#Multiset(s);
    (var cnt := v#Multiset(s)[v];
    Multiset(v#Multiset(s)[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := l#Multiset(s1);
    (var len2 := l#Multiset(s2);
    Multiset((lambda v:T :: v#Multiset(s1)[v]-v#Multiset(s2)[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (l#Multiset(s) == 0) &&
    (forall v: T :: v#Multiset(s)[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (l#Multiset(s1) <= l#Multiset(s2)) &&
    (forall v: T :: v#Multiset(s1)[v] <= v#Multiset(s2)[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    v#Multiset(s)[v] > 0
}



// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;

type {:datatype} $Range;
function {:constructor} $Range(lb: int, ub: int): $Range;

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(lb#$Range(r)) &&  $IsValid'u64'(ub#$Range(r))
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   lb#$Range(r) <= i && i < ub#$Range(r)
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

type {:datatype} $Location;

// A global resource location within the statically known resource type's memory,
// where `a` is an address.
function {:constructor} $Global(a: int): $Location;

// A local location. `i` is the unique index of the local.
function {:constructor} $Local(i: int): $Location;

// The location of a reference outside of the verification scope, for example, a `&mut` parameter
// of the function being verified. References with these locations don't need to be written back
// when mutation ends.
function {:constructor} $Param(i: int): $Location;


// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
type {:datatype} $Mutation _;
function {:constructor} $Mutation<T>(l: $Location, p: Vec int, v: T): $Mutation T;

// Representation of memory for a given type.
type {:datatype} $Memory _;
function {:constructor} $Memory<T>(domain: [int]bool, contents: [int]T): $Memory T;

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    v#$Mutation(ref)
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(l#$Mutation(m), p#$Mutation(m), v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), offset), v)
}

// Return true of the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true of the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    l#$Mutation(parent) == l#$Mutation(child) &&
    (var pp := p#$Mutation(parent);
    (var cp := p#$Mutation(child);
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    l#$Mutation(m1) == l#$Mutation(m2)
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    is#$Global(l#$Mutation(m))
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    l#$Mutation(m) == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    a#$Global(l#$Mutation(m))
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    domain#$Memory(m)[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    contents#$Memory(m)[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(domain#$Memory(m)[a := true], contents#$Memory(m)[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := false], contents#$Memory(m))
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(domain#$Memory(m)[a := domain#$Memory(s)[a]],
            contents#$Memory(m)[a := contents#$Memory(s)[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// Note that *not* inlining the shl/shr functions avoids timeouts. It appears that Z3 can reason
// better about this if it is an axiomatized function.
function $shl(src1: int, p: int): int {
    if p == 8 then src1 * 256
    else if p == 16 then src1 * 65536
    else if p == 32 then src1 * 4294967296
    else if p == 64 then src1 * 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

function $shr(src1: int, p: int): int {
    if p == 8 then src1 div 256
    else if p == 16 then src1 div 65536
    else if p == 32 then src1 div 4294967296
    else if p == 64 then src1 div 18446744073709551616
    // Value is undefined, otherwise.
    else -1
}

// TODO: fix this and $Shr to drop bits on overflow. Requires $Shl8, $Shl64, and $Shl128
procedure {:inline 1} $Shl(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shl(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    res := $shr(src1, src2);
    assert res >= 0;   // restriction: shift argument must be 8, 16, 32, or 64
    dst := res;
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, lb#$Range(r), ub#$Range(r))
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`


function {:inline} $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_KeyRotationCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_KeyRotationCapability''(v1: Vec ($1_DiemAccount_KeyRotationCapability), v2: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_KeyRotationCapability''(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability): int;
axiom (forall v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability:: {$IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_KeyRotationCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_KeyRotationCapability'() returns (v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_KeyRotationCapability'(): Vec ($1_DiemAccount_KeyRotationCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), val: $1_DiemAccount_KeyRotationCapability) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), val: $1_DiemAccount_KeyRotationCapability): Vec ($1_DiemAccount_KeyRotationCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), other: Vec ($1_DiemAccount_KeyRotationCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int) returns (dst: $1_DiemAccount_KeyRotationCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_KeyRotationCapability), m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int): $1_DiemAccount_KeyRotationCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), i: int, j: int): Vec ($1_DiemAccount_KeyRotationCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_KeyRotationCapability'(m: $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)), i: int) returns (e: $1_DiemAccount_KeyRotationCapability, m': $Mutation (Vec ($1_DiemAccount_KeyRotationCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_KeyRotationCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_KeyRotationCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability), e: $1_DiemAccount_KeyRotationCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_KeyRotationCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemAccount_WithdrawCapability`


function {:inline} $IsEqual'vec'$1_DiemAccount_WithdrawCapability''(v1: Vec ($1_DiemAccount_WithdrawCapability), v2: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemAccount_WithdrawCapability''(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability): int;
axiom (forall v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability:: {$IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e)}
    (var i := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
     if (!$ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemAccount_WithdrawCapability'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemAccount_WithdrawCapability'() returns (v: Vec ($1_DiemAccount_WithdrawCapability)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemAccount_WithdrawCapability'(): Vec ($1_DiemAccount_WithdrawCapability) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), val: $1_DiemAccount_WithdrawCapability) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), val: $1_DiemAccount_WithdrawCapability): Vec ($1_DiemAccount_WithdrawCapability) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), other: Vec ($1_DiemAccount_WithdrawCapability)) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int) returns (dst: $1_DiemAccount_WithdrawCapability) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), index: int)
returns (dst: $Mutation ($1_DiemAccount_WithdrawCapability), m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int): $1_DiemAccount_WithdrawCapability {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), i: int, j: int): Vec ($1_DiemAccount_WithdrawCapability) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemAccount_WithdrawCapability'(m: $Mutation (Vec ($1_DiemAccount_WithdrawCapability)), i: int) returns (e: $1_DiemAccount_WithdrawCapability, m': $Mutation (Vec ($1_DiemAccount_WithdrawCapability)))
{
    var len: int;
    var v: Vec ($1_DiemAccount_WithdrawCapability);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res: bool)  {
    res := $ContainsVec'$1_DiemAccount_WithdrawCapability'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability), e: $1_DiemAccount_WithdrawCapability) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemAccount_WithdrawCapability'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_DiemSystem_ValidatorInfo`


function {:inline} $IsEqual'vec'$1_DiemSystem_ValidatorInfo''(v1: Vec ($1_DiemSystem_ValidatorInfo), v2: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_DiemSystem_ValidatorInfo''(v: Vec ($1_DiemSystem_ValidatorInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo): int;
axiom (forall v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo:: {$IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e)}
    (var i := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
     if (!$ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_DiemSystem_ValidatorInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_DiemSystem_ValidatorInfo'() returns (v: Vec ($1_DiemSystem_ValidatorInfo)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_DiemSystem_ValidatorInfo'(): Vec ($1_DiemSystem_ValidatorInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), val: $1_DiemSystem_ValidatorInfo) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), val: $1_DiemSystem_ValidatorInfo): Vec ($1_DiemSystem_ValidatorInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), other: Vec ($1_DiemSystem_ValidatorInfo)) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int) returns (dst: $1_DiemSystem_ValidatorInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), index: int)
returns (dst: $Mutation ($1_DiemSystem_ValidatorInfo), m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int): $1_DiemSystem_ValidatorInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), i: int, j: int): Vec ($1_DiemSystem_ValidatorInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_DiemSystem_ValidatorInfo'(m: $Mutation (Vec ($1_DiemSystem_ValidatorInfo)), i: int) returns (e: $1_DiemSystem_ValidatorInfo, m': $Mutation (Vec ($1_DiemSystem_ValidatorInfo)))
{
    var len: int;
    var v: Vec ($1_DiemSystem_ValidatorInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res: bool)  {
    res := $ContainsVec'$1_DiemSystem_ValidatorInfo'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_DiemSystem_ValidatorInfo'(v: Vec ($1_DiemSystem_ValidatorInfo), e: $1_DiemSystem_ValidatorInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_DiemSystem_ValidatorInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XDX_XDX`


function {:inline} $IsEqual'vec'$1_XDX_XDX''(v1: Vec ($1_XDX_XDX), v2: Vec ($1_XDX_XDX)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_XDX_XDX''(v: Vec ($1_XDX_XDX)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XDX_XDX'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX): int;
axiom (forall v: Vec ($1_XDX_XDX), e: $1_XDX_XDX:: {$IndexOfVec'$1_XDX_XDX'(v, e)}
    (var i := $IndexOfVec'$1_XDX_XDX'(v, e);
     if (!$ContainsVec'$1_XDX_XDX'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XDX_XDX'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XDX_XDX'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XDX_XDX'() returns (v: Vec ($1_XDX_XDX)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XDX_XDX'(): Vec ($1_XDX_XDX) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), val: $1_XDX_XDX) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), val: $1_XDX_XDX): Vec ($1_XDX_XDX) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX))) {
    var v: Vec ($1_XDX_XDX);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), other: Vec ($1_XDX_XDX)) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX))) returns (m': $Mutation (Vec ($1_XDX_XDX))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int) returns (dst: $1_XDX_XDX) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), index: int)
returns (dst: $Mutation ($1_XDX_XDX), m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int): $1_XDX_XDX {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XDX_XDX'(v: Vec ($1_XDX_XDX)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int, j: int) returns (m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), i: int, j: int): Vec ($1_XDX_XDX) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XDX_XDX'(m: $Mutation (Vec ($1_XDX_XDX)), i: int) returns (e: $1_XDX_XDX, m': $Mutation (Vec ($1_XDX_XDX)))
{
    var len: int;
    var v: Vec ($1_XDX_XDX);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res: bool)  {
    res := $ContainsVec'$1_XDX_XDX'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XDX_XDX'(v: Vec ($1_XDX_XDX), e: $1_XDX_XDX) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XDX_XDX'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_XUS_XUS`


function {:inline} $IsEqual'vec'$1_XUS_XUS''(v1: Vec ($1_XUS_XUS), v2: Vec ($1_XUS_XUS)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'$1_XUS_XUS''(v: Vec ($1_XUS_XUS)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_XUS_XUS'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS): int;
axiom (forall v: Vec ($1_XUS_XUS), e: $1_XUS_XUS:: {$IndexOfVec'$1_XUS_XUS'(v, e)}
    (var i := $IndexOfVec'$1_XUS_XUS'(v, e);
     if (!$ContainsVec'$1_XUS_XUS'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_XUS_XUS'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_XUS_XUS'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'$1_XUS_XUS'() returns (v: Vec ($1_XUS_XUS)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'$1_XUS_XUS'(): Vec ($1_XUS_XUS) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), val: $1_XUS_XUS) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), val: $1_XUS_XUS): Vec ($1_XUS_XUS) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS))) {
    var v: Vec ($1_XUS_XUS);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), other: Vec ($1_XUS_XUS)) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS))) returns (m': $Mutation (Vec ($1_XUS_XUS))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int) returns (dst: $1_XUS_XUS) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), index: int)
returns (dst: $Mutation ($1_XUS_XUS), m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int): $1_XUS_XUS {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'$1_XUS_XUS'(v: Vec ($1_XUS_XUS)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int, j: int) returns (m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), i: int, j: int): Vec ($1_XUS_XUS) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'$1_XUS_XUS'(m: $Mutation (Vec ($1_XUS_XUS)), i: int) returns (e: $1_XUS_XUS, m': $Mutation (Vec ($1_XUS_XUS)))
{
    var len: int;
    var v: Vec ($1_XUS_XUS);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res: bool)  {
    res := $ContainsVec'$1_XUS_XUS'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'$1_XUS_XUS'(v: Vec ($1_XUS_XUS), e: $1_XUS_XUS) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_XUS_XUS'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `vec'u8'`


function {:inline} $IsEqual'vec'vec'u8'''(v1: Vec (Vec (int)), v2: Vec (Vec (int))): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'vec'u8'''(v: Vec (Vec (int))): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'vec'u8''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e))
}

function $IndexOfVec'vec'u8''(v: Vec (Vec (int)), e: Vec (int)): int;
axiom (forall v: Vec (Vec (int)), e: Vec (int):: {$IndexOfVec'vec'u8''(v, e)}
    (var i := $IndexOfVec'vec'u8''(v, e);
     if (!$ContainsVec'vec'u8''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'vec'u8''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'vec'u8''(ReadVec(v, j), e))));


function {:inline} $RangeVec'vec'u8''(v: Vec (Vec (int))): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'vec'u8''() returns (v: Vec (Vec (int))) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'vec'u8''(): Vec (Vec (int)) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'vec'u8''(v: Vec (Vec (int))) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'vec'u8''(m: $Mutation (Vec (Vec (int))), val: Vec (int)) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'vec'u8''(v: Vec (Vec (int)), val: Vec (int)): Vec (Vec (int)) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (e: Vec (int), m': $Mutation (Vec (Vec (int)))) {
    var v: Vec (Vec (int));
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'vec'u8''(m: $Mutation (Vec (Vec (int))), other: Vec (Vec (int))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'vec'u8''(m: $Mutation (Vec (Vec (int)))) returns (m': $Mutation (Vec (Vec (int)))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'vec'u8''(v: Vec (Vec (int))) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'vec'u8''(v: Vec (Vec (int))): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'vec'u8''(v: Vec (Vec (int)), i: int) returns (dst: Vec (int)) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'vec'u8''(m: $Mutation (Vec (Vec (int))), index: int)
returns (dst: $Mutation (Vec (int)), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'vec'u8''(v: Vec (Vec (int)), i: int): Vec (int) {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'vec'u8''(v: Vec (Vec (int))) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int, j: int) returns (m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'vec'u8''(v: Vec (Vec (int)), i: int, j: int): Vec (Vec (int)) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var v: Vec (Vec (int));

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'vec'u8''(m: $Mutation (Vec (Vec (int))), i: int) returns (e: Vec (int), m': $Mutation (Vec (Vec (int))))
{
    var len: int;
    var v: Vec (Vec (int));

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res: bool)  {
    res := $ContainsVec'vec'u8''(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'vec'u8''(v: Vec (Vec (int)), e: Vec (int)) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'vec'u8''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `address`


function {:inline} $IsEqual'vec'address''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'address''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'address'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'address'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e))
}

function $IndexOfVec'address'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'address'(v, e)}
    (var i := $IndexOfVec'address'(v, e);
     if (!$ContainsVec'address'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'address'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'address'(ReadVec(v, j), e))));


function {:inline} $RangeVec'address'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'address'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'address'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'address'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'address'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'address'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'address'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'address'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'address'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'address'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'address'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'address'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'address'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'address'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'address'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'address'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'address'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'address'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'address'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'address'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'address'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'address'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`


function {:inline} $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    v1 == v2
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_Vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_Vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_Vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_Vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_Vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_Vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_Vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_Vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_Vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_Vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_Vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(l#$Mutation(m), ExtendVec(p#$Mutation(m), index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_Vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_Vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_Vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_Vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_Vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_Vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_Vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_Vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_Hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_Hash_sha2(v1), $1_Hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha2(v1), $1_Hash_sha2(v2)));

procedure $1_Hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha2_256(val: Vec int): Vec int {
    $1_Hash_sha2(val)
}

// similarly for Hash_sha3
function $1_Hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_Hash_sha3(v1), $1_Hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_Hash_sha3(v1), $1_Hash_sha3(v2)));

procedure $1_Hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_Hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_Hash_$sha3_256(val: Vec int): Vec int {
    $1_Hash_sha3(val)
}

// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native Signer

type {:datatype} $signer;
function {:constructor} $signer($addr: int): $signer;
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'($addr#$signer(s))
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_Signer_borrow_address(signer: $signer) returns (res: int) {
    res := $addr#$signer(signer);
}

function {:inline} $1_Signer_$borrow_address(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_spec_address_of(signer: $signer): int
{
    $addr#$signer(signer)
}

function {:inline} $1_Signer_is_txn_signer(s: $signer): bool;

function {:inline} $1_Signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native BCS::serialize


// ==================================================================================
// Native Event module




// Publishing a generator does nothing. Currently we just ignore this function and do not represent generators
// at all because they are not publicly exposed by the Event module.
// TODO: we should check (and abort with the right code) if a generator already exists for
// the signer.

procedure {:inline 1} $1_Event_publish_generator(signer: $signer) {
}

// Generic code for dealing with mutations (havoc) still requires type and memory declarations.
type $1_Event_EventHandleGenerator;
var $1_Event_EventHandleGenerator_$memory: $Memory $1_Event_EventHandleGenerator;

// Abstract type of event handles.
type $1_Event_EventHandle;

// Global state to implement uniqueness of event handles.
var $1_Event_EventHandles: [$1_Event_EventHandle]bool;

// Universal representation of an an event. For each concrete event type, we generate a constructor.
type {:datatype} $EventRep;

// Representation of EventStore that consists of event streams.
type {:datatype} $EventStore;
function {:constructor} $EventStore(
    counter: int, streams: [$1_Event_EventHandle]Multiset $EventRep): $EventStore;

// Global state holding EventStore.
var $es: $EventStore;

procedure {:inline 1} $InitEventStore() {
    assume $EventStore__is_empty($es);
}

function {:inline} $EventStore__is_empty(es: $EventStore): bool {
    (counter#$EventStore(es) == 0) &&
    (forall handle: $1_Event_EventHandle ::
        (var stream := streams#$EventStore(es)[handle];
        IsEmptyMultiset(stream)))
}

// This function returns (es1 - es2). This function assumes that es2 is a subset of es1.
function {:inline} $EventStore__subtract(es1: $EventStore, es2: $EventStore): $EventStore {
    $EventStore(counter#$EventStore(es1)-counter#$EventStore(es2),
        (lambda handle: $1_Event_EventHandle ::
        SubtractMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle])))
}

function {:inline} $EventStore__is_subset(es1: $EventStore, es2: $EventStore): bool {
    (counter#$EventStore(es1) <= counter#$EventStore(es2)) &&
    (forall handle: $1_Event_EventHandle ::
        IsSubsetMultiset(
            streams#$EventStore(es1)[handle],
            streams#$EventStore(es2)[handle]
        )
    )
}

procedure {:inline 1} $EventStore__diverge(es: $EventStore) returns (es': $EventStore) {
    assume $EventStore__is_subset(es, es');
}

const $EmptyEventStore: $EventStore;
axiom $EventStore__is_empty($EmptyEventStore);

// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_FreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_FreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(e: $1_AccountFreezing_FreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_FreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_FreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_FreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_FreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_FreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', msg: $1_AccountFreezing_FreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_FreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_AccountFreezing_UnfreezeAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(a: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', b: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''(h: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): bool {
    true
}

// Embed event `$1_AccountFreezing_UnfreezeAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(e: $1_AccountFreezing_UnfreezeAccountEvent): $EventRep;
axiom (forall v1, v2: $1_AccountFreezing_UnfreezeAccountEvent :: {$ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1), $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2)}
    $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(v1, v2) <==> $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v1) == $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_AccountFreezing_UnfreezeAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_AccountFreezing_UnfreezeAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
    var handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_AccountFreezing_UnfreezeAccountEvent'(handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_AccountFreezing_UnfreezeAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent', msg: $1_AccountFreezing_UnfreezeAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_AccountFreezing_UnfreezeAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_AdminTransactionEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(a: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', b: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''(h: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_AdminTransactionEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(e: $1_DiemAccount_AdminTransactionEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_AdminTransactionEvent :: {$ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1), $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2)}
    $IsEqual'$1_DiemAccount_AdminTransactionEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v1) == $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_AdminTransactionEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_AdminTransactionEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_AdminTransactionEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_AdminTransactionEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent', msg: $1_DiemAccount_AdminTransactionEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_AdminTransactionEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_CreateAccountEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(a: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', b: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''(h: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_CreateAccountEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_CreateAccountEvent'(e: $1_DiemAccount_CreateAccountEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_CreateAccountEvent :: {$ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1), $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2)}
    $IsEqual'$1_DiemAccount_CreateAccountEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v1) == $ToEventRep'$1_DiemAccount_CreateAccountEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_CreateAccountEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_CreateAccountEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_CreateAccountEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_CreateAccountEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_CreateAccountEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent', msg: $1_DiemAccount_CreateAccountEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_CreateAccountEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_ReceivedPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_ReceivedPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(e: $1_DiemAccount_ReceivedPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_ReceivedPaymentEvent :: {$ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_ReceivedPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_ReceivedPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_ReceivedPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_ReceivedPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', msg: $1_DiemAccount_ReceivedPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemAccount_SentPaymentEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(a: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', b: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    true
}

// Embed event `$1_DiemAccount_SentPaymentEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemAccount_SentPaymentEvent'(e: $1_DiemAccount_SentPaymentEvent): $EventRep;
axiom (forall v1, v2: $1_DiemAccount_SentPaymentEvent :: {$ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1), $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2)}
    $IsEqual'$1_DiemAccount_SentPaymentEvent'(v1, v2) <==> $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v1) == $ToEventRep'$1_DiemAccount_SentPaymentEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemAccount_SentPaymentEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemAccount_SentPaymentEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
    var handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemAccount_SentPaymentEvent'(handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemAccount_SentPaymentEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemAccount_SentPaymentEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', msg: $1_DiemAccount_SentPaymentEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemBlock_NewBlockEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(a: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', b: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''(h: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): bool {
    true
}

// Embed event `$1_DiemBlock_NewBlockEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemBlock_NewBlockEvent'(e: $1_DiemBlock_NewBlockEvent): $EventRep;
axiom (forall v1, v2: $1_DiemBlock_NewBlockEvent :: {$ToEventRep'$1_DiemBlock_NewBlockEvent'(v1), $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2)}
    $IsEqual'$1_DiemBlock_NewBlockEvent'(v1, v2) <==> $ToEventRep'$1_DiemBlock_NewBlockEvent'(v1) == $ToEventRep'$1_DiemBlock_NewBlockEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemBlock_NewBlockEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemBlock_NewBlockEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
    var handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemBlock_NewBlockEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemBlock_NewBlockEvent'(handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemBlock_NewBlockEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemBlock_NewBlockEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent', msg: $1_DiemBlock_NewBlockEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemBlock_NewBlockEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DiemConfig_NewEpochEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(a: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', b: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''(h: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): bool {
    true
}

// Embed event `$1_DiemConfig_NewEpochEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DiemConfig_NewEpochEvent'(e: $1_DiemConfig_NewEpochEvent): $EventRep;
axiom (forall v1, v2: $1_DiemConfig_NewEpochEvent :: {$ToEventRep'$1_DiemConfig_NewEpochEvent'(v1), $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2)}
    $IsEqual'$1_DiemConfig_NewEpochEvent'(v1, v2) <==> $ToEventRep'$1_DiemConfig_NewEpochEvent'(v1) == $ToEventRep'$1_DiemConfig_NewEpochEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DiemConfig_NewEpochEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DiemConfig_NewEpochEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
    var handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DiemConfig_NewEpochEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DiemConfig_NewEpochEvent'(handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent') {
}

function {:inline} $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DiemConfig_NewEpochEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DiemConfig_NewEpochEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent', msg: $1_DiemConfig_NewEpochEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DiemConfig_NewEpochEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_BurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_BurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_BurnEvent''(a: $1_Event_EventHandle'$1_Diem_BurnEvent', b: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''(h: $1_Event_EventHandle'$1_Diem_BurnEvent'): bool {
    true
}

// Embed event `$1_Diem_BurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_BurnEvent'(e: $1_Diem_BurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_BurnEvent :: {$ToEventRep'$1_Diem_BurnEvent'(v1), $ToEventRep'$1_Diem_BurnEvent'(v2)}
    $IsEqual'$1_Diem_BurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_BurnEvent'(v1) == $ToEventRep'$1_Diem_BurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_BurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_BurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_BurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_BurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_BurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_BurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_BurnEvent'(handle: $1_Event_EventHandle'$1_Diem_BurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_BurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_BurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_BurnEvent', msg: $1_Diem_BurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_BurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_CancelBurnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_CancelBurnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(a: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', b: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''(h: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): bool {
    true
}

// Embed event `$1_Diem_CancelBurnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_CancelBurnEvent'(e: $1_Diem_CancelBurnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_CancelBurnEvent :: {$ToEventRep'$1_Diem_CancelBurnEvent'(v1), $ToEventRep'$1_Diem_CancelBurnEvent'(v2)}
    $IsEqual'$1_Diem_CancelBurnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_CancelBurnEvent'(v1) == $ToEventRep'$1_Diem_CancelBurnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_CancelBurnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_CancelBurnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_CancelBurnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_CancelBurnEvent'(handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_CancelBurnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_CancelBurnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', msg: $1_Diem_CancelBurnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_CancelBurnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_MintEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_MintEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_MintEvent''(a: $1_Event_EventHandle'$1_Diem_MintEvent', b: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''(h: $1_Event_EventHandle'$1_Diem_MintEvent'): bool {
    true
}

// Embed event `$1_Diem_MintEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_MintEvent'(e: $1_Diem_MintEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_MintEvent :: {$ToEventRep'$1_Diem_MintEvent'(v1), $ToEventRep'$1_Diem_MintEvent'(v2)}
    $IsEqual'$1_Diem_MintEvent'(v1, v2) <==> $ToEventRep'$1_Diem_MintEvent'(v1) == $ToEventRep'$1_Diem_MintEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_MintEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_MintEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_MintEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_MintEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_MintEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_MintEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_MintEvent'(handle: $1_Event_EventHandle'$1_Diem_MintEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_MintEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_MintEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_MintEvent', msg: $1_Diem_MintEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_MintEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_PreburnEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_PreburnEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_PreburnEvent''(a: $1_Event_EventHandle'$1_Diem_PreburnEvent', b: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''(h: $1_Event_EventHandle'$1_Diem_PreburnEvent'): bool {
    true
}

// Embed event `$1_Diem_PreburnEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_PreburnEvent'(e: $1_Diem_PreburnEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_PreburnEvent :: {$ToEventRep'$1_Diem_PreburnEvent'(v1), $ToEventRep'$1_Diem_PreburnEvent'(v2)}
    $IsEqual'$1_Diem_PreburnEvent'(v1, v2) <==> $ToEventRep'$1_Diem_PreburnEvent'(v1) == $ToEventRep'$1_Diem_PreburnEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_PreburnEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_PreburnEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_PreburnEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_PreburnEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_PreburnEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_PreburnEvent'(handle: $1_Event_EventHandle'$1_Diem_PreburnEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_PreburnEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_PreburnEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_PreburnEvent', msg: $1_Diem_PreburnEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_PreburnEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_Diem_ToXDXExchangeRateUpdateEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(a: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', b: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''(h: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): bool {
    true
}

// Embed event `$1_Diem_ToXDXExchangeRateUpdateEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(e: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventRep;
axiom (forall v1, v2: $1_Diem_ToXDXExchangeRateUpdateEvent :: {$ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1), $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2)}
    $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1, v2) <==> $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v1) == $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
    var handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_Diem_ToXDXExchangeRateUpdateEvent'(handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent') {
}

function {:inline} $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_Diem_ToXDXExchangeRateUpdateEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent', msg: $1_Diem_ToXDXExchangeRateUpdateEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_Diem_ToXDXExchangeRateUpdateEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_BaseUrlRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_BaseUrlRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(e: $1_DualAttestation_BaseUrlRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_BaseUrlRotationEvent :: {$ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1), $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_BaseUrlRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_BaseUrlRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_BaseUrlRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_BaseUrlRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent', msg: $1_DualAttestation_BaseUrlRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_BaseUrlRotationEvent'(es, handle, msg)
    else
        es
}


// ----------------------------------------------------------------------------------
// Native Event implementation for element type `$1_DualAttestation_ComplianceKeyRotationEvent`

// Map type specific handle to universal one.
type $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent' = $1_Event_EventHandle;

function {:inline} $IsEqual'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(a: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', b: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    a == b
}

function $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''(h: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): bool {
    true
}

// Embed event `$1_DualAttestation_ComplianceKeyRotationEvent` into universal $EventRep
function {:constructor} $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(e: $1_DualAttestation_ComplianceKeyRotationEvent): $EventRep;
axiom (forall v1, v2: $1_DualAttestation_ComplianceKeyRotationEvent :: {$ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1), $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2)}
    $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(v1, v2) <==> $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v1) == $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(v2));

// Creates a new event handle. This ensures each time it is called that a unique new abstract event handler is
// returned.
// TODO: we should check (and abort with the right code) if no generator exists for the signer.
procedure {:inline 1} $1_Event_new_event_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(signer: $signer) returns (res: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    assume $1_Event_EventHandles[res] == false;
    $1_Event_EventHandles := $1_Event_EventHandles[res := true];
}

// This boogie procedure is the model of `emit_event`. This model abstracts away the `counter` behavior, thus not
// mutating (or increasing) `counter`.
procedure {:inline 1} $1_Event_emit_event'$1_DualAttestation_ComplianceKeyRotationEvent'(handle_mut: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent)
returns (res: $Mutation $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
    var handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent';
    handle := $Dereference(handle_mut);
    $es := $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'($es, handle, msg);
    res := handle_mut;
}

procedure {:inline 1} $1_Event_destroy_handle'$1_DualAttestation_ComplianceKeyRotationEvent'(handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent') {
}

function {:inline} $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent): $EventStore {
    (var stream := streams#$EventStore(es)[handle];
    (var stream_new := ExtendMultiset(stream, $ToEventRep'$1_DualAttestation_ComplianceKeyRotationEvent'(msg));
    $EventStore(counter#$EventStore(es)+1, streams#$EventStore(es)[handle := stream_new])))
}

function {:inline} $CondExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(
        es: $EventStore, handle: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', msg: $1_DualAttestation_ComplianceKeyRotationEvent, cond: bool): $EventStore {
    if cond then
        $ExtendEventStore'$1_DualAttestation_ComplianceKeyRotationEvent'(es, handle, msg)
    else
        es
}




//==================================
// Begin Translation



// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:158:5+90
function {:inline} $1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:120:10+104
function {:inline} $1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds): int {
    $microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds($ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816))
}

// struct DiemTimestamp::CurrentTimeMicroseconds at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:20:5+73
type {:datatype} $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:constructor} $1_DiemTimestamp_CurrentTimeMicroseconds($microseconds: int): $1_DiemTimestamp_CurrentTimeMicroseconds;
function {:inline} $Update'$1_DiemTimestamp_CurrentTimeMicroseconds'_microseconds(s: $1_DiemTimestamp_CurrentTimeMicroseconds, x: int): $1_DiemTimestamp_CurrentTimeMicroseconds {
    $1_DiemTimestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'(s: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'($microseconds#$1_DiemTimestamp_CurrentTimeMicroseconds(s))
}
function {:inline} $IsEqual'$1_DiemTimestamp_CurrentTimeMicroseconds'(s1: $1_DiemTimestamp_CurrentTimeMicroseconds, s2: $1_DiemTimestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:481:9+148
function {:inline} $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int, role_id: int): bool {
    ($ResourceExists($1_Roles_RoleId_$memory, addr) && $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), role_id))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:485:9+124
function {:inline} $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 0)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:489:9+144
function {:inline} $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 1)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:493:9+140
function {:inline} $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:505:9+128
function {:inline} $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 5)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:509:9+126
function {:inline} $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    $1_Roles_spec_has_role_id_addr($1_Roles_RoleId_$memory, addr, 6)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Roles.move:513:9+229
function {:inline} $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId, addr: int): bool {
    (($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr)) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr))
}

// struct Roles::RoleId at /home/ying/diem/language/diem-framework/modules/Roles.move:53:5+51
type {:datatype} $1_Roles_RoleId;
function {:constructor} $1_Roles_RoleId($role_id: int): $1_Roles_RoleId;
function {:inline} $Update'$1_Roles_RoleId'_role_id(s: $1_Roles_RoleId, x: int): $1_Roles_RoleId {
    $1_Roles_RoleId(x)
}
function $IsValid'$1_Roles_RoleId'(s: $1_Roles_RoleId): bool {
    $IsValid'u64'($role_id#$1_Roles_RoleId(s))
}
function {:inline} $IsEqual'$1_Roles_RoleId'(s1: $1_Roles_RoleId, s2: $1_Roles_RoleId): bool {
    s1 == s2
}
var $1_Roles_RoleId_$memory: $Memory $1_Roles_RoleId;

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'u8'(v: Vec (int)): bool {
    $IsEqual'u64'($1_Vector_$length'u8'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'(v: Vec ($1_DiemAccount_KeyRotationCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_KeyRotationCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Vector.move:91:5+86
function {:inline} $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'(v: Vec ($1_DiemAccount_WithdrawCapability)): bool {
    $IsEqual'u64'($1_Vector_$length'$1_DiemAccount_WithdrawCapability'(v), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_KeyRotationCapability {
    $1_Vector_$borrow'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:86:5+170
function {:inline} $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_WithdrawCapability {
    $1_Vector_$borrow'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t), 0)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:51:5+95
function {:inline} $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'(t: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_KeyRotationCapability'($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:61:5+96
function {:inline} $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'(t: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    !$1_Vector_$is_empty'$1_DiemAccount_WithdrawCapability'($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(t))
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:33:10+78
function {:inline} $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'(): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'($EmptyVec'$1_DiemAccount_WithdrawCapability'())
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Option.move:46:10+89
function {:inline} $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'(e: $1_DiemAccount_WithdrawCapability): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(MakeVec1(e))
}

// struct Option::Option<DiemAccount::KeyRotationCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_KeyRotationCapability'($vec: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''_vec(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $1_Option_Option'$1_DiemAccount_KeyRotationCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''(s1: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', s2: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): bool {
    s1 == s2
}

// struct Option::Option<DiemAccount::WithdrawCapability> at /home/ying/diem/language/move-stdlib/modules/Option.move:8:5+81
type {:datatype} $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:constructor} $1_Option_Option'$1_DiemAccount_WithdrawCapability'($vec: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability';
function {:inline} $Update'$1_Option_Option'$1_DiemAccount_WithdrawCapability''_vec(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability', x: Vec ($1_DiemAccount_WithdrawCapability)): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $1_Option_Option'$1_DiemAccount_WithdrawCapability'(x)
}
function $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    $IsValid'vec'$1_DiemAccount_WithdrawCapability''($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'(s))
}
function {:inline} $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''(s1: $1_Option_Option'$1_DiemAccount_WithdrawCapability', s2: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): bool {
    s1 == s2
}

// struct ValidatorConfig::Config at /home/ying/diem/language/diem-framework/modules/ValidatorConfig.move:16:5+178
type {:datatype} $1_ValidatorConfig_Config;
function {:constructor} $1_ValidatorConfig_Config($consensus_pubkey: Vec (int), $validator_network_addresses: Vec (int), $fullnode_network_addresses: Vec (int)): $1_ValidatorConfig_Config;
function {:inline} $Update'$1_ValidatorConfig_Config'_consensus_pubkey(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config(x, $validator_network_addresses#$1_ValidatorConfig_Config(s), $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_validator_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), x, $fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $Update'$1_ValidatorConfig_Config'_fullnode_network_addresses(s: $1_ValidatorConfig_Config, x: Vec (int)): $1_ValidatorConfig_Config {
    $1_ValidatorConfig_Config($consensus_pubkey#$1_ValidatorConfig_Config(s), $validator_network_addresses#$1_ValidatorConfig_Config(s), x)
}
function $IsValid'$1_ValidatorConfig_Config'(s: $1_ValidatorConfig_Config): bool {
    $IsValid'vec'u8''($consensus_pubkey#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($validator_network_addresses#$1_ValidatorConfig_Config(s))
      && $IsValid'vec'u8''($fullnode_network_addresses#$1_ValidatorConfig_Config(s))
}
function {:inline} $IsEqual'$1_ValidatorConfig_Config'(s1: $1_ValidatorConfig_Config, s2: $1_ValidatorConfig_Config): bool {
    s1 == s2
}

// struct SlidingNonce::SlidingNonce at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:11:5+341
type {:datatype} $1_SlidingNonce_SlidingNonce;
function {:constructor} $1_SlidingNonce_SlidingNonce($min_nonce: int, $nonce_mask: int): $1_SlidingNonce_SlidingNonce;
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_min_nonce(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce(x, $nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $Update'$1_SlidingNonce_SlidingNonce'_nonce_mask(s: $1_SlidingNonce_SlidingNonce, x: int): $1_SlidingNonce_SlidingNonce {
    $1_SlidingNonce_SlidingNonce($min_nonce#$1_SlidingNonce_SlidingNonce(s), x)
}
function $IsValid'$1_SlidingNonce_SlidingNonce'(s: $1_SlidingNonce_SlidingNonce): bool {
    $IsValid'u64'($min_nonce#$1_SlidingNonce_SlidingNonce(s))
      && $IsValid'u128'($nonce_mask#$1_SlidingNonce_SlidingNonce(s))
}
function {:inline} $IsEqual'$1_SlidingNonce_SlidingNonce'(s1: $1_SlidingNonce_SlidingNonce, s2: $1_SlidingNonce_SlidingNonce): bool {
    s1 == s2
}
var $1_SlidingNonce_SlidingNonce_$memory: $Memory $1_SlidingNonce_SlidingNonce;

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:93:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/Event.move:93:9+260
function {:inline} $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'(h1: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', h2: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): bool {
    $IsEqual'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''(h1, h2)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:457:9+84
function {:inline} $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration): bool {
    $ResourceExists($1_DiemConfig_Configuration_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:461:9+99
function {:inline} $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $ResourceExists($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory, 173345816)
}

// struct DiemConfig::DiemConfig<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'($payload: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', x: $1_DiemSystem_DiemSystem): $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'$1_DiemSystem_DiemSystem'($payload#$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem';

// struct DiemConfig::DiemConfig<RegisteredCurrencies::RegisteredCurrencies> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:constructor} $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'($payload: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''_payload(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', x: $1_RegisteredCurrencies_RegisteredCurrencies): $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies' {
    $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'($payload#$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies''(s1: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies', s2: $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies';

// struct DiemConfig::DiemConfig<DiemTransactionPublishingOption::DiemTransactionPublishingOption> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', x: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption' {
    $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($payload#$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption''(s1: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption', s2: $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption';

// struct DiemConfig::DiemConfig<DiemVMConfig::DiemVMConfig> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'($payload: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', x: $1_DiemVMConfig_DiemVMConfig): $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig' {
    $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    $IsValid'$1_DiemVMConfig_DiemVMConfig'($payload#$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig''(s1: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig', s2: $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig';

// struct DiemConfig::DiemConfig<DiemVersion::DiemVersion> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:18:5+156
type {:datatype} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:constructor} $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'($payload: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';
function {:inline} $Update'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''_payload(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', x: $1_DiemVersion_DiemVersion): $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion' {
    $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(x)
}
function $IsValid'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    $IsValid'$1_DiemVersion_DiemVersion'($payload#$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion''(s1: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion', s2: $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'): bool {
    s1 == s2
}
var $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory: $Memory $1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion';

// struct DiemConfig::Configuration at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:31:5+306
type {:datatype} $1_DiemConfig_Configuration;
function {:constructor} $1_DiemConfig_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration;
function {:inline} $Update'$1_DiemConfig_Configuration'_epoch(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration(x, $last_reconfiguration_time#$1_DiemConfig_Configuration(s), $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_last_reconfiguration_time(s: $1_DiemConfig_Configuration, x: int): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), x, $events#$1_DiemConfig_Configuration(s))
}
function {:inline} $Update'$1_DiemConfig_Configuration'_events(s: $1_DiemConfig_Configuration, x: $1_Event_EventHandle'$1_DiemConfig_NewEpochEvent'): $1_DiemConfig_Configuration {
    $1_DiemConfig_Configuration($epoch#$1_DiemConfig_Configuration(s), $last_reconfiguration_time#$1_DiemConfig_Configuration(s), x)
}
function $IsValid'$1_DiemConfig_Configuration'(s: $1_DiemConfig_Configuration): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_Configuration(s))
      && $IsValid'u64'($last_reconfiguration_time#$1_DiemConfig_Configuration(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemConfig_NewEpochEvent''($events#$1_DiemConfig_Configuration(s))
}
function {:inline} $IsEqual'$1_DiemConfig_Configuration'(s1: $1_DiemConfig_Configuration, s2: $1_DiemConfig_Configuration): bool {
    s1 == s2
}
var $1_DiemConfig_Configuration_$memory: $Memory $1_DiemConfig_Configuration;

// struct DiemConfig::ModifyConfigCapability<DiemSystem::DiemSystem> at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:41:5+65
type {:datatype} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:constructor} $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'($dummy_field: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';
function {:inline} $Update'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''_dummy_field(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', x: bool): $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem' {
    $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(x)
}
function $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    $IsValid'bool'($dummy_field#$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'(s))
}
function {:inline} $IsEqual'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''(s1: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem', s2: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): bool {
    s1 == s2
}
var $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'_$memory: $Memory $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem';

// struct DiemConfig::NewEpochEvent at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:26:5+64
type {:datatype} $1_DiemConfig_NewEpochEvent;
function {:constructor} $1_DiemConfig_NewEpochEvent($epoch: int): $1_DiemConfig_NewEpochEvent;
function {:inline} $Update'$1_DiemConfig_NewEpochEvent'_epoch(s: $1_DiemConfig_NewEpochEvent, x: int): $1_DiemConfig_NewEpochEvent {
    $1_DiemConfig_NewEpochEvent(x)
}
function $IsValid'$1_DiemConfig_NewEpochEvent'(s: $1_DiemConfig_NewEpochEvent): bool {
    $IsValid'u64'($epoch#$1_DiemConfig_NewEpochEvent(s))
}
function {:inline} $IsEqual'$1_DiemConfig_NewEpochEvent'(s1: $1_DiemConfig_NewEpochEvent, s2: $1_DiemConfig_NewEpochEvent): bool {
    s1 == s2
}

// struct DiemSystem::DiemSystem at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:48:5+198
type {:datatype} $1_DiemSystem_DiemSystem;
function {:constructor} $1_DiemSystem_DiemSystem($scheme: int, $validators: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem;
function {:inline} $Update'$1_DiemSystem_DiemSystem'_scheme(s: $1_DiemSystem_DiemSystem, x: int): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem(x, $validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $Update'$1_DiemSystem_DiemSystem'_validators(s: $1_DiemSystem_DiemSystem, x: Vec ($1_DiemSystem_ValidatorInfo)): $1_DiemSystem_DiemSystem {
    $1_DiemSystem_DiemSystem($scheme#$1_DiemSystem_DiemSystem(s), x)
}
function $IsValid'$1_DiemSystem_DiemSystem'(s: $1_DiemSystem_DiemSystem): bool {
    $IsValid'u8'($scheme#$1_DiemSystem_DiemSystem(s))
      && $IsValid'vec'$1_DiemSystem_ValidatorInfo''($validators#$1_DiemSystem_DiemSystem(s))
}
function {:inline} $IsEqual'$1_DiemSystem_DiemSystem'(s1: $1_DiemSystem_DiemSystem, s2: $1_DiemSystem_DiemSystem): bool {
    s1 == s2
}

// struct DiemSystem::CapabilityHolder at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:39:5+242
type {:datatype} $1_DiemSystem_CapabilityHolder;
function {:constructor} $1_DiemSystem_CapabilityHolder($cap: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder;
function {:inline} $Update'$1_DiemSystem_CapabilityHolder'_cap(s: $1_DiemSystem_CapabilityHolder, x: $1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem'): $1_DiemSystem_CapabilityHolder {
    $1_DiemSystem_CapabilityHolder(x)
}
function $IsValid'$1_DiemSystem_CapabilityHolder'(s: $1_DiemSystem_CapabilityHolder): bool {
    $IsValid'$1_DiemConfig_ModifyConfigCapability'$1_DiemSystem_DiemSystem''($cap#$1_DiemSystem_CapabilityHolder(s))
}
function {:inline} $IsEqual'$1_DiemSystem_CapabilityHolder'(s1: $1_DiemSystem_CapabilityHolder, s2: $1_DiemSystem_CapabilityHolder): bool {
    s1 == s2
}
var $1_DiemSystem_CapabilityHolder_$memory: $Memory $1_DiemSystem_CapabilityHolder;

// struct DiemSystem::ValidatorInfo at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:18:5+600
type {:datatype} $1_DiemSystem_ValidatorInfo;
function {:constructor} $1_DiemSystem_ValidatorInfo($addr: int, $consensus_voting_power: int, $config: $1_ValidatorConfig_Config, $last_config_update_time: int): $1_DiemSystem_ValidatorInfo;
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_addr(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo(x, $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_consensus_voting_power(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), x, $config#$1_DiemSystem_ValidatorInfo(s), $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_config(s: $1_DiemSystem_ValidatorInfo, x: $1_ValidatorConfig_Config): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), x, $last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $Update'$1_DiemSystem_ValidatorInfo'_last_config_update_time(s: $1_DiemSystem_ValidatorInfo, x: int): $1_DiemSystem_ValidatorInfo {
    $1_DiemSystem_ValidatorInfo($addr#$1_DiemSystem_ValidatorInfo(s), $consensus_voting_power#$1_DiemSystem_ValidatorInfo(s), $config#$1_DiemSystem_ValidatorInfo(s), x)
}
function $IsValid'$1_DiemSystem_ValidatorInfo'(s: $1_DiemSystem_ValidatorInfo): bool {
    $IsValid'address'($addr#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($consensus_voting_power#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'$1_ValidatorConfig_Config'($config#$1_DiemSystem_ValidatorInfo(s))
      && $IsValid'u64'($last_config_update_time#$1_DiemSystem_ValidatorInfo(s))
}
function {:inline} $IsEqual'$1_DiemSystem_ValidatorInfo'(s1: $1_DiemSystem_ValidatorInfo, s2: $1_DiemSystem_ValidatorInfo): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:78:10+360
function {:inline} $1_FixedPoint32_spec_multiply_u64(val: int, multiplier: $1_FixedPoint32_FixedPoint32): int {
    if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 0)) then (0) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 1)) then (val) else (if ($IsEqual'u64'($value#$1_FixedPoint32_FixedPoint32(multiplier), 2)) then ((val div 2)) else ((18446744073709551615 + 1))))
}

// struct FixedPoint32::FixedPoint32 at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:17:5+56
type {:datatype} $1_FixedPoint32_FixedPoint32;
function {:constructor} $1_FixedPoint32_FixedPoint32($value: int): $1_FixedPoint32_FixedPoint32;
function {:inline} $Update'$1_FixedPoint32_FixedPoint32'_value(s: $1_FixedPoint32_FixedPoint32, x: int): $1_FixedPoint32_FixedPoint32 {
    $1_FixedPoint32_FixedPoint32(x)
}
function $IsValid'$1_FixedPoint32_FixedPoint32'(s: $1_FixedPoint32_FixedPoint32): bool {
    $IsValid'u64'($value#$1_FixedPoint32_FixedPoint32(s))
}
function {:inline} $IsEqual'$1_FixedPoint32_FixedPoint32'(s1: $1_FixedPoint32_FixedPoint32, s2: $1_FixedPoint32_FixedPoint32): bool {
    s1 == s2
}

// struct RegisteredCurrencies::RegisteredCurrencies at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:13:5+101
type {:datatype} $1_RegisteredCurrencies_RegisteredCurrencies;
function {:constructor} $1_RegisteredCurrencies_RegisteredCurrencies($currency_codes: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies;
function {:inline} $Update'$1_RegisteredCurrencies_RegisteredCurrencies'_currency_codes(s: $1_RegisteredCurrencies_RegisteredCurrencies, x: Vec (Vec (int))): $1_RegisteredCurrencies_RegisteredCurrencies {
    $1_RegisteredCurrencies_RegisteredCurrencies(x)
}
function $IsValid'$1_RegisteredCurrencies_RegisteredCurrencies'(s: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    $IsValid'vec'vec'u8'''($currency_codes#$1_RegisteredCurrencies_RegisteredCurrencies(s))
}
function {:inline} $IsEqual'$1_RegisteredCurrencies_RegisteredCurrencies'(s1: $1_RegisteredCurrencies_RegisteredCurrencies, s2: $1_RegisteredCurrencies_RegisteredCurrencies): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    ($1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    ($1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1408:5+184
function {:inline} $1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    ($1_Diem_$is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && !$is_synthetic#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1404:5+102
function {:inline} $1_Diem_$is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'$1_XUS_XUS'(coin: $1_Diem_Diem'$1_XUS_XUS'): int {
    $value#$1_Diem_Diem'$1_XUS_XUS'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'$1_XDX_XDX'(coin: $1_Diem_Diem'$1_XDX_XDX'): int {
    $value#$1_Diem_Diem'$1_XDX_XDX'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1129:5+81
function {:inline} $1_Diem_$value'#0'(coin: $1_Diem_Diem'#0'): int {
    $value#$1_Diem_Diem'#0'(coin)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'($1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'($1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1454:10+107
function {:inline} $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): Vec (int) {
    $currency_code#$1_Diem_CurrencyInfo'#0'($1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1826:9+108
function {:inline} $1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): bool {
    $ResourceExists($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1831:9+128
function {:inline} $1_Diem_spec_currency_info'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_Diem_CurrencyInfo'#0' {
    $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1836:9+156
function {:inline} $1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', value: int): int {
    $1_FixedPoint32_spec_multiply_u64(value, $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'($ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'($ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1841:9+143
function {:inline} $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0'): $1_FixedPoint32_FixedPoint32 {
    $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'($ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, 173345816))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/Diem.move:1852:9+122
function {:inline} $1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0', addr: int): bool {
    $ResourceExists($1_Diem_MintCapability'#0'_$memory, addr)
}

// struct Diem::Diem<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XUS_XUS';
function {:constructor} $1_Diem_Diem'$1_XUS_XUS'($value: int): $1_Diem_Diem'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Diem'$1_XUS_XUS''_value(s: $1_Diem_Diem'$1_XUS_XUS', x: int): $1_Diem_Diem'$1_XUS_XUS' {
    $1_Diem_Diem'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Diem'$1_XUS_XUS''(s: $1_Diem_Diem'$1_XUS_XUS'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XUS_XUS''(s1: $1_Diem_Diem'$1_XUS_XUS', s2: $1_Diem_Diem'$1_XUS_XUS'): bool {
    s1 == s2
}

// struct Diem::Diem<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'$1_XDX_XDX';
function {:constructor} $1_Diem_Diem'$1_XDX_XDX'($value: int): $1_Diem_Diem'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Diem'$1_XDX_XDX''_value(s: $1_Diem_Diem'$1_XDX_XDX', x: int): $1_Diem_Diem'$1_XDX_XDX' {
    $1_Diem_Diem'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Diem'$1_XDX_XDX''(s: $1_Diem_Diem'$1_XDX_XDX'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'$1_XDX_XDX''(s1: $1_Diem_Diem'$1_XDX_XDX', s2: $1_Diem_Diem'$1_XDX_XDX'): bool {
    s1 == s2
}

// struct Diem::Diem<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:24:5+134
type {:datatype} $1_Diem_Diem'#0';
function {:constructor} $1_Diem_Diem'#0'($value: int): $1_Diem_Diem'#0';
function {:inline} $Update'$1_Diem_Diem'#0''_value(s: $1_Diem_Diem'#0', x: int): $1_Diem_Diem'#0' {
    $1_Diem_Diem'#0'(x)
}
function $IsValid'$1_Diem_Diem'#0''(s: $1_Diem_Diem'#0'): bool {
    $IsValid'u64'($value#$1_Diem_Diem'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Diem'#0''(s1: $1_Diem_Diem'#0', s2: $1_Diem_Diem'#0'): bool {
    s1 == s2
}

// struct Diem::BurnCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:37:5+58
type {:datatype} $1_Diem_BurnCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_BurnCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_BurnCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_BurnCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_BurnCapability'$1_XDX_XDX', x: bool): $1_Diem_BurnCapability'$1_XDX_XDX' {
    $1_Diem_BurnCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''(s: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_BurnCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_BurnCapability'$1_XDX_XDX''(s1: $1_Diem_BurnCapability'$1_XDX_XDX', s2: $1_Diem_BurnCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_BurnCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_BurnCapability'$1_XDX_XDX';

// struct Diem::BurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:58:5+323
type {:datatype} $1_Diem_BurnEvent;
function {:constructor} $1_Diem_BurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_BurnEvent;
function {:inline} $Update'$1_Diem_BurnEvent'_amount(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent(x, $currency_code#$1_Diem_BurnEvent(s), $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_currency_code(s: $1_Diem_BurnEvent, x: Vec (int)): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), x, $preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $Update'$1_Diem_BurnEvent'_preburn_address(s: $1_Diem_BurnEvent, x: int): $1_Diem_BurnEvent {
    $1_Diem_BurnEvent($amount#$1_Diem_BurnEvent(s), $currency_code#$1_Diem_BurnEvent(s), x)
}
function $IsValid'$1_Diem_BurnEvent'(s: $1_Diem_BurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_BurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_BurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_BurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_BurnEvent'(s1: $1_Diem_BurnEvent, s2: $1_Diem_BurnEvent): bool {
    s1 == s2
}

// struct Diem::CancelBurnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:83:5+327
type {:datatype} $1_Diem_CancelBurnEvent;
function {:constructor} $1_Diem_CancelBurnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_CancelBurnEvent;
function {:inline} $Update'$1_Diem_CancelBurnEvent'_amount(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent(x, $currency_code#$1_Diem_CancelBurnEvent(s), $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_currency_code(s: $1_Diem_CancelBurnEvent, x: Vec (int)): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), x, $preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $Update'$1_Diem_CancelBurnEvent'_preburn_address(s: $1_Diem_CancelBurnEvent, x: int): $1_Diem_CancelBurnEvent {
    $1_Diem_CancelBurnEvent($amount#$1_Diem_CancelBurnEvent(s), $currency_code#$1_Diem_CancelBurnEvent(s), x)
}
function $IsValid'$1_Diem_CancelBurnEvent'(s: $1_Diem_CancelBurnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_CancelBurnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CancelBurnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_CancelBurnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_CancelBurnEvent'(s1: $1_Diem_CancelBurnEvent, s2: $1_Diem_CancelBurnEvent): bool {
    s1 == s2
}

// struct Diem::CurrencyInfo<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:constructor} $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_total_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: int): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_currency_code(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_can_mint(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: bool): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_mint_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XUS_XUS''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XUS_XUS', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XUS_XUS' {
    $1_Diem_CurrencyInfo'$1_XUS_XUS'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XUS_XUS''(s1: $1_Diem_CurrencyInfo'$1_XUS_XUS', s2: $1_Diem_CurrencyInfo'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';

// struct Diem::CurrencyInfo<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:constructor} $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_total_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'(x, $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_value(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_is_synthetic(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_scaling_factor(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_fractional_part(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: int): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_currency_code(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: Vec (int)): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_can_mint(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: bool): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_mint_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_preburn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_cancel_burn_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'$1_XDX_XDX''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'$1_XDX_XDX', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'$1_XDX_XDX' {
    $1_Diem_CurrencyInfo'$1_XDX_XDX'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'$1_XDX_XDX''(s1: $1_Diem_CurrencyInfo'$1_XDX_XDX', s2: $1_Diem_CurrencyInfo'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';

// struct Diem::CurrencyInfo<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:111:5+2308
type {:datatype} $1_Diem_CurrencyInfo'#0';
function {:constructor} $1_Diem_CurrencyInfo'#0'($total_value: int, $preburn_value: int, $to_xdx_exchange_rate: $1_FixedPoint32_FixedPoint32, $is_synthetic: bool, $scaling_factor: int, $fractional_part: int, $currency_code: Vec (int), $can_mint: bool, $mint_events: $1_Event_EventHandle'$1_Diem_MintEvent', $burn_events: $1_Event_EventHandle'$1_Diem_BurnEvent', $preburn_events: $1_Event_EventHandle'$1_Diem_PreburnEvent', $cancel_burn_events: $1_Event_EventHandle'$1_Diem_CancelBurnEvent', $exchange_rate_update_events: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0';
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_total_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'(x, $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_value(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), x, $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_to_xdx_exchange_rate(s: $1_Diem_CurrencyInfo'#0', x: $1_FixedPoint32_FixedPoint32): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), x, $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_is_synthetic(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), x, $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_scaling_factor(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), x, $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_fractional_part(s: $1_Diem_CurrencyInfo'#0', x: int): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), x, $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_currency_code(s: $1_Diem_CurrencyInfo'#0', x: Vec (int)): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), x, $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_can_mint(s: $1_Diem_CurrencyInfo'#0', x: bool): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), x, $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_mint_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_MintEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), x, $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_BurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), x, $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_preburn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_PreburnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), x, $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_cancel_burn_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_CancelBurnEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), x, $exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $Update'$1_Diem_CurrencyInfo'#0''_exchange_rate_update_events(s: $1_Diem_CurrencyInfo'#0', x: $1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent'): $1_Diem_CurrencyInfo'#0' {
    $1_Diem_CurrencyInfo'#0'($total_value#$1_Diem_CurrencyInfo'#0'(s), $preburn_value#$1_Diem_CurrencyInfo'#0'(s), $to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s), $is_synthetic#$1_Diem_CurrencyInfo'#0'(s), $scaling_factor#$1_Diem_CurrencyInfo'#0'(s), $fractional_part#$1_Diem_CurrencyInfo'#0'(s), $currency_code#$1_Diem_CurrencyInfo'#0'(s), $can_mint#$1_Diem_CurrencyInfo'#0'(s), $mint_events#$1_Diem_CurrencyInfo'#0'(s), $burn_events#$1_Diem_CurrencyInfo'#0'(s), $preburn_events#$1_Diem_CurrencyInfo'#0'(s), $cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s), x)
}
function $IsValid'$1_Diem_CurrencyInfo'#0''(s: $1_Diem_CurrencyInfo'#0'): bool {
    $IsValid'u128'($total_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($preburn_value#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_FixedPoint32_FixedPoint32'($to_xdx_exchange_rate#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($is_synthetic#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($scaling_factor#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'u64'($fractional_part#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'bool'($can_mint#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_MintEvent''($mint_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_BurnEvent''($burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_PreburnEvent''($preburn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_CancelBurnEvent''($cancel_burn_events#$1_Diem_CurrencyInfo'#0'(s))
      && $IsValid'$1_Event_EventHandle'$1_Diem_ToXDXExchangeRateUpdateEvent''($exchange_rate_update_events#$1_Diem_CurrencyInfo'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_CurrencyInfo'#0''(s1: $1_Diem_CurrencyInfo'#0', s2: $1_Diem_CurrencyInfo'#0'): bool {
    s1 == s2
}
var $1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0';

// struct Diem::MintCapability<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'$1_XUS_XUS';
function {:constructor} $1_Diem_MintCapability'$1_XUS_XUS'($dummy_field: bool): $1_Diem_MintCapability'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_MintCapability'$1_XUS_XUS''_dummy_field(s: $1_Diem_MintCapability'$1_XUS_XUS', x: bool): $1_Diem_MintCapability'$1_XUS_XUS' {
    $1_Diem_MintCapability'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XUS_XUS''(s: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XUS_XUS''(s1: $1_Diem_MintCapability'$1_XUS_XUS', s2: $1_Diem_MintCapability'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XUS_XUS'_$memory: $Memory $1_Diem_MintCapability'$1_XUS_XUS';

// struct Diem::MintCapability<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'$1_XDX_XDX';
function {:constructor} $1_Diem_MintCapability'$1_XDX_XDX'($dummy_field: bool): $1_Diem_MintCapability'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_MintCapability'$1_XDX_XDX''_dummy_field(s: $1_Diem_MintCapability'$1_XDX_XDX', x: bool): $1_Diem_MintCapability'$1_XDX_XDX' {
    $1_Diem_MintCapability'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''(s: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'$1_XDX_XDX''(s1: $1_Diem_MintCapability'$1_XDX_XDX', s2: $1_Diem_MintCapability'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'$1_XDX_XDX'_$memory: $Memory $1_Diem_MintCapability'$1_XDX_XDX';

// struct Diem::MintCapability<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:33:5+58
type {:datatype} $1_Diem_MintCapability'#0';
function {:constructor} $1_Diem_MintCapability'#0'($dummy_field: bool): $1_Diem_MintCapability'#0';
function {:inline} $Update'$1_Diem_MintCapability'#0''_dummy_field(s: $1_Diem_MintCapability'#0', x: bool): $1_Diem_MintCapability'#0' {
    $1_Diem_MintCapability'#0'(x)
}
function $IsValid'$1_Diem_MintCapability'#0''(s: $1_Diem_MintCapability'#0'): bool {
    $IsValid'bool'($dummy_field#$1_Diem_MintCapability'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_MintCapability'#0''(s1: $1_Diem_MintCapability'#0', s2: $1_Diem_MintCapability'#0'): bool {
    s1 == s2
}
var $1_Diem_MintCapability'#0'_$memory: $Memory $1_Diem_MintCapability'#0';

// struct Diem::MintEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:44:5+199
type {:datatype} $1_Diem_MintEvent;
function {:constructor} $1_Diem_MintEvent($amount: int, $currency_code: Vec (int)): $1_Diem_MintEvent;
function {:inline} $Update'$1_Diem_MintEvent'_amount(s: $1_Diem_MintEvent, x: int): $1_Diem_MintEvent {
    $1_Diem_MintEvent(x, $currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $Update'$1_Diem_MintEvent'_currency_code(s: $1_Diem_MintEvent, x: Vec (int)): $1_Diem_MintEvent {
    $1_Diem_MintEvent($amount#$1_Diem_MintEvent(s), x)
}
function $IsValid'$1_Diem_MintEvent'(s: $1_Diem_MintEvent): bool {
    $IsValid'u64'($amount#$1_Diem_MintEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_MintEvent(s))
}
function {:inline} $IsEqual'$1_Diem_MintEvent'(s1: $1_Diem_MintEvent, s2: $1_Diem_MintEvent): bool {
    s1 == s2
}

// struct Diem::Preburn<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XUS_XUS';
function {:constructor} $1_Diem_Preburn'$1_XUS_XUS'($to_burn: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS';
function {:inline} $Update'$1_Diem_Preburn'$1_XUS_XUS''_to_burn(s: $1_Diem_Preburn'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_Diem_Preburn'$1_XUS_XUS' {
    $1_Diem_Preburn'$1_XUS_XUS'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XUS_XUS''(s: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($to_burn#$1_Diem_Preburn'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XUS_XUS''(s1: $1_Diem_Preburn'$1_XUS_XUS', s2: $1_Diem_Preburn'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XUS_XUS'_$memory: $Memory $1_Diem_Preburn'$1_XUS_XUS';

// struct Diem::Preburn<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'$1_XDX_XDX';
function {:constructor} $1_Diem_Preburn'$1_XDX_XDX'($to_burn: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX';
function {:inline} $Update'$1_Diem_Preburn'$1_XDX_XDX''_to_burn(s: $1_Diem_Preburn'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_Diem_Preburn'$1_XDX_XDX' {
    $1_Diem_Preburn'$1_XDX_XDX'(x)
}
function $IsValid'$1_Diem_Preburn'$1_XDX_XDX''(s: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($to_burn#$1_Diem_Preburn'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'$1_XDX_XDX''(s1: $1_Diem_Preburn'$1_XDX_XDX', s2: $1_Diem_Preburn'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_Diem_Preburn'$1_XDX_XDX'_$memory: $Memory $1_Diem_Preburn'$1_XDX_XDX';

// struct Diem::Preburn<#0> at /home/ying/diem/language/diem-framework/modules/Diem.move:170:5+240
type {:datatype} $1_Diem_Preburn'#0';
function {:constructor} $1_Diem_Preburn'#0'($to_burn: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0';
function {:inline} $Update'$1_Diem_Preburn'#0''_to_burn(s: $1_Diem_Preburn'#0', x: $1_Diem_Diem'#0'): $1_Diem_Preburn'#0' {
    $1_Diem_Preburn'#0'(x)
}
function $IsValid'$1_Diem_Preburn'#0''(s: $1_Diem_Preburn'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($to_burn#$1_Diem_Preburn'#0'(s))
}
function {:inline} $IsEqual'$1_Diem_Preburn'#0''(s1: $1_Diem_Preburn'#0', s2: $1_Diem_Preburn'#0'): bool {
    s1 == s2
}
var $1_Diem_Preburn'#0'_$memory: $Memory $1_Diem_Preburn'#0';

// struct Diem::PreburnEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:70:5+355
type {:datatype} $1_Diem_PreburnEvent;
function {:constructor} $1_Diem_PreburnEvent($amount: int, $currency_code: Vec (int), $preburn_address: int): $1_Diem_PreburnEvent;
function {:inline} $Update'$1_Diem_PreburnEvent'_amount(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent(x, $currency_code#$1_Diem_PreburnEvent(s), $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_currency_code(s: $1_Diem_PreburnEvent, x: Vec (int)): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), x, $preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $Update'$1_Diem_PreburnEvent'_preburn_address(s: $1_Diem_PreburnEvent, x: int): $1_Diem_PreburnEvent {
    $1_Diem_PreburnEvent($amount#$1_Diem_PreburnEvent(s), $currency_code#$1_Diem_PreburnEvent(s), x)
}
function $IsValid'$1_Diem_PreburnEvent'(s: $1_Diem_PreburnEvent): bool {
    $IsValid'u64'($amount#$1_Diem_PreburnEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_Diem_PreburnEvent(s))
      && $IsValid'address'($preburn_address#$1_Diem_PreburnEvent(s))
}
function {:inline} $IsEqual'$1_Diem_PreburnEvent'(s1: $1_Diem_PreburnEvent, s2: $1_Diem_PreburnEvent): bool {
    s1 == s2
}

// struct Diem::ToXDXExchangeRateUpdateEvent at /home/ying/diem/language/diem-framework/modules/Diem.move:94:5+424
type {:datatype} $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:constructor} $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code: Vec (int), $new_to_xdx_exchange_rate: int): $1_Diem_ToXDXExchangeRateUpdateEvent;
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_currency_code(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: Vec (int)): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent(x, $new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $Update'$1_Diem_ToXDXExchangeRateUpdateEvent'_new_to_xdx_exchange_rate(s: $1_Diem_ToXDXExchangeRateUpdateEvent, x: int): $1_Diem_ToXDXExchangeRateUpdateEvent {
    $1_Diem_ToXDXExchangeRateUpdateEvent($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s), x)
}
function $IsValid'$1_Diem_ToXDXExchangeRateUpdateEvent'(s: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    $IsValid'vec'u8''($currency_code#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
      && $IsValid'u64'($new_to_xdx_exchange_rate#$1_Diem_ToXDXExchangeRateUpdateEvent(s))
}
function {:inline} $IsEqual'$1_Diem_ToXDXExchangeRateUpdateEvent'(s1: $1_Diem_ToXDXExchangeRateUpdateEvent, s2: $1_Diem_ToXDXExchangeRateUpdateEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:511:5+109
function {:inline} $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', addr: int): bool {
    $ResourceExists($1_AccountLimits_Window'#0'_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:104:10+155
function {:inline} $1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:135:10+159
function {:inline} $1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', amount: int, addr: int): bool {
    $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, addr), amount)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(window) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:300:9+263
function {:inline} $1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) > ($window_start#$1_AccountLimits_Window'#0'(window) + $time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_definition)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XUS_XUS', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    if ($1_AccountLimits_spec_window_expired'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XUS_XUS'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(window), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'$1_XDX_XDX', limits_definition: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    if ($1_AccountLimits_spec_window_expired'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'$1_XDX_XDX'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(window), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:306:9+634
function {:inline} $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, window: $1_AccountLimits_Window'#0', limits_definition: $1_AccountLimits_LimitsDefinition'#0'): $1_AccountLimits_Window'#0' {
    if ($1_AccountLimits_spec_window_expired'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, limits_definition)) then ($1_AccountLimits_Window'#0'($1_DiemTimestamp_spec_now_microseconds($1_DiemTimestamp_CurrentTimeMicroseconds_$memory), 0, 0, $tracked_balance#$1_AccountLimits_Window'#0'(window), $limit_address#$1_AccountLimits_Window'#0'(window))) else (window)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:386:10+159
function {:inline} $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_LimitsDefinition'#0' {
    $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'(window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:390:10+145
function {:inline} $1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): bool {
    $1_AccountLimits_spec_is_unrestricted'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', window: $1_AccountLimits_Window'$1_XUS_XUS'): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', window: $1_AccountLimits_Window'$1_XDX_XDX'): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_spec_window_reset_with_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:394:10+167
function {:inline} $1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', window: $1_AccountLimits_Window'#0'): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_spec_window_reset_with_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, window, $1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, window))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', receiving: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', receiving: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:398:10+403
function {:inline} $1_AccountLimits_spec_receiving_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', receiving: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving) || ((($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_inflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)) + amount) <= $max_holding#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, receiving)))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', sending: $1_AccountLimits_Window'$1_XUS_XUS', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', sending: $1_AccountLimits_Window'$1_XDX_XDX', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:469:10+240
function {:inline} $1_AccountLimits_spec_withdrawal_limits_ok'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0', sending: $1_AccountLimits_Window'#0', amount: int): bool {
    ($1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending) || (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, sending)) + amount) <= $max_outflow#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, sending))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XUS_XUS'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'$1_XDX_XDX'(limits_def: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(limits_def), 86400000000))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:495:9+294
function {:inline} $1_AccountLimits_spec_is_unrestricted'#0'(limits_def: $1_AccountLimits_LimitsDefinition'#0'): bool {
    ((($IsEqual'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64) && $IsEqual'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(limits_def), $MAX_U64)) && $IsEqual'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(limits_def), 86400000000))
}

// struct AccountLimits::AccountLimitMutationCapability at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:11:5+51
type {:datatype} $1_AccountLimits_AccountLimitMutationCapability;
function {:constructor} $1_AccountLimits_AccountLimitMutationCapability($dummy_field: bool): $1_AccountLimits_AccountLimitMutationCapability;
function {:inline} $Update'$1_AccountLimits_AccountLimitMutationCapability'_dummy_field(s: $1_AccountLimits_AccountLimitMutationCapability, x: bool): $1_AccountLimits_AccountLimitMutationCapability {
    $1_AccountLimits_AccountLimitMutationCapability(x)
}
function $IsValid'$1_AccountLimits_AccountLimitMutationCapability'(s: $1_AccountLimits_AccountLimitMutationCapability): bool {
    $IsValid'bool'($dummy_field#$1_AccountLimits_AccountLimitMutationCapability(s))
}
function {:inline} $IsEqual'$1_AccountLimits_AccountLimitMutationCapability'(s1: $1_AccountLimits_AccountLimitMutationCapability, s2: $1_AccountLimits_AccountLimitMutationCapability): bool {
    s1 == s2
}

// struct AccountLimits::LimitsDefinition<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', x: int): $1_AccountLimits_LimitsDefinition'$1_XUS_XUS' {
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''(s1: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS', s2: $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';

// struct AccountLimits::LimitsDefinition<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_inflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_outflow(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_time_period(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''_max_holding(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', x: int): $1_AccountLimits_LimitsDefinition'$1_XDX_XDX' {
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''(s1: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX', s2: $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';

// struct AccountLimits::LimitsDefinition<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:17:5+406
type {:datatype} $1_AccountLimits_LimitsDefinition'#0';
function {:constructor} $1_AccountLimits_LimitsDefinition'#0'($max_inflow: int, $max_outflow: int, $time_period: int, $max_holding: int): $1_AccountLimits_LimitsDefinition'#0';
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_inflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'(x, $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_outflow(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_time_period(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), x, $max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_LimitsDefinition'#0''_max_holding(s: $1_AccountLimits_LimitsDefinition'#0', x: int): $1_AccountLimits_LimitsDefinition'#0' {
    $1_AccountLimits_LimitsDefinition'#0'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s), $max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s), $time_period#$1_AccountLimits_LimitsDefinition'#0'(s), x)
}
function $IsValid'$1_AccountLimits_LimitsDefinition'#0''(s: $1_AccountLimits_LimitsDefinition'#0'): bool {
    $IsValid'u64'($max_inflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_outflow#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($time_period#$1_AccountLimits_LimitsDefinition'#0'(s))
      && $IsValid'u64'($max_holding#$1_AccountLimits_LimitsDefinition'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_LimitsDefinition'#0''(s1: $1_AccountLimits_LimitsDefinition'#0', s2: $1_AccountLimits_LimitsDefinition'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_LimitsDefinition'#0'_$memory: $Memory $1_AccountLimits_LimitsDefinition'#0';

// struct AccountLimits::Window<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XUS_XUS';
function {:constructor} $1_AccountLimits_Window'$1_XUS_XUS'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XUS_XUS';
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_start(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'(x, $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_inflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_window_outflow(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_tracked_balance(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), x, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XUS_XUS''_limit_address(s: $1_AccountLimits_Window'$1_XUS_XUS', x: int): $1_AccountLimits_Window'$1_XUS_XUS' {
    $1_AccountLimits_Window'$1_XUS_XUS'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s), $tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XUS_XUS''(s: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XUS_XUS''(s1: $1_AccountLimits_Window'$1_XUS_XUS', s2: $1_AccountLimits_Window'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS';

// struct AccountLimits::Window<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'$1_XDX_XDX';
function {:constructor} $1_AccountLimits_Window'$1_XDX_XDX'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'$1_XDX_XDX';
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_start(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'(x, $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_inflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_window_outflow(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_tracked_balance(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), x, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'$1_XDX_XDX''_limit_address(s: $1_AccountLimits_Window'$1_XDX_XDX', x: int): $1_AccountLimits_Window'$1_XDX_XDX' {
    $1_AccountLimits_Window'$1_XDX_XDX'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s), $tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s), x)
}
function $IsValid'$1_AccountLimits_Window'$1_XDX_XDX''(s: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'$1_XDX_XDX''(s1: $1_AccountLimits_Window'$1_XDX_XDX', s2: $1_AccountLimits_Window'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX';

// struct AccountLimits::Window<#0> at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:37:5+492
type {:datatype} $1_AccountLimits_Window'#0';
function {:constructor} $1_AccountLimits_Window'#0'($window_start: int, $window_inflow: int, $window_outflow: int, $tracked_balance: int, $limit_address: int): $1_AccountLimits_Window'#0';
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_start(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'(x, $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_inflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), x, $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_window_outflow(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), x, $tracked_balance#$1_AccountLimits_Window'#0'(s), $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_tracked_balance(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), x, $limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $Update'$1_AccountLimits_Window'#0''_limit_address(s: $1_AccountLimits_Window'#0', x: int): $1_AccountLimits_Window'#0' {
    $1_AccountLimits_Window'#0'($window_start#$1_AccountLimits_Window'#0'(s), $window_inflow#$1_AccountLimits_Window'#0'(s), $window_outflow#$1_AccountLimits_Window'#0'(s), $tracked_balance#$1_AccountLimits_Window'#0'(s), x)
}
function $IsValid'$1_AccountLimits_Window'#0''(s: $1_AccountLimits_Window'#0'): bool {
    $IsValid'u64'($window_start#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_inflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($window_outflow#$1_AccountLimits_Window'#0'(s))
      && $IsValid'u64'($tracked_balance#$1_AccountLimits_Window'#0'(s))
      && $IsValid'address'($limit_address#$1_AccountLimits_Window'#0'(s))
}
function {:inline} $IsEqual'$1_AccountLimits_Window'#0''(s1: $1_AccountLimits_Window'#0', s2: $1_AccountLimits_Window'#0'): bool {
    s1 == s2
}
var $1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0';

// struct XUS::XUS at /home/ying/diem/language/diem-framework/modules/XUS.move:10:5+14
type {:datatype} $1_XUS_XUS;
function {:constructor} $1_XUS_XUS($dummy_field: bool): $1_XUS_XUS;
function {:inline} $Update'$1_XUS_XUS'_dummy_field(s: $1_XUS_XUS, x: bool): $1_XUS_XUS {
    $1_XUS_XUS(x)
}
function $IsValid'$1_XUS_XUS'(s: $1_XUS_XUS): bool {
    $IsValid'bool'($dummy_field#$1_XUS_XUS(s))
}
function {:inline} $IsEqual'$1_XUS_XUS'(s1: $1_XUS_XUS, s2: $1_XUS_XUS): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/XDX.move:133:9+80
function {:inline} $1_XDX_reserve_exists($1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve): bool {
    $ResourceExists($1_XDX_Reserve_$memory, 173345816)
}

// struct XDX::XDX at /home/ying/diem/language/diem-framework/modules/XDX.move:15:5+14
type {:datatype} $1_XDX_XDX;
function {:constructor} $1_XDX_XDX($dummy_field: bool): $1_XDX_XDX;
function {:inline} $Update'$1_XDX_XDX'_dummy_field(s: $1_XDX_XDX, x: bool): $1_XDX_XDX {
    $1_XDX_XDX(x)
}
function $IsValid'$1_XDX_XDX'(s: $1_XDX_XDX): bool {
    $IsValid'bool'($dummy_field#$1_XDX_XDX(s))
}
function {:inline} $IsEqual'$1_XDX_XDX'(s1: $1_XDX_XDX, s2: $1_XDX_XDX): bool {
    s1 == s2
}

// struct XDX::Reserve at /home/ying/diem/language/diem-framework/modules/XDX.move:24:5+677
type {:datatype} $1_XDX_Reserve;
function {:constructor} $1_XDX_Reserve($mint_cap: $1_Diem_MintCapability'$1_XDX_XDX', $burn_cap: $1_Diem_BurnCapability'$1_XDX_XDX', $preburn_cap: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve;
function {:inline} $Update'$1_XDX_Reserve'_mint_cap(s: $1_XDX_Reserve, x: $1_Diem_MintCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve(x, $burn_cap#$1_XDX_Reserve(s), $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_burn_cap(s: $1_XDX_Reserve, x: $1_Diem_BurnCapability'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), x, $preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $Update'$1_XDX_Reserve'_preburn_cap(s: $1_XDX_Reserve, x: $1_Diem_Preburn'$1_XDX_XDX'): $1_XDX_Reserve {
    $1_XDX_Reserve($mint_cap#$1_XDX_Reserve(s), $burn_cap#$1_XDX_Reserve(s), x)
}
function $IsValid'$1_XDX_Reserve'(s: $1_XDX_Reserve): bool {
    $IsValid'$1_Diem_MintCapability'$1_XDX_XDX''($mint_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_BurnCapability'$1_XDX_XDX''($burn_cap#$1_XDX_Reserve(s))
      && $IsValid'$1_Diem_Preburn'$1_XDX_XDX''($preburn_cap#$1_XDX_Reserve(s))
}
function {:inline} $IsEqual'$1_XDX_Reserve'(s1: $1_XDX_Reserve, s2: $1_XDX_Reserve): bool {
    s1 == s2
}
var $1_XDX_Reserve_$memory: $Memory $1_XDX_Reserve;

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:164:5+80
function {:inline} $1_VASP_$is_child($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, addr: int): bool {
    $ResourceExists($1_VASP_ChildVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:154:5+82
function {:inline} $1_VASP_$is_parent($1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $ResourceExists($1_VASP_ParentVASP_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:174:5+89
function {:inline} $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) || $1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:141:9+207
function {:inline} $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr)) then (addr) else ($parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:148:9+149
function {:inline} $1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    $1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/VASP.move:197:10+168
function {:inline} $1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr1: int, addr2: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)) && $IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr1), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr2)))
}

// struct VASP::ChildVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:21:5+54
type {:datatype} $1_VASP_ChildVASP;
function {:constructor} $1_VASP_ChildVASP($parent_vasp_addr: int): $1_VASP_ChildVASP;
function {:inline} $Update'$1_VASP_ChildVASP'_parent_vasp_addr(s: $1_VASP_ChildVASP, x: int): $1_VASP_ChildVASP {
    $1_VASP_ChildVASP(x)
}
function $IsValid'$1_VASP_ChildVASP'(s: $1_VASP_ChildVASP): bool {
    $IsValid'address'($parent_vasp_addr#$1_VASP_ChildVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ChildVASP'(s1: $1_VASP_ChildVASP, s2: $1_VASP_ChildVASP): bool {
    s1 == s2
}
var $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP;

// struct VASP::ParentVASP at /home/ying/diem/language/diem-framework/modules/VASP.move:15:5+121
type {:datatype} $1_VASP_ParentVASP;
function {:constructor} $1_VASP_ParentVASP($num_children: int): $1_VASP_ParentVASP;
function {:inline} $Update'$1_VASP_ParentVASP'_num_children(s: $1_VASP_ParentVASP, x: int): $1_VASP_ParentVASP {
    $1_VASP_ParentVASP(x)
}
function $IsValid'$1_VASP_ParentVASP'(s: $1_VASP_ParentVASP): bool {
    $IsValid'u64'($num_children#$1_VASP_ParentVASP(s))
}
function {:inline} $IsEqual'$1_VASP_ParentVASP'(s1: $1_VASP_ParentVASP, s2: $1_VASP_ParentVASP): bool {
    s1 == s2
}
var $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP;

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:44:5+118
function {:inline} $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $ResourceExists($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory, 186537453)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:48:5+69
function {:inline} $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $1_TransactionFee_$is_coin_initialized'$1_XUS_XUS'($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory)
}

// struct TransactionFee::TransactionFee<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:13:5+124
type {:datatype} $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:constructor} $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance: $1_Diem_Diem'$1_XUS_XUS', $preburn: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS';
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_balance(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'(x, $preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $Update'$1_TransactionFee_TransactionFee'$1_XUS_XUS''_preburn(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS', x: $1_Diem_Preburn'$1_XUS_XUS'): $1_TransactionFee_TransactionFee'$1_XUS_XUS' {
    $1_TransactionFee_TransactionFee'$1_XUS_XUS'($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s), x)
}
function $IsValid'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($balance#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
      && $IsValid'$1_Diem_Preburn'$1_XUS_XUS''($preburn#$1_TransactionFee_TransactionFee'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_TransactionFee_TransactionFee'$1_XUS_XUS''(s1: $1_TransactionFee_TransactionFee'$1_XUS_XUS', s2: $1_TransactionFee_TransactionFee'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory: $Memory $1_TransactionFee_TransactionFee'$1_XUS_XUS';

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:121:10+85
function {:inline} $1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): bool {
    $ResourceExists($1_DualAttestation_Credential_$memory, addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:254:10+94
function {:inline} $1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $base_url#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:270:10+120
function {:inline} $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, addr: int): Vec (int) {
    $compliance_public_key#$1_DualAttestation_Credential($ResourceValue($1_DualAttestation_Credential_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:299:10+183
function {:inline} $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): int {
    if ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr)) then ($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else (addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:337:10+205
function {:inline} $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int): bool {
    (($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$IsEqual'address'($1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer), $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:342:10+307
function {:inline} $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory: $Memory $1_Diem_CurrencyInfo'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit, payer: int, payee: int, deposit_value: int): bool {
    ((($1_Diem_spec_approx_xdx_for_value'#0'($1_Diem_CurrencyInfo'#0'_$memory, deposit_value) >= $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory)) && !$IsEqual'address'(payer, payee)) && $1_DualAttestation_spec_is_inter_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:373:10+104
function {:inline} $1_DualAttestation_spec_dual_attestation_message(payer: int, metadata: Vec (int), deposit_value: int): Vec (int);
axiom (forall payer: int, metadata: Vec (int), deposit_value: int ::
(var $$res := $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value);
$IsValid'vec'u8''($$res)));

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:425:10+589
function {:inline} $1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential, payer: int, payee: int, metadata_signature: Vec (int), metadata: Vec (int), deposit_value: int): bool {
    (var payee_compliance_key := $1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)); (($IsEqual'num'(LenVec(metadata_signature), 64) && !$1_Vector_$is_empty'u8'(payee_compliance_key)) && $1_Signature_$ed25519_verify(metadata_signature, payee_compliance_key, $1_DualAttestation_spec_dual_attestation_message(payer, metadata, deposit_value))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:545:9+78
function {:inline} $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): bool {
    $ResourceExists($1_DualAttestation_Limit_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:550:9+104
function {:inline} $1_DualAttestation_spec_get_cur_microdiem_limit($1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit): int {
    $micro_xdx_limit#$1_DualAttestation_Limit($ResourceValue($1_DualAttestation_Limit_$memory, 173345816))
}

// struct DualAttestation::BaseUrlRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:57:5+257
type {:datatype} $1_DualAttestation_BaseUrlRotationEvent;
function {:constructor} $1_DualAttestation_BaseUrlRotationEvent($new_base_url: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_BaseUrlRotationEvent;
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_new_base_url(s: $1_DualAttestation_BaseUrlRotationEvent, x: Vec (int)): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_BaseUrlRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_BaseUrlRotationEvent, x: int): $1_DualAttestation_BaseUrlRotationEvent {
    $1_DualAttestation_BaseUrlRotationEvent($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_BaseUrlRotationEvent'(s: $1_DualAttestation_BaseUrlRotationEvent): bool {
    $IsValid'vec'u8''($new_base_url#$1_DualAttestation_BaseUrlRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_BaseUrlRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_BaseUrlRotationEvent'(s1: $1_DualAttestation_BaseUrlRotationEvent, s2: $1_DualAttestation_BaseUrlRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::ComplianceKeyRotationEvent at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:49:5+303
type {:datatype} $1_DualAttestation_ComplianceKeyRotationEvent;
function {:constructor} $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key: Vec (int), $time_rotated_seconds: int): $1_DualAttestation_ComplianceKeyRotationEvent;
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_new_compliance_public_key(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: Vec (int)): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent(x, $time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $Update'$1_DualAttestation_ComplianceKeyRotationEvent'_time_rotated_seconds(s: $1_DualAttestation_ComplianceKeyRotationEvent, x: int): $1_DualAttestation_ComplianceKeyRotationEvent {
    $1_DualAttestation_ComplianceKeyRotationEvent($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s), x)
}
function $IsValid'$1_DualAttestation_ComplianceKeyRotationEvent'(s: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    $IsValid'vec'u8''($new_compliance_public_key#$1_DualAttestation_ComplianceKeyRotationEvent(s))
      && $IsValid'u64'($time_rotated_seconds#$1_DualAttestation_ComplianceKeyRotationEvent(s))
}
function {:inline} $IsEqual'$1_DualAttestation_ComplianceKeyRotationEvent'(s1: $1_DualAttestation_ComplianceKeyRotationEvent, s2: $1_DualAttestation_ComplianceKeyRotationEvent): bool {
    s1 == s2
}

// struct DualAttestation::Credential at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:19:5+1467
type {:datatype} $1_DualAttestation_Credential;
function {:constructor} $1_DualAttestation_Credential($human_name: Vec (int), $base_url: Vec (int), $compliance_public_key: Vec (int), $expiration_date: int, $compliance_key_rotation_events: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent', $base_url_rotation_events: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential;
function {:inline} $Update'$1_DualAttestation_Credential'_human_name(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential(x, $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), x, $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_public_key(s: $1_DualAttestation_Credential, x: Vec (int)): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), x, $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_expiration_date(s: $1_DualAttestation_Credential, x: int): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), x, $compliance_key_rotation_events#$1_DualAttestation_Credential(s), $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_compliance_key_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), x, $base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $Update'$1_DualAttestation_Credential'_base_url_rotation_events(s: $1_DualAttestation_Credential, x: $1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent'): $1_DualAttestation_Credential {
    $1_DualAttestation_Credential($human_name#$1_DualAttestation_Credential(s), $base_url#$1_DualAttestation_Credential(s), $compliance_public_key#$1_DualAttestation_Credential(s), $expiration_date#$1_DualAttestation_Credential(s), $compliance_key_rotation_events#$1_DualAttestation_Credential(s), x)
}
function $IsValid'$1_DualAttestation_Credential'(s: $1_DualAttestation_Credential): bool {
    $IsValid'vec'u8''($human_name#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($base_url#$1_DualAttestation_Credential(s))
      && $IsValid'vec'u8''($compliance_public_key#$1_DualAttestation_Credential(s))
      && $IsValid'u64'($expiration_date#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_ComplianceKeyRotationEvent''($compliance_key_rotation_events#$1_DualAttestation_Credential(s))
      && $IsValid'$1_Event_EventHandle'$1_DualAttestation_BaseUrlRotationEvent''($base_url_rotation_events#$1_DualAttestation_Credential(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Credential'(s1: $1_DualAttestation_Credential, s2: $1_DualAttestation_Credential): bool {
    s1 == s2
}
var $1_DualAttestation_Credential_$memory: $Memory $1_DualAttestation_Credential;

// struct DualAttestation::Limit at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:44:5+58
type {:datatype} $1_DualAttestation_Limit;
function {:constructor} $1_DualAttestation_Limit($micro_xdx_limit: int): $1_DualAttestation_Limit;
function {:inline} $Update'$1_DualAttestation_Limit'_micro_xdx_limit(s: $1_DualAttestation_Limit, x: int): $1_DualAttestation_Limit {
    $1_DualAttestation_Limit(x)
}
function $IsValid'$1_DualAttestation_Limit'(s: $1_DualAttestation_Limit): bool {
    $IsValid'u64'($micro_xdx_limit#$1_DualAttestation_Limit(s))
}
function {:inline} $IsEqual'$1_DualAttestation_Limit'(s1: $1_DualAttestation_Limit, s2: $1_DualAttestation_Limit): bool {
    s1 == s2
}
var $1_DualAttestation_Limit_$memory: $Memory $1_DualAttestation_Limit;

// struct DiemTransactionPublishingOption::DiemTransactionPublishingOption at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:24:5+381
type {:datatype} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:constructor} $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list: Vec (Vec (int)), $module_publishing_allowed: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption;
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_script_allow_list(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: Vec (Vec (int))): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(x, $module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $Update'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_module_publishing_allowed(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, x: bool): $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption {
    $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s), x)
}
function $IsValid'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    $IsValid'vec'vec'u8'''($script_allow_list#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
      && $IsValid'bool'($module_publishing_allowed#$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption(s))
}
function {:inline} $IsEqual'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'(s1: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption, s2: $1_DiemTransactionPublishingOption_DiemTransactionPublishingOption): bool {
    s1 == s2
}

// struct ChainId::ChainId at /home/ying/diem/language/diem-framework/modules/ChainId.move:10:5+45
type {:datatype} $1_ChainId_ChainId;
function {:constructor} $1_ChainId_ChainId($id: int): $1_ChainId_ChainId;
function {:inline} $Update'$1_ChainId_ChainId'_id(s: $1_ChainId_ChainId, x: int): $1_ChainId_ChainId {
    $1_ChainId_ChainId(x)
}
function $IsValid'$1_ChainId_ChainId'(s: $1_ChainId_ChainId): bool {
    $IsValid'u8'($id#$1_ChainId_ChainId(s))
}
function {:inline} $IsEqual'$1_ChainId_ChainId'(s1: $1_ChainId_ChainId, s2: $1_ChainId_ChainId): bool {
    s1 == s2
}
var $1_ChainId_ChainId_$memory: $Memory $1_ChainId_ChainId;

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:160:5+163
function {:inline} $1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:227:9+136
function {:inline} $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && $is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:231:9+141
function {:inline} $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, addr: int): bool {
    ($ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr) && !$is_frozen#$1_AccountFreezing_FreezingBit($ResourceValue($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct AccountFreezing::FreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:22:5+208
type {:datatype} $1_AccountFreezing_FreezeAccountEvent;
function {:constructor} $1_AccountFreezing_FreezeAccountEvent($initiator_address: int, $frozen_address: int): $1_AccountFreezing_FreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent(x, $frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeAccountEvent'_frozen_address(s: $1_AccountFreezing_FreezeAccountEvent, x: int): $1_AccountFreezing_FreezeAccountEvent {
    $1_AccountFreezing_FreezeAccountEvent($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeAccountEvent'(s: $1_AccountFreezing_FreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_FreezeAccountEvent(s))
      && $IsValid'address'($frozen_address#$1_AccountFreezing_FreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeAccountEvent'(s1: $1_AccountFreezing_FreezeAccountEvent, s2: $1_AccountFreezing_FreezeAccountEvent): bool {
    s1 == s2
}

// struct AccountFreezing::FreezeEventsHolder at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:16:5+169
type {:datatype} $1_AccountFreezing_FreezeEventsHolder;
function {:constructor} $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent', $unfreeze_event_handle: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder;
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_freeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder(x, $unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $Update'$1_AccountFreezing_FreezeEventsHolder'_unfreeze_event_handle(s: $1_AccountFreezing_FreezeEventsHolder, x: $1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent'): $1_AccountFreezing_FreezeEventsHolder {
    $1_AccountFreezing_FreezeEventsHolder($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s), x)
}
function $IsValid'$1_AccountFreezing_FreezeEventsHolder'(s: $1_AccountFreezing_FreezeEventsHolder): bool {
    $IsValid'$1_Event_EventHandle'$1_AccountFreezing_FreezeAccountEvent''($freeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
      && $IsValid'$1_Event_EventHandle'$1_AccountFreezing_UnfreezeAccountEvent''($unfreeze_event_handle#$1_AccountFreezing_FreezeEventsHolder(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezeEventsHolder'(s1: $1_AccountFreezing_FreezeEventsHolder, s2: $1_AccountFreezing_FreezeEventsHolder): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezeEventsHolder_$memory: $Memory $1_AccountFreezing_FreezeEventsHolder;

// struct AccountFreezing::FreezingBit at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:11:5+164
type {:datatype} $1_AccountFreezing_FreezingBit;
function {:constructor} $1_AccountFreezing_FreezingBit($is_frozen: bool): $1_AccountFreezing_FreezingBit;
function {:inline} $Update'$1_AccountFreezing_FreezingBit'_is_frozen(s: $1_AccountFreezing_FreezingBit, x: bool): $1_AccountFreezing_FreezingBit {
    $1_AccountFreezing_FreezingBit(x)
}
function $IsValid'$1_AccountFreezing_FreezingBit'(s: $1_AccountFreezing_FreezingBit): bool {
    $IsValid'bool'($is_frozen#$1_AccountFreezing_FreezingBit(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_FreezingBit'(s1: $1_AccountFreezing_FreezingBit, s2: $1_AccountFreezing_FreezingBit): bool {
    s1 == s2
}
var $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit;

// struct AccountFreezing::UnfreezeAccountEvent at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:30:5+216
type {:datatype} $1_AccountFreezing_UnfreezeAccountEvent;
function {:constructor} $1_AccountFreezing_UnfreezeAccountEvent($initiator_address: int, $unfrozen_address: int): $1_AccountFreezing_UnfreezeAccountEvent;
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_initiator_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent(x, $unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $Update'$1_AccountFreezing_UnfreezeAccountEvent'_unfrozen_address(s: $1_AccountFreezing_UnfreezeAccountEvent, x: int): $1_AccountFreezing_UnfreezeAccountEvent {
    $1_AccountFreezing_UnfreezeAccountEvent($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s), x)
}
function $IsValid'$1_AccountFreezing_UnfreezeAccountEvent'(s: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    $IsValid'address'($initiator_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
      && $IsValid'address'($unfrozen_address#$1_AccountFreezing_UnfreezeAccountEvent(s))
}
function {:inline} $IsEqual'$1_AccountFreezing_UnfreezeAccountEvent'(s1: $1_AccountFreezing_UnfreezeAccountEvent, s2: $1_AccountFreezing_UnfreezeAccountEvent): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS', addr: int): int {
    $1_DiemAccount_$balance_for'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX', addr: int): int {
    $1_DiemAccount_$balance_for'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1526:5+225
function {:inline} $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0', addr: int): int {
    $1_DiemAccount_$balance_for'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'$1_XUS_XUS'(balance: $1_DiemAccount_Balance'$1_XUS_XUS'): int {
    $1_Diem_$value'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'$1_XDX_XDX'(balance: $1_DiemAccount_Balance'$1_XDX_XDX'): int {
    $1_Diem_$value'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1521:5+103
function {:inline} $1_DiemAccount_$balance_for'#0'(balance: $1_DiemAccount_Balance'#0'): int {
    $1_Diem_$value'#0'($coin#$1_DiemAccount_Balance'#0'(balance))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1617:5+247
function {:inline} $1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1624:5+239
function {:inline} $1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:1641:5+95
function {:inline} $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, check_addr: int): bool {
    $ResourceExists($1_DiemAccount_DiemAccount_$memory, check_addr)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:246:10+211
function {:inline} $1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, addr: int): bool {
    if ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) then ($1_VASP_spec_has_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)) else ($1_AccountLimits_$has_window_published'#0'($1_AccountLimits_Window'#0'_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory: $Memory $1_AccountLimits_Window'$1_XUS_XUS', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory: $Memory $1_AccountLimits_Window'$1_XDX_XDX', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:273:10+484
function {:inline} $1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory: $Memory $1_AccountLimits_Window'#0', $1_VASP_ChildVASP_$memory: $Memory $1_VASP_ChildVASP, $1_VASP_ParentVASP_$memory: $Memory $1_VASP_ParentVASP, payer: int, payee: int, is_withdrawal: bool): bool {
    if (is_withdrawal) then ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payer, payee))) else ((($1_DiemAccount_spec_has_published_account_limits'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee) && $1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee)) && !$1_VASP_spec_is_same_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, payee, payer)))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2470:9+155
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_KeyRotationCapability' {
    $key_rotation_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2475:9+145
function {:inline} $1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_KeyRotationCapability {
    $1_Option_$borrow'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2480:9+129
function {:inline} $1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_KeyRotationCapability'($1_DiemAccount_spec_get_key_rotation_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2486:9+183
function {:inline} $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_KeyRotationCapability($1_DiemAccount_spec_get_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2492:9+114
function {:inline} $1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability): bool {
    $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816)
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2497:9+144
function {:inline} $1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_Option_Option'$1_DiemAccount_WithdrawCapability' {
    $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2502:9+134
function {:inline} $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): $1_DiemAccount_WithdrawCapability {
    $1_Option_$borrow'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2507:9+121
function {:inline} $1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    $1_Option_$is_some'$1_DiemAccount_WithdrawCapability'($1_DiemAccount_spec_get_withdraw_cap_field($1_DiemAccount_DiemAccount_$memory, addr))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2512:9+171
function {:inline} $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_spec_has_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr) && $IsEqual'address'(addr, $account_address#$1_DiemAccount_WithdrawCapability($1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2518:9+171
function {:inline} $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, addr: int): bool {
    ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) && $1_Option_$is_none'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, addr))))
}

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2526:10+208
function {:inline} $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds, $1_AccountFreezing_FreezingBit_$memory: $Memory $1_AccountFreezing_FreezingBit, $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount, sender: $signer): bool {
    (var addr := $1_Signer_spec_address_of(sender); (($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)) && !$1_AccountFreezing_$account_is_frozen($1_AccountFreezing_FreezingBit_$memory, addr)))
}

// struct DiemAccount::DiemAccount at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:37:5+1558
type {:datatype} $1_DiemAccount_DiemAccount;
function {:constructor} $1_DiemAccount_DiemAccount($authentication_key: Vec (int), $withdraw_capability: $1_Option_Option'$1_DiemAccount_WithdrawCapability', $key_rotation_capability: $1_Option_Option'$1_DiemAccount_KeyRotationCapability', $received_events: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent', $sent_events: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent', $sequence_number: int): $1_DiemAccount_DiemAccount;
function {:inline} $Update'$1_DiemAccount_DiemAccount'_authentication_key(s: $1_DiemAccount_DiemAccount, x: Vec (int)): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount(x, $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_withdraw_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_WithdrawCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), x, $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_key_rotation_capability(s: $1_DiemAccount_DiemAccount, x: $1_Option_Option'$1_DiemAccount_KeyRotationCapability'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), x, $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_received_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), x, $sent_events#$1_DiemAccount_DiemAccount(s), $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sent_events(s: $1_DiemAccount_DiemAccount, x: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent'): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), x, $sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $Update'$1_DiemAccount_DiemAccount'_sequence_number(s: $1_DiemAccount_DiemAccount, x: int): $1_DiemAccount_DiemAccount {
    $1_DiemAccount_DiemAccount($authentication_key#$1_DiemAccount_DiemAccount(s), $withdraw_capability#$1_DiemAccount_DiemAccount(s), $key_rotation_capability#$1_DiemAccount_DiemAccount(s), $received_events#$1_DiemAccount_DiemAccount(s), $sent_events#$1_DiemAccount_DiemAccount(s), x)
}
function $IsValid'$1_DiemAccount_DiemAccount'(s: $1_DiemAccount_DiemAccount): bool {
    $IsValid'vec'u8''($authentication_key#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Option_Option'$1_DiemAccount_KeyRotationCapability''($key_rotation_capability#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent''($received_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent''($sent_events#$1_DiemAccount_DiemAccount(s))
      && $IsValid'u64'($sequence_number#$1_DiemAccount_DiemAccount(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemAccount'(s1: $1_DiemAccount_DiemAccount, s2: $1_DiemAccount_DiemAccount): bool {
    s1 == s2
}
var $1_DiemAccount_DiemAccount_$memory: $Memory $1_DiemAccount_DiemAccount;

// struct DiemAccount::AccountOperationsCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:94:5+167
type {:datatype} $1_DiemAccount_AccountOperationsCapability;
function {:constructor} $1_DiemAccount_AccountOperationsCapability($limits_cap: $1_AccountLimits_AccountLimitMutationCapability, $creation_events: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability;
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_limits_cap(s: $1_DiemAccount_AccountOperationsCapability, x: $1_AccountLimits_AccountLimitMutationCapability): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability(x, $creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $Update'$1_DiemAccount_AccountOperationsCapability'_creation_events(s: $1_DiemAccount_AccountOperationsCapability, x: $1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent'): $1_DiemAccount_AccountOperationsCapability {
    $1_DiemAccount_AccountOperationsCapability($limits_cap#$1_DiemAccount_AccountOperationsCapability(s), x)
}
function $IsValid'$1_DiemAccount_AccountOperationsCapability'(s: $1_DiemAccount_AccountOperationsCapability): bool {
    $IsValid'$1_AccountLimits_AccountLimitMutationCapability'($limits_cap#$1_DiemAccount_AccountOperationsCapability(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemAccount_CreateAccountEvent''($creation_events#$1_DiemAccount_AccountOperationsCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AccountOperationsCapability'(s1: $1_DiemAccount_AccountOperationsCapability, s2: $1_DiemAccount_AccountOperationsCapability): bool {
    s1 == s2
}
var $1_DiemAccount_AccountOperationsCapability_$memory: $Memory $1_DiemAccount_AccountOperationsCapability;

// struct DiemAccount::AdminTransactionEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:130:5+150
type {:datatype} $1_DiemAccount_AdminTransactionEvent;
function {:constructor} $1_DiemAccount_AdminTransactionEvent($committed_timestamp_secs: int): $1_DiemAccount_AdminTransactionEvent;
function {:inline} $Update'$1_DiemAccount_AdminTransactionEvent'_committed_timestamp_secs(s: $1_DiemAccount_AdminTransactionEvent, x: int): $1_DiemAccount_AdminTransactionEvent {
    $1_DiemAccount_AdminTransactionEvent(x)
}
function $IsValid'$1_DiemAccount_AdminTransactionEvent'(s: $1_DiemAccount_AdminTransactionEvent): bool {
    $IsValid'u64'($committed_timestamp_secs#$1_DiemAccount_AdminTransactionEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_AdminTransactionEvent'(s1: $1_DiemAccount_AdminTransactionEvent, s2: $1_DiemAccount_AdminTransactionEvent): bool {
    s1 == s2
}

// struct DiemAccount::Balance<XUS::XUS> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XUS_XUS';
function {:constructor} $1_DiemAccount_Balance'$1_XUS_XUS'($coin: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XUS_XUS''_coin(s: $1_DiemAccount_Balance'$1_XUS_XUS', x: $1_Diem_Diem'$1_XUS_XUS'): $1_DiemAccount_Balance'$1_XUS_XUS' {
    $1_DiemAccount_Balance'$1_XUS_XUS'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''(s: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    $IsValid'$1_Diem_Diem'$1_XUS_XUS''($coin#$1_DiemAccount_Balance'$1_XUS_XUS'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XUS_XUS''(s1: $1_DiemAccount_Balance'$1_XUS_XUS', s2: $1_DiemAccount_Balance'$1_XUS_XUS'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';

// struct DiemAccount::Balance<XDX::XDX> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'$1_XDX_XDX';
function {:constructor} $1_DiemAccount_Balance'$1_XDX_XDX'($coin: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX';
function {:inline} $Update'$1_DiemAccount_Balance'$1_XDX_XDX''_coin(s: $1_DiemAccount_Balance'$1_XDX_XDX', x: $1_Diem_Diem'$1_XDX_XDX'): $1_DiemAccount_Balance'$1_XDX_XDX' {
    $1_DiemAccount_Balance'$1_XDX_XDX'(x)
}
function $IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''(s: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    $IsValid'$1_Diem_Diem'$1_XDX_XDX''($coin#$1_DiemAccount_Balance'$1_XDX_XDX'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'$1_XDX_XDX''(s1: $1_DiemAccount_Balance'$1_XDX_XDX', s2: $1_DiemAccount_Balance'$1_XDX_XDX'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';

// struct DiemAccount::Balance<#0> at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:67:5+261
type {:datatype} $1_DiemAccount_Balance'#0';
function {:constructor} $1_DiemAccount_Balance'#0'($coin: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0';
function {:inline} $Update'$1_DiemAccount_Balance'#0''_coin(s: $1_DiemAccount_Balance'#0', x: $1_Diem_Diem'#0'): $1_DiemAccount_Balance'#0' {
    $1_DiemAccount_Balance'#0'(x)
}
function $IsValid'$1_DiemAccount_Balance'#0''(s: $1_DiemAccount_Balance'#0'): bool {
    $IsValid'$1_Diem_Diem'#0''($coin#$1_DiemAccount_Balance'#0'(s))
}
function {:inline} $IsEqual'$1_DiemAccount_Balance'#0''(s1: $1_DiemAccount_Balance'#0', s2: $1_DiemAccount_Balance'#0'): bool {
    s1 == s2
}
var $1_DiemAccount_Balance'#0'_$memory: $Memory $1_DiemAccount_Balance'#0';

// struct DiemAccount::CreateAccountEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:136:5+179
type {:datatype} $1_DiemAccount_CreateAccountEvent;
function {:constructor} $1_DiemAccount_CreateAccountEvent($created: int, $role_id: int): $1_DiemAccount_CreateAccountEvent;
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_created(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent(x, $role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $Update'$1_DiemAccount_CreateAccountEvent'_role_id(s: $1_DiemAccount_CreateAccountEvent, x: int): $1_DiemAccount_CreateAccountEvent {
    $1_DiemAccount_CreateAccountEvent($created#$1_DiemAccount_CreateAccountEvent(s), x)
}
function $IsValid'$1_DiemAccount_CreateAccountEvent'(s: $1_DiemAccount_CreateAccountEvent): bool {
    $IsValid'address'($created#$1_DiemAccount_CreateAccountEvent(s))
      && $IsValid'u64'($role_id#$1_DiemAccount_CreateAccountEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_CreateAccountEvent'(s1: $1_DiemAccount_CreateAccountEvent, s2: $1_DiemAccount_CreateAccountEvent): bool {
    s1 == s2
}

// struct DiemAccount::DiemWriteSetManager at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:100:5+115
type {:datatype} $1_DiemAccount_DiemWriteSetManager;
function {:constructor} $1_DiemAccount_DiemWriteSetManager($upgrade_events: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager;
function {:inline} $Update'$1_DiemAccount_DiemWriteSetManager'_upgrade_events(s: $1_DiemAccount_DiemWriteSetManager, x: $1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent'): $1_DiemAccount_DiemWriteSetManager {
    $1_DiemAccount_DiemWriteSetManager(x)
}
function $IsValid'$1_DiemAccount_DiemWriteSetManager'(s: $1_DiemAccount_DiemWriteSetManager): bool {
    $IsValid'$1_Event_EventHandle'$1_DiemAccount_AdminTransactionEvent''($upgrade_events#$1_DiemAccount_DiemWriteSetManager(s))
}
function {:inline} $IsEqual'$1_DiemAccount_DiemWriteSetManager'(s1: $1_DiemAccount_DiemWriteSetManager, s2: $1_DiemAccount_DiemWriteSetManager): bool {
    s1 == s2
}
var $1_DiemAccount_DiemWriteSetManager_$memory: $Memory $1_DiemAccount_DiemWriteSetManager;

// struct DiemAccount::KeyRotationCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:86:5+208
type {:datatype} $1_DiemAccount_KeyRotationCapability;
function {:constructor} $1_DiemAccount_KeyRotationCapability($account_address: int): $1_DiemAccount_KeyRotationCapability;
function {:inline} $Update'$1_DiemAccount_KeyRotationCapability'_account_address(s: $1_DiemAccount_KeyRotationCapability, x: int): $1_DiemAccount_KeyRotationCapability {
    $1_DiemAccount_KeyRotationCapability(x)
}
function $IsValid'$1_DiemAccount_KeyRotationCapability'(s: $1_DiemAccount_KeyRotationCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_KeyRotationCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_KeyRotationCapability'(s1: $1_DiemAccount_KeyRotationCapability, s2: $1_DiemAccount_KeyRotationCapability): bool {
    s1 == s2
}

// struct DiemAccount::ReceivedPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:118:5+363
type {:datatype} $1_DiemAccount_ReceivedPaymentEvent;
function {:constructor} $1_DiemAccount_ReceivedPaymentEvent($amount: int, $currency_code: Vec (int), $payer: int, $metadata: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent;
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_amount(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent(x, $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_currency_code(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), x, $payer#$1_DiemAccount_ReceivedPaymentEvent(s), $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_payer(s: $1_DiemAccount_ReceivedPaymentEvent, x: int): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), x, $metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_ReceivedPaymentEvent'_metadata(s: $1_DiemAccount_ReceivedPaymentEvent, x: Vec (int)): $1_DiemAccount_ReceivedPaymentEvent {
    $1_DiemAccount_ReceivedPaymentEvent($amount#$1_DiemAccount_ReceivedPaymentEvent(s), $currency_code#$1_DiemAccount_ReceivedPaymentEvent(s), $payer#$1_DiemAccount_ReceivedPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_ReceivedPaymentEvent'(s: $1_DiemAccount_ReceivedPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'address'($payer#$1_DiemAccount_ReceivedPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_ReceivedPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_ReceivedPaymentEvent'(s1: $1_DiemAccount_ReceivedPaymentEvent, s2: $1_DiemAccount_ReceivedPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::SentPaymentEvent at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:106:5+346
type {:datatype} $1_DiemAccount_SentPaymentEvent;
function {:constructor} $1_DiemAccount_SentPaymentEvent($amount: int, $currency_code: Vec (int), $payee: int, $metadata: Vec (int)): $1_DiemAccount_SentPaymentEvent;
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_amount(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent(x, $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_currency_code(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), x, $payee#$1_DiemAccount_SentPaymentEvent(s), $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_payee(s: $1_DiemAccount_SentPaymentEvent, x: int): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), x, $metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $Update'$1_DiemAccount_SentPaymentEvent'_metadata(s: $1_DiemAccount_SentPaymentEvent, x: Vec (int)): $1_DiemAccount_SentPaymentEvent {
    $1_DiemAccount_SentPaymentEvent($amount#$1_DiemAccount_SentPaymentEvent(s), $currency_code#$1_DiemAccount_SentPaymentEvent(s), $payee#$1_DiemAccount_SentPaymentEvent(s), x)
}
function $IsValid'$1_DiemAccount_SentPaymentEvent'(s: $1_DiemAccount_SentPaymentEvent): bool {
    $IsValid'u64'($amount#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($currency_code#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'address'($payee#$1_DiemAccount_SentPaymentEvent(s))
      && $IsValid'vec'u8''($metadata#$1_DiemAccount_SentPaymentEvent(s))
}
function {:inline} $IsEqual'$1_DiemAccount_SentPaymentEvent'(s1: $1_DiemAccount_SentPaymentEvent, s2: $1_DiemAccount_SentPaymentEvent): bool {
    s1 == s2
}

// struct DiemAccount::WithdrawCapability at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:77:5+202
type {:datatype} $1_DiemAccount_WithdrawCapability;
function {:constructor} $1_DiemAccount_WithdrawCapability($account_address: int): $1_DiemAccount_WithdrawCapability;
function {:inline} $Update'$1_DiemAccount_WithdrawCapability'_account_address(s: $1_DiemAccount_WithdrawCapability, x: int): $1_DiemAccount_WithdrawCapability {
    $1_DiemAccount_WithdrawCapability(x)
}
function $IsValid'$1_DiemAccount_WithdrawCapability'(s: $1_DiemAccount_WithdrawCapability): bool {
    $IsValid'address'($account_address#$1_DiemAccount_WithdrawCapability(s))
}
function {:inline} $IsEqual'$1_DiemAccount_WithdrawCapability'(s1: $1_DiemAccount_WithdrawCapability, s2: $1_DiemAccount_WithdrawCapability): bool {
    s1 == s2
}

// spec fun at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:244:9+111
function {:inline} $1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory: $Memory $1_RecoveryAddress_RecoveryAddress, addr: int): bool {
    $ResourceExists($1_RecoveryAddress_RecoveryAddress_$memory, addr)
}

// struct RecoveryAddress::RecoveryAddress at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:17:5+91
type {:datatype} $1_RecoveryAddress_RecoveryAddress;
function {:constructor} $1_RecoveryAddress_RecoveryAddress($rotation_caps: Vec ($1_DiemAccount_KeyRotationCapability)): $1_RecoveryAddress_RecoveryAddress;
function {:inline} $Update'$1_RecoveryAddress_RecoveryAddress'_rotation_caps(s: $1_RecoveryAddress_RecoveryAddress, x: Vec ($1_DiemAccount_KeyRotationCapability)): $1_RecoveryAddress_RecoveryAddress {
    $1_RecoveryAddress_RecoveryAddress(x)
}
function $IsValid'$1_RecoveryAddress_RecoveryAddress'(s: $1_RecoveryAddress_RecoveryAddress): bool {
    $IsValid'vec'$1_DiemAccount_KeyRotationCapability''($rotation_caps#$1_RecoveryAddress_RecoveryAddress(s))
}
function {:inline} $IsEqual'$1_RecoveryAddress_RecoveryAddress'(s1: $1_RecoveryAddress_RecoveryAddress, s2: $1_RecoveryAddress_RecoveryAddress): bool {
    s1 == s2
}
var $1_RecoveryAddress_RecoveryAddress_$memory: $Memory $1_RecoveryAddress_RecoveryAddress;

// spec fun at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:55:5+75
function {:inline} $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata): bool {
    $ResourceExists($1_DiemBlock_BlockMetadata_$memory, 173345816)
}

// struct DiemBlock::BlockMetadata at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:9:5+236
type {:datatype} $1_DiemBlock_BlockMetadata;
function {:constructor} $1_DiemBlock_BlockMetadata($height: int, $new_block_events: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata;
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_height(s: $1_DiemBlock_BlockMetadata, x: int): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata(x, $new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $Update'$1_DiemBlock_BlockMetadata'_new_block_events(s: $1_DiemBlock_BlockMetadata, x: $1_Event_EventHandle'$1_DiemBlock_NewBlockEvent'): $1_DiemBlock_BlockMetadata {
    $1_DiemBlock_BlockMetadata($height#$1_DiemBlock_BlockMetadata(s), x)
}
function $IsValid'$1_DiemBlock_BlockMetadata'(s: $1_DiemBlock_BlockMetadata): bool {
    $IsValid'u64'($height#$1_DiemBlock_BlockMetadata(s))
      && $IsValid'$1_Event_EventHandle'$1_DiemBlock_NewBlockEvent''($new_block_events#$1_DiemBlock_BlockMetadata(s))
}
function {:inline} $IsEqual'$1_DiemBlock_BlockMetadata'(s1: $1_DiemBlock_BlockMetadata, s2: $1_DiemBlock_BlockMetadata): bool {
    s1 == s2
}
var $1_DiemBlock_BlockMetadata_$memory: $Memory $1_DiemBlock_BlockMetadata;

// struct DiemBlock::NewBlockEvent at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:16:5+234
type {:datatype} $1_DiemBlock_NewBlockEvent;
function {:constructor} $1_DiemBlock_NewBlockEvent($round: int, $proposer: int, $previous_block_votes: Vec (int), $time_microseconds: int): $1_DiemBlock_NewBlockEvent;
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_round(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent(x, $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_proposer(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), x, $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_previous_block_votes(s: $1_DiemBlock_NewBlockEvent, x: Vec (int)): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), x, $time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $Update'$1_DiemBlock_NewBlockEvent'_time_microseconds(s: $1_DiemBlock_NewBlockEvent, x: int): $1_DiemBlock_NewBlockEvent {
    $1_DiemBlock_NewBlockEvent($round#$1_DiemBlock_NewBlockEvent(s), $proposer#$1_DiemBlock_NewBlockEvent(s), $previous_block_votes#$1_DiemBlock_NewBlockEvent(s), x)
}
function $IsValid'$1_DiemBlock_NewBlockEvent'(s: $1_DiemBlock_NewBlockEvent): bool {
    $IsValid'u64'($round#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'address'($proposer#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'vec'address''($previous_block_votes#$1_DiemBlock_NewBlockEvent(s))
      && $IsValid'u64'($time_microseconds#$1_DiemBlock_NewBlockEvent(s))
}
function {:inline} $IsEqual'$1_DiemBlock_NewBlockEvent'(s1: $1_DiemBlock_NewBlockEvent, s2: $1_DiemBlock_NewBlockEvent): bool {
    s1 == s2
}

// struct DiemVMConfig::DiemVMConfig at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:13:5+120
type {:datatype} $1_DiemVMConfig_DiemVMConfig;
function {:constructor} $1_DiemVMConfig_DiemVMConfig($gas_schedule: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig;
function {:inline} $Update'$1_DiemVMConfig_DiemVMConfig'_gas_schedule(s: $1_DiemVMConfig_DiemVMConfig, x: $1_DiemVMConfig_GasSchedule): $1_DiemVMConfig_DiemVMConfig {
    $1_DiemVMConfig_DiemVMConfig(x)
}
function $IsValid'$1_DiemVMConfig_DiemVMConfig'(s: $1_DiemVMConfig_DiemVMConfig): bool {
    $IsValid'$1_DiemVMConfig_GasSchedule'($gas_schedule#$1_DiemVMConfig_DiemVMConfig(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_DiemVMConfig'(s1: $1_DiemVMConfig_DiemVMConfig, s2: $1_DiemVMConfig_DiemVMConfig): bool {
    s1 == s2
}

// struct DiemVMConfig::GasConstants at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:35:5+1690
type {:datatype} $1_DiemVMConfig_GasConstants;
function {:constructor} $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost: int, $global_memory_per_byte_write_cost: int, $min_transaction_gas_units: int, $large_transaction_cutoff: int, $intrinsic_gas_per_byte: int, $maximum_number_of_gas_units: int, $min_price_per_gas_unit: int, $max_price_per_gas_unit: int, $max_transaction_size_in_bytes: int, $gas_unit_scaling_factor: int, $default_account_size: int): $1_DiemVMConfig_GasConstants;
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants(x, $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_global_memory_per_byte_write_cost(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), x, $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_transaction_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), x, $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_large_transaction_cutoff(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), x, $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_intrinsic_gas_per_byte(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), x, $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_maximum_number_of_gas_units(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), x, $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_min_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), x, $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_price_per_gas_unit(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_max_transaction_size_in_bytes(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), x, $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_gas_unit_scaling_factor(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), x, $default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasConstants'_default_account_size(s: $1_DiemVMConfig_GasConstants, x: int): $1_DiemVMConfig_GasConstants {
    $1_DiemVMConfig_GasConstants($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s), $global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s), $min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s), $large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s), $intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s), $maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s), $min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s), $max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s), $gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s), x)
}
function $IsValid'$1_DiemVMConfig_GasConstants'(s: $1_DiemVMConfig_GasConstants): bool {
    $IsValid'u64'($global_memory_per_byte_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($global_memory_per_byte_write_cost#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_transaction_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($large_transaction_cutoff#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($intrinsic_gas_per_byte#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($maximum_number_of_gas_units#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($min_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_price_per_gas_unit#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($max_transaction_size_in_bytes#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($gas_unit_scaling_factor#$1_DiemVMConfig_GasConstants(s))
      && $IsValid'u64'($default_account_size#$1_DiemVMConfig_GasConstants(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasConstants'(s1: $1_DiemVMConfig_GasConstants, s2: $1_DiemVMConfig_GasConstants): bool {
    s1 == s2
}

// struct DiemVMConfig::GasSchedule at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:29:5+164
type {:datatype} $1_DiemVMConfig_GasSchedule;
function {:constructor} $1_DiemVMConfig_GasSchedule($instruction_schedule: Vec (int), $native_schedule: Vec (int), $gas_constants: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule;
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_instruction_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule(x, $native_schedule#$1_DiemVMConfig_GasSchedule(s), $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_native_schedule(s: $1_DiemVMConfig_GasSchedule, x: Vec (int)): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), x, $gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $Update'$1_DiemVMConfig_GasSchedule'_gas_constants(s: $1_DiemVMConfig_GasSchedule, x: $1_DiemVMConfig_GasConstants): $1_DiemVMConfig_GasSchedule {
    $1_DiemVMConfig_GasSchedule($instruction_schedule#$1_DiemVMConfig_GasSchedule(s), $native_schedule#$1_DiemVMConfig_GasSchedule(s), x)
}
function $IsValid'$1_DiemVMConfig_GasSchedule'(s: $1_DiemVMConfig_GasSchedule): bool {
    $IsValid'vec'u8''($instruction_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'vec'u8''($native_schedule#$1_DiemVMConfig_GasSchedule(s))
      && $IsValid'$1_DiemVMConfig_GasConstants'($gas_constants#$1_DiemVMConfig_GasSchedule(s))
}
function {:inline} $IsEqual'$1_DiemVMConfig_GasSchedule'(s1: $1_DiemVMConfig_GasSchedule, s2: $1_DiemVMConfig_GasSchedule): bool {
    s1 == s2
}

// struct DiemVersion::DiemVersion at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:9:5+68
type {:datatype} $1_DiemVersion_DiemVersion;
function {:constructor} $1_DiemVersion_DiemVersion($major: int): $1_DiemVersion_DiemVersion;
function {:inline} $Update'$1_DiemVersion_DiemVersion'_major(s: $1_DiemVersion_DiemVersion, x: int): $1_DiemVersion_DiemVersion {
    $1_DiemVersion_DiemVersion(x)
}
function $IsValid'$1_DiemVersion_DiemVersion'(s: $1_DiemVersion_DiemVersion): bool {
    $IsValid'u64'($major#$1_DiemVersion_DiemVersion(s))
}
function {:inline} $IsEqual'$1_DiemVersion_DiemVersion'(s1: $1_DiemVersion_DiemVersion, s2: $1_DiemVersion_DiemVersion): bool {
    s1 == s2
}

// fun PaymentScripts::peer_to_peer_by_signers [verification] at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
procedure {:timeLimit 40} $1_PaymentScripts_peer_to_peer_by_signers$verify(_$t0: $signer, _$t1: $signer, _$t2: int, _$t3: Vec (int)) returns ()
{
    // declare local variables
    var $t4: $1_DiemAccount_WithdrawCapability;
    var $t5: int;
    var $t6: $1_DiemAccount_WithdrawCapability;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t10: $1_DiemAccount_ReceivedPaymentEvent;
    var $t11: int;
    var $t12: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t13: $1_DiemAccount_SentPaymentEvent;
    var $t14: int;
    var $t15: $1_DiemAccount_WithdrawCapability;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t21: $1_DiemAccount_ReceivedPaymentEvent;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t24: $1_DiemAccount_SentPaymentEvent;
    var $t25: bool;
    var $t26: $1_DiemAccount_ReceivedPaymentEvent;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t28: $1_DiemAccount_SentPaymentEvent;
    var $t29: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t30: int;
    var $t31: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $t3: Vec (int);
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'#0'_$memory#136: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#137: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#138: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#139: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#140: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#142: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#143: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountFreezing_FreezingBit_$memory#144: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#145: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#146: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#147: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#148: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#149: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(25,11991,12430)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'vec'u8''($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:156:9+55
    assume {:print "$at(25,13120,13175)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, DiemAccount::spec_get_withdraw_cap($t5)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:157:9+57
    assume {:print "$at(25,13184,13241)"} true;
    assume ($t6 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t5));

    // assume Identical($t7, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t7 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t8, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t8 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t9, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t9 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))));

    // assume Identical($t10, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t8, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t10 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t8, $t3));

    // assume Identical($t11, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t11 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t12, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t12 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t11)));

    // assume Identical($t13, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), Signer::spec_address_of($t1), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t13 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $1_Signer_spec_address_of($t1), $t3));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @141 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @143 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#143 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @142 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'#0'_$memory#142 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @138 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'#0'_$memory#138 := $1_AccountLimits_Window'#0'_$memory;

    // @139 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#139 := $1_VASP_ChildVASP_$memory;

    // @140 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#140 := $1_VASP_ParentVASP_$memory;

    // @144 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#144 := $1_AccountFreezing_FreezingBit_$memory;

    // @137 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#137 := $1_DiemAccount_DiemAccount_$memory;

    // @145 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#145 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @136 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'#0'_$memory#136 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$at(25,11991,11992)"} true;
    assume {:print "$track_local(42,0,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,3):", $t3} $t3 == $t3;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // $t15 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume {:print "$at(25,12185,12233)"} true;

    // assume Identical($t16, Or(Not(DiemAccount::$exists_at($t14)), DiemAccount::spec_holds_delegated_withdraw_capability($t14))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume ($t16 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t14) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t14)));

    // if ($t16) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    if ($t16) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t14)), Eq(5, $t17)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t14), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t14) && $IsEqual'num'(5, $t17)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t14) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume {:print "$at(25,12185,12233)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
L3:

    // @146 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    $1_DiemAccount_DiemAccount_$memory#146 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t14, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t14);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t15);

    // assume exists<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t14);

    // assume Eq<DiemAccount::WithdrawCapability>($t15, DiemAccount::spec_get_withdraw_cap[@146]($t14)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t15, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#146, $t14));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t14), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@146]<DiemAccount::DiemAccount>($t14), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t14), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#146, $t14), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t15), $t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $t14);

    // $t15 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48

    // trace_local[payer_withdrawal_cap]($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:13+20
    assume {:print "$track_local(42,0,4):", $t15} $t15 == $t15;

    // assume Identical($t18, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t18 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t19, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t19 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t20, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t20 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))));

    // assume Identical($t21, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t19, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t21 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t19, $t3));

    // assume Identical($t22, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t22 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t23, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t23 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t22)));

    // assume Identical($t24, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), Signer::spec_address_of($t1), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t24 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $1_Signer_spec_address_of($t1), $t3));

    // opaque begin: DiemAccount::pay_by_signers<#0>($t15, $t1, $t2, $t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume {:print "$at(25,12243,12351)"} true;

    // assume Identical($t25, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>(Signer::spec_address_of($t1))), Not(DiemAccount::$exists_at(Signer::spec_address_of($t1)))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(AccountLimits::spec_update_deposit_limits<#0>($t2, VASP::spec_parent_address(Signer::spec_address_of($t1)))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen(Signer::spec_address_of($t1))), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1)), Gt(Add(DiemAccount::$balance<#0>(Signer::spec_address_of($t1)), $t2), MaxU64()))), Not(DiemAccount::$exists_at($t18))), Not(exists<DiemAccount::Balance<#0>>($t18))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<#0>())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t2, VASP::spec_parent_address($t18)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t18))), $t2)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t18)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), Not(DiemTimestamp::$is_operating()))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t25 == ((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $1_Signer_spec_address_of($t1))) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t18)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t18))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t18)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))));

    // if ($t25) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>(Signer::spec_address_of($t1))), Eq(7, $t17)), And(Not(DiemAccount::$exists_at(Signer::spec_address_of($t1))), Eq(5, $t17))), And(Eq<u64>($t2, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(AccountLimits::spec_update_deposit_limits<#0>($t2, VASP::spec_parent_address(Signer::spec_address_of($t1))))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen(Signer::spec_address_of($t1)), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1)), Gt(Add(DiemAccount::$balance<#0>(Signer::spec_address_of($t1)), $t2), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at($t18)), Eq(5, $t17))), And(Not(exists<DiemAccount::Balance<#0>>($t18)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t2, VASP::spec_parent_address($t18))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t18))), $t2), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen($t18), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), $t2), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t18)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t18) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t18))) < $t2) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t18) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume {:print "$at(25,12243,12351)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
L5:

    // @147 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $1_DiemAccount_DiemAccount_$memory#147 := $1_DiemAccount_DiemAccount_$memory;

    // @148 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $1_DiemAccount_Balance'#0'_$memory#148 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));
    }

    // modifies global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1), $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1));
    }

    // modifies global<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));
    }

    // modifies global<DiemAccount::Balance<#0>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1), $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1));
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address(select DiemAccount::WithdrawCapability.account_address($t15))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15)), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15)));
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address(Signer::spec_address_of($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)));
    }

    // assume DiemAccount::$exists_at(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume DiemAccount::$exists_at(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1));

    // assume exists<DiemAccount::Balance<#0>>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume exists<DiemAccount::Balance<#0>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1));

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.withdraw_capability(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.sent_events(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.received_events(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.sent_events(global[@147]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $1_Signer_spec_address_of($t1))));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.received_events(global[@147]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $1_Signer_spec_address_of($t1))));

    // assume Implies(Eq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>($t18), DiemAccount::$balance[@148]<#0>($t18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t18), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#148, $t18)));

    // assume Implies(Neq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>($t18), Sub(DiemAccount::$balance[@148]<#0>($t18), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (!$IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t18), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#148, $t18) - $t2)));

    // assume Implies(Neq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>(Signer::spec_address_of($t1)), Add(DiemAccount::$balance[@148]<#0>(Signer::spec_address_of[]($t1)), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (!$IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#148, $1_Signer_spec_address_of($t1)) + $t2)));

    // assume Identical($t26, $t21) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t26 == $t21);

    // assume Identical($t27, $t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t27 == $t20);

    // emit_event($t26, $t27) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t27, $t26);

    // assume Identical($t28, $t24) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t28 == $t24);

    // assume Identical($t29, $t23) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t29 == $t23);

    // emit_event($t28, $t29) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t29, $t28);

    // opaque end: DiemAccount::pay_by_signers<#0>($t15, $t1, $t2, $t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // opaque begin: DiemAccount::restore_withdraw_capability($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume {:print "$at(25,12361,12423)"} true;

    // assume Identical($t31, Or(Not(DiemAccount::$exists_at($t30)), Not(DiemAccount::$delegated_withdraw_capability($t30)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume ($t31 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t30)));

    // if ($t31) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    if ($t31) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t30)), Eq(5, $t17)), And(Not(DiemAccount::$delegated_withdraw_capability($t30)), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(5, $t17)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume {:print "$at(25,12361,12423)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
L7:

    // @149 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    $1_DiemAccount_DiemAccount_$memory#149 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t30) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t30, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t30);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t30), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@149]<DiemAccount::DiemAccount>($t30), Option::spec_some<DiemAccount::WithdrawCapability>($t15))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t30), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#149, $t30), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t15)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t30) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t30);

    // opaque end: DiemAccount::restore_withdraw_capability($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62

    // label L1 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:133:5+1
    assume {:print "$at(25,12429,12430)"} true;
L1:

    // assert Not(Not(exists[@136]<DiemAccount::Balance<#0>>($t5))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:183:9+89
    assume {:print "$at(25,14470,14559)"} true;
    assert {:msg "assert_failed(25,14470,14559): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $t5);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:184:9+87
    assume {:print "$at(25,14568,14655)"} true;
    assert {:msg "assert_failed(25,14568,14655): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1));

    // assert Not(Not(DiemAccount::$exists_at[@137]($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1));

    // assert Not(Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1));

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<#0>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $1_AccountLimits_Window'#0'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))));

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)));

    // assert Not(Not(Diem::spec_is_currency[@143]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#143);

    // assert Not(AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1));

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<#0>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@137]($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<#0>>($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $t7);

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(Not(Diem::spec_is_currency[@143]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#143);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<#0>($t2, VASP::spec_parent_address[@139, @140]($t7)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $1_AccountLimits_Window'#0'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<#0>>($t7))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#136, $t7))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(AccountFreezing::spec_account_is_frozen[@144]($t7)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)));

    // assert Implies(Neq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>($t5), Sub(DiemAccount::$balance[@136]<#0>($t5), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:162:9+159
    assume {:print "$at(25,13473,13632)"} true;
    assert {:msg "assert_failed(25,13473,13632): post-condition does not hold"}
      (!$IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t5), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#136, $t5) - $t2)));

    // assert Implies(Neq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>(Signer::spec_address_of($t1)), Add(DiemAccount::$balance[@136]<#0>(Signer::spec_address_of[]($t1)), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:165:9+149
    assume {:print "$at(25,13641,13790)"} true;
    assert {:msg "assert_failed(25,13641,13790): post-condition does not hold"}
      (!$IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2)));

    // assert Implies(Eq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<#0>(Signer::spec_address_of($t1)), DiemAccount::$balance[@136]<#0>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:168:9+140
    assume {:print "$at(25,13799,13939)"} true;
    assert {:msg "assert_failed(25,13799,13939): post-condition does not hold"}
      ($IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $1_Signer_spec_address_of($t1)), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t10, $t9), $t13, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10), $t12, $t13); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t10, $t9), $t13, $t12)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assume {:print "$at(25,12696,12830)"} true;
    assert {:msg "assert_failed(25,12696,12830): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10), $t12, $t13); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:133:5+1
    assume {:print "$at(25,12429,12430)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@136]<DiemAccount::Balance<#0>>($t5)), Not(exists[@136]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1)))), Not(DiemAccount::$exists_at[@137]($t5))), DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5)), Not(exists[@136]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1)))), Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1)))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<#0>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), Not(DiemTimestamp::$is_operating[@141]())), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]())))), Not(Diem::spec_is_currency[@143]<#0>())), AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1))), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<#0>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@137]($t7))), Not(exists[@136]<DiemAccount::Balance<#0>>($t7))), Not(DiemTimestamp::$is_operating[@141]())), Not(Diem::spec_is_currency[@143]<#0>())), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<#0>($t2, VASP::spec_parent_address[@139, @140]($t7)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<#0>>($t7))), $t2)), Not(DiemTimestamp::$is_operating[@141]())), AccountFreezing::spec_account_is_frozen[@144]($t7)), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assume {:print "$at(25,12696,12830)"} true;
    assert {:msg "assert_failed(25,12696,12830): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $t5) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5)) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1))) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $1_AccountLimits_Window'#0'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#143)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1))) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $t7)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#143)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $1_AccountLimits_Window'#0'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#136, $t7))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@136]<DiemAccount::Balance<#0>>($t5)), Eq(5, $t17)), And(Not(exists[@136]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1))), Eq(7, $t17))), And(Not(DiemAccount::$exists_at[@137]($t5)), Eq(5, $t17))), And(DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5), Eq(1, $t17))), And(Not(exists[@136]<DiemAccount::Balance<#0>>(Signer::spec_address_of[]($t1))), Eq(7, $t17))), And(Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1))), Eq(5, $t17))), And(Eq<u64>($t2, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<#0>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency[@143]<#0>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1)), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<#0>(Signer::spec_address_of[]($t1)), $t2), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at[@137]($t7)), Eq(5, $t17))), And(Not(exists[@136]<DiemAccount::Balance<#0>>($t7)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(Not(Diem::spec_is_currency[@143]<#0>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<#0>($t2, VASP::spec_parent_address[@139, @140]($t7))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<#0>>($t7))), $t2), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen[@144]($t7), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<#0>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<#0>(global[@138]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]()))), Eq(1, $t17))), Eq(5, $t17)), Eq(1, $t17)), Eq(7, $t17)), Eq(8, $t17)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assert {:msg "assert_failed(25,12696,12830): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $t5) && $IsEqual'num'(5, $t17)) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5) && $IsEqual'num'(5, $t17))) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $1_AccountLimits_Window'#0'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#143) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#136, $t7) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#143) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $1_AccountLimits_Window'#0'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#136, $t7))) < $t2) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#142, $ResourceValue($1_AccountLimits_Window'#0'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))) && $IsEqual'num'(1, $t17))) || $IsEqual'num'(5, $t17)) || $IsEqual'num'(1, $t17)) || $IsEqual'num'(7, $t17)) || $IsEqual'num'(8, $t17));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun PaymentScripts::peer_to_peer_by_signers [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
procedure {:timeLimit 40} $1_PaymentScripts_peer_to_peer_by_signers$verify_instantiated_0(_$t0: $signer, _$t1: $signer, _$t2: int, _$t3: Vec (int)) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t4: $1_DiemAccount_WithdrawCapability;
    var $t5: int;
    var $t6: $1_DiemAccount_WithdrawCapability;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t10: $1_DiemAccount_ReceivedPaymentEvent;
    var $t11: int;
    var $t12: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t13: $1_DiemAccount_SentPaymentEvent;
    var $t14: int;
    var $t15: $1_DiemAccount_WithdrawCapability;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t21: $1_DiemAccount_ReceivedPaymentEvent;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t24: $1_DiemAccount_SentPaymentEvent;
    var $t25: bool;
    var $t26: $1_DiemAccount_ReceivedPaymentEvent;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t28: $1_DiemAccount_SentPaymentEvent;
    var $t29: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t30: int;
    var $t31: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $t3: Vec (int);
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#137: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_VASP_ChildVASP_$memory#139: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#140: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_AccountFreezing_FreezingBit_$memory#144: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#145: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#146: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#147: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#148: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#149: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(25,11991,12430)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'vec'u8''($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:156:9+55
    assume {:print "$at(25,13120,13175)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, DiemAccount::spec_get_withdraw_cap($t5)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:157:9+57
    assume {:print "$at(25,13184,13241)"} true;
    assume ($t6 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t5));

    // assume Identical($t7, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t7 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t8, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t8 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t9, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t9 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))));

    // assume Identical($t10, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t8, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t10 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t8, $t3));

    // assume Identical($t11, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t11 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t12, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t12 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t11)));

    // assume Identical($t13, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), Signer::spec_address_of($t1), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t13 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $1_Signer_spec_address_of($t1), $t3));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @141 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @143 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @142 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @138 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // @139 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#139 := $1_VASP_ChildVASP_$memory;

    // @140 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#140 := $1_VASP_ParentVASP_$memory;

    // @144 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#144 := $1_AccountFreezing_FreezingBit_$memory;

    // @137 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#137 := $1_DiemAccount_DiemAccount_$memory;

    // @145 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#145 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @136 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$at(25,11991,11992)"} true;
    assume {:print "$track_local(42,0,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,3):", $t3} $t3 == $t3;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // $t15 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume {:print "$at(25,12185,12233)"} true;

    // assume Identical($t16, Or(Not(DiemAccount::$exists_at($t14)), DiemAccount::spec_holds_delegated_withdraw_capability($t14))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume ($t16 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t14) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t14)));

    // if ($t16) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    if ($t16) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t14)), Eq(5, $t17)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t14), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t14) && $IsEqual'num'(5, $t17)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t14) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume {:print "$at(25,12185,12233)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
L3:

    // @146 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    $1_DiemAccount_DiemAccount_$memory#146 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t14, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t14);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t15);

    // assume exists<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t14);

    // assume Eq<DiemAccount::WithdrawCapability>($t15, DiemAccount::spec_get_withdraw_cap[@146]($t14)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t15, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#146, $t14));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t14), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@146]<DiemAccount::DiemAccount>($t14), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t14), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#146, $t14), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t15), $t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $t14);

    // $t15 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48

    // trace_local[payer_withdrawal_cap]($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:13+20
    assume {:print "$track_local(42,0,4):", $t15} $t15 == $t15;

    // assume Identical($t18, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t18 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t19, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t19 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t20, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t20 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))));

    // assume Identical($t21, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t19, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t21 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t19, $t3));

    // assume Identical($t22, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t22 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t23, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t23 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t22)));

    // assume Identical($t24, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), Signer::spec_address_of($t1), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t24 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $1_Signer_spec_address_of($t1), $t3));

    // opaque begin: DiemAccount::pay_by_signers<XUS::XUS>($t15, $t1, $t2, $t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume {:print "$at(25,12243,12351)"} true;

    // assume Identical($t25, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of($t1))), Not(DiemAccount::$exists_at(Signer::spec_address_of($t1)))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t2, VASP::spec_parent_address(Signer::spec_address_of($t1)))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XUS::XUS>())), AccountFreezing::spec_account_is_frozen(Signer::spec_address_of($t1))), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1)), Gt(Add(DiemAccount::$balance<XUS::XUS>(Signer::spec_address_of($t1)), $t2), MaxU64()))), Not(DiemAccount::$exists_at($t18))), Not(exists<DiemAccount::Balance<XUS::XUS>>($t18))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XUS::XUS>())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t2, VASP::spec_parent_address($t18)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t18))), $t2)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t18)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), Not(DiemTimestamp::$is_operating()))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t25 == ((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $1_Signer_spec_address_of($t1))) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t18)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) || ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t18))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t18)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))));

    // if ($t25) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of($t1))), Eq(7, $t17)), And(Not(DiemAccount::$exists_at(Signer::spec_address_of($t1))), Eq(5, $t17))), And(Eq<u64>($t2, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t2, VASP::spec_parent_address(Signer::spec_address_of($t1))))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen(Signer::spec_address_of($t1)), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1)), Gt(Add(DiemAccount::$balance<XUS::XUS>(Signer::spec_address_of($t1)), $t2), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at($t18)), Eq(5, $t17))), And(Not(exists<DiemAccount::Balance<XUS::XUS>>($t18)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t2, VASP::spec_parent_address($t18))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t18))), $t2), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen($t18), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), $t2), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t18)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t18) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t18))) < $t2) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t18) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume {:print "$at(25,12243,12351)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
L5:

    // @147 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $1_DiemAccount_DiemAccount_$memory#147 := $1_DiemAccount_DiemAccount_$memory;

    // @148 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#148 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // modifies global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));
    }

    // modifies global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1), $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1));
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1), $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1));
    }

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(select DiemAccount::WithdrawCapability.account_address($t15))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15)), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15)));
    }

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address(Signer::spec_address_of($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)));
    }

    // assume DiemAccount::$exists_at(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume DiemAccount::$exists_at(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1));

    // assume exists<DiemAccount::Balance<XUS::XUS>>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume exists<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1));

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.withdraw_capability(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.sent_events(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.received_events(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.sent_events(global[@147]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $1_Signer_spec_address_of($t1))));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.received_events(global[@147]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $1_Signer_spec_address_of($t1))));

    // assume Implies(Eq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t18), DiemAccount::$balance[@148]<XUS::XUS>($t18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t18), $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#148, $t18)));

    // assume Implies(Neq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t18), Sub(DiemAccount::$balance[@148]<XUS::XUS>($t18), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (!$IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t18), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#148, $t18) - $t2)));

    // assume Implies(Neq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XUS::XUS>(Signer::spec_address_of($t1)), Add(DiemAccount::$balance[@148]<XUS::XUS>(Signer::spec_address_of[]($t1)), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (!$IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1)), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#148, $1_Signer_spec_address_of($t1)) + $t2)));

    // assume Identical($t26, $t21) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t26 == $t21);

    // assume Identical($t27, $t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t27 == $t20);

    // emit_event($t26, $t27) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t27, $t26);

    // assume Identical($t28, $t24) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t28 == $t24);

    // assume Identical($t29, $t23) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t29 == $t23);

    // emit_event($t28, $t29) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t29, $t28);

    // opaque end: DiemAccount::pay_by_signers<XUS::XUS>($t15, $t1, $t2, $t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // opaque begin: DiemAccount::restore_withdraw_capability($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume {:print "$at(25,12361,12423)"} true;

    // assume Identical($t31, Or(Not(DiemAccount::$exists_at($t30)), Not(DiemAccount::$delegated_withdraw_capability($t30)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume ($t31 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t30)));

    // if ($t31) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    if ($t31) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t30)), Eq(5, $t17)), And(Not(DiemAccount::$delegated_withdraw_capability($t30)), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(5, $t17)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume {:print "$at(25,12361,12423)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
L7:

    // @149 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    $1_DiemAccount_DiemAccount_$memory#149 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t30) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t30, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t30);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t30), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@149]<DiemAccount::DiemAccount>($t30), Option::spec_some<DiemAccount::WithdrawCapability>($t15))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t30), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#149, $t30), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t15)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t30) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t30);

    // opaque end: DiemAccount::restore_withdraw_capability($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62

    // label L1 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:133:5+1
    assume {:print "$at(25,12429,12430)"} true;
L1:

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>($t5))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:183:9+89
    assume {:print "$at(25,14470,14559)"} true;
    assert {:msg "assert_failed(25,14470,14559): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t5);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:184:9+87
    assume {:print "$at(25,14568,14655)"} true;
    assert {:msg "assert_failed(25,14568,14655): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1));

    // assert Not(Not(DiemAccount::$exists_at[@137]($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1));

    // assert Not(Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1));

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<XUS::XUS>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))));

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)));

    // assert Not(Not(Diem::spec_is_currency[@143]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143);

    // assert Not(AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1));

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<XUS::XUS>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@137]($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t7);

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(Not(Diem::spec_is_currency[@143]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<XUS::XUS>($t2, VASP::spec_parent_address[@139, @140]($t7)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<XUS::XUS>>($t7))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t7))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(AccountFreezing::spec_account_is_frozen[@144]($t7)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)));

    // assert Implies(Neq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t5), Sub(DiemAccount::$balance[@136]<XUS::XUS>($t5), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:162:9+159
    assume {:print "$at(25,13473,13632)"} true;
    assert {:msg "assert_failed(25,13473,13632): post-condition does not hold"}
      (!$IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t5), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t5) - $t2)));

    // assert Implies(Neq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XUS::XUS>(Signer::spec_address_of($t1)), Add(DiemAccount::$balance[@136]<XUS::XUS>(Signer::spec_address_of[]($t1)), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:165:9+149
    assume {:print "$at(25,13641,13790)"} true;
    assert {:msg "assert_failed(25,13641,13790): post-condition does not hold"}
      (!$IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1)), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2)));

    // assert Implies(Eq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XUS::XUS>(Signer::spec_address_of($t1)), DiemAccount::$balance[@136]<XUS::XUS>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:168:9+140
    assume {:print "$at(25,13799,13939)"} true;
    assert {:msg "assert_failed(25,13799,13939): post-condition does not hold"}
      ($IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $1_Signer_spec_address_of($t1)), $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t10, $t9), $t13, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10), $t12, $t13); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t10, $t9), $t13, $t12)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assume {:print "$at(25,12696,12830)"} true;
    assert {:msg "assert_failed(25,12696,12830): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10), $t12, $t13); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:133:5+1
    assume {:print "$at(25,12429,12430)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>($t5)), Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of[]($t1)))), Not(DiemAccount::$exists_at[@137]($t5))), DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5)), Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of[]($t1)))), Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1)))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<XUS::XUS>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), Not(DiemTimestamp::$is_operating[@141]())), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]())))), Not(Diem::spec_is_currency[@143]<XUS::XUS>())), AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1))), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<XUS::XUS>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@137]($t7))), Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>($t7))), Not(DiemTimestamp::$is_operating[@141]())), Not(Diem::spec_is_currency[@143]<XUS::XUS>())), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<XUS::XUS>($t2, VASP::spec_parent_address[@139, @140]($t7)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<XUS::XUS>>($t7))), $t2)), Not(DiemTimestamp::$is_operating[@141]())), AccountFreezing::spec_account_is_frozen[@144]($t7)), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assume {:print "$at(25,12696,12830)"} true;
    assert {:msg "assert_failed(25,12696,12830): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t5) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5)) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1))) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1))) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t7)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) || ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t7))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>($t5)), Eq(5, $t17)), And(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of[]($t1))), Eq(7, $t17))), And(Not(DiemAccount::$exists_at[@137]($t5)), Eq(5, $t17))), And(DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5), Eq(1, $t17))), And(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>(Signer::spec_address_of[]($t1))), Eq(7, $t17))), And(Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1))), Eq(5, $t17))), And(Eq<u64>($t2, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<XUS::XUS>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency[@143]<XUS::XUS>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1)), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<XUS::XUS>(Signer::spec_address_of[]($t1)), $t2), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at[@137]($t7)), Eq(5, $t17))), And(Not(exists[@136]<DiemAccount::Balance<XUS::XUS>>($t7)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(Not(Diem::spec_is_currency[@143]<XUS::XUS>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<XUS::XUS>($t2, VASP::spec_parent_address[@139, @140]($t7))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<XUS::XUS>>($t7))), $t2), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen[@144]($t7), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XUS::XUS>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XUS::XUS>(global[@138]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]()))), Eq(1, $t17))), Eq(5, $t17)), Eq(1, $t17)), Eq(7, $t17)), Eq(8, $t17)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assert {:msg "assert_failed(25,12696,12830): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t5) && $IsEqual'num'(5, $t17)) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5) && $IsEqual'num'(5, $t17))) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t7) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#143) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#136, $t7))) < $t2) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))) && $IsEqual'num'(1, $t17))) || $IsEqual'num'(5, $t17)) || $IsEqual'num'(1, $t17)) || $IsEqual'num'(7, $t17)) || $IsEqual'num'(8, $t17));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun PaymentScripts::peer_to_peer_by_signers [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
procedure {:timeLimit 40} $1_PaymentScripts_peer_to_peer_by_signers$verify_instantiated_1(_$t0: $signer, _$t1: $signer, _$t2: int, _$t3: Vec (int)) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t4: $1_DiemAccount_WithdrawCapability;
    var $t5: int;
    var $t6: $1_DiemAccount_WithdrawCapability;
    var $t7: int;
    var $t8: int;
    var $t9: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t10: $1_DiemAccount_ReceivedPaymentEvent;
    var $t11: int;
    var $t12: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t13: $1_DiemAccount_SentPaymentEvent;
    var $t14: int;
    var $t15: $1_DiemAccount_WithdrawCapability;
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t21: $1_DiemAccount_ReceivedPaymentEvent;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t24: $1_DiemAccount_SentPaymentEvent;
    var $t25: bool;
    var $t26: $1_DiemAccount_ReceivedPaymentEvent;
    var $t27: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t28: $1_DiemAccount_SentPaymentEvent;
    var $t29: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t30: int;
    var $t31: bool;
    var $t0: $signer;
    var $t1: $signer;
    var $t2: int;
    var $t3: Vec (int);
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'': $1_DiemAccount_Balance'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#137: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_VASP_ChildVASP_$memory#139: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#140: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#144: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#145: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DiemAccount_DiemAccount_$memory#146: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#147: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#148: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#149: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(25,11991,12430)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'signer'($t1) && $1_Signer_is_txn_signer($t1) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t1));

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume $IsValid'vec'u8''($t3);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+439
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t5, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:156:9+55
    assume {:print "$at(25,13120,13175)"} true;
    assume ($t5 == $1_Signer_spec_address_of($t0));

    // assume Identical($t6, DiemAccount::spec_get_withdraw_cap($t5)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:157:9+57
    assume {:print "$at(25,13184,13241)"} true;
    assume ($t6 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t5));

    // assume Identical($t7, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t7 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t8, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t8 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t9, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t9 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))));

    // assume Identical($t10, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t8, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t10 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t8, $t3));

    // assume Identical($t11, select DiemAccount::WithdrawCapability.account_address($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t11 == $account_address#$1_DiemAccount_WithdrawCapability($t6));

    // assume Identical($t12, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t11))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t12 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t11)));

    // assume Identical($t13, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), Signer::spec_address_of($t1), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t13 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_Signer_spec_address_of($t1), $t3));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @141 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @143 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @142 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @138 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // @139 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#139 := $1_VASP_ChildVASP_$memory;

    // @140 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#140 := $1_VASP_ParentVASP_$memory;

    // @144 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#144 := $1_AccountFreezing_FreezingBit_$memory;

    // @137 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#137 := $1_DiemAccount_DiemAccount_$memory;

    // @145 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#145 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @136 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$at(25,11991,11992)"} true;
    assume {:print "$track_local(42,0,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:122:5+1
    assume {:print "$track_local(42,0,3):", $t3} $t3 == $t3;

    // assume Identical($t14, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t14 == $1_Signer_spec_address_of($t0));

    // $t15 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume {:print "$at(25,12185,12233)"} true;

    // assume Identical($t16, Or(Not(DiemAccount::$exists_at($t14)), DiemAccount::spec_holds_delegated_withdraw_capability($t14))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume ($t16 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t14) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t14)));

    // if ($t16) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    if ($t16) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t14)), Eq(5, $t17)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t14), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t14) && $IsEqual'num'(5, $t17)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t14) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume {:print "$at(25,12185,12233)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
L3:

    // @146 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    $1_DiemAccount_DiemAccount_$memory#146 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t14, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t14);
    }

    // assume WellFormed($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t15);

    // assume exists<DiemAccount::DiemAccount>($t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t14);

    // assume Eq<DiemAccount::WithdrawCapability>($t15, DiemAccount::spec_get_withdraw_cap[@146]($t14)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t15, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#146, $t14));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t14), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@146]<DiemAccount::DiemAccount>($t14), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t14), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#146, $t14), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t15), $t14) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $t14);

    // $t15 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:36+48

    // trace_local[payer_withdrawal_cap]($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:128:13+20
    assume {:print "$track_local(42,0,4):", $t15} $t15 == $t15;

    // assume Identical($t18, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t18 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t19, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t19 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t20, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t20 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))));

    // assume Identical($t21, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t19, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t21 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t19, $t3));

    // assume Identical($t22, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t22 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume Identical($t23, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t22))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t23 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t22)));

    // assume Identical($t24, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), Signer::spec_address_of($t1), $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t24 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $1_Signer_spec_address_of($t1), $t3));

    // opaque begin: DiemAccount::pay_by_signers<XDX::XDX>($t15, $t1, $t2, $t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume {:print "$at(25,12243,12351)"} true;

    // assume Identical($t25, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of($t1))), Not(DiemAccount::$exists_at(Signer::spec_address_of($t1)))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t2, VASP::spec_parent_address(Signer::spec_address_of($t1)))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XDX::XDX>())), AccountFreezing::spec_account_is_frozen(Signer::spec_address_of($t1))), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1)), Gt(Add(DiemAccount::$balance<XDX::XDX>(Signer::spec_address_of($t1)), $t2), MaxU64()))), Not(DiemAccount::$exists_at($t18))), Not(exists<DiemAccount::Balance<XDX::XDX>>($t18))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XDX::XDX>())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t2, VASP::spec_parent_address($t18)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t18))), $t2)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t18)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), Not(DiemTimestamp::$is_operating()))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t25 == ((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $1_Signer_spec_address_of($t1))) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t18)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) || ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t18))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t18)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))));

    // if ($t25) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    if ($t25) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of($t1))), Eq(7, $t17)), And(Not(DiemAccount::$exists_at(Signer::spec_address_of($t1))), Eq(5, $t17))), And(Eq<u64>($t2, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t2, VASP::spec_parent_address(Signer::spec_address_of($t1))))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1)))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1), false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen(Signer::spec_address_of($t1)), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t15), Signer::spec_address_of($t1)), Gt(Add(DiemAccount::$balance<XDX::XDX>(Signer::spec_address_of($t1)), $t2), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at($t18)), Eq(5, $t17))), And(Not(exists<DiemAccount::Balance<XDX::XDX>>($t18)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t2, VASP::spec_parent_address($t18))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t18))), $t2), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen($t18), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), $t2), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t18, Signer::spec_address_of($t1), true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t18)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t15), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t18) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t18) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t18))) < $t2) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t18) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t18))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume {:print "$at(25,12243,12351)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
L5:

    // @147 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $1_DiemAccount_DiemAccount_$memory#147 := $1_DiemAccount_DiemAccount_$memory;

    // @148 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#148 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // modifies global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));
    }

    // modifies global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1), $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1));
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15), $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1), $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1));
    }

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(select DiemAccount::WithdrawCapability.account_address($t15))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15)), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15)));
    }

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address(Signer::spec_address_of($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_Signer_spec_address_of($t1)));
    }

    // assume DiemAccount::$exists_at(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume DiemAccount::$exists_at(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1));

    // assume exists<DiemAccount::Balance<XDX::XDX>>(select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // assume exists<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1));

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.withdraw_capability(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.sent_events(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15))), select DiemAccount::DiemAccount.received_events(global[@147]<DiemAccount::DiemAccount>(select DiemAccount::WithdrawCapability.account_address($t15)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t15))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $account_address#$1_DiemAccount_WithdrawCapability($t15))));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.sent_events(global[@147]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $1_Signer_spec_address_of($t1))));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>(Signer::spec_address_of($t1))), select DiemAccount::DiemAccount.received_events(global[@147]<DiemAccount::DiemAccount>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $1_Signer_spec_address_of($t1))), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#147, $1_Signer_spec_address_of($t1))));

    // assume Implies(Eq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t18), DiemAccount::$balance[@148]<XDX::XDX>($t18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t18), $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#148, $t18)));

    // assume Implies(Neq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t18), Sub(DiemAccount::$balance[@148]<XDX::XDX>($t18), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (!$IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t18), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#148, $t18) - $t2)));

    // assume Implies(Neq<address>($t18, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XDX::XDX>(Signer::spec_address_of($t1)), Add(DiemAccount::$balance[@148]<XDX::XDX>(Signer::spec_address_of[]($t1)), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume (!$IsEqual'address'($t18, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1)), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#148, $1_Signer_spec_address_of($t1)) + $t2)));

    // assume Identical($t26, $t21) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t26 == $t21);

    // assume Identical($t27, $t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t27 == $t20);

    // emit_event($t26, $t27) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t27, $t26);

    // assume Identical($t28, $t24) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t28 == $t24);

    // assume Identical($t29, $t23) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    assume ($t29 == $t23);

    // emit_event($t28, $t29) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t29, $t28);

    // opaque end: DiemAccount::pay_by_signers<XDX::XDX>($t15, $t1, $t2, $t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:129:9+108

    // assume Identical($t30, select DiemAccount::WithdrawCapability.account_address($t15)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t30 == $account_address#$1_DiemAccount_WithdrawCapability($t15));

    // opaque begin: DiemAccount::restore_withdraw_capability($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume {:print "$at(25,12361,12423)"} true;

    // assume Identical($t31, Or(Not(DiemAccount::$exists_at($t30)), Not(DiemAccount::$delegated_withdraw_capability($t30)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume ($t31 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t30)));

    // if ($t31) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    if ($t31) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t30)), Eq(5, $t17)), And(Not(DiemAccount::$delegated_withdraw_capability($t30)), Eq(1, $t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(5, $t17)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t30) && $IsEqual'num'(1, $t17)));

    // trace_abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume {:print "$at(25,12361,12423)"} true;
    assume {:print "$track_abort(42,0):", $t17} $t17 == $t17;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
L7:

    // @149 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    $1_DiemAccount_DiemAccount_$memory#149 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t30) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t30, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t30);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t30), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@149]<DiemAccount::DiemAccount>($t30), Option::spec_some<DiemAccount::WithdrawCapability>($t15))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t30), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#149, $t30), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t15)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t30) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t30);

    // opaque end: DiemAccount::restore_withdraw_capability($t15) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:132:9+62

    // label L1 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:133:5+1
    assume {:print "$at(25,12429,12430)"} true;
L1:

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>($t5))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:183:9+89
    assume {:print "$at(25,14470,14559)"} true;
    assert {:msg "assert_failed(25,14470,14559): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t5);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:184:9+87
    assume {:print "$at(25,14568,14655)"} true;
    assert {:msg "assert_failed(25,14568,14655): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1));

    // assert Not(Not(DiemAccount::$exists_at[@137]($t5))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1));

    // assert Not(Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1));

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<XDX::XDX>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))));

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)));

    // assert Not(Not(Diem::spec_is_currency[@143]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143);

    // assert Not(AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1))) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1));

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<XDX::XDX>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@137]($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7);

    // assert Not(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>($t7))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t7);

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(Not(Diem::spec_is_currency[@143]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<XDX::XDX>($t2, VASP::spec_parent_address[@139, @140]($t7)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<XDX::XDX>>($t7))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t7))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@141]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141);

    // assert Not(AccountFreezing::spec_account_is_frozen[@144]($t7)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)));

    // assert Implies(Neq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t5), Sub(DiemAccount::$balance[@136]<XDX::XDX>($t5), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:162:9+159
    assume {:print "$at(25,13473,13632)"} true;
    assert {:msg "assert_failed(25,13473,13632): post-condition does not hold"}
      (!$IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t5), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t5) - $t2)));

    // assert Implies(Neq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XDX::XDX>(Signer::spec_address_of($t1)), Add(DiemAccount::$balance[@136]<XDX::XDX>(Signer::spec_address_of[]($t1)), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:165:9+149
    assume {:print "$at(25,13641,13790)"} true;
    assert {:msg "assert_failed(25,13641,13790): post-condition does not hold"}
      (!$IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1)), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2)));

    // assert Implies(Eq<address>($t5, Signer::spec_address_of($t1)), Eq<u64>(DiemAccount::$balance<XDX::XDX>(Signer::spec_address_of($t1)), DiemAccount::$balance[@136]<XDX::XDX>(Signer::spec_address_of[]($t1)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:168:9+140
    assume {:print "$at(25,13799,13939)"} true;
    assert {:msg "assert_failed(25,13799,13939): post-condition does not hold"}
      ($IsEqual'address'($t5, $1_Signer_spec_address_of($t1)) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $1_Signer_spec_address_of($t1)), $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1))));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t10, $t9)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t10, $t9), $t13, $t12)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10), $t12, $t13); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t10, $t9), $t13, $t12)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assume {:print "$at(25,12696,12830)"} true;
    assert {:msg "assert_failed(25,12696,12830): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t9, $t10), $t12, $t13); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:133:5+1
    assume {:print "$at(25,12429,12430)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>($t5)), Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of[]($t1)))), Not(DiemAccount::$exists_at[@137]($t5))), DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5)), Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of[]($t1)))), Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1)))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<XDX::XDX>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), Not(DiemTimestamp::$is_operating[@141]())), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]())))), Not(Diem::spec_is_currency[@143]<XDX::XDX>())), AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1))), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<XDX::XDX>(Signer::spec_address_of[]($t1)), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@137]($t7))), Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>($t7))), Not(DiemTimestamp::$is_operating[@141]())), Not(Diem::spec_is_currency[@143]<XDX::XDX>())), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<XDX::XDX>($t2, VASP::spec_parent_address[@139, @140]($t7)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<XDX::XDX>>($t7))), $t2)), Not(DiemTimestamp::$is_operating[@141]())), AccountFreezing::spec_account_is_frozen[@144]($t7)), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))))))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]())))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assume {:print "$at(25,12696,12830)"} true;
    assert {:msg "assert_failed(25,12696,12830): abort not covered by any of the `aborts_if` clauses"}
      ((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t5) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5)) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1))) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1))) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t7)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) || ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t7))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>($t5)), Eq(5, $t17)), And(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of[]($t1))), Eq(7, $t17))), And(Not(DiemAccount::$exists_at[@137]($t5)), Eq(5, $t17))), And(DiemAccount::spec_holds_delegated_withdraw_capability[@137]($t5), Eq(1, $t17))), And(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>(Signer::spec_address_of[]($t1))), Eq(7, $t17))), And(Not(DiemAccount::$exists_at[@137](Signer::spec_address_of[]($t1))), Eq(5, $t17))), And(Eq<u64>($t2, 0), Eq(7, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(AccountLimits::spec_update_deposit_limits[@141, @142, @138]<XDX::XDX>($t2, VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), Not(exists[@142]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), $t2), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1)))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1), false), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140](Signer::spec_address_of[]($t1))))), Not(DiemTimestamp::$is_operating[@141]()))), Eq(1, $t17))), And(Not(Diem::spec_is_currency[@143]<XDX::XDX>()), Eq(5, $t17))), And(AccountFreezing::spec_account_is_frozen[@144](Signer::spec_address_of[]($t1)), Eq(1, $t17))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t6), Signer::spec_address_of[]($t1)), Gt(Add(DiemAccount::$balance[@136]<XDX::XDX>(Signer::spec_address_of[]($t1)), $t2), MaxU64())), Eq(8, $t17))), And(Not(DiemAccount::$exists_at[@137]($t7)), Eq(5, $t17))), And(Not(exists[@136]<DiemAccount::Balance<XDX::XDX>>($t7)), Eq(5, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(Not(Diem::spec_is_currency[@143]<XDX::XDX>()), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Or(Not(DiemAccount::spec_has_account_operations_cap[@145]()), Not(AccountLimits::spec_update_withdrawal_limits[@141, @142, @138]<XDX::XDX>($t2, VASP::spec_parent_address[@139, @140]($t7))))), Eq(8, $t17))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@136]<DiemAccount::Balance<XDX::XDX>>($t7))), $t2), Eq(8, $t17))), And(Not(DiemTimestamp::$is_operating[@141]()), Eq(1, $t17))), And(AccountFreezing::spec_account_is_frozen[@144]($t7), Eq(1, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), Not(exists[@142]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))))), Eq(5, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@141, @142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), $t2), 18446744073709551615))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Gt(Add(select AccountLimits::Window.window_start(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7))))), MaxU64()))), Eq(8, $t17))), And(And(DiemAccount::spec_should_track_limits_for_account[@138, @139, @140]<XDX::XDX>($t7, Signer::spec_address_of[]($t1), true), And(Not(AccountLimits::spec_window_unrestricted[@142]<XDX::XDX>(global[@138]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@139, @140]($t7)))), Not(DiemTimestamp::$is_operating[@141]()))), Eq(1, $t17))), Eq(5, $t17)), Eq(1, $t17)), Eq(7, $t17)), Eq(8, $t17)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    assert {:msg "assert_failed(25,12696,12830): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      (((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t5) && $IsEqual'num'(5, $t17)) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t5) && $IsEqual'num'(5, $t17))) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#137, $t5) && $IsEqual'num'(1, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(7, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(5, $t17))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1))))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1), false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $1_Signer_spec_address_of($t1)))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143) && $IsEqual'num'(5, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $1_Signer_spec_address_of($t1)) && $IsEqual'num'(1, $t17))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t6), $1_Signer_spec_address_of($t1)) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $1_Signer_spec_address_of($t1)) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t17))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#137, $t7) && $IsEqual'num'(5, $t17))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t7) && $IsEqual'num'(5, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#143) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#145) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) && $IsEqual'num'(8, $t17))) || (($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#136, $t7))) < $t2) && $IsEqual'num'(8, $t17))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141) && $IsEqual'num'(1, $t17))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#144, $t7) && $IsEqual'num'(1, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) && $IsEqual'num'(5, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))))) > $MAX_U64))) && $IsEqual'num'(8, $t17))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7, $1_Signer_spec_address_of($t1), true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#142, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#138, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#139, $1_VASP_ParentVASP_$memory#140, $t7))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#141))) && $IsEqual'num'(1, $t17))) || $IsEqual'num'(5, $t17)) || $IsEqual'num'(1, $t17)) || $IsEqual'num'(7, $t17)) || $IsEqual'num'(8, $t17));

    // abort($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:143:5+134
    $abort_code := $t17;
    $abort_flag := true;
    return;

}

// fun PaymentScripts::peer_to_peer_with_metadata [verification] at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
procedure {:timeLimit 40} $1_PaymentScripts_peer_to_peer_with_metadata$verify(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int)) returns ()
{
    // declare local variables
    var $t5: $1_DiemAccount_WithdrawCapability;
    var $t6: int;
    var $t7: $1_DiemAccount_WithdrawCapability;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t11: $1_DiemAccount_ReceivedPaymentEvent;
    var $t12: int;
    var $t13: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t14: $1_DiemAccount_SentPaymentEvent;
    var $t15: $1_FixedPoint32_FixedPoint32;
    var $t16: int;
    var $t17: $1_DiemAccount_WithdrawCapability;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t24: $1_DiemAccount_ReceivedPaymentEvent;
    var $t25: int;
    var $t26: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t27: $1_DiemAccount_SentPaymentEvent;
    var $t28: $1_FixedPoint32_FixedPoint32;
    var $t29: bool;
    var $t30: $1_DiemAccount_ReceivedPaymentEvent;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t32: $1_DiemAccount_SentPaymentEvent;
    var $t33: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t34: int;
    var $t35: bool;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $temp_0'$1_AccountLimits_Window'#0'': $1_AccountLimits_Window'#0';
    var $temp_0'$1_DiemAccount_Balance'#0'': $1_DiemAccount_Balance'#0';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'#0'_$memory#120: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#121: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'#0'_$memory#122: $Memory $1_AccountLimits_Window'#0';
    var $1_VASP_ChildVASP_$memory#123: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#124: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'#0'_$memory#126: $Memory $1_AccountLimits_LimitsDefinition'#0';
    var $1_Diem_CurrencyInfo'#0'_$memory#127: $Memory $1_Diem_CurrencyInfo'#0';
    var $1_AccountFreezing_FreezingBit_$memory#128: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#129: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DualAttestation_Limit_$memory#130: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#131: $Memory $1_DualAttestation_Credential;
    var $1_DiemAccount_DiemAccount_$memory#132: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#133: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'#0'_$memory#134: $Memory $1_DiemAccount_Balance'#0';
    var $1_DiemAccount_DiemAccount_$memory#135: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(25,6582,7077)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<#0>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<#0>>(mint_cap_owner1), exists<Diem::MintCapability<#0>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'#0'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<#0>(addr3): Diem::$is_SCS_currency<#0>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'#0'($1_Diem_MintCapability'#0'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<#0>>(addr): Diem::spec_is_currency<#0>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'#0'_$memory, addr))  ==> ($1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(window_addr): exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<#0>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'#0'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<#0>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'#0'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'vec'u8''($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<#0>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'#0'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'#0''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'#0'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<#0>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'#0'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'#0''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'#0'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'#0'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'#0''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<#0>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'#0'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'#0''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:156:9+55
    assume {:print "$at(25,13120,13175)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, DiemAccount::spec_get_withdraw_cap($t6)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:157:9+57
    assume {:print "$at(25,13184,13241)"} true;
    assume ($t7 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t6));

    // assume Identical($t8, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t8 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t9, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t9 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t10, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t10 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t11, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t9, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t11 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t9, $t3));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t13, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t13 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)));

    // assume Identical($t14, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t14 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t3));

    // assume Identical($t15, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t15 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @125 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @127 := save_mem(Diem::CurrencyInfo<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'#0'_$memory#127 := $1_Diem_CurrencyInfo'#0'_$memory;

    // @126 := save_mem(AccountLimits::LimitsDefinition<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'#0'_$memory#126 := $1_AccountLimits_LimitsDefinition'#0'_$memory;

    // @122 := save_mem(AccountLimits::Window<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'#0'_$memory#122 := $1_AccountLimits_Window'#0'_$memory;

    // @123 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#123 := $1_VASP_ChildVASP_$memory;

    // @124 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#124 := $1_VASP_ParentVASP_$memory;

    // @131 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Credential_$memory#131 := $1_DualAttestation_Credential_$memory;

    // @130 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Limit_$memory#130 := $1_DualAttestation_Limit_$memory;

    // @128 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#128 := $1_AccountFreezing_FreezingBit_$memory;

    // @121 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#121 := $1_DiemAccount_DiemAccount_$memory;

    // @129 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#129 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @120 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'#0'_$memory#120 := $1_DiemAccount_Balance'#0'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$at(25,6582,6583)"} true;
    assume {:print "$track_local(42,1,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,3):", $t3} $t3 == $t3;

    // trace_local[metadata_signature]($t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,4):", $t4} $t4 == $t4;

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // $t17 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume {:print "$at(25,6819,6867)"} true;

    // assume Identical($t18, Or(Not(DiemAccount::$exists_at($t16)), DiemAccount::spec_holds_delegated_withdraw_capability($t16))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume ($t18 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t16)));

    // if ($t18) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    if ($t18) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t16)), Eq(5, $t19)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t16), Eq(1, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16) && $IsEqual'num'(5, $t19)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t16) && $IsEqual'num'(1, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume {:print "$at(25,6819,6867)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
L3:

    // @132 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    $1_DiemAccount_DiemAccount_$memory#132 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t16, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t16);
    }

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t17);

    // assume exists<DiemAccount::DiemAccount>($t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume Eq<DiemAccount::WithdrawCapability>($t17, DiemAccount::spec_get_withdraw_cap[@132]($t16)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t17, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#132, $t16));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t16), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@132]<DiemAccount::DiemAccount>($t16), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t16), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#132, $t16), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t16);

    // $t17 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48

    // trace_local[payer_withdrawal_cap]($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:13+20
    assume {:print "$track_local(42,1,5):", $t17} $t17 == $t17;

    // assume Identical($t20, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:832:9+32
    assume {:print "$at(12,36976,37008)"} true;
    assume ($t20 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t21, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t21 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t22, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t22 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t23, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t23 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t24, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t22, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t24 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t22, $t3));

    // assume Identical($t25, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t25 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t26, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t26 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)));

    // assume Identical($t27, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<#0>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t27 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'#0'($1_Diem_CurrencyInfo'#0'_$memory), $t1, $t3));

    // assume Identical($t28, Diem::spec_xdx_exchange_rate<#0>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t28 == $1_Diem_spec_xdx_exchange_rate'#0'($1_Diem_CurrencyInfo'#0'_$memory));

    // opaque begin: DiemAccount::pay_from<#0>($t17, $t1, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume {:print "$at(25,6877,6998)"} true;

    // assume Identical($t29, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<#0>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t2, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<#0>())), AccountFreezing::spec_account_is_frozen($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t1), Gt(Add(DiemAccount::$balance<#0>($t1), $t2), MaxU64()))), Not(DiemAccount::$exists_at($t21))), Not(exists<DiemAccount::Balance<#0>>($t21))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<#0>())), And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t2, VASP::spec_parent_address($t21)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t21))), $t2)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t21)), And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21))))))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), Not(DiemTimestamp::$is_operating())))), And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published()))), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<#0>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t2, $t28), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid($t20, $t1, $t4, $t3, $t2)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t29 == (((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t21)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t21))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t28) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t20, $t1, $t4, $t3, $t2))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))));

    // if ($t29) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    if ($t29) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<#0>>($t1)), Eq(7, $t19)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t19))), And(Eq<u64>($t2, 0), Eq(7, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(AccountLimits::spec_update_deposit_limits<#0>($t2, VASP::spec_parent_address($t1)))), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t19))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t19))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t19))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t1), Gt(Add(DiemAccount::$balance<#0>($t1), $t2), MaxU64())), Eq(8, $t19))), And(Not(DiemAccount::$exists_at($t21)), Eq(5, $t19))), And(Not(exists<DiemAccount::Balance<#0>>($t21)), Eq(5, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(Not(Diem::spec_is_currency<#0>()), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<#0>($t2, VASP::spec_parent_address($t21))))), Eq(8, $t19))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<#0>>($t21))), $t2), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(AccountFreezing::spec_account_is_frozen($t21), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), Not(exists<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), Not(exists<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), $t2), 18446744073709551615))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<#0>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<#0>(global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t21)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<#0>())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t2, $t28), 18446744073709551615)), Eq(8, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid($t20, $t1, $t4, $t3, $t2))), Eq(7, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<#0>($t20, $t1, $t2)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))), Eq(5, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1) && $IsEqual'num'(7, $t19)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t19))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t19))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21) && $IsEqual'num'(5, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t21) && $IsEqual'num'(5, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $1_AccountLimits_Window'#0'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) && $IsEqual'num'(8, $t19))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory, $t21))) < $t2) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory, $ResourceValue($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t28) > 18446744073709551615)) && $IsEqual'num'(8, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t20, $t1, $t4, $t3, $t2)) && $IsEqual'num'(7, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume {:print "$at(25,6877,6998)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
L5:

    // @133 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $1_DiemAccount_DiemAccount_$memory#133 := $1_DiemAccount_DiemAccount_$memory;

    // @134 := save_mem(DiemAccount::Balance<#0>) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $1_DiemAccount_Balance'#0'_$memory#134 := $1_DiemAccount_Balance'#0'_$memory;

    // modifies global<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t20, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t20);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<DiemAccount::Balance<#0>>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t20, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t20);
    }

    // modifies global<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'#0'';
        $1_DiemAccount_Balance'#0'_$memory := $ResourceUpdate($1_DiemAccount_Balance'#0'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'#0'');
    } else {
        $1_DiemAccount_Balance'#0'_$memory := $ResourceRemove($1_DiemAccount_Balance'#0'_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t20)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t20), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t20));
    }

    // modifies global<AccountLimits::Window<#0>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'#0'';
        $1_AccountLimits_Window'#0'_$memory := $ResourceUpdate($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'#0'');
    } else {
        $1_AccountLimits_Window'#0'_$memory := $ResourceRemove($1_AccountLimits_Window'#0'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume DiemAccount::$exists_at($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<#0>>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t20);

    // assume exists<DiemAccount::Balance<#0>>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $ResourceExists($1_DiemAccount_Balance'#0'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.withdraw_capability(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.sent_events(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.received_events(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@133]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@133]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t1)));

    // assume Implies(Eq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<#0>($t21), DiemAccount::$balance[@134]<#0>($t21))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t21), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#134, $t21)));

    // assume Implies(Neq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<#0>($t21), Sub(DiemAccount::$balance[@134]<#0>($t21), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume (!$IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t21), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#134, $t21) - $t2)));

    // assume Implies(Neq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@134]<#0>($t1), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume (!$IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#134, $t1) + $t2)));

    // assume Identical($t30, $t24) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t30 == $t24);

    // assume Identical($t31, $t23) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t31 == $t23);

    // emit_event($t30, $t31) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t31, $t30);

    // assume Identical($t32, $t27) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t32 == $t27);

    // assume Identical($t33, $t26) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t33 == $t26);

    // emit_event($t32, $t33) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t33, $t32);

    // opaque end: DiemAccount::pay_from<#0>($t17, $t1, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121

    // assume Identical($t34, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t34 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // opaque begin: DiemAccount::restore_withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume {:print "$at(25,7008,7070)"} true;

    // assume Identical($t35, Or(Not(DiemAccount::$exists_at($t34)), Not(DiemAccount::$delegated_withdraw_capability($t34)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume ($t35 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t34) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t34)));

    // if ($t35) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    if ($t35) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t34)), Eq(5, $t19)), And(Not(DiemAccount::$delegated_withdraw_capability($t34)), Eq(1, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t34) && $IsEqual'num'(5, $t19)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t34) && $IsEqual'num'(1, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume {:print "$at(25,7008,7070)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
L7:

    // @135 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    $1_DiemAccount_DiemAccount_$memory#135 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t34) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t34, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t34);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t34), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@135]<DiemAccount::DiemAccount>($t34), Option::spec_some<DiemAccount::WithdrawCapability>($t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t34), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#135, $t34), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t17)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t34) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t34);

    // opaque end: DiemAccount::restore_withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62

    // label L1 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:75:5+1
    assume {:print "$at(25,7076,7077)"} true;
L1:

    // assert Not(Not(exists[@120]<DiemAccount::Balance<#0>>($t6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:183:9+89
    assume {:print "$at(25,14470,14559)"} true;
    assert {:msg "assert_failed(25,14470,14559): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t6);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:184:9+87
    assume {:print "$at(25,14568,14655)"} true;
    assert {:msg "assert_failed(25,14568,14655): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@121]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<#0>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@121]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<#0>($t2, VASP::spec_parent_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $1_AccountLimits_Window'#0'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Not(Not(Diem::spec_is_currency[@127]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127);

    // assert Not(AccountFreezing::spec_account_is_frozen[@128]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1);

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<#0>($t1), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#120, $t1) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@121]($t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<#0>>($t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t8);

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(Not(Diem::spec_is_currency[@127]<#0>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<#0>($t2, VASP::spec_parent_address[@123, @124]($t8)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $1_AccountLimits_Window'#0'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<#0>>($t8))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#120, $t8))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(AccountFreezing::spec_account_is_frozen[@128]($t8)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]()))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:335:9+58
    assume {:print "$at(22,14695,14753)"} true;
    assert {:msg "assert_failed(22,14695,14753): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<#0>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:75:9+83
    assume {:print "$at(46,3503,3586)"} true;
    assert {:msg "assert_failed(46,3503,3586): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:418:9+114
    assume {:print "$at(22,18455,18569)"} true;
    assert {:msg "assert_failed(22,18455,18569): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+101
    assume {:print "$at(22,18578,18679)"} true;
    assert {:msg "assert_failed(22,18578,18679): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2)))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+136
    assume {:print "$at(22,18688,18824)"} true;
    assert {:msg "assert_failed(22,18688,18824): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:152:9+64
    assume {:print "$at(22,6999,7063)"} true;
    assert {:msg "assert_failed(22,6999,7063): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<#0>($t6), Sub(DiemAccount::$balance[@120]<#0>($t6), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:162:9+159
    assume {:print "$at(25,13473,13632)"} true;
    assert {:msg "assert_failed(25,13473,13632): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t6), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#120, $t6) - $t2)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<#0>($t1), Add(DiemAccount::$balance[@120]<#0>($t1), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:165:9+149
    assume {:print "$at(25,13641,13790)"} true;
    assert {:msg "assert_failed(25,13641,13790): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), ($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#120, $t1) + $t2)));

    // assert Implies(Eq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<#0>($t1), DiemAccount::$balance[@120]<#0>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:168:9+140
    assume {:print "$at(25,13799,13939)"} true;
    assert {:msg "assert_failed(25,13799,13939): post-condition does not hold"}
      ($IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory, $t1), $1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#120, $t1)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11), $t13, $t14); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assume {:print "$at(25,12436,12690)"} true;
    assert {:msg "assert_failed(25,12436,12690): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11), $t13, $t14); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:75:5+1
    assume {:print "$at(25,7076,7077)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@120]<DiemAccount::Balance<#0>>($t6)), Not(exists[@120]<DiemAccount::Balance<#0>>($t1))), Not(DiemAccount::$exists_at[@121]($t6))), DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6)), Not(exists[@120]<DiemAccount::Balance<#0>>($t1))), Not(DiemAccount::$exists_at[@121]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<#0>($t2, VASP::spec_parent_address[@123, @124]($t1))))), Not(DiemTimestamp::$is_operating[@125]())), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]())))), Not(Diem::spec_is_currency[@127]<#0>())), AccountFreezing::spec_account_is_frozen[@128]($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<#0>($t1), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@121]($t8))), Not(exists[@120]<DiemAccount::Balance<#0>>($t8))), Not(DiemTimestamp::$is_operating[@125]())), Not(Diem::spec_is_currency[@127]<#0>())), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<#0>($t2, VASP::spec_parent_address[@123, @124]($t8)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<#0>>($t8))), $t2)), Not(DiemTimestamp::$is_operating[@125]())), AccountFreezing::spec_account_is_frozen[@128]($t8)), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]())))), And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]()))), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<#0>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assume {:print "$at(25,12436,12690)"} true;
    assert {:msg "assert_failed(25,12436,12690): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t6) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6)) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $1_AccountLimits_Window'#0'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)))) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#120, $t1) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8)) || !$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t8)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $1_AccountLimits_Window'#0'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) || ($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#120, $t8))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8)) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@120]<DiemAccount::Balance<#0>>($t6)), Eq(5, $t19)), And(Not(exists[@120]<DiemAccount::Balance<#0>>($t1)), Eq(7, $t19))), And(Not(DiemAccount::$exists_at[@121]($t6)), Eq(5, $t19))), And(DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6), Eq(1, $t19))), And(Not(exists[@120]<DiemAccount::Balance<#0>>($t1)), Eq(7, $t19))), And(Not(DiemAccount::$exists_at[@121]($t1)), Eq(5, $t19))), And(Eq<u64>($t2, 0), Eq(7, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<#0>($t2, VASP::spec_parent_address[@123, @124]($t1)))), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]()))), Eq(1, $t19))), And(Not(Diem::spec_is_currency[@127]<#0>()), Eq(5, $t19))), And(AccountFreezing::spec_account_is_frozen[@128]($t1), Eq(1, $t19))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<#0>($t1), $t2), MaxU64())), Eq(8, $t19))), And(Not(DiemAccount::$exists_at[@121]($t8)), Eq(5, $t19))), And(Not(exists[@120]<DiemAccount::Balance<#0>>($t8)), Eq(5, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(Not(Diem::spec_is_currency[@127]<#0>()), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<#0>($t2, VASP::spec_parent_address[@123, @124]($t8))))), Eq(8, $t19))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<#0>>($t8))), $t2), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(AccountFreezing::spec_account_is_frozen[@128]($t8), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<#0>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<#0>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<#0>(global[@122]<AccountLimits::Window<#0>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]()))), Eq(1, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<#0>())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615)), Eq(8, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2))), Eq(7, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<#0>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(5, $t19))), Eq(5, $t19)), Eq(1, $t19)), Eq(7, $t19)), Eq(8, $t19)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assert {:msg "assert_failed(25,12436,12690): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t6) && $IsEqual'num'(5, $t19)) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t1) && $IsEqual'num'(7, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6) && $IsEqual'num'(5, $t19))) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6) && $IsEqual'num'(1, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t1) && $IsEqual'num'(7, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1) && $IsEqual'num'(5, $t19))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $1_AccountLimits_Window'#0'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125))) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127) && $IsEqual'num'(5, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1) && $IsEqual'num'(1, $t19))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'#0'($1_DiemAccount_Balance'#0'_$memory#120, $t1) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8) && $IsEqual'num'(5, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'#0'_$memory#120, $t8) && $IsEqual'num'(5, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $1_AccountLimits_Window'#0'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) && $IsEqual'num'(8, $t19))) || (($value#$1_Diem_Diem'#0'($coin#$1_DiemAccount_Balance'#0'($ResourceValue($1_DiemAccount_Balance'#0'_$memory#120, $t8))) < $t2) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $limit_address#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'#0'($1_AccountLimits_spec_window_reset'#0'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'#0'($ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'#0'($1_AccountLimits_spec_window_limits'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'#0'($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'#0'($1_AccountLimits_LimitsDefinition'#0'_$memory#126, $ResourceValue($1_AccountLimits_Window'#0'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125))) && $IsEqual'num'(1, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'#0'($1_Diem_CurrencyInfo'#0'_$memory#127)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615)) && $IsEqual'num'(8, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2)) && $IsEqual'num'(7, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'#0'($1_Diem_CurrencyInfo'#0'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(5, $t19))) || $IsEqual'num'(5, $t19)) || $IsEqual'num'(1, $t19)) || $IsEqual'num'(7, $t19)) || $IsEqual'num'(8, $t19));

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun PaymentScripts::peer_to_peer_with_metadata [verification[instantiated_0]] at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
procedure {:timeLimit 40} $1_PaymentScripts_peer_to_peer_with_metadata$verify_instantiated_0(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int)) returns ()
{
    // function instantiation <XUS::XUS>

    // declare local variables
    var $t5: $1_DiemAccount_WithdrawCapability;
    var $t6: int;
    var $t7: $1_DiemAccount_WithdrawCapability;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t11: $1_DiemAccount_ReceivedPaymentEvent;
    var $t12: int;
    var $t13: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t14: $1_DiemAccount_SentPaymentEvent;
    var $t15: $1_FixedPoint32_FixedPoint32;
    var $t16: int;
    var $t17: $1_DiemAccount_WithdrawCapability;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t24: $1_DiemAccount_ReceivedPaymentEvent;
    var $t25: int;
    var $t26: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t27: $1_DiemAccount_SentPaymentEvent;
    var $t28: $1_FixedPoint32_FixedPoint32;
    var $t29: bool;
    var $t30: $1_DiemAccount_ReceivedPaymentEvent;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t32: $1_DiemAccount_SentPaymentEvent;
    var $t33: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t34: int;
    var $t35: bool;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'': $1_AccountLimits_Window'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'': $1_DiemAccount_Balance'$1_XUS_XUS';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#121: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122: $Memory $1_AccountLimits_Window'$1_XUS_XUS';
    var $1_VASP_ChildVASP_$memory#123: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#124: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126: $Memory $1_AccountLimits_LimitsDefinition'$1_XUS_XUS';
    var $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127: $Memory $1_Diem_CurrencyInfo'$1_XUS_XUS';
    var $1_AccountFreezing_FreezingBit_$memory#128: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#129: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DualAttestation_Limit_$memory#130: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#131: $Memory $1_DualAttestation_Credential;
    var $1_DiemAccount_DiemAccount_$memory#132: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#133: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#134: $Memory $1_DiemAccount_Balance'$1_XUS_XUS';
    var $1_DiemAccount_DiemAccount_$memory#135: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(25,6582,7077)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XUS::XUS>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner1), exists<Diem::MintCapability<XUS::XUS>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XUS_XUS'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XUS::XUS>(addr3): Diem::$is_SCS_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XUS_XUS'($1_Diem_MintCapability'$1_XUS_XUS'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XUS::XUS>>(addr): Diem::spec_is_currency<XUS::XUS>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XUS_XUS'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(window_addr): exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XUS::XUS>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XUS::XUS>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:65:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XUS::XUS>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'vec'u8''($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XUS::XUS>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XUS_XUS''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XUS_XUS'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XUS::XUS>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XUS_XUS''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XUS_XUS''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XUS::XUS>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XUS_XUS''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:156:9+55
    assume {:print "$at(25,13120,13175)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, DiemAccount::spec_get_withdraw_cap($t6)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:157:9+57
    assume {:print "$at(25,13184,13241)"} true;
    assume ($t7 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t6));

    // assume Identical($t8, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t8 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t9, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t9 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t10, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t10 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t11, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t9, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t11 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t9, $t3));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t13, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t13 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)));

    // assume Identical($t14, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t14 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t1, $t3));

    // assume Identical($t15, Diem::spec_xdx_exchange_rate<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t15 == $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @125 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @127 := save_mem(Diem::CurrencyInfo<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127 := $1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory;

    // @126 := save_mem(AccountLimits::LimitsDefinition<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126 := $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory;

    // @122 := save_mem(AccountLimits::Window<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122 := $1_AccountLimits_Window'$1_XUS_XUS'_$memory;

    // @123 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#123 := $1_VASP_ChildVASP_$memory;

    // @124 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#124 := $1_VASP_ParentVASP_$memory;

    // @131 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Credential_$memory#131 := $1_DualAttestation_Credential_$memory;

    // @130 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Limit_$memory#130 := $1_DualAttestation_Limit_$memory;

    // @128 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#128 := $1_AccountFreezing_FreezingBit_$memory;

    // @121 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#121 := $1_DiemAccount_DiemAccount_$memory;

    // @129 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#129 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @120 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$at(25,6582,6583)"} true;
    assume {:print "$track_local(42,1,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,3):", $t3} $t3 == $t3;

    // trace_local[metadata_signature]($t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,4):", $t4} $t4 == $t4;

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // $t17 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume {:print "$at(25,6819,6867)"} true;

    // assume Identical($t18, Or(Not(DiemAccount::$exists_at($t16)), DiemAccount::spec_holds_delegated_withdraw_capability($t16))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume ($t18 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t16)));

    // if ($t18) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    if ($t18) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t16)), Eq(5, $t19)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t16), Eq(1, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16) && $IsEqual'num'(5, $t19)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t16) && $IsEqual'num'(1, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume {:print "$at(25,6819,6867)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
L3:

    // @132 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    $1_DiemAccount_DiemAccount_$memory#132 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t16, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t16);
    }

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t17);

    // assume exists<DiemAccount::DiemAccount>($t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume Eq<DiemAccount::WithdrawCapability>($t17, DiemAccount::spec_get_withdraw_cap[@132]($t16)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t17, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#132, $t16));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t16), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@132]<DiemAccount::DiemAccount>($t16), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t16), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#132, $t16), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t16);

    // $t17 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48

    // trace_local[payer_withdrawal_cap]($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:13+20
    assume {:print "$track_local(42,1,5):", $t17} $t17 == $t17;

    // assume Identical($t20, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:832:9+32
    assume {:print "$at(12,36976,37008)"} true;
    assume ($t20 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t21, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t21 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t22, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t22 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t23, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t23 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t24, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t22, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t24 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t22, $t3));

    // assume Identical($t25, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t25 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t26, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t26 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)));

    // assume Identical($t27, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XUS::XUS>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t27 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory), $t1, $t3));

    // assume Identical($t28, Diem::spec_xdx_exchange_rate<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t28 == $1_Diem_spec_xdx_exchange_rate'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // opaque begin: DiemAccount::pay_from<XUS::XUS>($t17, $t1, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume {:print "$at(25,6877,6998)"} true;

    // assume Identical($t29, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<XUS::XUS>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t2, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XUS::XUS>())), AccountFreezing::spec_account_is_frozen($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t1), Gt(Add(DiemAccount::$balance<XUS::XUS>($t1), $t2), MaxU64()))), Not(DiemAccount::$exists_at($t21))), Not(exists<DiemAccount::Balance<XUS::XUS>>($t21))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XUS::XUS>())), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t2, VASP::spec_parent_address($t21)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t21))), $t2)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t21)), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21))))))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), Not(DiemTimestamp::$is_operating())))), And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published()))), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<XUS::XUS>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t2, $t28), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid($t20, $t1, $t4, $t3, $t2)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t29 == (((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t1) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t21)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) || ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t21))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t28) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t20, $t1, $t4, $t3, $t2))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))));

    // if ($t29) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    if ($t29) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<XUS::XUS>>($t1)), Eq(7, $t19)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t19))), And(Eq<u64>($t2, 0), Eq(7, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XUS::XUS>($t2, VASP::spec_parent_address($t1)))), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t19))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t19))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t19))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t1), Gt(Add(DiemAccount::$balance<XUS::XUS>($t1), $t2), MaxU64())), Eq(8, $t19))), And(Not(DiemAccount::$exists_at($t21)), Eq(5, $t19))), And(Not(exists<DiemAccount::Balance<XUS::XUS>>($t21)), Eq(5, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(Not(Diem::spec_is_currency<XUS::XUS>()), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XUS::XUS>($t2, VASP::spec_parent_address($t21))))), Eq(8, $t19))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XUS::XUS>>($t21))), $t2), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(AccountFreezing::spec_account_is_frozen($t21), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), Not(exists<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), $t2), 18446744073709551615))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XUS::XUS>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XUS::XUS>(global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t21)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<XUS::XUS>())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t2, $t28), 18446744073709551615)), Eq(8, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid($t20, $t1, $t4, $t3, $t2))), Eq(7, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XUS::XUS>($t20, $t1, $t2)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))), Eq(5, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) && $IsEqual'num'(7, $t19)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t19))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t19))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t1) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21) && $IsEqual'num'(5, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t21) && $IsEqual'num'(5, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $1_AccountLimits_Window'$1_XUS_XUS'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) && $IsEqual'num'(8, $t19))) || (($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t21))) < $t2) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t28) > 18446744073709551615)) && $IsEqual'num'(8, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t20, $t1, $t4, $t3, $t2)) && $IsEqual'num'(7, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume {:print "$at(25,6877,6998)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
L5:

    // @133 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $1_DiemAccount_DiemAccount_$memory#133 := $1_DiemAccount_DiemAccount_$memory;

    // @134 := save_mem(DiemAccount::Balance<XUS::XUS>) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $1_DiemAccount_Balance'$1_XUS_XUS'_$memory#134 := $1_DiemAccount_Balance'$1_XUS_XUS'_$memory;

    // modifies global<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t20, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t20);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t20, $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t20);
    }

    // modifies global<DiemAccount::Balance<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'';
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'$1_XUS_XUS'');
    } else {
        $1_DiemAccount_Balance'$1_XUS_XUS'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t20)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t20), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t20));
    }

    // modifies global<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'';
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'$1_XUS_XUS'');
    } else {
        $1_AccountLimits_Window'$1_XUS_XUS'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XUS_XUS'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume DiemAccount::$exists_at($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<XUS::XUS>>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t20);

    // assume exists<DiemAccount::Balance<XUS::XUS>>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.withdraw_capability(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.sent_events(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.received_events(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@133]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@133]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t1)));

    // assume Implies(Eq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t21), DiemAccount::$balance[@134]<XUS::XUS>($t21))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t21), $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#134, $t21)));

    // assume Implies(Neq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t21), Sub(DiemAccount::$balance[@134]<XUS::XUS>($t21), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume (!$IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t21), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#134, $t21) - $t2)));

    // assume Implies(Neq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t1), Add(DiemAccount::$balance[@134]<XUS::XUS>($t1), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume (!$IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#134, $t1) + $t2)));

    // assume Identical($t30, $t24) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t30 == $t24);

    // assume Identical($t31, $t23) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t31 == $t23);

    // emit_event($t30, $t31) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t31, $t30);

    // assume Identical($t32, $t27) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t32 == $t27);

    // assume Identical($t33, $t26) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t33 == $t26);

    // emit_event($t32, $t33) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t33, $t32);

    // opaque end: DiemAccount::pay_from<XUS::XUS>($t17, $t1, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121

    // assume Identical($t34, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t34 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // opaque begin: DiemAccount::restore_withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume {:print "$at(25,7008,7070)"} true;

    // assume Identical($t35, Or(Not(DiemAccount::$exists_at($t34)), Not(DiemAccount::$delegated_withdraw_capability($t34)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume ($t35 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t34) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t34)));

    // if ($t35) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    if ($t35) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t34)), Eq(5, $t19)), And(Not(DiemAccount::$delegated_withdraw_capability($t34)), Eq(1, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t34) && $IsEqual'num'(5, $t19)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t34) && $IsEqual'num'(1, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume {:print "$at(25,7008,7070)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
L7:

    // @135 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    $1_DiemAccount_DiemAccount_$memory#135 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t34) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t34, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t34);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t34), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@135]<DiemAccount::DiemAccount>($t34), Option::spec_some<DiemAccount::WithdrawCapability>($t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t34), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#135, $t34), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t17)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t34) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t34);

    // opaque end: DiemAccount::restore_withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62

    // label L1 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:75:5+1
    assume {:print "$at(25,7076,7077)"} true;
L1:

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:183:9+89
    assume {:print "$at(25,14470,14559)"} true;
    assert {:msg "assert_failed(25,14470,14559): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t6);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:184:9+87
    assume {:print "$at(25,14568,14655)"} true;
    assert {:msg "assert_failed(25,14568,14655): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@121]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@121]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<XUS::XUS>($t2, VASP::spec_parent_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Not(Not(Diem::spec_is_currency[@127]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127);

    // assert Not(AccountFreezing::spec_account_is_frozen[@128]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1);

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<XUS::XUS>($t1), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@121]($t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t8);

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(Not(Diem::spec_is_currency[@127]<XUS::XUS>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<XUS::XUS>($t2, VASP::spec_parent_address[@123, @124]($t8)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<XUS::XUS>>($t8))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t8))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(AccountFreezing::spec_account_is_frozen[@128]($t8)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]()))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:335:9+58
    assume {:print "$at(22,14695,14753)"} true;
    assert {:msg "assert_failed(22,14695,14753): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<XUS::XUS>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:75:9+83
    assume {:print "$at(46,3503,3586)"} true;
    assert {:msg "assert_failed(46,3503,3586): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:418:9+114
    assume {:print "$at(22,18455,18569)"} true;
    assert {:msg "assert_failed(22,18455,18569): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+101
    assume {:print "$at(22,18578,18679)"} true;
    assert {:msg "assert_failed(22,18578,18679): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2)))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+136
    assume {:print "$at(22,18688,18824)"} true;
    assert {:msg "assert_failed(22,18688,18824): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:152:9+64
    assume {:print "$at(22,6999,7063)"} true;
    assert {:msg "assert_failed(22,6999,7063): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t6), Sub(DiemAccount::$balance[@120]<XUS::XUS>($t6), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:162:9+159
    assume {:print "$at(25,13473,13632)"} true;
    assert {:msg "assert_failed(25,13473,13632): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t6), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t6) - $t2)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t1), Add(DiemAccount::$balance[@120]<XUS::XUS>($t1), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:165:9+149
    assume {:print "$at(25,13641,13790)"} true;
    assert {:msg "assert_failed(25,13641,13790): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), ($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1) + $t2)));

    // assert Implies(Eq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<XUS::XUS>($t1), DiemAccount::$balance[@120]<XUS::XUS>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:168:9+140
    assume {:print "$at(25,13799,13939)"} true;
    assert {:msg "assert_failed(25,13799,13939): post-condition does not hold"}
      ($IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, $t1), $1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11), $t13, $t14); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assume {:print "$at(25,12436,12690)"} true;
    assert {:msg "assert_failed(25,12436,12690): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11), $t13, $t14); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:75:5+1
    assume {:print "$at(25,7076,7077)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t6)), Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(DiemAccount::$exists_at[@121]($t6))), DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6)), Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t1))), Not(DiemAccount::$exists_at[@121]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<XUS::XUS>($t2, VASP::spec_parent_address[@123, @124]($t1))))), Not(DiemTimestamp::$is_operating[@125]())), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]())))), Not(Diem::spec_is_currency[@127]<XUS::XUS>())), AccountFreezing::spec_account_is_frozen[@128]($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<XUS::XUS>($t1), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@121]($t8))), Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t8))), Not(DiemTimestamp::$is_operating[@125]())), Not(Diem::spec_is_currency[@127]<XUS::XUS>())), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<XUS::XUS>($t2, VASP::spec_parent_address[@123, @124]($t8)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<XUS::XUS>>($t8))), $t2)), Not(DiemTimestamp::$is_operating[@125]())), AccountFreezing::spec_account_is_frozen[@128]($t8)), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]())))), And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]()))), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<XUS::XUS>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assume {:print "$at(25,12436,12690)"} true;
    assert {:msg "assert_failed(25,12436,12690): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t6) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6)) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)))) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8)) || !$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t8)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) || ($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t8))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t6)), Eq(5, $t19)), And(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t1)), Eq(7, $t19))), And(Not(DiemAccount::$exists_at[@121]($t6)), Eq(5, $t19))), And(DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6), Eq(1, $t19))), And(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t1)), Eq(7, $t19))), And(Not(DiemAccount::$exists_at[@121]($t1)), Eq(5, $t19))), And(Eq<u64>($t2, 0), Eq(7, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<XUS::XUS>($t2, VASP::spec_parent_address[@123, @124]($t1)))), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]()))), Eq(1, $t19))), And(Not(Diem::spec_is_currency[@127]<XUS::XUS>()), Eq(5, $t19))), And(AccountFreezing::spec_account_is_frozen[@128]($t1), Eq(1, $t19))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<XUS::XUS>($t1), $t2), MaxU64())), Eq(8, $t19))), And(Not(DiemAccount::$exists_at[@121]($t8)), Eq(5, $t19))), And(Not(exists[@120]<DiemAccount::Balance<XUS::XUS>>($t8)), Eq(5, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(Not(Diem::spec_is_currency[@127]<XUS::XUS>()), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<XUS::XUS>($t2, VASP::spec_parent_address[@123, @124]($t8))))), Eq(8, $t19))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<XUS::XUS>>($t8))), $t2), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(AccountFreezing::spec_account_is_frozen[@128]($t8), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<XUS::XUS>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XUS::XUS>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XUS::XUS>(global[@122]<AccountLimits::Window<XUS::XUS>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]()))), Eq(1, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<XUS::XUS>())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615)), Eq(8, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2))), Eq(7, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XUS::XUS>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(5, $t19))), Eq(5, $t19)), Eq(1, $t19)), Eq(7, $t19)), Eq(8, $t19)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assert {:msg "assert_failed(25,12436,12690): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t6) && $IsEqual'num'(5, $t19)) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1) && $IsEqual'num'(7, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6) && $IsEqual'num'(5, $t19))) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6) && $IsEqual'num'(1, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1) && $IsEqual'num'(7, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1) && $IsEqual'num'(5, $t19))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125))) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127) && $IsEqual'num'(5, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1) && $IsEqual'num'(1, $t19))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'$1_XUS_XUS'($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t1) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8) && $IsEqual'num'(5, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t8) && $IsEqual'num'(5, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) && $IsEqual'num'(8, $t19))) || (($value#$1_Diem_Diem'$1_XUS_XUS'($coin#$1_DiemAccount_Balance'$1_XUS_XUS'($ResourceValue($1_DiemAccount_Balance'$1_XUS_XUS'_$memory#120, $t8))) < $t2) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'$1_XUS_XUS'($1_AccountLimits_spec_window_reset'$1_XUS_XUS'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'$1_XUS_XUS'($ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XUS_XUS'($1_AccountLimits_spec_window_limits'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XUS_XUS'($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XUS_XUS'($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XUS_XUS'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125))) && $IsEqual'num'(1, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615)) && $IsEqual'num'(8, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2)) && $IsEqual'num'(7, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(5, $t19))) || $IsEqual'num'(5, $t19)) || $IsEqual'num'(1, $t19)) || $IsEqual'num'(7, $t19)) || $IsEqual'num'(8, $t19));

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    $abort_code := $t19;
    $abort_flag := true;
    return;

}

// fun PaymentScripts::peer_to_peer_with_metadata [verification[instantiated_1]] at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
procedure {:timeLimit 40} $1_PaymentScripts_peer_to_peer_with_metadata$verify_instantiated_1(_$t0: $signer, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: Vec (int)) returns ()
{
    // function instantiation <XDX::XDX>

    // declare local variables
    var $t5: $1_DiemAccount_WithdrawCapability;
    var $t6: int;
    var $t7: $1_DiemAccount_WithdrawCapability;
    var $t8: int;
    var $t9: int;
    var $t10: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t11: $1_DiemAccount_ReceivedPaymentEvent;
    var $t12: int;
    var $t13: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t14: $1_DiemAccount_SentPaymentEvent;
    var $t15: $1_FixedPoint32_FixedPoint32;
    var $t16: int;
    var $t17: $1_DiemAccount_WithdrawCapability;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t24: $1_DiemAccount_ReceivedPaymentEvent;
    var $t25: int;
    var $t26: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t27: $1_DiemAccount_SentPaymentEvent;
    var $t28: $1_FixedPoint32_FixedPoint32;
    var $t29: bool;
    var $t30: $1_DiemAccount_ReceivedPaymentEvent;
    var $t31: $1_Event_EventHandle'$1_DiemAccount_ReceivedPaymentEvent';
    var $t32: $1_DiemAccount_SentPaymentEvent;
    var $t33: $1_Event_EventHandle'$1_DiemAccount_SentPaymentEvent';
    var $t34: int;
    var $t35: bool;
    var $t0: $signer;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: Vec (int);
    var $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'': $1_AccountLimits_Window'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'': $1_DiemAccount_Balance'$1_XDX_XDX';
    var $temp_0'$1_DiemAccount_DiemAccount': $1_DiemAccount_DiemAccount;
    var $temp_0'$1_DiemAccount_WithdrawCapability': $1_DiemAccount_WithdrawCapability;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#121: $Memory $1_DiemAccount_DiemAccount;
    var $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122: $Memory $1_AccountLimits_Window'$1_XDX_XDX';
    var $1_VASP_ChildVASP_$memory#123: $Memory $1_VASP_ChildVASP;
    var $1_VASP_ParentVASP_$memory#124: $Memory $1_VASP_ParentVASP;
    var $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125: $Memory $1_DiemTimestamp_CurrentTimeMicroseconds;
    var $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126: $Memory $1_AccountLimits_LimitsDefinition'$1_XDX_XDX';
    var $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127: $Memory $1_Diem_CurrencyInfo'$1_XDX_XDX';
    var $1_AccountFreezing_FreezingBit_$memory#128: $Memory $1_AccountFreezing_FreezingBit;
    var $1_DiemAccount_AccountOperationsCapability_$memory#129: $Memory $1_DiemAccount_AccountOperationsCapability;
    var $1_DualAttestation_Limit_$memory#130: $Memory $1_DualAttestation_Limit;
    var $1_DualAttestation_Credential_$memory#131: $Memory $1_DualAttestation_Credential;
    var $1_DiemAccount_DiemAccount_$memory#132: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_DiemAccount_$memory#133: $Memory $1_DiemAccount_DiemAccount;
    var $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#134: $Memory $1_DiemAccount_Balance'$1_XDX_XDX';
    var $1_DiemAccount_DiemAccount_$memory#135: $Memory $1_DiemAccount_DiemAccount;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemTimestamp::CurrentTimeMicroseconds>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:182:9+72
    assume {:print "$at(25,6582,7077)"} true;
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_diem_root_role_addr(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:433:9+110
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_diem_root_role_addr($1_Roles_RoleId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), Roles::spec_has_treasury_compliance_role_addr(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Roles.move:440:9+130
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Roles_spec_has_treasury_compliance_role_addr($1_Roles_RoleId_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:282:9+102
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<SlidingNonce::SlidingNonce>(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/SlidingNonce.move:285:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_SlidingNonce_SlidingNonce_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_has_config()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemConfig.move:435:9+76
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_has_config($1_DiemConfig_Configuration_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), And(DiemConfig::spec_is_published<DiemSystem::DiemSystem>(), exists<DiemSystem::CapabilityHolder>(a550c18))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemSystem.move:584:9+165
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> ($1_DiemConfig_spec_is_published'$1_DiemSystem_DiemSystem'($1_DiemConfig_DiemConfig'$1_DiemSystem_DiemSystem'_$memory) && $ResourceExists($1_DiemSystem_CapabilityHolder_$memory, 173345816)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<RegisteredCurrencies::RegisteredCurrencies>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/RegisteredCurrencies.move:91:9+112
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_RegisteredCurrencies_RegisteredCurrencies'($1_DiemConfig_DiemConfig'$1_RegisteredCurrencies_RegisteredCurrencies'_$memory));

    // assume Implies(Diem::$is_SCS_currency<XDX::XDX>(), forall mint_cap_owner1: TypeDomain<address>(), mint_cap_owner2: TypeDomain<address>() where And(exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner1), exists<Diem::MintCapability<XDX::XDX>>(mint_cap_owner2)): Eq<address>(mint_cap_owner1, mint_cap_owner2)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1605:9+379
    assume ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) ==> (forall mint_cap_owner1: int, mint_cap_owner2: int :: $IsValid'address'(mint_cap_owner1) ==> $IsValid'address'(mint_cap_owner2) ==> (($ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner1) && $ResourceExists($1_Diem_MintCapability'$1_XDX_XDX'_$memory, mint_cap_owner2)))  ==> ($IsEqual'address'(mint_cap_owner1, mint_cap_owner2))));

    // assume forall addr3: TypeDomain<address>() where Diem::spec_has_mint_capability<XDX::XDX>(addr3): Diem::$is_SCS_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1614:9+147
    assume (forall addr3: int :: $IsValid'address'(addr3) ==> ($1_Diem_spec_has_mint_capability'$1_XDX_XDX'($1_Diem_MintCapability'$1_XDX_XDX'_$memory, addr3))  ==> ($1_Diem_$is_SCS_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall addr: TypeDomain<address>() where exists<Diem::Preburn<XDX::XDX>>(addr): Diem::spec_is_currency<XDX::XDX>() at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/Diem.move:1767:9+133
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_Diem_Preburn'$1_XDX_XDX'_$memory, addr))  ==> ($1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)));

    // assume forall window_addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(window_addr): exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(window_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:544:9+208
    assume (forall window_addr: int :: $IsValid'address'(window_addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr))  ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, window_addr)))));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::Window<XDX::XDX>>(addr): And(exists<Roles::RoleId>(addr), Or(Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 5), Eq<u64>(select Roles::RoleId.role_id(global<Roles::RoleId>(addr)), 6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:553:9+310
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, addr))  ==> (($ResourceExists($1_Roles_RoleId_$memory, addr) && ($IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 5) || $IsEqual'u64'($role_id#$1_Roles_RoleId($ResourceValue($1_Roles_RoleId_$memory, addr)), 6)))));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XUS::XUS>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:56:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XUS_XUS'($1_Diem_CurrencyInfo'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XUS::XUS>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XUS.move:61:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XUS_XUS'_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), XDX::reserve_exists()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:124:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_XDX_reserve_exists($1_XDX_Reserve_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), Diem::$is_currency<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:127:9+83
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_Diem_$is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountLimits::LimitsDefinition<XDX::XDX>>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:140:9+126
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where exists<AccountLimits::LimitsDefinition<XDX::XDX>>(addr): Eq<address>(addr, a550c18) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/XDX.move:144:9+119
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, addr))  ==> ($IsEqual'address'(addr, 173345816)));

    // assume forall child_addr: TypeDomain<address>() where VASP::$is_child(child_addr): VASP::$is_parent(select VASP::ChildVASP.parent_vasp_addr(global<VASP::ChildVASP>(child_addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/VASP.move:232:9+151
    assume (forall child_addr: int :: $IsValid'address'(child_addr) ==> ($1_VASP_$is_child($1_VASP_ChildVASP_$memory, child_addr))  ==> ($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, $parent_vasp_addr#$1_VASP_ChildVASP($ResourceValue($1_VASP_ChildVASP_$memory, child_addr)))));

    // assume Implies(DiemTimestamp::$is_operating(), TransactionFee::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/TransactionFee.move:158:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_TransactionFee_$is_initialized($1_TransactionFee_TransactionFee'$1_XUS_XUS'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DualAttestation::spec_is_published()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:539:9+78
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory));

    // assume forall addr1: TypeDomain<address>(): Implies(DualAttestation::spec_has_credential(addr1), Or(Roles::spec_has_parent_VASP_role_addr(addr1), Roles::spec_has_designated_dealer_role_addr(addr1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:564:9+209
    assume (forall addr1: int :: $IsValid'address'(addr1) ==> (($1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, addr1) ==> ($1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr1) || $1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr1)))));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemTransactionPublishingOption::DiemTransactionPublishingOption>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemTransactionPublishingOption.move:162:9+135
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'($1_DiemConfig_DiemConfig'$1_DiemTransactionPublishingOption_DiemTransactionPublishingOption'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), exists<ChainId::ChainId>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/ChainId.move:50:9+85
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_ChainId_ChainId_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:196:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:204:9+108
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), AccountFreezing::spec_account_is_not_frozen(b1e55ed)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:209:9+118
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_AccountFreezing_spec_account_is_not_frozen($1_AccountFreezing_FreezingBit_$memory, 186537453));

    // assume Implies(DiemTimestamp::$is_operating(), exists<AccountFreezing::FreezeEventsHolder>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:216:9+96
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_AccountFreezing_FreezeEventsHolder_$memory, 173345816));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::$delegated_key_rotation_capability(addr), DiemAccount::spec_holds_own_key_rotation_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2277:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_$delegated_key_rotation_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_key_rotation_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where DiemAccount::$exists_at(addr): Or(DiemAccount::spec_holds_delegated_withdraw_capability(addr), DiemAccount::spec_holds_own_withdraw_cap(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2307:9+150
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr))  ==> (($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, addr) || $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, addr))));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::AccountOperationsCapability>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2356:9+105
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, 173345816));

    // assume Implies(DiemTimestamp::$is_operating(), exists<DiemAccount::DiemWriteSetManager>(a550c18)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2359:9+97
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, 173345816));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<Roles::RoleId>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2379:9+96
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::AccountOperationsCapability>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2389:9+144
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_AccountOperationsCapability_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DiemAccount::DiemWriteSetManager>(addr), And(Eq<address>(addr, a550c18), DiemAccount::$exists_at(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2393:9+135
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DiemAccount_DiemWriteSetManager_$memory, addr) <==> ($IsEqual'address'(addr, 173345816) && $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Implies(Or(exists<DiemAccount::Balance<XUS::XUS>>(addr), exists<DiemAccount::Balance<XDX::XDX>>(addr)), Roles::spec_can_hold_balance_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2411:9+147
    assume (forall addr: int :: $IsValid'address'(addr) ==> ((($ResourceExists($1_DiemAccount_Balance'$1_XUS_XUS'_$memory, addr) || $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr)) ==> $1_Roles_spec_can_hold_balance_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(exists<DualAttestation::Credential>(addr), Or(Roles::spec_has_designated_dealer_role_addr(addr), Roles::spec_has_parent_VASP_role_addr(addr))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2420:9+234
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($ResourceExists($1_DualAttestation_Credential_$memory, addr) <==> ($1_Roles_spec_has_designated_dealer_role_addr($1_Roles_RoleId_$memory, addr) || $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr)))));

    // assume forall addr: TypeDomain<address>(): Iff(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2426:9+122
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) <==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Implies(DiemAccount::$exists_at(addr), exists<AccountFreezing::FreezingBit>(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2434:9+121
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr) ==> $ResourceExists($1_AccountFreezing_FreezingBit_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where exists<DiemAccount::Balance<XDX::XDX>>(addr): DiemAccount::$exists_at(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2440:9+123
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, addr))  ==> ($1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, addr)));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_parent(addr), Roles::spec_has_parent_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2456:9+129
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_parent($1_VASP_ParentVASP_$memory, addr) <==> $1_Roles_spec_has_parent_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>(): Iff(VASP::$is_child(addr), Roles::spec_has_child_VASP_role_addr(addr)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2460:9+127
    assume (forall addr: int :: $IsValid'address'(addr) ==> (($1_VASP_$is_child($1_VASP_ChildVASP_$memory, addr) <==> $1_Roles_spec_has_child_VASP_role_addr($1_Roles_RoleId_$memory, addr))));

    // assume forall addr: TypeDomain<address>() where RecoveryAddress::spec_is_recovery_address(addr): VASP::$is_vasp(addr) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/RecoveryAddress.move:236:9+101
    assume (forall addr: int :: $IsValid'address'(addr) ==> ($1_RecoveryAddress_spec_is_recovery_address($1_RecoveryAddress_RecoveryAddress_$memory, addr))  ==> ($1_VASP_$is_vasp($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, addr)));

    // assume Implies(DiemTimestamp::$is_operating(), DiemBlock::$is_initialized()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemBlock.move:129:9+75
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemBlock_$is_initialized($1_DiemBlock_BlockMetadata_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVMConfig::DiemVMConfig>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVMConfig.move:216:9+104
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVMConfig_DiemVMConfig'($1_DiemConfig_DiemConfig'$1_DiemVMConfig_DiemVMConfig'_$memory));

    // assume Implies(DiemTimestamp::$is_operating(), DiemConfig::spec_is_published<DiemVersion::DiemVersion>()) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    // global invariant at /home/ying/diem/language/diem-framework/modules/DiemVersion.move:70:9+103
    assume ($1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) ==> $1_DiemConfig_spec_is_published'$1_DiemVersion_DiemVersion'($1_DiemConfig_DiemConfig'$1_DiemVersion_DiemVersion'_$memory));

    // assume WellFormed($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'signer'($t0) && $1_Signer_is_txn_signer($t0) && $1_Signer_is_txn_signer_addr($1_Signer_spec_address_of($t0));

    // assume WellFormed($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'address'($t1);

    // assume WellFormed($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume $IsValid'vec'u8''($t4);

    // assume forall $rsc: ResourceDomain<DiemTimestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_DiemTimestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: ResourceDomain<Diem::CurrencyInfo<XDX::XDX>>(): And(WellFormed($rsc), And(Lt(0, select Diem::CurrencyInfo.scaling_factor($rsc)), Le(select Diem::CurrencyInfo.scaling_factor($rsc), 10000000000))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_Diem_CurrencyInfo'$1_XDX_XDX''($rsc) && ((0 < $scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc)) && ($scaling_factor#$1_Diem_CurrencyInfo'$1_XDX_XDX'($rsc) <= 10000000000))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::LimitsDefinition<XDX::XDX>>(): And(WellFormed($rsc), And(And(And(Gt(select AccountLimits::LimitsDefinition.max_inflow($rsc), 0), Gt(select AccountLimits::LimitsDefinition.max_outflow($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.time_period($rsc), 0)), Gt(select AccountLimits::LimitsDefinition.max_holding($rsc), 0))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $a_0);
    (($IsValid'$1_AccountLimits_LimitsDefinition'$1_XDX_XDX''($rsc) && (((($max_inflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0) && ($max_outflow#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0)) && ($max_holding#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($rsc) > 0))))));

    // assume forall $rsc: ResourceDomain<AccountLimits::Window<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_AccountLimits_Window'$1_XDX_XDX''($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ChildVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ChildVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ChildVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ChildVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<VASP::ParentVASP>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_VASP_ParentVASP_$memory, $a_0)}(var $rsc := $ResourceValue($1_VASP_ParentVASP_$memory, $a_0);
    ($IsValid'$1_VASP_ParentVASP'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Credential>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Credential_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Credential_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Credential'($rsc))));

    // assume forall $rsc: ResourceDomain<DualAttestation::Limit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DualAttestation_Limit_$memory, $a_0)}(var $rsc := $ResourceValue($1_DualAttestation_Limit_$memory, $a_0);
    ($IsValid'$1_DualAttestation_Limit'($rsc))));

    // assume forall $rsc: ResourceDomain<AccountFreezing::FreezingBit>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0)}(var $rsc := $ResourceValue($1_AccountFreezing_FreezingBit_$memory, $a_0);
    ($IsValid'$1_AccountFreezing_FreezingBit'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::DiemAccount>(): And(WellFormed($rsc), And(Le(Len<DiemAccount::WithdrawCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.withdraw_capability($rsc))), 1), Le(Len<DiemAccount::KeyRotationCapability>(select Option::Option.vec(select DiemAccount::DiemAccount.key_rotation_capability($rsc))), 1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_DiemAccount_$memory, $a_0);
    (($IsValid'$1_DiemAccount_DiemAccount'($rsc) && ((LenVec($vec#$1_Option_Option'$1_DiemAccount_WithdrawCapability'($withdraw_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1) && (LenVec($vec#$1_Option_Option'$1_DiemAccount_KeyRotationCapability'($key_rotation_capability#$1_DiemAccount_DiemAccount($rsc))) <= 1))))));

    // assume forall $rsc: ResourceDomain<DiemAccount::AccountOperationsCapability>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_AccountOperationsCapability_$memory, $a_0);
    ($IsValid'$1_DiemAccount_AccountOperationsCapability'($rsc))));

    // assume forall $rsc: ResourceDomain<DiemAccount::Balance<XDX::XDX>>(): WellFormed($rsc) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+495
    assume (forall $a_0: int :: {$ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0)}(var $rsc := $ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $a_0);
    ($IsValid'$1_DiemAccount_Balance'$1_XDX_XDX''($rsc))));

    // assume Identical($t6, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:156:9+55
    assume {:print "$at(25,13120,13175)"} true;
    assume ($t6 == $1_Signer_spec_address_of($t0));

    // assume Identical($t7, DiemAccount::spec_get_withdraw_cap($t6)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:157:9+57
    assume {:print "$at(25,13184,13241)"} true;
    assume ($t7 == $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t6));

    // assume Identical($t8, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t8 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t9, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t9 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t10, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t10 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t11, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t9, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t11 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t9, $t3));

    // assume Identical($t12, select DiemAccount::WithdrawCapability.account_address($t7)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t12 == $account_address#$1_DiemAccount_WithdrawCapability($t7));

    // assume Identical($t13, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t12))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t13 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t12)));

    // assume Identical($t14, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t14 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t1, $t3));

    // assume Identical($t15, Diem::spec_xdx_exchange_rate<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t15 == $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // assume DiemAccount::prologue_guarantees($t0) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    assume {:print "$at(12,115659,115696)"} true;
    assume $1_DiemAccount_prologue_guarantees($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountFreezing_FreezingBit_$memory, $1_DiemAccount_DiemAccount_$memory, $t0);

    // @125 := save_mem(DiemTimestamp::CurrentTimeMicroseconds) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125 := $1_DiemTimestamp_CurrentTimeMicroseconds_$memory;

    // @127 := save_mem(Diem::CurrencyInfo<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127 := $1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory;

    // @126 := save_mem(AccountLimits::LimitsDefinition<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126 := $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory;

    // @122 := save_mem(AccountLimits::Window<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122 := $1_AccountLimits_Window'$1_XDX_XDX'_$memory;

    // @123 := save_mem(VASP::ChildVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ChildVASP_$memory#123 := $1_VASP_ChildVASP_$memory;

    // @124 := save_mem(VASP::ParentVASP) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_VASP_ParentVASP_$memory#124 := $1_VASP_ParentVASP_$memory;

    // @131 := save_mem(DualAttestation::Credential) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Credential_$memory#131 := $1_DualAttestation_Credential_$memory;

    // @130 := save_mem(DualAttestation::Limit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DualAttestation_Limit_$memory#130 := $1_DualAttestation_Limit_$memory;

    // @128 := save_mem(AccountFreezing::FreezingBit) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_AccountFreezing_FreezingBit_$memory#128 := $1_AccountFreezing_FreezingBit_$memory;

    // @121 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_DiemAccount_$memory#121 := $1_DiemAccount_DiemAccount_$memory;

    // @129 := save_mem(DiemAccount::AccountOperationsCapability) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_AccountOperationsCapability_$memory#129 := $1_DiemAccount_AccountOperationsCapability_$memory;

    // @120 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:2534:9+37
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // trace_local[payer]($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$at(25,6582,6583)"} true;
    assume {:print "$track_local(42,1,0):", $t0} $t0 == $t0;

    // trace_local[payee]($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,2):", $t2} $t2 == $t2;

    // trace_local[metadata]($t3) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,3):", $t3} $t3 == $t3;

    // trace_local[metadata_signature]($t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:63:5+1
    assume {:print "$track_local(42,1,4):", $t4} $t4 == $t4;

    // assume Identical($t16, Signer::spec_address_of($t0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:745:9+50
    assume {:print "$at(12,33247,33297)"} true;
    assume ($t16 == $1_Signer_spec_address_of($t0));

    // $t17 := opaque begin: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume {:print "$at(25,6819,6867)"} true;

    // assume Identical($t18, Or(Not(DiemAccount::$exists_at($t16)), DiemAccount::spec_holds_delegated_withdraw_capability($t16))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume ($t18 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t16)));

    // if ($t18) goto L4 else goto L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    if ($t18) { goto L4; } else { goto L3; }

    // label L4 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
L4:

    // assume Or(And(Not(DiemAccount::$exists_at($t16)), Eq(5, $t19)), And(DiemAccount::spec_holds_delegated_withdraw_capability($t16), Eq(1, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t16) && $IsEqual'num'(5, $t19)) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t16) && $IsEqual'num'(1, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume {:print "$at(25,6819,6867)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    goto L2;

    // label L3 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
L3:

    // @132 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    $1_DiemAccount_DiemAccount_$memory#132 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t16, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t16);
    }

    // assume WellFormed($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsValid'$1_DiemAccount_WithdrawCapability'($t17);

    // assume exists<DiemAccount::DiemAccount>($t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $ResourceExists($1_DiemAccount_DiemAccount_$memory, $t16);

    // assume Eq<DiemAccount::WithdrawCapability>($t17, DiemAccount::spec_get_withdraw_cap[@132]($t16)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'$1_DiemAccount_WithdrawCapability'($t17, $1_DiemAccount_spec_get_withdraw_cap($1_DiemAccount_DiemAccount_$memory#132, $t16));

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t16), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@132]<DiemAccount::DiemAccount>($t16), Option::spec_none<DiemAccount::WithdrawCapability>())) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t16), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#132, $t16), $1_Option_spec_none'$1_DiemAccount_WithdrawCapability'()));

    // assume Eq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t16) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48
    assume $IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t16);

    // $t17 := opaque end: DiemAccount::extract_withdraw_capability($t0) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:36+48

    // trace_local[payer_withdrawal_cap]($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:70:13+20
    assume {:print "$track_local(42,1,5):", $t17} $t17 == $t17;

    // assume Identical($t20, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:832:9+32
    assume {:print "$at(12,36976,37008)"} true;
    assume ($t20 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t21, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:637:9+32
    assume {:print "$at(12,28308,28340)"} true;
    assume ($t21 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t22, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:909:9+32
    assume {:print "$at(12,40320,40352)"} true;
    assume ($t22 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t23, select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:413:9+56
    assume {:print "$at(12,18148,18204)"} true;
    assume ($t23 == $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)));

    // assume Identical($t24, pack DiemAccount::ReceivedPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t22, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:414:9+165
    assume {:print "$at(12,18213,18378)"} true;
    assume ($t24 == $1_DiemAccount_ReceivedPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t22, $t3));

    // assume Identical($t25, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:656:9+32
    assume {:print "$at(12,29228,29260)"} true;
    assume ($t25 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // assume Identical($t26, select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t25))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:657:9+52
    assume {:print "$at(12,29269,29321)"} true;
    assume ($t26 == $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t25)));

    // assume Identical($t27, pack DiemAccount::SentPaymentEvent($t2, Diem::spec_currency_code<XDX::XDX>(), $t1, $t3)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:658:9+161
    assume {:print "$at(12,29330,29491)"} true;
    assume ($t27 == $1_DiemAccount_SentPaymentEvent($t2, $1_Diem_spec_currency_code'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory), $t1, $t3));

    // assume Identical($t28, Diem::spec_xdx_exchange_rate<XDX::XDX>()) at /home/ying/diem/language/diem-framework/modules/Diem.move:1389:9+59
    assume {:print "$at(11,65304,65363)"} true;
    assume ($t28 == $1_Diem_spec_xdx_exchange_rate'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory));

    // opaque begin: DiemAccount::pay_from<XDX::XDX>($t17, $t1, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume {:print "$at(25,6877,6998)"} true;

    // assume Identical($t29, Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists<DiemAccount::Balance<XDX::XDX>>($t1)), Not(DiemAccount::$exists_at($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t2, VASP::spec_parent_address($t1))))), Not(DiemTimestamp::$is_operating())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating())))), Not(Diem::spec_is_currency<XDX::XDX>())), AccountFreezing::spec_account_is_frozen($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t1), Gt(Add(DiemAccount::$balance<XDX::XDX>($t1), $t2), MaxU64()))), Not(DiemAccount::$exists_at($t21))), Not(exists<DiemAccount::Balance<XDX::XDX>>($t21))), Not(DiemTimestamp::$is_operating())), Not(Diem::spec_is_currency<XDX::XDX>())), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t2, VASP::spec_parent_address($t21)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t21))), $t2)), Not(DiemTimestamp::$is_operating())), AccountFreezing::spec_account_is_frozen($t21)), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21))))))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), Not(DiemTimestamp::$is_operating())))), And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published()))), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<XDX::XDX>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t2, $t28), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid($t20, $t1, $t4, $t3, $t2)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t29 == (((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t1) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t21)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) || ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t21))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t21)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory)))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t28) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t20, $t1, $t4, $t3, $t2))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))));

    // if ($t29) goto L6 else goto L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    if ($t29) { goto L6; } else { goto L5; }

    // label L6 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
L6:

    // assume Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists<DiemAccount::Balance<XDX::XDX>>($t1)), Eq(7, $t19)), And(Not(DiemAccount::$exists_at($t1)), Eq(5, $t19))), And(Eq<u64>($t2, 0), Eq(7, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(AccountLimits::spec_update_deposit_limits<XDX::XDX>($t2, VASP::spec_parent_address($t1)))), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t17), $t1, false), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t19))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t19))), And(AccountFreezing::spec_account_is_frozen($t1), Eq(1, $t19))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t17), $t1), Gt(Add(DiemAccount::$balance<XDX::XDX>($t1), $t2), MaxU64())), Eq(8, $t19))), And(Not(DiemAccount::$exists_at($t21)), Eq(5, $t19))), And(Not(exists<DiemAccount::Balance<XDX::XDX>>($t21)), Eq(5, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(Not(Diem::spec_is_currency<XDX::XDX>()), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap()), Not(AccountLimits::spec_update_withdrawal_limits<XDX::XDX>($t2, VASP::spec_parent_address($t21))))), Eq(8, $t19))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global<DiemAccount::Balance<XDX::XDX>>($t21))), $t2), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating()), Eq(1, $t19))), And(AccountFreezing::spec_account_is_frozen($t21), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), Not(exists<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), Not(exists<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), $t2), 18446744073709551615))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), Gt(Add(select AccountLimits::Window.window_start(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account<XDX::XDX>($t21, $t1, true), And(Not(AccountLimits::spec_window_unrestricted<XDX::XDX>(global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t21)))), Not(DiemTimestamp::$is_operating()))), Eq(1, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency<XDX::XDX>())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64($t2, $t28), 18446744073709551615)), Eq(8, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_compliance_public_key(DualAttestation::spec_credential_address($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Vector::$is_empty<u8>(DualAttestation::spec_base_url(DualAttestation::spec_credential_address($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Not(DualAttestation::spec_signature_is_valid($t20, $t1, $t4, $t3, $t2))), Eq(7, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required<XDX::XDX>($t20, $t1, $t2)), Not(DualAttestation::spec_has_credential(DualAttestation::spec_credential_address($t1)))), Eq(5, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) && $IsEqual'num'(7, $t19)) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1) && $IsEqual'num'(5, $t19))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $account_address#$1_DiemAccount_WithdrawCapability($t17), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t1) && $IsEqual'num'(1, $t19))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t17), $t1) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t21) && $IsEqual'num'(5, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t21) && $IsEqual'num'(5, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $1_AccountLimits_Window'$1_XDX_XDX'_$memory, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) && $IsEqual'num'(8, $t19))) || (($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t21))) < $t2) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory) && $IsEqual'num'(1, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory, $t21) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t21))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory))) && $IsEqual'num'(1, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t28) > 18446744073709551615)) && $IsEqual'num'(8, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Credential_$memory, $t20, $t1, $t4, $t3, $t2)) && $IsEqual'num'(7, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory, $1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $1_DualAttestation_Limit_$memory, $t20, $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1))) && $IsEqual'num'(5, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume {:print "$at(25,6877,6998)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    goto L2;

    // label L5 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
L5:

    // @133 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $1_DiemAccount_DiemAccount_$memory#133 := $1_DiemAccount_DiemAccount_$memory;

    // @134 := save_mem(DiemAccount::Balance<XDX::XDX>) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $1_DiemAccount_Balance'$1_XDX_XDX'_$memory#134 := $1_DiemAccount_Balance'$1_XDX_XDX'_$memory;

    // modifies global<DiemAccount::DiemAccount>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t20, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t20);
    }

    // modifies global<DiemAccount::DiemAccount>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t1, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t1);
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t20, $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t20);
    }

    // modifies global<DiemAccount::Balance<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'';
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceUpdate($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1, $temp_0'$1_DiemAccount_Balance'$1_XDX_XDX'');
    } else {
        $1_DiemAccount_Balance'$1_XDX_XDX'_$memory := $ResourceRemove($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1);
    }

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t20)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t20), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t20));
    }

    // modifies global<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address($t1)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'';
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceUpdate($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1), $temp_0'$1_AccountLimits_Window'$1_XDX_XDX'');
    } else {
        $1_AccountLimits_Window'$1_XDX_XDX'_$memory := $ResourceRemove($1_AccountLimits_Window'$1_XDX_XDX'_$memory, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory, $1_VASP_ParentVASP_$memory, $t1));
    }

    // assume DiemAccount::$exists_at($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t20);

    // assume DiemAccount::$exists_at($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t1);

    // assume exists<DiemAccount::Balance<XDX::XDX>>($t20) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t20);

    // assume exists<DiemAccount::Balance<XDX::XDX>>($t1) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1);

    // assume Eq<Option::Option<DiemAccount::WithdrawCapability>>(select DiemAccount::DiemAccount.withdraw_capability(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.withdraw_capability(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $IsEqual'$1_Option_Option'$1_DiemAccount_WithdrawCapability''($withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $withdraw_capability#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.sent_events(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t20)), select DiemAccount::DiemAccount.received_events(global[@133]<DiemAccount::DiemAccount>($t20))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t20)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t20)));

    // assume Event::spec_guid_eq<DiemAccount::SentPaymentEvent>(select DiemAccount::DiemAccount.sent_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.sent_events(global[@133]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_SentPaymentEvent'($sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $sent_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t1)));

    // assume Event::spec_guid_eq<DiemAccount::ReceivedPaymentEvent>(select DiemAccount::DiemAccount.received_events(global<DiemAccount::DiemAccount>($t1)), select DiemAccount::DiemAccount.received_events(global[@133]<DiemAccount::DiemAccount>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume $1_Event_spec_guid_eq'$1_DiemAccount_ReceivedPaymentEvent'($received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t1)), $received_events#$1_DiemAccount_DiemAccount($ResourceValue($1_DiemAccount_DiemAccount_$memory#133, $t1)));

    // assume Implies(Eq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t21), DiemAccount::$balance[@134]<XDX::XDX>($t21))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t21), $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#134, $t21)));

    // assume Implies(Neq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t21), Sub(DiemAccount::$balance[@134]<XDX::XDX>($t21), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume (!$IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t21), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#134, $t21) - $t2)));

    // assume Implies(Neq<address>($t21, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t1), Add(DiemAccount::$balance[@134]<XDX::XDX>($t1), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume (!$IsEqual'address'($t21, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#134, $t1) + $t2)));

    // assume Identical($t30, $t24) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t30 == $t24);

    // assume Identical($t31, $t23) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t31 == $t23);

    // emit_event($t30, $t31) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $es := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($es, $t31, $t30);

    // assume Identical($t32, $t27) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t32 == $t27);

    // assume Identical($t33, $t26) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    assume ($t33 == $t26);

    // emit_event($t32, $t33) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121
    $es := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($es, $t33, $t32);

    // opaque end: DiemAccount::pay_from<XDX::XDX>($t17, $t1, $t2, $t3, $t4) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:71:9+121

    // assume Identical($t34, select DiemAccount::WithdrawCapability.account_address($t17)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:777:9+35
    assume {:print "$at(12,34768,34803)"} true;
    assume ($t34 == $account_address#$1_DiemAccount_WithdrawCapability($t17));

    // opaque begin: DiemAccount::restore_withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume {:print "$at(25,7008,7070)"} true;

    // assume Identical($t35, Or(Not(DiemAccount::$exists_at($t34)), Not(DiemAccount::$delegated_withdraw_capability($t34)))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume ($t35 == (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t34) || !$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t34)));

    // if ($t35) goto L8 else goto L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    if ($t35) { goto L8; } else { goto L7; }

    // label L8 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
L8:

    // assume Or(And(Not(DiemAccount::$exists_at($t34)), Eq(5, $t19)), And(Not(DiemAccount::$delegated_withdraw_capability($t34)), Eq(1, $t19))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume ((!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory, $t34) && $IsEqual'num'(5, $t19)) || (!$1_DiemAccount_$delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory, $t34) && $IsEqual'num'(1, $t19)));

    // trace_abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume {:print "$at(25,7008,7070)"} true;
    assume {:print "$track_abort(42,1):", $t19} $t19 == $t19;

    // goto L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    goto L2;

    // label L7 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
L7:

    // @135 := save_mem(DiemAccount::DiemAccount) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    $1_DiemAccount_DiemAccount_$memory#135 := $1_DiemAccount_DiemAccount_$memory;

    // modifies global<DiemAccount::DiemAccount>($t34) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    havoc $temp_0'bool';
    if ($temp_0'bool') {
        havoc $temp_0'$1_DiemAccount_DiemAccount';
        $1_DiemAccount_DiemAccount_$memory := $ResourceUpdate($1_DiemAccount_DiemAccount_$memory, $t34, $temp_0'$1_DiemAccount_DiemAccount');
    } else {
        $1_DiemAccount_DiemAccount_$memory := $ResourceRemove($1_DiemAccount_DiemAccount_$memory, $t34);
    }

    // assume Eq<DiemAccount::DiemAccount>(global<DiemAccount::DiemAccount>($t34), update DiemAccount::DiemAccount.withdraw_capability<DiemAccount::DiemAccount>(global[@135]<DiemAccount::DiemAccount>($t34), Option::spec_some<DiemAccount::WithdrawCapability>($t17))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume $IsEqual'$1_DiemAccount_DiemAccount'($ResourceValue($1_DiemAccount_DiemAccount_$memory, $t34), $Update'$1_DiemAccount_DiemAccount'_withdraw_capability($ResourceValue($1_DiemAccount_DiemAccount_$memory#135, $t34), $1_Option_spec_some'$1_DiemAccount_WithdrawCapability'($t17)));

    // assume DiemAccount::spec_holds_own_withdraw_cap($t34) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62
    assume $1_DiemAccount_spec_holds_own_withdraw_cap($1_DiemAccount_DiemAccount_$memory, $t34);

    // opaque end: DiemAccount::restore_withdraw_capability($t17) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:74:9+62

    // label L1 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:75:5+1
    assume {:print "$at(25,7076,7077)"} true;
L1:

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t6))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:183:9+89
    assume {:print "$at(25,14470,14559)"} true;
    assert {:msg "assert_failed(25,14470,14559): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t6);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:184:9+87
    assume {:print "$at(25,14568,14655)"} true;
    assert {:msg "assert_failed(25,14568,14655): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@121]($t6))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:757:9+61
    assume {:print "$at(12,33827,33888)"} true;
    assert {:msg "assert_failed(12,33827,33888): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6);

    // assert Not(DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:758:9+91
    assume {:print "$at(12,33897,33988)"} true;
    assert {:msg "assert_failed(12,33897,33988): function does not abort under this condition"}
      !$1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:363:9+71
    assume {:print "$at(12,15925,15996)"} true;
    assert {:msg "assert_failed(12,15925,15996): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1);

    // assert Not(Not(DiemAccount::$exists_at[@121]($t1))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:364:9+55
    assume {:print "$at(12,16005,16060)"} true;
    assert {:msg "assert_failed(12,16005,16060): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1);

    // assert Not(Eq<u64>($t2, 0)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:377:9+52
    assume {:print "$at(12,16468,16520)"} true;
    assert {:msg "assert_failed(12,16468,16520): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<XDX::XDX>($t2, VASP::spec_parent_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:383:9+238
    assume {:print "$at(12,16761,16999)"} true;
    assert {:msg "assert_failed(12,16761,16999): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:361:9+98
    assume {:print "$at(5,16606,16704)"} true;
    assert {:msg "assert_failed(5,16606,16704): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:371:9+102
    assume {:print "$at(5,17101,17203)"} true;
    assert {:msg "assert_failed(5,17101,17203): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:372:9+104
    assume {:print "$at(5,17212,17316)"} true;
    assert {:msg "assert_failed(5,17212,17316): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Not(Not(Diem::spec_is_currency[@127]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127);

    // assert Not(AccountFreezing::spec_account_is_frozen[@128]($t1)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1);

    // assert Not(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<XDX::XDX>($t1), $t2), MaxU64()))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:369:9+81
    assume {:print "$at(12,16169,16250)"} true;
    assert {:msg "assert_failed(12,16169,16250): function does not abort under this condition"}
      !(!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1) + $t2) > $MAX_U64));

    // assert Not(Not(DiemAccount::$exists_at[@121]($t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:641:9+55
    assume {:print "$at(12,28550,28605)"} true;
    assert {:msg "assert_failed(12,28550,28605): function does not abort under this condition"}
      !!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8);

    // assert Not(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t8))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:642:9+68
    assume {:print "$at(12,28614,28682)"} true;
    assert {:msg "assert_failed(12,28614,28682): function does not abort under this condition"}
      !!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t8);

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(Not(Diem::spec_is_currency[@127]<XDX::XDX>())) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<XDX::XDX>($t2, VASP::spec_parent_address[@123, @124]($t8)))))) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:567:9+308
    assume {:print "$at(12,25133,25441)"} true;
    assert {:msg "assert_failed(12,25133,25441): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))));

    // assert Not(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<XDX::XDX>>($t8))), $t2)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:581:11+66
    assume {:print "$at(12,25751,25817)"} true;
    assert {:msg "assert_failed(12,25751,25817): function does not abort under this condition"}
      !($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t8))) < $t2);

    // assert Not(Not(DiemTimestamp::$is_operating[@125]())) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125);

    // assert Not(AccountFreezing::spec_account_is_frozen[@128]($t8)) at /home/ying/diem/language/diem-framework/modules/AccountFreezing.move:180:9+69
    assume {:print "$at(4,7097,7166)"} true;
    assert {:msg "assert_failed(4,7097,7166): function does not abort under this condition"}
      !$1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8);

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:102:9+69
    assume {:print "$at(5,4249,4318)"} true;
    assert {:msg "assert_failed(5,4249,4318): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))))))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:445:9+96
    assume {:print "$at(5,20944,21040)"} true;
    assert {:msg "assert_failed(5,20944,21040): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615)))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:455:9+99
    assume {:print "$at(5,21426,21525)"} true;
    assert {:msg "assert_failed(5,21426,21525): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64())))) at /home/ying/diem/language/diem-framework/modules/AccountLimits.move:292:9+102
    assume {:print "$at(5,13240,13342)"} true;
    assert {:msg "assert_failed(5,13240,13342): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64)));

    // assert Not(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]())))) at /home/ying/diem/language/diem-framework/modules/DiemTimestamp.move:173:9+53
    assume {:print "$at(18,7043,7096)"} true;
    assert {:msg "assert_failed(18,7043,7096): function does not abort under this condition"}
      !($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]()))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:335:9+58
    assume {:print "$at(22,14695,14753)"} true;
    assert {:msg "assert_failed(22,14695,14753): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<XDX::XDX>()))) at /home/ying/diem/language/diem-framework/modules/Diem.move:1563:9+67
    assume {:print "$at(11,72689,72756)"} true;
    assert {:msg "assert_failed(11,72689,72756): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127));

    // assert Not(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615))) at /home/ying/diem/language/move-stdlib/modules/FixedPoint32.move:75:9+83
    assume {:print "$at(46,3503,3586)"} true;
    assert {:msg "assert_failed(46,3503,3586): function does not abort under this condition"}
      !($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:418:9+114
    assume {:print "$at(22,18455,18569)"} true;
    assert {:msg "assert_failed(22,18455,18569): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:419:9+101
    assume {:print "$at(22,18578,18679)"} true;
    assert {:msg "assert_failed(22,18578,18679): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2)))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:420:9+136
    assume {:print "$at(22,18688,18824)"} true;
    assert {:msg "assert_failed(22,18688,18824): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2));

    // assert Not(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/DualAttestation.move:152:9+64
    assume {:print "$at(22,6999,7063)"} true;
    assert {:msg "assert_failed(22,6999,7063): function does not abort under this condition"}
      !((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t6), Sub(DiemAccount::$balance[@120]<XDX::XDX>($t6), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:162:9+159
    assume {:print "$at(25,13473,13632)"} true;
    assert {:msg "assert_failed(25,13473,13632): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t6), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t6) - $t2)));

    // assert Implies(Neq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t1), Add(DiemAccount::$balance[@120]<XDX::XDX>($t1), $t2))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:165:9+149
    assume {:print "$at(25,13641,13790)"} true;
    assert {:msg "assert_failed(25,13641,13790): post-condition does not hold"}
      (!$IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), ($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1) + $t2)));

    // assert Implies(Eq<address>($t6, $t1), Eq<u64>(DiemAccount::$balance<XDX::XDX>($t1), DiemAccount::$balance[@120]<XDX::XDX>($t1))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:168:9+140
    assume {:print "$at(25,13799,13939)"} true;
    assert {:msg "assert_failed(25,13799,13939): post-condition does not hold"}
      ($IsEqual'address'($t6, $t1) ==> $IsEqual'u64'($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory, $t1), $1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1)));

    // assert EventStoreIncludes(ExtendEventStore(EmptyEventStore(), $t11, $t10)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:420:9+20
    assume {:print "$at(12,18387,18407)"} true;
    assert {:msg "assert_failed(12,18387,18407): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludes(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/DiemAccount.move:664:9+20
    assume {:print "$at(12,29500,29520)"} true;
    assert {:msg "assert_failed(12,29500,29520): function does not emit the expected event"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11), $t13, $t14); $EventStore__is_subset(expected, actual)));

    // assert EventStoreIncludedIn(ExtendEventStore(ExtendEventStore(EmptyEventStore(), $t11, $t10), $t14, $t13)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assume {:print "$at(25,12436,12690)"} true;
    assert {:msg "assert_failed(25,12436,12690): emitted event not covered by any of the `emits` clauses"}
      (var actual := $EventStore__subtract($es, old($es)); (var expected := $ExtendEventStore'$1_DiemAccount_SentPaymentEvent'($ExtendEventStore'$1_DiemAccount_ReceivedPaymentEvent'($EmptyEventStore, $t10, $t11), $t13, $t14); $EventStore__is_subset(actual, expected)));

    // return () at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    return;

    // label L2 at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:75:5+1
    assume {:print "$at(25,7076,7077)"} true;
L2:

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t6)), Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(DiemAccount::$exists_at[@121]($t6))), DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6)), Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t1))), Not(DiemAccount::$exists_at[@121]($t1))), Eq<u64>($t2, 0)), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<XDX::XDX>($t2, VASP::spec_parent_address[@123, @124]($t1))))), Not(DiemTimestamp::$is_operating[@125]())), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]())))), Not(Diem::spec_is_currency[@127]<XDX::XDX>())), AccountFreezing::spec_account_is_frozen[@128]($t1)), And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<XDX::XDX>($t1), $t2), MaxU64()))), Not(DiemAccount::$exists_at[@121]($t8))), Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t8))), Not(DiemTimestamp::$is_operating[@125]())), Not(Diem::spec_is_currency[@127]<XDX::XDX>())), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<XDX::XDX>($t2, VASP::spec_parent_address[@123, @124]($t8)))))), Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<XDX::XDX>>($t8))), $t2)), Not(DiemTimestamp::$is_operating[@125]())), AccountFreezing::spec_account_is_frozen[@128]($t8)), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))))))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615)))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64())))), And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]())))), And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]()))), And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<XDX::XDX>()))), And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2)))), And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1))))) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assume {:print "$at(25,12436,12690)"} true;
    assert {:msg "assert_failed(25,12436,12690): abort not covered by any of the `aborts_if` clauses"}
      (((((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t6) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6)) || $1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1)) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1)) || $IsEqual'u64'($t2, 0)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)))) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1)) || (!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1) + $t2) > $MAX_U64))) || !$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8)) || !$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t8)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) || ($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t8))) < $t2)) || !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)) || $1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8)) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64)))) || ($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125)))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130))) || ($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127))) || ($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2))) || ((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))));

    // assert Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t6)), Eq(5, $t19)), And(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t1)), Eq(7, $t19))), And(Not(DiemAccount::$exists_at[@121]($t6)), Eq(5, $t19))), And(DiemAccount::spec_holds_delegated_withdraw_capability[@121]($t6), Eq(1, $t19))), And(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t1)), Eq(7, $t19))), And(Not(DiemAccount::$exists_at[@121]($t1)), Eq(5, $t19))), And(Eq<u64>($t2, 0), Eq(7, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(AccountLimits::spec_update_deposit_limits[@125, @126, @122]<XDX::XDX>($t2, VASP::spec_parent_address[@123, @124]($t1)))), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), Not(exists[@126]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_inflow(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.tracked_balance(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), $t2), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>(select DiemAccount::WithdrawCapability.account_address($t7), $t1, false), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t1)))), Not(DiemTimestamp::$is_operating[@125]()))), Eq(1, $t19))), And(Not(Diem::spec_is_currency[@127]<XDX::XDX>()), Eq(5, $t19))), And(AccountFreezing::spec_account_is_frozen[@128]($t1), Eq(1, $t19))), And(And(Neq<address>(select DiemAccount::WithdrawCapability.account_address($t7), $t1), Gt(Add(DiemAccount::$balance[@120]<XDX::XDX>($t1), $t2), MaxU64())), Eq(8, $t19))), And(Not(DiemAccount::$exists_at[@121]($t8)), Eq(5, $t19))), And(Not(exists[@120]<DiemAccount::Balance<XDX::XDX>>($t8)), Eq(5, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(Not(Diem::spec_is_currency[@127]<XDX::XDX>()), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Or(Not(DiemAccount::spec_has_account_operations_cap[@129]()), Not(AccountLimits::spec_update_withdrawal_limits[@125, @126, @122]<XDX::XDX>($t2, VASP::spec_parent_address[@123, @124]($t8))))), Eq(8, $t19))), And(Lt(select Diem::Diem.value(select DiemAccount::Balance.coin(global[@120]<DiemAccount::Balance<XDX::XDX>>($t8))), $t2), Eq(8, $t19))), And(Not(DiemTimestamp::$is_operating[@125]()), Eq(1, $t19))), And(AccountFreezing::spec_account_is_frozen[@128]($t8), Eq(1, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Not(exists[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), Not(exists[@126]<AccountLimits::LimitsDefinition<XDX::XDX>>(select AccountLimits::Window.limit_address(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))))), Eq(5, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_outflow(AccountLimits::spec_window_reset[@125, @126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), $t2), 18446744073709551615))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Gt(Add(select AccountLimits::Window.window_start(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))), select AccountLimits::LimitsDefinition.time_period(AccountLimits::spec_window_limits[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8))))), MaxU64()))), Eq(8, $t19))), And(And(DiemAccount::spec_should_track_limits_for_account[@122, @123, @124]<XDX::XDX>($t8, $t1, true), And(Not(AccountLimits::spec_window_unrestricted[@126]<XDX::XDX>(global[@122]<AccountLimits::Window<XDX::XDX>>(VASP::spec_parent_address[@123, @124]($t8)))), Not(DiemTimestamp::$is_operating[@125]()))), Eq(1, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(DualAttestation::spec_is_published[@130]())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Not(Diem::spec_is_currency[@127]<XDX::XDX>())), Eq(5, $t19))), And(And(Eq<num>(Len<u8>($t4), 0), Gt(FixedPoint32::spec_multiply_u64[]($t2, $t15), 18446744073709551615)), Eq(8, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_compliance_public_key[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Vector::$is_empty[]<u8>(DualAttestation::spec_base_url[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(1, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_signature_is_valid[@123, @124, @131](Signer::spec_address_of[]($t0), $t1, $t4, $t3, $t2))), Eq(7, $t19))), And(And(Or(Neq<num>(Len<u8>($t4), 0), DualAttestation::spec_dual_attestation_required[@127, @123, @124, @130]<XDX::XDX>(Signer::spec_address_of[]($t0), $t1, $t2)), Not(DualAttestation::spec_has_credential[@131](DualAttestation::spec_credential_address[@123, @124]($t1)))), Eq(5, $t19))), Eq(5, $t19)), Eq(1, $t19)), Eq(7, $t19)), Eq(8, $t19)) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    assert {:msg "assert_failed(25,12436,12690): abort code not covered by any of the `aborts_if` or `aborts_with` clauses"}
      ((((((((((((((((((((((((((((((((((((((((((!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t6) && $IsEqual'num'(5, $t19)) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1) && $IsEqual'num'(7, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t6) && $IsEqual'num'(5, $t19))) || ($1_DiemAccount_spec_holds_delegated_withdraw_capability($1_DiemAccount_DiemAccount_$memory#121, $t6) && $IsEqual'num'(1, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1) && $IsEqual'num'(7, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t1) && $IsEqual'num'(5, $t19))) || ($IsEqual'u64'($t2, 0) && $IsEqual'num'(7, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$1_AccountLimits_spec_update_deposit_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_inflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($tracked_balance#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) + $t2) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $account_address#$1_DiemAccount_WithdrawCapability($t7), $t1, false) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125))) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127) && $IsEqual'num'(5, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t1) && $IsEqual'num'(1, $t19))) || ((!$IsEqual'address'($account_address#$1_DiemAccount_WithdrawCapability($t7), $t1) && (($1_DiemAccount_$balance'$1_XDX_XDX'($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t1) + $t2) > $MAX_U64)) && $IsEqual'num'(8, $t19))) || (!$1_DiemAccount_$exists_at($1_DiemAccount_DiemAccount_$memory#121, $t8) && $IsEqual'num'(5, $t19))) || (!$ResourceExists($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t8) && $IsEqual'num'(5, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || (!$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_DiemAccount_spec_has_account_operations_cap($1_DiemAccount_AccountOperationsCapability_$memory#129) || !$1_AccountLimits_spec_update_withdrawal_limits'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $t2, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) && $IsEqual'num'(8, $t19))) || (($value#$1_Diem_Diem'$1_XDX_XDX'($coin#$1_DiemAccount_Balance'$1_XDX_XDX'($ResourceValue($1_DiemAccount_Balance'$1_XDX_XDX'_$memory#120, $t8))) < $t2) && $IsEqual'num'(8, $t19))) || (!$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125) && $IsEqual'num'(1, $t19))) || ($1_AccountFreezing_spec_account_is_frozen($1_AccountFreezing_FreezingBit_$memory#128, $t8) && $IsEqual'num'(1, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && !$ResourceExists($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $limit_address#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) && $IsEqual'num'(5, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_outflow#$1_AccountLimits_Window'$1_XDX_XDX'($1_AccountLimits_spec_window_reset'$1_XDX_XDX'($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125, $1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8)))) + $t2) > 18446744073709551615))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && (($window_start#$1_AccountLimits_Window'$1_XDX_XDX'($ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) + $time_period#$1_AccountLimits_LimitsDefinition'$1_XDX_XDX'($1_AccountLimits_spec_window_limits'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))))) > $MAX_U64))) && $IsEqual'num'(8, $t19))) || (($1_DiemAccount_spec_should_track_limits_for_account'$1_XDX_XDX'($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8, $t1, true) && (!$1_AccountLimits_spec_window_unrestricted'$1_XDX_XDX'($1_AccountLimits_LimitsDefinition'$1_XDX_XDX'_$memory#126, $ResourceValue($1_AccountLimits_Window'$1_XDX_XDX'_$memory#122, $1_VASP_spec_parent_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t8))) && !$1_DiemTimestamp_$is_operating($1_DiemTimestamp_CurrentTimeMicroseconds_$memory#125))) && $IsEqual'num'(1, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_DualAttestation_spec_is_published($1_DualAttestation_Limit_$memory#130)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && !$1_Diem_spec_is_currency'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127)) && $IsEqual'num'(5, $t19))) || (($IsEqual'num'(LenVec($t4), 0) && ($1_FixedPoint32_spec_multiply_u64($t2, $t15) > 18446744073709551615)) && $IsEqual'num'(8, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_compliance_public_key($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && $1_Vector_$is_empty'u8'($1_DualAttestation_spec_base_url($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1)))) && $IsEqual'num'(1, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_signature_is_valid($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Credential_$memory#131, $1_Signer_spec_address_of($t0), $t1, $t4, $t3, $t2)) && $IsEqual'num'(7, $t19))) || (((!$IsEqual'num'(LenVec($t4), 0) || $1_DualAttestation_spec_dual_attestation_required'$1_XDX_XDX'($1_Diem_CurrencyInfo'$1_XDX_XDX'_$memory#127, $1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $1_DualAttestation_Limit_$memory#130, $1_Signer_spec_address_of($t0), $t1, $t2)) && !$1_DualAttestation_spec_has_credential($1_DualAttestation_Credential_$memory#131, $1_DualAttestation_spec_credential_address($1_VASP_ChildVASP_$memory#123, $1_VASP_ParentVASP_$memory#124, $t1))) && $IsEqual'num'(5, $t19))) || $IsEqual'num'(5, $t19)) || $IsEqual'num'(1, $t19)) || $IsEqual'num'(7, $t19)) || $IsEqual'num'(8, $t19));

    // abort($t19) at /home/ying/diem/language/diem-framework/modules/PaymentScripts.move:135:5+254
    $abort_code := $t19;
    $abort_flag := true;
    return;

}
